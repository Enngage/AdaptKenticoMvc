[{"body":"<h2>Welcome to the Kentico MVC Developer course!</h2>\n<p>The <strong>Kentico MVC for Developers</strong> course is divided into modules, each of which covers different topics.&nbsp;</p>\n<p>The first <strong>Kentico MVC -</strong> <strong>Essentials</strong> module teaches the basics of Kentico MVC development.</p>\n<p>In this course module, you will:</p>\n<ul>\n  <li>Learn the basics of developing websites in Kentico MVC</li>\n  <li>Find out how to define the content structure of your Kentico MVC website&nbsp;</li>\n  <li>Use content-only pages and media libraries to store the content of the website</li>\n  <li>Build a training website using the repository development pattern</li>\n  <li>Display the content from the database on the live site using Kentico API</li>\n  <li>Learn about Kentico recommended practices for optimizing website performance</li>\n</ul>\n<h2>Medio Clinic training website</h2>\n<p>Throughout the course, you will have a chance to practice on a training website. The training website promotes a made-up&nbsp;<em>Medio Clinic</em>.</p>\n<p>The first training modules challenges you to build an essential content of the website - the&nbsp;<em>Home</em>&nbsp;page,&nbsp;<em>Doctors</em>&nbsp;listing and&nbsp;<em>Doctor profile</em>&nbsp;pages, the&nbsp;<em>Contact us</em>&nbsp;page, and a user-friendly <em>error page</em>.</p>\n<p>You can download resources for the website, such as HTML and CSS files, in&nbsp;<a data-asset-id=\"f9b59c30-2fbc-4e4d-aab5-6a24b8039bba\" href=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/71c0de6c-42b0-483f-b891-16c6ff7e0fed/MedioClinicAssets.zip\">MedioClinicAssets.zip</a>&nbsp;package. The code of the sample <strong>Medio Clinic</strong> <strong>website </strong>is available on <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>. Feel free to browse through the classes on GitHub or clone the repository to your machine and use all the goodies and help available in Visual Studio.</p>\n<h2>About the content</h2>\n<p>Each topic in the module is discussed on a separate page which is split into different parts. You can use <strong>the menu on the right </strong>to navigate on the page.</p>\n<p>The <strong>top section of the page explains the theory</strong> and <strong>recommends the approach you should take</strong> and <strong>the best practices to follow </strong>when developing your Kentico website. The theory part is closed by a detailed<strong> description of how the Medio Clinic implements </strong>the feature covered<strong> </strong>in the topic. The hyperlinks in the course styled in<em> </em><a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>italics</em></a> point to the sample implementation.</p>\n<p>You can get your hands dirty and develop your version of the Medio Clinic with the MVC development pattern by completing <strong>tasks specified in the midsection. </strong>To get a bit of guidance,<strong> you can follow the demo </strong>which breaks Medio Clinic sample code into more manageable chunks and show you <strong>how the feature was implemented.</strong> However, in most cases, you won't be able to just copy-paste the sample snippets into your solution, and you'll have to do some thinking and coding by yourself.</p>\n<p>The bottom part of the page gives you a chance to<strong> check your understanding of the topics in a few quick quiz questions</strong>.</p>\n<h2>Going back</h2>\n<p>The course module opens in a separate browser window. To get to</p>\n<ul>\n  <li>the <strong>module's home page</strong>, use the <strong>&lt;</strong><em> (back)</em> chevron in the top-left corner of each page.</li>\n  <li><strong>another module</strong>, switch to the learning system window and click the topic name in the upper bar and select the module you are interested in.</li>\n</ul>\n<h2>Certification of completion</h2>\n<p>Only the <strong>Kentico MVC - Essentials module</strong> is compulsory. After completing this module and submitting the survey, you will automatically receive a <strong>certificate of training completion</strong> which you can download to your computer. Additional modules in the course are optional, so feel free to go through them anytime you want.</p>\n<h2>Questions</h2>\n<p>If you have any questions about the course or its contents, contact us at&nbsp;<strong>elearning@kentico.com</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"ca7512b2-58b6-4ff5-a1d5-ff799a669469","_parentId":"b891fa36-aae7-41cd-9d70-ace6d78a0e6b","_type":"component","title":"Introduction to course","displayTitle":"Introduction to course"},{"body":"<h2>About the module</h2>\n<p>Each topic in the module is discussed on a separate page which is split into different parts. You can use&nbsp;<strong>the menu on the right&nbsp;</strong>to navigate on the page.</p>\n<h3>Theory</h3>\n<p>The&nbsp;<strong>top section of the page explains the theory</strong>&nbsp;and&nbsp;<strong>recommends the approach you should take</strong>&nbsp;and&nbsp;<strong>the best practices to follow&nbsp;</strong>when developing your Kentico website. The theory part is closed by a detailed<strong>&nbsp;description of how the Medio Clinic implements&nbsp;</strong>the feature covered<strong>&nbsp;</strong>in the topic. The hyperlinks in the course styled in<em>&nbsp;</em><a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>italics</em></a>&nbsp;point to the sample implementation.</p>\n<h3>Tasks</h3>\n<p>You can get your hands dirty and build your version of the Medio Clinic website using the MVC development pattern by completing&nbsp;<strong>tasks specified in the midsection.</strong></p>\n<p>If you need to get some guidance,<strong>&nbsp;you can follow the demos&nbsp;</strong>which break Medio Clinic sample code into more manageable chunks and show you&nbsp;<strong>how the feature was implemented.</strong>&nbsp;However, in most cases, you won't be able to just copy-paste the sample snippets into your solution, and you'll have to do some thinking and coding by yourself.</p>\n<h3>Progress-checks</h3>\n<p>The bottom part of the page gives you a chance to<strong>&nbsp;check your understanding of the topics in a few quick quiz questions</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c2301f4d-b208-43ac-83a6-c507fcffec80","_parentId":"e0b71ff4-de41-4aaa-8cf4-dcfff0cfaf16","_type":"component","title":"About the module","displayTitle":"About the module"},{"body":"<h2>The Medio Clinic sample website</h2>\n<p>Throughout the course, you will have a chance to practice on a training website. The training website promotes a made-up&nbsp;<em>Medio Clinic</em>.</p>\n<p>The Kentico MVC - Essentials module challenges you to build the basic infrastructure to hold the content of the website and several essential pages - the&nbsp;<em>Home</em>&nbsp;page,&nbsp;<em>Doctors</em>&nbsp;listing and&nbsp;<em>Doctor profile</em>&nbsp;pages, the&nbsp;<em>Contact us</em>&nbsp;page, and a user-friendly&nbsp;<em>error page</em>.</p>\n<p>You can download resources for the website, such as HTML and CSS files, in&nbsp;<a data-asset-id=\"f9b59c30-2fbc-4e4d-aab5-6a24b8039bba\" href=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/71c0de6c-42b0-483f-b891-16c6ff7e0fed/MedioClinicAssets.zip\">MedioClinicAssets.zip</a>&nbsp;package. The code of the sample&nbsp;<strong>Medio Clinic</strong>&nbsp;<strong>website&nbsp;</strong>is available on&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>GitHub</em></a>. Feel free to browse through the classes on GitHub or clone the repository and use all the goodies and help that is available in Visual Studio.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"37603b4e-7732-4036-a051-3d222076b946","_parentId":"cea13069-9bf4-4710-8a07-5a4e6abaac2c","_type":"component","title":"Medio Clinic sample website","displayTitle":"Medio Clinic sample website"},{"body":"<h2>Course navigation</h2>\n<p>The course module opens in a separate browser window. To get to:</p>\n<ul>\n  <li>another <strong>part of the page</strong>, use the navigation menu in the top-right corner of each page.</li>\n  <li>the&nbsp;<strong>module's home page</strong>, use the&nbsp;<strong>&lt;</strong><em>&nbsp;(back)</em>&nbsp;chevron in the top-left corner of each page.</li>\n  <li><strong>another module</strong>, switch to the window with the e-learning system, and click the topic name in the upper bar and select the module you are interested in.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"730de684-a838-4248-9324-3fc42453f30b","_parentId":"0659d896-e874-487f-b36f-6a5d0174c332","_type":"component","title":"Navigation","displayTitle":"Navigation"},{"body":"<h2>Certification of completion</h2>\n<p>Only the&nbsp;<strong>Kentico MVC - Essentials module</strong>&nbsp;is compulsory. After completing this module and submitting the survey, you will automatically receive a&nbsp;<strong>certificate of training completion</strong>&nbsp;which you can download to your computer. Additional modules in the course are optional, so feel free to go through them anytime you want.</p>\n<h2>Questions</h2>\n<p>If you have any questions about the course or its contents, contact us at&nbsp;<strong>elearning@kentico.com</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"27423037-2504-4d1c-b560-865d9aa38f7c","_parentId":"0de900c0-fef4-435b-9531-270b4d0cea3c","_type":"component","title":"Additional information","displayTitle":"Additional information"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>What <strong>developing websites using the Kentico MVC development model </strong>looks like and how it works in general</li>\n  <li>Which options for <strong>storing data </strong>Kentico provides</li>\n  <li>Which options website managers can use <strong>to edit the content </strong>of their website</li>\n  <li>What the <strong>requirements</strong> are for <strong>Kentico MVC installation</strong></li>\n  <li>Which actions Kentico Installer performs</li>\n  <li>About the <strong>Medio Clinic website</strong> you are going to build in the course</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Getting your development machine ready</li>\n  <li>Installing the Medio Clinic training website using the Kentico MVC development model</li>\n  <li>Configuring the website's presentation properties</li>\n  <li>Adding a license key</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"8ce46903-e420-4e29-8599-c430371c49bb","_parentId":"a7385982-95f7-4824-96a6-bf93ab61e3c7","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f7cda524-d687-4cc0-a574-c3ae070cd26b/mvc-overview-of-kentico-architecture.mp4","poster":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ff85ae81-5800-4a86-bd2f-5bbe025a7c7b/mvc-vid-overview-of-mvc-development.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<h1>Overview of Kentico MVC Architecture</h1>\n<p>Hello and welcome to a short overview of how the development of MVC websites work in Kentico.</p>\n<p>Kentico MVC websites use two separate web applications.&nbsp;</p>\n<p>The MVC application displays the live site and the Kentico application provides the administration interface.</p>\n<p>The MVC application runs on the standard ASP.NET MVC 5 framework.&nbsp;</p>\n<p>Kentico serves as a content repository and provides a simple and easy to understand administration interface that empowers content editors and online marketers with a long list of functionality for editing content or running online marketing activities.</p>\n<p>The administration interface of the Kentico application is built on ASP.NET Web Forms, and can be widely customized and made to fit almost any user scenario.</p>\n<p>Both applications run on their own URLs and but they share the same database.&nbsp;</p>\n<p>Website editors create and manage the content in the Kentico application which is displayed on the live site through the Kentico API.&nbsp;</p>\n<p>The Kentico API is integrated into the MVC application as NuGet packages and its libraries provide an extensive functionality for a large number of client scenarios.</p>\n<p>Ranging from small, single-purpose microsites for marketing campaigns over medium-size business websites with e-stores all the way up to large-scale portals with large teams of editors working on different continents and with millions of website visitors from different cultures.</p>\n<p>Any change to the live site or in the admin interface is automatically synchronized, as both applications are running in a web farm.</p>\n<p>It is the shared database and the Kentico API that allow both applications to work as a web farm and ensure that changes in one of the applications are immediately reflected in the other.</p>\n<p>The synchronization options cover various types of data, including cached database content, settings of the site or individual objects, or uploaded files.</p>\n<p>When a web editor changes the text of a page in the admin interface, the data is stored in the database.</p>\n<p>Then the Kentico application initiates a synchronization task and triggers a task for the MVC application.</p>\n<p>The MVC application runs the task and invalidates the matching data in its cache.</p>\n<p>When a website's visitor requests the content that has been updated the MVC application retrieves the updated content from the database and serves it on the live site.</p>\n<p>As editing of the content takes place in a separate application, the content which an editor updates doesn't need to be immediately promoted to the live site.</p>\n<p>It can pass through complex content workflows which help large editor teams to ensure that only approved content is displayed to the website's audience.</p>\n<p>In summary, when developers build a website in Kentico MVC solution, they prepare two applications the front-facing MVC application and the administration interface, which both share the same database.</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a36a840a-e901-46e8-ae04-28cdb5734639","_parentId":"5b9b499e-2d19-4405-9d3c-4606736fede6","_type":"component","title":"Overview of Kentico MVC Development","displayTitle":"Overview of Kentico MVC Development"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/61fcc34e-3cbb-4a23-ab6b-3456bbf2875c/Ways%20to%20store%20data.mp4","poster":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/86b910ee-fa88-46d5-b87c-789a0fe6b4ad/mvc-ways-to-store-data-loading-image.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<h1>Ways to store data in Kentico</h1>\n<p>Hi there. In this video, we are going to look at ways you can use to store content in Kentico. The content editors add the content in the administration interface which stores the data in a shared database. The data is then retrieved via the Kentico API to the live site running as a separate MVC application.&nbsp;</p>\n<p>However, pages are only one of the approaches you can use.&nbsp;Before you start defining your website architecture,&nbsp;let's see what options Kentico provides for storing the website's data.</p>\n<p>Besides already mentioned pages, you can use module classes, custom tables, and media libraries.</p>\n<p>Pages are the most common way to store data on websites.&nbsp;Editors&nbsp;can also add files to pages as attachments. One of the benefits of storing data in pages is that you can display them in a visual hierarchy in the content tree.</p>\n<p>Seeing pages in hierarchy helps content editors, as they can quickly navigate around and easily pick the content they want to manage.&nbsp;</p>\n<p>Storing content in pages also allows you to configure access permissions for editors down to individual pages, and define detailed reviewing and approval processes using workflows. Lastly, you can use pages to store content in different languages and manage translations.&nbsp;</p>\n<p>The second option is to use custom module classes.&nbsp;Custom module classes allow you to store large amounts of content. They are extremely helpful when you need to access the stored data in the admin interface, but don't want to display it in the visual hierarchy of the content tree.</p>\n<p>For example, you can use custom module classes&nbsp;when you want to create a specialized interface within the admin UI through which the editors will add and manage data.</p>\n<p>Custom module classes also provide the best options if you need to model relationships between different types of data or integrate advanced custom functionality. So, that's custom module classes.</p>\n<p>The third option to store a large amount of data is to use custom tables. Custom tables allow you to create your custom database tables and manage their content directly from the administration interface without using any specialized database management tool. They come in handy when you need to store a large amount of data in a flat structure.&nbsp;</p>\n<p>Content editors can access the data stored in custom tables from the administration interface,&nbsp;but this data will not be displayed in a visual hierarchy as pages in the content tree.&nbsp;</p>\n<p>So when to use custom module classes, and when the custom tables? Well,&nbsp;it depends on the use case.&nbsp;</p>\n<p>If you need editors to add records&nbsp;through a custom-built user interface within Kentico, use custom module classes.&nbsp;</p>\n<p>And if your editors just need to add or update the data in a simple, table-like interface, use custom tables.&nbsp;</p>\n<p>The last available option for storing data are media libraries. Media libraries are designed to store large files, such as images, videos or packaged files. You can also use them to store your files externally and distribute them through CDNs. You will learn about media libraries and how to work with them later in the course.</p>\n<p>These are the four options you can use to store data in Kentico.&nbsp;Analyze your project requirements and decide which option fits best your client's needs.</p>\n<p>Either you decide to use the hierarchy of pages, store large files in media libraries, extend functionality with custom module classes&nbsp;or store a flat data structure in custom tables, make certain you understand how and when you can use them. This will make sure you pick the best option for your client's needs.</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"17834fc6-9471-40ba-ae3e-9eb6947a09f4","_parentId":"fcf91950-497b-4de8-bb25-d43df578392c","_type":"component","title":"Ways to store data in Kentico","displayTitle":"Ways to store data in Kentico"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/99d3b344-ffcf-418b-b817-b41948b36fb8/mvc-editing-content-in-kentico-mvc.mp4","poster":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/810fe2b7-367a-4754-addd-a980801e352a/mvc-editing-content-loading-page.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<h1>Editing content in Kentico</h1>\n<p>Hello there. In this video, we'll look at two approaches editors can use to add and manage the content on Kentico MVC websites.</p>\n<p>As a developer, you need to build the website so it continues to appeal to the audience, and at the same time, provides a consistent look and predictable experience.</p>\n<p>This is can be easily achieved by strictly limiting editors so that they can work only with content without any option to influence how the content looks on the live site.</p>\n<p>On the other hand, there are situations in which you'd want to empower the editor with more control over the content and the layout of the website.</p>\n<p>The question is, how can you provide an experience to fit both? With Kentico MVC, editors can manage content in the Administration interface as highly structured content, and through the Kentico page builder.</p>\n<p>Structured content allows editors to focus only on the quality of their content. Developers prepare the structure for collecting the content. They define exactly what type of content, like headlines, body copy, images or file attachments each page will store and create the markup which displays the content in the live site application in a unified way.</p>\n<p>Structured content works best for pages with a repeated layout across the website, where the focus is on the provided information rather than on first grabbing attention and then providing information later.</p>\n<p>Typically, you will use structured content with articles, product pages or pages which don't personalize their content depending on who is viewing them, like the About page or Contact page.</p>\n<p>In some situations, content editors need to personalize the page experience to fit the audience, and that's when the Kentico page builder comes in handy.</p>\n<p>The page builder provides a user-friendly interface which allows even non-technical users to create and adjust the position of the content.</p>\n<p>A developer prepares pages which contain editable areas, as well as the components that can be added and content editors select the look they want their page to have, adjust it a bit if needed and populate it with exactly the types of content in exactly the locations on the page they have identified to achieve their goals.</p>\n<p>Typically, you will use the page builder on pages where you want to adjust the layout and content elements to fit the message, such as campaign landing pages.</p>\n<p>It's also great for pages that receive the highest amount of traffic, such as the Homepage where editors or marketers want to frequently adjust messaging to fit the company's current marketing goals.&nbsp;</p>\n<p>Both options have their place on MVC websites. As always, define your website architecture so that it best meets your client needs.</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d36d0a0d-97ba-45d0-8a74-ef93f6d67fdc","_parentId":"6cc0bfda-9601-46d3-a402-e1c9a4ab48d0","_type":"component","title":"Editing content in Kentico MVC","displayTitle":"Editing content in Kentico MVC"},{"body":"<p><strong>Kentico Installer</strong>&nbsp;performs a number of operations. Here is a list of the most important ones that you as a developer should be aware of.</p>","_items":[{"body":"<p>The installer installs any of the features from the&nbsp;<a href=\"https://docs.kentico.com/k12/installation/server-and-hosting-requirements\">requirements</a>&nbsp;missing on the machine, e.g., the required version of the .NET Framework.</p>","title":"Installs missing features","_graphic":null},{"body":"<p>The installer creates&nbsp;<strong>project</strong>&nbsp;<strong>files</strong>&nbsp;for the&nbsp;<strong>MVC live site</strong>&nbsp;and&nbsp;<strong>Kentico administration</strong>, and configures their&nbsp;<strong>shared features</strong>:</p>\n<ul>\n  <li>Sets their&nbsp;<em>connection strings</em>&nbsp;to target the shared database.</li>\n  <li>Sets the same&nbsp;<em>hash salt&nbsp;</em>value, so both apps generate matching hashes for various security functions. This is important for features like the&nbsp;<em>Preview</em>&nbsp;mode or macros within the administration application.</li>\n</ul>","title":"Creates project files","_graphic":null},{"body":"<h3>Kentico.AspNet.Mvc</h3>\n<p>The package contains all items that your MVC application needs to work with the connected Kentico application. Installation adds various assemblies which allow you to use features, such as:</p>\n<ul>\n  <li>Retrieving content from pages or media libraries, or setting the system to allow your editors to preview pages in the administration interface (<em>Kentico.Content.Web.Mvc</em>).</li>\n  <li>Creating on-line forms or working with the page builder (<em>Kentico.FormBuilder.Mvc</em> and <em>Kentico.PageBuilder.Mvc</em>)</li>\n  <li>Working with users on the live site (<em>Kentico.Membership</em>)</li>\n</ul>\n<div class=\"infobox note\"><p>Make sure that the version of the installed Kentico.AspNet.Mvc package matches the exact version of your Kentico installation. For example, if you are using hotfixed Kentico 12.0.5, you need to use version 12.0.5 of the Kentico.AspNet.Mvc package.</p></div>\n<h3>Kentico.Libraries</h3>\n<p>The package contains all assemblies that you need to work with Kentico in an external application. The installer also installs other third-party libraries that are required by the Kentico API.</p>\n<h3>Kentico.LanguagePack.English</h3>\n<p>The package contains files necessary for the English localization that are required by the Kentico application and API</p>","title":"Prepares required NuGet packages","_graphic":null},{"body":"<p>The installed MVC project automatically contains the&nbsp;<em>routes.Kentico().MapRoutes()</em>&nbsp;method in the&nbsp;<em>RouteConfig.cs</em>&nbsp;file. The extension method maps routes for Kentico HTTP handlers (e.g. used to serve image URLs) and various other features that can optionally be enabled (such as the page builder or activity tracking).</p>\n<p>MVC projects created by the installer also contain the <em>ApplicationConfig</em> class, whose <em>RegisterFeatures</em> method is called in the <em>Application_Start</em> method of the <em>Global.asax</em> file. &nbsp;You can use this class to encapsulate code that enables and configures Kentico MVC features (via an instance of the <em>ApplicationBuilder</em> class).</p>\n<p>You need to enable optional MVC features before you call the <em>Kentico().MapRoutes()</em>&nbsp;method, because it adds required routes based on the currently enabled feature set. That's why the default code in the <em>Application_Start</em> method calls <em>ApplicationConfig.RegisterFeatures</em> before <em>RouteConfig.RegisterRoutes</em>.</p>","title":"Prepares routes for Kentico HTTP handlers and features","_graphic":null},{"body":"<p>The MVC project's <em>AssemblyInfo.cs</em> file contains the <strong>[assembly: AssemblyDiscoverable]</strong> attribute, which allows the Kentico application code to detect various types of registered classes during initialization.</p>","title":"Enables class discovery","_graphic":null},{"body":"<h3>Creates a content-only site</h3>\n<p>Setting the site as content-only influences the site's behavior on a system level.&nbsp;For example, the Kentico application automatically hides some features in the admin interface that editors of content-only pages aren't able to use. E.g., in the&nbsp;<em>Pages</em>&nbsp;application, the editors will not see Portal Engine features, such as the&nbsp;<em>Design</em>&nbsp;tab or the&nbsp;<em>Page templates</em>&nbsp;tab in the page properties.&nbsp;</p>\n<p>Note: If you want to run multiple sites on one Kentico instance, we do&nbsp;<strong>not recommend mixing Portal Engine sites</strong>&nbsp;which are based on&nbsp;<em>ASP.NET Web Forms</em>&nbsp;and<strong>&nbsp;content-only sites</strong>&nbsp;based on the&nbsp;<em>ASP.NET MVC</em>&nbsp;development model.</p>\n<h3>Enables automatic web farm mode in the instance's settings</h3>\n<p>This allows for automatic, two-way synchronization of content, cache, and settings between the live site and the Kentico application.</p>","title":"Installs the database shared by both applications","_graphic":null},{"body":"<p>If you decide to register the applications during installation, the installer creates&nbsp;<em>two separate virtual applications</em>&nbsp;and&nbsp;<em>sets their aliases</em>. The naming conventions follow a simple pattern:</p>\n<ul>\n  <li><em>Live site MVC application:</em>&nbsp;&lt;project folder&gt;_&lt;site name&gt;, e.g.,&nbsp;<em>MedioClinic_MedioClinic</em></li>\n  <li><em>Kentico application:</em>&nbsp;&lt;project folder&gt;_Admin, e.g.,&nbsp;<em>MedioClinic_Admin</em></li>\n</ul>\n<div class=\"infobox note\"><p>During development, we recommend that you keep the applications running in two separate virtual directories on the same domain. When deploying the website live, you can choose the hosting approach depending on your company's deployment preference.</p></div>","title":"(Optional) Registers both applications to IIS","_graphic":null},{"body":"<p>The installer automatically sets the&nbsp;<strong>Presentation URL</strong>&nbsp;of the site in Kentico according to the alias of the MVC live site application in IIS, e.g.,&nbsp;<a href=\"http://localhost/Kentico12_MedioClinic/\"><em>http://localhost/MedioClinic_MedioClinic/</em></a><em>. </em>This allows website editors to access the live site directly in the <em>Pages </em>application, create hyperlinks in the text editor, or preview what the content of their pages will look like when it's published.</p>","title":"Sets the Presentation URL","_graphic":null}],"instruction":"","_layout":"full","_component":"accordion","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"120304da-d130-4058-9c8b-45a73ce3cac5","_parentId":"787ae0d7-4412-4184-8831-5253df8f1497","_type":"component","title":"What happens during the Kentico MVC installation","displayTitle":"What happens during the Kentico MVC installation?"},{"body":"<p>Kentico MVC uses two separate applications to present and administer a single website. The applications can either run on a single domain or on different domains.&nbsp;In both cases, the applications need to have valid licenses. When using different domains, you need to purchase only one license for the MVC application. The additional license for the administration interface comes for free.</p>\n<p>Let's have a look at some licensing scenarios using the MEDIO Clinic website.</p>\n<table><tbody>\n  <tr><td>IIS Server setup</td><td>URLs</td><td>License explained</td></tr>\n  <tr><td>2 IIS websites on different domains</td><td>Medio Clinic administration: https://admin.medioclinic.com<br>\nMedio Clinic live site: https://medioclinic.com</td><td>You run your applications on different domains, but you need to only purchase 1 license for the MEDIO Clinic live site, the license for the administration domain is provided for free.</td></tr>\n  <tr><td>1 IIS web site on a single domain. MVC application running in the site root, administration application running in a virtual directory.</td><td>Medio Clinic administration: https://medioclinic.com/admin<br>\nMedio Clinic live site: https://medioclinic.com</td><td>You purchase 1 license for the shared domain.</td></tr>\n</tbody></table>\n<h2>How does licensing work for web farm servers?</h2>\n<p>Kentico synchronizes the applications using a web farm, and this implementation is covered by the licensing automatically. Every Kentico MVC license also covers one additional web farm server. The automatic web farm licensing will suffice for standard scenarios. You only need a license with additional web farm servers if you need to run multiple load-balanced instances of the same MVC site.</p>\n<p>See <a href=\"https://docs.kentico.com/k12/developing-websites/developing-sites-using-asp-net-mvc/kentico-licensing-for-mvc-applications\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico MVC licensing</a> in our documentation for other scenarios and additional web farm purchase options.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0aa3adcf-0477-40e4-9a12-6bfce54c8c0a","_parentId":"bc4e863d-800c-4175-b940-b550be61eae0","_type":"component","title":"MVC Licensing","displayTitle":"MVC Licensing"},{"body":"<p>Kentico provides an API that allows you to retrieve data from the system, as well as create or modify pages, users, workflows, and any other entities. In the case of MVC projects, the API is integrated through NuGet packages. Understanding the Kentico API is crucial when developing MVC websites, because you will need to use it in your site's code when implementing even the most basic scenarios.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"Info classes","body":"<p>All entities in Kentico are represented as objects, which have a corresponding <em>Info</em> class in the Kentico API. Info classes define the properties of specific types of objects in the system, and reflect the columns of the database table used to store the given objects. A single instance of an Info class holds the data of one specific object and represents exactly one row in the database table.</p>\n<p>For most Kentico objects, such as contacts, cultures, consents or workflows, the naming convention for the corresponding Info class is <strong>&lt;object name&gt;</strong><em>Info</em>. For example <em>ContactInfo</em>, <em>CultureInfo</em>, <em>ConsentInfo</em>, <em>WorkflowInfo</em>, etc.&nbsp;</p>\n<p>Pages are a special case and are represented by the <em>TreeNode</em> class instead. When working with pages of a specific type, you will often use a custom generated class that inherits from <em>TreeNode</em>, such as <em>Home</em> or <em>Article</em>.</p>","code":{"src":"// Gets the current contact\nContactInfo currentContact = ContactManagementContext.GetCurrentContact();\n \n// Gets values from the contact's properties\nstring contactName = currentContact.ContactLastName;\nstring contactJobTitle = currentContact.ContactJobTitle;","lang":"c_"},"strapline":"Info classes"},{"title":"InfoProvider classes","body":"<p>To work with data, the Kentico API supplies <em>InfoProvider</em> classes. An InfoProvider class usually serves as a counterpart to an object's Info class and provides methods for managing objects of the given type. This includes basic operations such as reading, inserting, updating and deleting, or more advanced actions that are relevant for the given object type.&nbsp;</p>\n<p>For most Kentico objects, the naming convention for the provider classes is <strong>&lt;object name&gt;</strong><em>InfoProvider</em>. For example <em>ContactInfoProvider</em>, <em>CultureInfoProvider</em>, <em>WorkflowInfoProvider</em>, etc.</p>\n<p>Again, pages are an exception and management is provided by the <em>DocumentHelper</em> or <em>TreeProvider</em> classes. For pages of a specific type, you will typically work with generated provider classes that return strongly-type data, such as <em>HomeProvider</em> or <em>ArticleProvider</em>.</p>","code":{"src":"// Gets a collection of objects representing article pages using a generated provider\nIEnumerable<Article> articles = ArticleProvider.GetArticles()\n    .OnSite(\"MySite\")\n    .Culture(\"en-US\")\n    .Path(\"/Articles/\", PathTypeEnum.Children);","lang":"c_"},"strapline":"InfoProvider classes"},{"title":"Services","body":"<p>In addition to providers, certain operations in the Kentico API are performed using a service model. Typically, services are used for higher-level business scenarios, such as logging activities, handling newsletter subscriptions, managing shopping cart content, working with consent agreements, and more.</p>\n<p>Each service is represented by an interface, for which the Kentico API provides a default implementation. You work with the service by getting an instance of the service class and calling its methods.</p>\n<p>An advantage of the service model is that you can register the services into dependency injection containers that you use within your project. Services can also easily be integrated into automated tests, and provide customization options by allowing you to register your own implementations of the available interfaces.</p>","code":{"src":"// Gets an instance of the shopping service used to manage the current shopping cart\nIShoppingService shoppingService = Service.Resolve<IShoppingService>();\n \n// Removes all products from the current shopping cart\nshoppingService.RemoveAllItemsFromCart();","lang":"c_"},"strapline":"Services"}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"794cb438-0eff-4dba-83df-973fdd23fef7","_parentId":"0b70bacc-eaa5-450e-9540-8f09a28ccc8f","_type":"component","title":"Kentico API Basics","displayTitle":"Kentico API Basics"},{"body":"<p>The Kentico database structure is easy to grasp. Tables, views, and other database objects use a naming convention that consists of a <strong>prefix</strong>, followed by the name of the <strong>object</strong> (User, Culture, Contact, Customer, etc.). The prefix represents the general type of functionality to which the data is related, such as CMS, OM or COM. Examples of full table names are <em>CMS_User</em>, <em>OM_Contact </em>or <em>COM_Customer</em>.</p>\n<div class=\"infobox note\"><p>We recommend that you use your own naming convention for any custom database tables or objects. For example, this is relevant when naming the database table used to store the data of your site's page types. Avoid the default Kentico prefixes and instead add a unique prefix based on your project or company name, e.g., <em>KNTC_&lt;table_name&gt;</em>.</p>\n<p>Keeping the default Kentico objects separate from your custom objects will help prevent system collisions when hotfxing or upgrading your instance to newer versions.&nbsp;Find out about our other <a href=\"https://docs.kentico.com/k12/custom-development/best-practices-for-customization\">best practices for customization</a> in the Kentico documentation.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"662e2314-4fe8-4002-b049-759aa88cafd9","_parentId":"0b70bacc-eaa5-450e-9540-8f09a28ccc8f","_type":"component","title":"Underlying data structure","displayTitle":"Underlying data structure"},{"body":"<p>Medio Clinic is a training website with&nbsp;only a small amount of content and data. However, to make tasks in the course and your work with the website as useful as possible, we built the sample implementation using patterns suitable for a much larger, enterprise-level website. Therefore, the training site attempts to demo logic and functionality you'd need for a website which stores, manipulates and displays a much larger volume and variety of data.</p>\n<p>The MVC model, as well as web development in general, provide almost an unlimited set of options you can use to solve problems. Keep in mind that the approach we took with the Medio Clinic is one of many, and most of the functionality may be implemented in a different way. On the other hand, the examples follow best practices reflecting how we think websites should be built using the Kentico MVC development model.</p>\n<p>The website consists of two Visual Studio solutions:</p>\n<ul>\n  <li><em>WebApp.sln</em> includes the files of the Kentico administration project, stored in&nbsp;<em>/CMS</em>&nbsp;folder and using assemblies from the <em>/Lib</em> folder,</li>\n  <li><em>MedioClinic.sln</em> includes files used in the implementation of the Medio Clinic website, stored in the <em>/MedioClinic</em> and <em>/Business</em> folders.</li>\n</ul>\n<p>When building MVC websites, you will not need to work with the administration solution unless you wish to customize or extend the default functionality or interface (this subject is covered in the <strong>Advanced Developer</strong>&nbsp;course). The current course focuses on the Medio Clinic solution, which contains the implementation of the MVC website.</p>\n<h2>Medio Clinic</h2>\n<p>We recommend getting familiar with the general patterns used to build the sample Medio Clinic website. This will help you understand and complete tasks in later parts of the course, which will focus on implementing specific features and content on the website.</p>\n<p>You can investigate the training website's code files in this&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12\">GitHub repository</a>.</p>\n<p>Here is a short overview:</p>\n<ul>\n  <li>The website's code is split into two projects (assemblies): the MVC web application itself (<strong>MedioClinic</strong>) and an assembly containing business logic (<strong>Business</strong>).&nbsp;</li>\n  <li>The code uses a layer of custom <strong>repositories</strong> and <strong>services</strong> that encapsulate the Kentico API. This abstraction is useful for multiple reasons, such as better support for automated testing and dependency injection. It also limits the number of locations that directly call the Kentico API and makes it easier to deal with changes in the API when upgrading to newer versions.</li>\n  <li>The <a href=\"https://autofaccn.readthedocs.io/en/latest/integration/mvc.html?highlight=resolver\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Autofac dependency injection container</a> is used to instantiate services, repositories and other interface implementations (both for the custom-built classes and ones from the Kentico API).</li>\n</ul>\n<h3>MedioClinic project</h3>\n<ul>\n  <li>Standard MVC web application project structure: controllers, models, views, configuration files, startup logic, etc.</li>\n  <li>Contains all front-end design files and content items required for the website (stylesheets, scripts, images, resource files).</li>\n  <li>Integration with the Kentico API is provided by the installed <strong>Kentico.AspNet.Mvc</strong> NuGet package.</li>\n</ul>\n<h3>Business project</h3>\n<p>Enterprise-level applications usually require separation of business logic from the web application code. This makes it easier to maintain, distribute, and potentially reuse your code.</p>\n<ul>\n  <li>Contains custom&nbsp;<strong>Services</strong>&nbsp;and&nbsp;<strong>Repositories</strong>, which use the Kentico API to retrieve data and perform other required actions.</li>\n  <li>The <strong>Dto</strong> folder stores <a href=\"https://en.wikipedia.org/wiki/Data_transfer_object\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">data transfer objects</a> used within the project. The Dto classes represent Kentico pages and objects, but carry only the minimum required data. For example, they are used within the properties of model classes that transfer data to the website's views.</li>\n  <li>The <strong>Extensions</strong>&nbsp;and&nbsp;<strong>Models</strong>&nbsp;folders store custom extension methods and classes that wrap the Kentico API. For example, instead of directly calling the Kentico API to localize resource strings, you call the custom <em>Localize</em> method within views. If the Kentico API changes in future versions, you just need to update your custom <em>Localize</em> method, not all occurrences of code that localize resource strings.</li>\n  <li>The <strong>DI</strong>&nbsp;folder contains classes that register services into the Autofac dependency injection container (these are used in the startup logic of the MVC web application). For detailed information about registering services from the Kentico API, see our <a href=\"https://docs.kentico.com/k12/developing-websites/initializing-kentico-services-with-dependency-injection\">documentation</a>.</li>\n  <li>The <strong>Generated</strong> folder contains generated classes for managing the Page types used on the website.</li>\n  <li>The Kentico API is integrated through the <strong>Kentico.Libraries</strong> NuGet package (this project is only a code library, so the full <em>Kentico.AspNet.Mvc</em> package is not required).</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f27815a9-a0be-47c2-bf87-d9cd2eab7e82","_parentId":"eb346380-3f46-4518-bc3e-a2d522fbf60c","_type":"component","title":"Medio Clinic Implementation Overview","displayTitle":"Medio Clinic Implementation Overview"},{"body":"<p>To get the most from the course, you will be building a simple website for our imaginary Medio clinic. You need to get your dev machine ready and install your local copy of Kentico.</p>\n<p>Make sure the following statements are true for your dev machine:</p>\n<ul>\n  <li>Kentico 12 Administration application and Kentico MVC live site project run on your dev machine</li>\n  <li>The Admin app's codename is set to&nbsp;MedioClinic</li>\n  <li>The Kentico installation contains correct licenses.</li>\n  <li>The URL of the Medio clinic live site is set to&nbsp;<a href=\"http://localhost/MedioClinic,\">http://localhost/MedioClinic,</a>&nbsp;</li>\n  <li>The URL for the administration application is set to&nbsp;<a href=\"http://localhost/admin.MedioClinic\">http://localhost/admin.MedioClinic</a></li>\n  <li>You have installed Visual Studio 2017</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c95dc549-0ea6-48c6-ad6f-1668c90c4348","_parentId":"ea7c29fd-839c-4ed3-a77e-7e0794c48428","_type":"component","title":"Task: Getting your machine ready for the course","displayTitle":"Task: Getting your machine ready for the course"},{"body":"<p>Before starting the course, make sure your machine matches&nbsp;<a href=\"https://docs.kentico.com/k12/installation/server-and-hosting-requirements\">requirements</a>&nbsp;to develop MVC websites in Kentico. Kentico Installer is capable of downloading and installing required components, however, we recommend that you have the following installed and set before you run Kentico Installer.</p>\n<ul>\n  <li>IIS. See our documentation for the IIS&nbsp;<a href=\"https://docs.kentico.com/k12/installation/server-and-hosting-requirements\">requirements</a>&nbsp;depending on your dev machine system and additional&nbsp;<a href=\"https://docs.kentico.com/k12/installation/server-and-hosting-requirements/configuring-iis-for-the-installation-of-kentico\">configuration</a>.</li>\n  <li><a href=\"https://www.visualstudio.com/downloads/\">Visual Studio 2017</a>&nbsp;(or similar IDE that supports ASP.NET MVC 5 development, such as JetBrains&nbsp;<a href=\"https://www.jetbrains.com/rider\">Rider</a>)&nbsp;with the&nbsp;<a href=\"https://github.com/dotnet/roslyn\">Roslyn&nbsp;</a>.NET compiler.</li>\n  <li>Microsoft SQL Server (2008+) or the free&nbsp;<a href=\"https://www.microsoft.com/en-us/sql-server/sql-server-editions-express\">SQL Server Express Edition</a>, with a&nbsp;<strong>case-insensitive&nbsp;</strong><a href=\"https://docs.microsoft.com/en-us/sql/relational-databases/collations/collation-and-unicode-support?view=sql-server-2017\">collation</a>.</li>\n  <li><a href=\"https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017\">SQL Server Management Studio</a></li>\n  <li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=49981\">.NET Framework 4.6.1</a>&nbsp;(or newer)</li>\n</ul>\n<p>When you have set your system, download and run the <em>Kentico12_0.exe</em> file which opens&nbsp;<strong>Kentico Installer</strong>.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"Welcome to Kentico Installer","body":"<p>Click Next in the Welcome to Kentico Installer window. In the second step, select your country, and accept the license conditions.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5b534a16-f176-40f9-9253-af1fcaee35ff/K12-KenticoInstaller1.png","alt":"K12-KenticoInstaller1.png"},"strapline":"Welcome to Kentico Installer"},{"title":"Selecting installation type","body":"<p>In the Installation step, select the&nbsp;<strong>Custom</strong>&nbsp;<strong>installation&nbsp;</strong>option<strong>.</strong>&nbsp;</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/71fb99f4-0124-43d4-91a6-21a11c70c3ba/K12-KenticoInstaller2.png","alt":"K12-KenticoInstaller2.png"},"strapline":"Selecting installation type"},{"title":"Program files","body":"<p>In the following step, confirm the location where your setup files will be installed. If you have already installed Kentico 12, e.g., for evaluation purposes, this step will not appear.&nbsp;</p>\n<p>For the purpose of this course, we recommend using the default option, e.g, <em>C:\\Program Files\\Kentico\\12.0\\</em></p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1dd6e85d-3dd9-4c86-b4fa-18726b31db23/K12-KenticoInstaller3.png","alt":"K12-KenticoInstaller3.png"},"strapline":"Program files"},{"title":"Development model","body":"<p>In the <strong>Development model </strong>step, leave the selected <strong>MVC </strong>option.&nbsp;This will install two projects on your machine -&nbsp;an MVC project you will use to develop the live site application and a Kentico project that provides an interface for editing content and website administration. This is the configuration we recommend for developing MVC websites in Kentico.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9a80c7d5-0236-4a80-bbe9-d87eaa8a42c9/K12-KenticoInstaller4.png","alt":"K12-KenticoInstaller4.png"},"strapline":"Development model"},{"title":"Installation type","body":"<p>In the Installation type, we recommend using the following configuration for the training course:</p>\n<ul>\n  <li><strong>Target location:</strong>\n    <ul>\n      <li><strong>Register to IIS</strong>: disabled<br>\nFor the purpose of the training course, you will create your applications manually in IIS.</li>\n      <li><strong>Location of project files</strong>: Change the default value to install to a MedioClinic folder, e.g., <em>C:\\inetpub\\wwwroot\\MedioClinic</em>.</li>\n    </ul>\n  </li>\n  <li><strong>Site</strong>\n    <ul>\n      <li><strong>New Site</strong></li>\n      <li><strong>Name</strong>: MedioClinic</li>\n    </ul>\n  </li>\n</ul>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e91b80a7-551b-401e-ba58-444cfa1b4def/K12-KenticoInstaller5.png","alt":"K12-KenticoInstaller5.png"},"strapline":"Installation type"},{"title":"Database step","body":"<p>In the Database step, install the project with the database and confirm you have access to SQL server.</p>\n<p>Specify the following values according to your SQL server's name and authentication options, e.g.,&nbsp;</p>\n<ul>\n  <li><strong>SQL Server</strong> name: To find the name of your SQL server installation, open the SQL Server Management Studio. Select the root folder, click Properties. The name displays in the first row.</li>\n  <li><strong>Database</strong> name: Fill in the name for the new database, e.g., Kentico12_0</li>\n</ul>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/61b05691-a2db-4a27-aa69-6a3ae4185a45/K12-KenticoInstaller6.png","alt":"K12-KenticoInstaller6.png"},"strapline":"Database step"},{"title":"Completing the installation","body":"<p>In the next step, do not select any of the health monitoring or Windows service options, and click Next to get to the last tab, where you can decide to become a part of Kentico Improvement program.</p>\n<p>When you click the <strong>Install</strong> button, Kentico Installer creates project files for the MVC project and Kentico application.</p>\n<p>Depending on your browser settings, Kentico Installer opens a browser tab or a window with <strong>Kentico Tutorial</strong>, a quick, step-by-step <a href=\"https://docs.kentico.com/k12tutorial\">start guide</a> that introduces Kentico Portal Engine and MVC development models. This course covers the topic of MVC development in more depth and introduces a much more complex development scenario.</p>\n<p>If you run into any issues during installation, see the documentation for <a href=\"https://docs.kentico.com/k12/installation/troubleshooting-installation-issues\">Troubleshooting installation issues</a>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9f4148ab-6bfc-4401-ad18-7b6079717118/K12-KenticoInstaller7.png","alt":"K12-KenticoInstaller7.png"},"strapline":"Completing the installation"},{"title":"Create virtual applications","body":"<p>Open your <strong>Internet Information Services (IIS) Manager</strong>, select the <strong>Default Web Site,</strong> and right-click under the list of applications to add new virtual applications for your live site and your admin application.</p>\n<p>You want both apps to run on simple URLs, so set the alias of your Kentico administration site to, e.g., <em>MedioClinic_Admin</em> and the physical path to respective folders on the disk, e.g.,&nbsp;<em>C:\\inetpub\\wwwroot\\MedioClinic\\CMS</em></p>\n<p>Similarly, create the second application for the live site with <em>MedioClinic</em> as the alias and the physical path set to, e.g,&nbsp;<em>C:\\inetpub\\wwwroot\\MedioClinic\\MedioClinic</em></p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c85352ea-2351-4b20-9af2-5afe06fb40d3/K12-KenticoInstaller8.png","alt":"K12-KenticoInstaller8.png"},"strapline":"Create virtual applications"},{"title":"Change the Presentation URL","body":"<p>As the last step, you need to add the URL of the live site application into the Kentico application. Sign in to the&nbsp;administration interface, and navigate to the <strong>Sites</strong> application.&nbsp;</p>\n<p>Note:&nbsp;By default, the username is <em>administrator</em>, and the password is empty. If you are new to Kentico, feel free to go through <a href=\"https://docs.kentico.com/k11tutorial/using-the-kentico-interface\">a quick introduction to Kentico administration interface</a>&nbsp;in Kentico Tutorial to learn how to navigate around the system.</p>\n<p>In the <strong>Sites</strong> application, click the <strong>Edit</strong> button to open the <em>MedioClinic</em> general settings and change the <strong>Presentation URL</strong> value to match the absolute URL of the live site application that you registered in IIS, e.g.,&nbsp;<a href=\"http://localhost/MedioClinic\"><em>http://localhost/MedioClinic</em></a><em>.</em>&nbsp;Don't forget to save your changes.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4800958f-625c-4b1b-97ab-f01090fc219f/K12-KenticoInstaller9.png","alt":"K12-KenticoInstaller9.png"},"strapline":"Change the Presentation URL"}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8f40873d-da45-4861-a033-7683441621a2","_parentId":"d9e86ffa-3fd8-446a-a282-18114e49b9eb","_type":"component","title":"Demo: Installing Kentico","displayTitle":"Demo: Installing Kentico"},{"body":"<p>Kentico manages the website licenses in the <strong>Licenses</strong> application in the administration interface. When you install Kentico, your installation will by default contain two-week trial licenses, e.g., for <em>localhost</em> domain and <em>127.0.0.1</em> loopback address.</p>\n<p>A domain can only have one license key attached, so you need to first delete the existing licenses for&nbsp;<em>localhost</em> domain and any&nbsp;<em>127.x.x.x</em> addresses), and then add the license you have downloaded from the course.</p>\n<figure data-asset-id=\"9588cdb2-7a8e-413b-9334-cb23cade6461\" data-image-id=\"9588cdb2-7a8e-413b-9334-cb23cade6461\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8f6d0c39-0de2-4967-8e0f-d681f8fcf051/mvc-adding-course-license.gif\" data-asset-id=\"9588cdb2-7a8e-413b-9334-cb23cade6461\" data-image-id=\"9588cdb2-7a8e-413b-9334-cb23cade6461\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d944b6b8-daa0-41e4-806b-593a8bc1bb05","_parentId":"d9e86ffa-3fd8-446a-a282-18114e49b9eb","_type":"component","title":"Demo: Adding the course license","displayTitle":"Adding the course license"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which of the following statements is true for the Kentico MVC development model?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The installer creates project files for the live site and Kentico application.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>The MVC project's files are based on the \"MVC with user authentication\" project template from Visual Studio.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Kentico uses its own custom project files, and some of the default classes already contain Kentico code.</p>"},{"text":"<p>You cannot change the presentation URL of your Kentico live site.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. You can change the presentation URL in the Sites application in the Kentico administration interface.</p>"},{"text":"<p>You&nbsp;cannot change your Kentico application's virtual alias path.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. You can add your own virtual application and specify a custom Alias and Physical paths&nbsp;in IIS.</p>"}],"_feedback":{"title":"Feedback","correct":"<p>You got it! Kentico creates two solutions and two sets of project files in one folder.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"73211e10-802f-4a3f-ad01-5f34faad8825","_parentId":"5365516e-bdcc-4214-b99f-d4cbef90c6f9","_type":"component","title":"Progress-check: MVC Development Basics Review","displayTitle":"Progress-check: MVC Development Basics Review"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which actions does Kentico 12 Installer perform during the installation of MVC projects?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Sets the connection string to the shared database for both the live site and Kentico applications.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Creates an&nbsp;<em>ApplicationConfig.cs</em>&nbsp;class in the live site's project files, which calls methods that enable Kentico MVC features, such as&nbsp;<em>builder.UsePreview().</em></p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Sorry, that's what happened when installing the MVC NuGet package in versions prior to Kentico 12. You need to decide yourself which optional MVC features you want to enable.</p>"},{"text":"<p>Points you to the Settings application, where you need to set the automatic web farm mode.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. The web farm mode is set automatically when you install a new MVC project.</p>"},{"text":"<p>Installs all available Kentico NuGet packages, such as <em>Kentico.Libraries.Tests</em>.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Sorry, installing Kentico.Libraries.Tests is something you need to do yourself.</p>"}],"_feedback":{"title":"","correct":"<p>You got it! Kentico Installer sets the connection strings to one shared database.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"1287f174-c42e-4fb8-a4f0-43802c715207","_parentId":"5365516e-bdcc-4214-b99f-d4cbef90c6f9","_type":"component","title":"MVC Kentico Installer","displayTitle":"MVC Kentico Installer"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>For which types of pages do we recommend using the Kentico page builder?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Article pages</p>","_shouldBeSelected":false,"feedback":"<p>Wrong, Article pages are a great example of structured content with a unified rendering for all articles. How about going back and reviewing the Editing content in Kentico video?</p>"},{"text":"<p>Contact us page</p>","_shouldBeSelected":false,"feedback":"<p>Wrong, the content of the Contact us page usually doesn't change a lot on the live site.&nbsp;How about going back and reviewing the Editing content in Kentico video?</p>"},{"text":"<p>Campaign landing pages</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Product pages</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Product pages typically look alike across the whole website store section. Therefore, it's more useful to take the structured approach to hold content and create a unified markup. How about going back and reviewing the Editing content in Kentico video?</p>"}],"_feedback":{"title":"","correct":"<p>You got it! We recommend using Kentico page builder on pages with a short lifetime, such as campaign landing pages, or on pages where editors need to dynamically adjust specific areas, such as home pages.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"65fa7f03-64cc-44e1-8f27-0714b3b6adb4","_parentId":"5365516e-bdcc-4214-b99f-d4cbef90c6f9","_type":"component","title":"MVC Page builder overview","displayTitle":"MVC Page builder overview"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Why does the&nbsp;<em>Kentico().MapRoutes()</em>&nbsp;method need to be called before other route mappings?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Because the method overrides the standard .NET routing process for all other mapped routes.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. The&nbsp;<em>Kentico().MapRoutes()</em>&nbsp;extension method only maps routes for Kentico HTTP handlers, and does not modify the overall routing process in any way.</p>"},{"text":"<p>To avoid collisions with other more general routes, which could otherwise match the URLs used by Kentico HTTP handlers.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>The question is wrong. It's actually not important where you call the&nbsp;<em>Kentico().MapRoutes()</em>&nbsp;method, it just needs to be called anywhere for your application's&nbsp;<em>RouteCollection</em>.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.&nbsp;The&nbsp;<em>Kentico().MapRoutes()</em>&nbsp;extension method needs to be called before you map other more general routes.</p>"},{"text":"<p>The question is wrong. There is no such method as&nbsp;<em>Kentico().MapRoutes().</em></p>","_shouldBeSelected":false,"feedback":"<p>Wrong. The <em>Kentico().MapRoutes()</em> extension method exists and is pretty important. How about going back and reviewing the material? (The text \"What happens during the Kentico MVC installation?\" may come in handy.)</p>"}],"_feedback":{"title":"","correct":"<p>You got it! You need to map the routes of Kentico HTTP handlers first to avoid route collisions, which can lead to issues like images not displaying correctly.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"dfc62188-9ddd-47eb-aa06-7659f3b2ea1f","_parentId":"5365516e-bdcc-4214-b99f-d4cbef90c6f9","_type":"component","title":"Kentico.MapRoutes extension method","displayTitle":"Kentico.MapRoutes extension method"},{"body":"<p>Congratulations on completing the first section of the course! You now know about the very basics of what it's like to develop websites using the Kentico MVC development model.</p>\n<p>You have learned:</p>\n<ul>\n  <li>About the Kentico MVC development model in general</li>\n  <li>How the Kentico Installer creates MVC projects and which features it configures</li>\n  <li>A little bit about Kentico API</li>\n</ul>\n<p>Ready to go to the next section and learn about how to work with content in the Kentico application?<strong> Click the back button </strong>(<strong>&lt;</strong>)<strong> in the top left, and continue with the course!</strong></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"590d005b-40df-40a7-9329-bfa363a183ca","_parentId":"f14fe5e2-934c-4e18-90b6-553172cd129f","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>What <strong>page types</strong> are and how to create them</li>\n  <li>How <strong>URL patterns </strong>work</li>\n  <li>How <strong>page</strong> <strong>data</strong> <strong>is</strong> <strong>stored</strong> in Kentico</li>\n  <li>What options for <strong>page</strong> <strong>attachments</strong> the Kentico MVC development model provides</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Creating page types for Medio Clinic Home, Contact, Doctors and Doctor's profile pages</li>\n  <li>Adding new pages and content based on the page types you define</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"016c6ede-619d-4695-aa81-3ea552a7f268","_parentId":"63fa12af-3f89-4a7f-887e-e2ecadc2a83d","_type":"component","title":"Intro: Creating page types","displayTitle":"Intro: Creating page types"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b21a170c-5dc1-4afb-8156-757a150a8aa6/working-with-page-types.mp4","poster":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/468e71ca-f4a5-4094-afb0-3682401839bc/mvc-how-page-types-work.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<p>Hi there, in this video we will look at how page types work. Page types serve as structures for storing content in Kentico.</p>\n<p>When developers identify what type of content the website editors intend to create,&nbsp;they need to figure out the structure of individual pages that will hold this content.</p>\n<p>You already know that editors can edit pages on the website as structured content or use the Kentico page builder. You also know that the&nbsp;data is stored in the database, and then displayed on the live site via the Kentico API.</p>\n<p>The page data needs to be stored in a way that allows developers to create flexible logic for retrieving and displaying content.</p>\n<p>And page types are here to help with that.</p>\n<p>With the MVC development model, every page is based on a content-only page type.</p>\n<p>Each page type consists of fields, which define the content structure for pages of the given type, as well as the columns of the underlying database table.</p>\n<p>The editing interface through which editors input data in Kentico is provided by form controls, which can be assigned to individual fields.</p>\n<p>A form control displays a certain element, such as a text box or area, a drop-down-selector, or a group of radio buttons.&nbsp;</p>\n<p>Regardless of the input element's type, each form control saves its value into a single field in the database.</p>\n<p>Fields can also have additional settings, such as tooltips for the editing interface, or conditions under which the field will be visible to specific users.</p>\n<p>For pages with structured content, the fields automatically define a simple editing interface.</p>\n<p>The field editing interface allows editors to focus on optimizing the content, and leave worries about the final live site appearance of pages to the developers.</p>\n<p>If developers decide to give editors more control over both the content and design of a page through the page builder, they need to define editable areas on the page, as well as the MVC widgets the editors will use.</p>\n<p>Even though the visual experience of the page builder is different from structured content editing via form controls, pages that use the page builder still need to be based on a page type.</p>\n<p>As content-only pages just store data, they don't need to be organized in any special hierarchy. However, a content tree without any visual hierarchy or structure can soon become highly confusing.</p>\n<p>It's the developers who can help and define page types in a way that makes creating new pages easier and more intuitive.</p>\n<p>How? They can either set lists of allowed child and parent page types, or create page type scopes. While the allowed child and parent types define limits for individual page types, the scopes narrow down the number of page types that editors can create under specified paths within the content tree.</p>\n<p>With either of these boundaries, keep in mind that the hierarchy of the content tree will be just a visual representation for editors, because content-only pages do not define actual pages on the live site.</p>\n<p>Content-only page types don't have a presentation URL by default.</p>\n<p>This means that the Kentico application&nbsp;does not automatically know the live URLs under which individual pages will be available.</p>\n<p>If you want editors to create hyperlinks or preview the live site appearance of pages in the administration interface, you need to specify a URL pattern for each page type.</p>\n<p>The URL pattern determines the addresses under which the administration interface accesses the pages.&nbsp;</p>\n<p>When an editor creates a page and adds content to its fields, the data is stored in three interconnected database tables.</p>\n<p>CMS_Tree stores information about the page's position in the content tree.</p>\n<p>CMS_Document holds the page's properties, metadata, and content defined by editors through the page builder.</p>\n<p>A third table, referred to as a \"coupled data\" table, holds the page's structured content. Each page type has its own table, with columns that match the page type's fields.</p>\n<p>For websites with multilingual content, say English and Spanish, the CMS_Tree table always contains one record per page, while CMS_Document and the coupled data table store a separate record for each culture variant of a page.</p>\n<p>That's how page types work in Kentico. As a developer, you create the page types that store data in the database and provide editors with means to input data through form controls.</p>\n<p>And by defining the URL pattern for page types, you allow editors to work with pages correctly in the admin interface.</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1e655b34-22aa-4d6f-9dd1-2cea927840e3","_parentId":"a20c7735-97e2-465c-8eb3-cf8ac2127c0f","_type":"component","title":"Video: How page types work","displayTitle":"Video: How page types work"},{"body":"<p>By default, the system does not know the URL under which content-only pages are presented, so content editors cannot access the pages in the <strong>Preview</strong> mode within the administration interface. They also cannot use features that rely on the preview mode, such as the page builder, or create hyperlinks to pages in the content tree using the built-in text editor. To enable editors to fully leverage the power of the Kentico MVC development model, you need to specify a <strong>URL pattern</strong> for your page types.</p>\n<h3>The URL pattern</h3>\n<p>The <strong>URL pattern</strong> specifies how the system resolves the page's URL within the administration interface. The system combines the URL pattern with the site's presentation URL and creates the overall display URL of the page.&nbsp;</p>\n<p>The URL pattern comes in especially&nbsp;handy for pages which are presented separately on the live site. On the other hand, you don't need to set a URL pattern for pages &nbsp;in the content tree that do not represent distinct pages on the live site. In some cases, you may have pages whose content is aggregated in a different page, which then presents a complete page on the live site. For example, you can show all company offices listed on one page on the live site, but store information about each office in a separate page in the content tree. If you don't need to display individual offices on separate pages, you don't need to set a URL pattern for the 'office' page type, but only for the listing 'offices' type.</p>\n<h3>Macros in URL patterns</h3>\n<p>By adding macro expressions representing page properties into the URL pattern, you can set presentation URLs for separate pages based on the same page type, or different language versions of the same page. Using macro variables in your patterns is particularly important on larger sites with multiple cultures.</p>\n<p>Kentico macro expressions use the object-oriented <strong>K# </strong>language, which is very similar to the C# programming language. The system identifies string as a macros when you enclose the expression into curly brackets with a percentage sign: <em>{% MacroExpression %}</em>. To learn more about the K# language, other parameters you can use, and creating advanced macro expressions, visit our <a href=\"https://docs.kentico.com/k12/macro-expressions/macro-syntax\">documentation</a>.</p>\n<p>To find out what node and page data is available for your URL pattern macro expressions, you can look into the built-in Kentico macro console. Navigate to the <strong>System </strong>application, select the <strong>Macros </strong>&gt; <strong>Console </strong>tab and type, e.g., <em>CurrentDocument.</em> into the console. The macro autocomplete feature will list all the properties that are available in the page and node data.</p>\n<p>The most common way to address a page on MVC sites is to use the {% <em>NodeAlias %}</em> macro, which retrieves the page alias and helps to create more SEO-friendly URLs.</p>\n<p>Besides the pages aliases, you can also add the {% <em>DocumentCulture %}</em> macro to the URL pattern, which resolves into the culture code of the page's currently active content culture.</p>\n<p>For example, when a page type for blog articles has the following URL pattern:</p>\n<p><em>{% DocumentCulture %}/Articles/{% NodeAlias %}</em></p>\n<p>An article, e.g., '<em>The Magical Health Benefits of Being Cold</em>' in the Medio Clinic website's US English culture, has the following live URL:&nbsp;</p>\n<p><em>http://medioclinic.com/en-US/Articles/The-Magical-Health-Benefits-of-Being-Cold</em></p>\n<p>where '<em>en-US</em>' is the culture code and '<em>The-Magical-Health-Benefits-of-Being-Cold</em>' is the article's page alias.</p>\n<div class=\"infobox note\"><p>We do not recommend using query string parameters in URL patterns. When the system generates the <em>Preview</em> <em>URLs</em> for pages based on the specified pattern, it removes any parameters.</p></div>\n<p>Macro expressions in the URL pattern help you create more robust system logic, which is ready to serve when you need to start scaling up your application.&nbsp;</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c6509777-b455-4f56-83db-cbd333015b07","_parentId":"51a2c7c1-bb28-4085-ad2e-b697e9091e5f","_type":"component","title":"Theory: URL Pattern","displayTitle":"URL pattern"},{"body":"<p>Kentico provides options to website editors who want to attach files to pages in the content tree. Typical examples of uploaded attachments are PDF files or images.</p>\n<p>Unlike files stored in media libraries, which are covered later in the course, attached files are associated with the pages they have been uploaded to. If editors move or copy the page with the associated files in the content tree, the attachments are moved or copied together with the page.</p>\n<p>Developers can prepare page types to store attachments by adding fields with the following data types:</p>\n<ul>\n  <li><strong>File</strong> fields allow editors to upload a single attachment file. Editors use the <em>Direct uploader</em> form control on the <strong>Content</strong> tab in the <strong>Pages</strong> application to add, update or remove the file. If you want to use the <em>File</em> data type for multiple attachments on a single page, you need to create a separate field for each file you want editors to upload.</li>\n  <li><strong>Attachments</strong> fields provide a way to manage multiple attachments through a single page type field. Content editors add the attachments on the <strong>Content</strong> tab&nbsp;in the <strong>Pages</strong> application, where the given field provides an uploader built on the <em>Attachments</em> form control.</li>\n</ul>\n<p>For both <em>File </em>and <em>Attachments </em>fields, website editors can perform additional operations like updating the file or changing its name. If the attached file is an image, they can also use the Kentico built-in image editor to perform basic operations, such as resizing or cropping of the file.</p>\n<div class=\"infobox note\"><p><strong>Attachment database storage</strong></p>\n<p>Attachment page type fields do not directly store the binary data and other properties of the uploaded files. Instead, the system saves attachments separately in the <strong>CMS_Attachment</strong> database table.&nbsp;</p>\n<ul>\n  <li><em>File</em> page type fields store a GUID value, which identifies the corresponding attachment in the <em>CMS_Attachment</em> table.&nbsp;</li>\n  <li>For <em>Attachments</em> fields, the value in the database is always empty. Instead, the given records in the <em>CMS_Attachment</em> table store an identifier of the related page (<em>AttachmentDocumentID</em> column) and a GUID value that identifies the specific field in the page type's form definition (<em>AttachmentGroupGUID</em> column).</li>\n</ul>\n<p>The relationships between page fields and attachments are all handled automatically by the system, both by the used form controls in the administration interface, and when working with attachments in the Kentico API.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"f21ea491-cb36-4b33-9ef1-9b29f3580f2f","_parentId":"2d638e07-b2cd-463f-8f50-a55db9008d99","_type":"component","title":"Page attachments in MVC sites","displayTitle":"Page attachments in MVC sites"},{"body":"<p>Editors add content to the website in the <strong>Pages </strong>application. You already know that editors work with pages as <em>structured content</em> or through the <em>page builder</em>. You also know what the benefits of each of the approaches are and when to use them.</p>\n<h2>The Pages application UI</h2>\n<p>The application's interface for MVC sites is lean and helps editors to effectively work with their content.&nbsp;</p>\n<figure data-asset-id=\"445eaf8d-8cb8-4dd1-bb0e-c96ed7e7cde4\" data-image-id=\"445eaf8d-8cb8-4dd1-bb0e-c96ed7e7cde4\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/30e5facb-7a95-4c65-85f3-bfae24ea9c89/mvc-pages-application-ui.png\" data-asset-id=\"445eaf8d-8cb8-4dd1-bb0e-c96ed7e7cde4\" data-image-id=\"445eaf8d-8cb8-4dd1-bb0e-c96ed7e7cde4\" alt=\"\"></figure>\n<p>The interface of the Pages application is split into two parts:</p>\n<ul>\n  <li>A <strong>Content tree</strong> providing an overview of all pages on the website in a hierarchy</li>\n  <li>An area where editors <strong>manage </strong>and <strong>view </strong>the content, or <strong>perform bulk operations</strong> on pages, depending on the selected <strong>view mode</strong>.</li>\n</ul>\n<h2>View modes</h2>\n<p>The <strong>Pages </strong>application offers three view modes:</p>\n<ul>\n  <li><strong>Edit</strong> - the default mode which allows editing of page content. For pages using <em>structured content</em>, editors work in the simple interface of the <strong>Content </strong>tab. And they work on the <strong>Page </strong>tab on pages which use the <em>page builder</em>.</li>\n  <li><strong>Preview </strong>- displays the latest version of the page, which means that its content doesn't have to be promoted to the live site. &nbsp;The <em>Preview </em>mode helps editors see what their page will look like on the live site when it is published. They can send links to users outside of the system to these not-yet published pages or approve changes before they are presented to the live site audience. <br>\n</li>\n</ul>\n<div class=\"infobox note\"><p>If you want to use the&nbsp;<em>Preview&nbsp;</em>functionality, you need to configure URL patterns for your page types in the Kentico administration, and implement the presentation of the pages and URL routing in the MVC live site application (which is covered later in the course).</p></div>\n<ul>\n  <li><strong>Listing </strong>- provides an overview of all pages in the content tree, and allows editors to move, copy, delete, publish or translate pages in bulk.</li>\n</ul>\n<p>Find out more about the differences between the view modes in our <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-pages\">documentation</a>.&nbsp;</p>\n<h2>Page statuses</h2>\n<p>The page status icons help editors quickly find out the current state of pages. Primarily whether pages are published on the live site or not. You can learn about the page statuses in Kentico <a href=\"http:// https://docs.kentico.com/k12/managing-website-content/working-with-pages\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.</p>\n<p>If you want to find out more about the <strong>Pages </strong>application, feel free to go through the <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-pages\">Working with pages</a> chapter in our documentation or take our <a href=\"https://www.kentico.com/services/training/content-admin-essentials\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Content Admin</a> course aimed at business users using the Portal Engine.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ed56b7c0-250d-45bd-8bfb-a29e5b5db571","_parentId":"e17d9977-b8c9-4c6b-9abd-f7c816103a3f","_type":"component","title":"Theory: Pages application","displayTitle":"Theory: Pages application"},{"body":"<h3>1. Create the page types</h3>\n<p>Before you start adding content in the administration interface, you need to first define the page types you will use to create pages. To get your system ready for content editing, create the following content-only page types.&nbsp;</p>\n<p>Use the <em>Training</em> custom namespace in the code names of all page types, and define fields and other configuration according to the information below. Note that the system automatically generates identifier fields like <em>HomeSectionID</em>&nbsp;for all page types.</p>\n<p>The following image shows the structure of allowed page types on the website (the parent-child relationships between individual page types).</p>\n<figure data-asset-id=\"b800606e-fb73-4cf3-a126-c18e5e005911\" data-image-id=\"b800606e-fb73-4cf3-a126-c18e5e005911\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5724d5ec-a7b5-4587-b671-188a537c3915/mvc-structure-of-page-types-relationship.png\" data-asset-id=\"b800606e-fb73-4cf3-a126-c18e5e005911\" data-image-id=\"b800606e-fb73-4cf3-a126-c18e5e005911\" alt=\"\"></figure>\n<h4>Home Section</h4>\n<ul>\n  <li><strong>Title </strong>(TEXT data type with size 100, <strong>required</strong>, <em>Title </em>caption)</li>\n  <li><strong>Text </strong>(TEXT data type with size 200, <strong>required</strong>, <em>Text </em>caption)</li>\n  <li><strong>Button</strong> (TEXT data type with size 1000, \"<em>Link </em><em>button text\"</em> caption)</li>\n</ul>\n<p>The page name source field uses an extra field, and this page type is only allowed under the <em>Root</em> page type. The <strong>URL pattern </strong>is<em> /{% DocumentCulture %}/Home </em>and the <strong>Use Page tab</strong> checkbox is enabled. Optionally, the page type is decorated with <em>icon-home</em> in the content tree.</p>\n<h4>Company Service</h4>\n<ul>\n  <li><strong>Header </strong>(TEXT data type with size 200, <strong>required</strong>, <em>Header </em>caption)</li>\n  <li><strong>Icon </strong>(FILE data type, <strong>required</strong>, <em>Icon</em> caption, <em>Direct</em> <em>uploader </em>form control)</li>\n  <li><strong>Text </strong>(LONG TEXT data type, <strong>required</strong>, <em>Text</em> caption, <em>Rich text editor </em>form control)</li>\n</ul>\n<p>The page name source is the <em>Header </em>field, the source for the page alias is the page name &nbsp;(this is the default configuration). This page type is only allowed under the <em>Home Section</em> page type, and its <strong>URL pattern</strong> is empty. Optionally, the page type is decorated with <em>icon-menu</em> in the content tree.</p>\n<h4>Doctor Section</h4>\n<ul>\n  <li><strong>Title </strong>(TEXT data type with size 200, <strong>required</strong>, <em>Title</em> caption)</li>\n</ul>\n<p>The page name source is the <em>Title </em>field, and this page type is only allowed under the <em>Root</em> page type. Its <strong>URL pattern </strong>is <em>/{% DocumentCulture %}/Doctors</em> and the <strong>Use Page tab</strong> checkbox is enabled. Optionally, the page type is decorated with <em>icon-box</em> in the content tree.</p>\n<h4>Doctor</h4>\n<ul>\n  <li><strong>FirstName </strong>(TEXT data type with size 200, <strong>required</strong>, <em>First name</em>&nbsp;caption)</li>\n  <li><strong>LastName </strong>(TEXT data type with size 200, <strong>required</strong>, <em>Last name</em>&nbsp;caption)</li>\n  <li><strong>Degree </strong>(TEXT data type with size 100, <strong>required</strong>, <em>Doctor degree</em>&nbsp;caption)</li>\n  <li><strong>Image </strong>(FILE data type, <strong>required</strong>, <em>Photo</em>&nbsp;caption, <em>Direct uploader</em> form control)</li>\n  <li><strong>Specialty </strong>(TEXT data type with size 200, required, <em>Doctor specialty</em>&nbsp;caption)</li>\n  <li><strong>Bio </strong>(LONG TEXT data type, <em>Bio</em> caption)</li>\n  <li><strong>EmergencyShift </strong>(INTEGER NUMBER data type, <strong>required</strong>, <em>Emergency shift</em> caption. The field's form control is <em>Drop-down list </em>with days of the week in the <strong>List of options </strong>data source. The <em>Data source </em>textbox contains values for the list in the following format: <em>number;day of the week</em>, e.g., <em>1;Monday. </em>Each pair is listed on a separate line.)</li>\n</ul>\n<div class=\"infobox note\"><p>Depending on your site's requirements, you could also create custom tables that allow dynamic editing of available values for the <em>Degree </em>and <em>Specialty </em>fields. The fields would then use the <em>Custom table item selector</em> form control, which would allow selection of the defined values.</p></div>\n<p>The page name source is the <em>LastName </em>field. This page type is only allowed under the <em>Doctor Section </em>page type, its <strong>URL pattern </strong>is <em>/{% DocumentCulture %}/Doctors/Detail/{%NodeID%}/{%NodeAlias%}</em> and the&nbsp;<strong>Use Page tab</strong>&nbsp;checkbox is enabled. Optionally, the page type is decorated with <em>icon-user-frame</em>&nbsp;in the content tree.</p>\n<h4>Contact Section</h4>\n<ul>\n  <li><strong>Title </strong>(TEXT data type with size 200,&nbsp;<strong>required</strong>,&nbsp;<em>Title </em>caption)</li>\n  <li><strong>Subtitle&nbsp;</strong>(TEXT data type with size 200,&nbsp;<strong>required</strong>,&nbsp;<em>Subtitle&nbsp;</em>caption)</li>\n  <li><strong>Text</strong>&nbsp;(TEXT data type with size 1000,&nbsp;<strong>required</strong>,&nbsp;<em>Text&nbsp;</em>caption,&nbsp;<em>Text area</em>&nbsp;form control)</li>\n</ul>\n<p>The page name source is the <em>Title </em>field, and this page type is only allowed under the&nbsp;<em>Root </em>page type. Its <strong>URL pattern&nbsp;</strong>is <em>/{% DocumentCulture %}/Contact</em> and the <strong>Use Page tab</strong> checkbox is enabled. Optionally, the page type is decorated with&nbsp;<em>icon-menu</em>&nbsp;in the content tree.</p>\n<h4>Company</h4>\n<ul>\n  <li><strong>CompanyName </strong>(TEXT data type with size 200, <strong>required</strong>, <em>Company name</em> caption)</li>\n  <li><strong>Street</strong> (TEXT data type with size 200, <strong>required</strong>, <em>Street</em>&nbsp;caption)</li>\n  <li><strong>City</strong> (TEXT data type with size 200, <strong>required</strong>, <em>City</em>&nbsp;caption)</li>\n  <li><strong>Country</strong> (TEXT data type with size 200, <strong>required</strong>, <em>Country</em> caption, <em>Country selector</em> form control)</li>\n  <li><strong>ZipCode</strong> (TEXT data type with size 200, <strong>required</strong>, <em>Zip code</em>&nbsp;caption)</li>\n  <li><strong>PhoneNumber</strong> (TEXT data type with size 200, <strong>required</strong>, <em>Phone number</em>&nbsp;caption)</li>\n  <li><strong>Email</strong> (TEXT data type with size 200, <strong>required</strong>, <em>Email</em> caption, <em>Email</em> form control)</li>\n</ul>\n<div class=\"infobox idea\"><p>The <em>Email </em>form control automatically validates whether values added by content editors are in the correct email address format.</p></div>\n<p>The page name source is the <em>CompanyName </em>field. This page type is allowed under the <em>Contact Section </em>page types, and its <strong>URL pattern </strong>is empty. Optionally, the page type is decorated with <em>icon-id-card</em>&nbsp;in the content tree.</p>\n<h4>Social links folder</h4>\n<ul>\n  <li><strong>FolderName </strong>(TEXT data type with size 100,&nbsp;<strong>required</strong>,&nbsp;<em>Folder name</em>&nbsp;caption)</li>\n</ul>\n<p>The page name source is the <em>FolderName </em>field. This page type is only allowed under the&nbsp;<em>Contact Section</em>&nbsp;page type, and its&nbsp;<strong>URL pattern&nbsp;</strong>is empty. Optionally, the page type is decorated with&nbsp;<em>icon-doc-o</em>&nbsp;in the content tree.</p>\n<h4>Social Link</h4>\n<ul>\n  <li><strong>Title</strong> (TEXT data type with size 200, <strong>required</strong>, <em>Link name</em> caption)</li>\n  <li><strong>Url </strong>(TEXT data type with size 2000, <strong>required</strong>, <em>Link Url</em> caption, <em>URL selector</em> form control)</li>\n  <li><strong>Icon </strong>(FILE data type, <strong>required</strong>, <em>Icon</em> caption)</li>\n</ul>\n<p>The page name source uses an extra field. This page type is only allowed under the <em>Social links folder</em> page type, and its <strong>URL pattern </strong>is empty. Optionally, the page type is decorated with <em>icon-arrow-right-top-square</em>&nbsp;in the content tree.</p>\n<h4>Office location folder</h4>\n<ul>\n  <li><strong>FolderName </strong>(TEXT data type with size 100, <strong>required</strong>, <em>Folder name</em> caption)</li>\n</ul>\n<p>The page name source uses an extra field. This page type is only allowed under the <em>Contact Section </em>page type, and its <strong>URL pattern </strong>is empty. Optionally, the page type is decorated with <em>icon-map</em>&nbsp;in the content tree.</p>\n<h4>Map Location</h4>\n<ul>\n  <li><strong>Latitude </strong>(FLOATING-POINT NUMBER data type, default value 0, <strong>required</strong>, <em>Latitude </em>caption)</li>\n  <li><strong>Longitude </strong>(FLOATING-POINT NUMBER data type, default value 0,&nbsp;<strong>required</strong>,&nbsp;<em>Longitude </em>caption)</li>\n  <li><strong>Tooltip</strong> (TEXT data type with size 300, <strong>required</strong>, <em>Tooltip text</em>&nbsp;caption)</li>\n</ul>\n<p>This page type uses an extra field as its page name source field, and it is only allowed under the <em>Office location folder</em>&nbsp;page type. The <strong>URL pattern </strong>field is empty. Optionally, the page type is decorated with <em>icon-map-marker</em>&nbsp;in the content tree.</p>\n<h3>2. Generate the code files of the page types</h3>\n<p>After you have created all these page types, you can generate their code in bulk. &nbsp;You will use these code files to retrieve content from pages of these types in your <em>Medio Clinic</em> MVC application.&nbsp;</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"51765e0c-4fb4-4e15-8393-9c821a758fd2","_parentId":"fd332bba-d0c2-4991-80ea-14e5dacba923","_type":"component","title":"Task: Create page types to hold your content","displayTitle":"Task: Create page types to hold your content"},{"body":"<p>You'll need to add some content to the website so you have some data to work with during the remainder of the course. Create the pages described below in your site's content tree. To get the text and images used by the training site's pages, download and unpack the <a data-asset-id=\"978188eb-3819-44f0-9a1a-5c36b01f29cc\" href=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/741bdbed-c049-4527-9dbe-b04355ce1388/MedioClinicContent.zip\">MedioClinicContent.zip</a> file.</p>\n<p>In later parts of the course, you will learn how to display this data on the website using best practices for Kentico MVC development.</p>\n<div class=\"infobox note\"><p>Please note that the content tree in the screenshots also contains the <em>Menu items </em>section of pages. You will add menu functionality and the related pages later in this course.</p></div>\n<h2>Home</h2>\n<p>When complete, your Home<strong> </strong>page (<em>Home Section</em> page type) could look like this:</p>\n<figure data-asset-id=\"681c6b2c-df72-4f55-b353-4ef274789eaa\" data-image-id=\"681c6b2c-df72-4f55-b353-4ef274789eaa\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b0c8ba27-fd93-41c5-9a77-681970da09a0/mvc-adding-content-to-pages2.png\" data-asset-id=\"681c6b2c-df72-4f55-b353-4ef274789eaa\" data-image-id=\"681c6b2c-df72-4f55-b353-4ef274789eaa\" alt=\"\"></figure>\n<h3>Company service pages</h3>\n<p>Add the following service pages (<em>Company Service</em> page type) under the <em>Home</em> page: Cardio Therapy, Emergency Services, Medical Consultancy.</p>\n<p>When complete, the service pages could look like this:</p>\n<figure data-asset-id=\"918a608d-bfcb-481b-a25d-4b10489ff472\" data-image-id=\"918a608d-bfcb-481b-a25d-4b10489ff472\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c89c185f-63a5-4a12-9093-cfe46b44456a/mvc-adding-content-to-pages3.png\" data-asset-id=\"918a608d-bfcb-481b-a25d-4b10489ff472\" data-image-id=\"918a608d-bfcb-481b-a25d-4b10489ff472\" alt=\"\"></figure>\n<h2>Doctors&nbsp;</h2>\n<p>When complete, the page that lists doctors (<em>Doctor Section</em> page type) could look like this:</p>\n<figure data-asset-id=\"eb2671af-34fc-4e9d-bc9f-1d00233faac4\" data-image-id=\"eb2671af-34fc-4e9d-bc9f-1d00233faac4\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/533f8a5a-53f6-4ca1-b72c-98bae417435c/mvc-adding-content-to-pages4.png\" data-asset-id=\"eb2671af-34fc-4e9d-bc9f-1d00233faac4\" data-image-id=\"eb2671af-34fc-4e9d-bc9f-1d00233faac4\" alt=\"\"></figure>\n<h3>Doctor profile pages</h3>\n<p>Add the following doctor pages (<em>Doctor</em> page type) under the <em>Doctors</em> page: Doe, Joplin, Piaf, Snow, Sparrow, Vick. Later in the course, you will use these doctors to create a listing page in your MVC application.</p>\n<p>When complete, your doctor pages could look like this:</p>\n<figure data-asset-id=\"0b6a22f7-80fd-4b43-8145-962a3d5597db\" data-image-id=\"0b6a22f7-80fd-4b43-8145-962a3d5597db\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3a2b931c-f314-494a-9df7-ac2b4e48b9ae/mvc-adding-content-to-pages5.png\" data-asset-id=\"0b6a22f7-80fd-4b43-8145-962a3d5597db\" data-image-id=\"0b6a22f7-80fd-4b43-8145-962a3d5597db\" alt=\"\"></figure>\n<h2>Contact us</h2>\n<p>When complete,&nbsp;your&nbsp;Contact us page (<em>Contact Section</em> page type) could look like this:</p>\n<figure data-asset-id=\"75464141-47e6-4b1e-ac69-a933a8fcfdfe\" data-image-id=\"75464141-47e6-4b1e-ac69-a933a8fcfdfe\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ef4c473a-4625-45a4-91cf-4fc03d5f2506/mvc-adding-content-to-pages6.png\" data-asset-id=\"75464141-47e6-4b1e-ac69-a933a8fcfdfe\" data-image-id=\"75464141-47e6-4b1e-ac69-a933a8fcfdfe\" alt=\"\"></figure>\n<h3>Medio Clinic</h3>\n<p>Add a Medio Clinic page (<em>Company</em>&nbsp;page type) under the <em>Contact us</em> page.&nbsp;</p>\n<p>When complete, your&nbsp;Medio Clinic&nbsp;page could look like this:</p>\n<figure data-asset-id=\"aa43769b-5c0b-448b-8780-cdc5c8817ec1\" data-image-id=\"aa43769b-5c0b-448b-8780-cdc5c8817ec1\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f45d6dd6-f237-49a2-8546-202dd87c148e/mvc-adding-content-to-pages7.png\" data-asset-id=\"aa43769b-5c0b-448b-8780-cdc5c8817ec1\" data-image-id=\"aa43769b-5c0b-448b-8780-cdc5c8817ec1\" alt=\"\"></figure>\n<h3>Office locations</h3>\n<p>Add an Office locations page (<em>Office location folder</em>&nbsp;page type) under the <em>Contact us</em> page.&nbsp;</p>\n<p>When complete, your&nbsp;Office locations&nbsp;page could look like this:</p>\n<figure data-asset-id=\"c9f6e92f-7eb4-4982-b1e7-618436286d28\" data-image-id=\"c9f6e92f-7eb4-4982-b1e7-618436286d28\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/71cb9d8b-7966-4a20-8ccb-9179cde23d47/mvc-adding-content-to-pages8.png\" data-asset-id=\"c9f6e92f-7eb4-4982-b1e7-618436286d28\" data-image-id=\"c9f6e92f-7eb4-4982-b1e7-618436286d28\" alt=\"\"></figure>\n<h4>Office location pages</h4>\n<p>Add the Boston and Bedford office location pages (<em>Map location</em> page type) under the <em>Office locations</em> page.</p>\n<p>When complete, your office location pages could look like this:</p>\n<figure data-asset-id=\"c3f45bd2-4599-44f6-9f0c-ef24a2533a80\" data-image-id=\"c3f45bd2-4599-44f6-9f0c-ef24a2533a80\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e4abb34e-ff1a-4482-9ab8-5e25ac28087c/mvc-adding-content-to-pages9.png\" data-asset-id=\"c3f45bd2-4599-44f6-9f0c-ef24a2533a80\" data-image-id=\"c3f45bd2-4599-44f6-9f0c-ef24a2533a80\" alt=\"\"></figure>\n<h3>Social links</h3>\n<p>Add a Social links page (<em>Social links folder</em>&nbsp;page type) under the <em>Contact us</em> page.&nbsp;</p>\n<p>When complete, your&nbsp;Social links page could look like this:</p>\n<figure data-asset-id=\"9c680b9a-488e-4ea0-8ee7-e405eab57d6e\" data-image-id=\"9c680b9a-488e-4ea0-8ee7-e405eab57d6e\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ff4c91b9-32ee-4a79-b21b-665988b13677/mvc-adding-content-to-pages10.png\" data-asset-id=\"9c680b9a-488e-4ea0-8ee7-e405eab57d6e\" data-image-id=\"9c680b9a-488e-4ea0-8ee7-e405eab57d6e\" alt=\"\"></figure>\n<h4>Link pages</h4>\n<p>Add the Facebook and Twitter link pages (<em>Social link</em>&nbsp;page type) under the <em>Social links</em> page.</p>\n<p>When complete, your social link pages could look like this:</p>\n<figure data-asset-id=\"a8732f58-2bfd-45a8-8f11-f6682cbd8dc8\" data-image-id=\"a8732f58-2bfd-45a8-8f11-f6682cbd8dc8\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/0e290d9e-2c39-4cf5-8661-f85b5432c6e1/mvc-adding-content-to-pages11.png\" data-asset-id=\"a8732f58-2bfd-45a8-8f11-f6682cbd8dc8\" data-image-id=\"a8732f58-2bfd-45a8-8f11-f6682cbd8dc8\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"dd06634a-3040-476d-9410-451e782f519d","_parentId":"f39b12bb-631c-445b-aee2-849e06511469","_type":"component","title":"Task: Adding content to the website","displayTitle":"Task: Adding content to the website"},{"body":"<p>Your editors will create new pages in the content tree using the available page types. You can create new or adjust existing page types in the <strong>Page types </strong>application.</p>\n<p>The following step-by-step demo demonstrates the creation of the <strong>Doctor</strong> page type, which will hold information about doctors working for the Medio Clinic. The demo shows you how to set various values for fields in the new page type wizard, such as the data type or form control.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To create a new page type, click the <strong>New page type</strong> button.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/028da2fe-66d6-4baa-89c9-ebb17f17355b/CreatingPageTypes1.png","alt":"CreatingPageTypes1.png"},"strapline":""},{"title":"","body":"<p>In Step 1, fill in the following values:</p>\n<ul>\n  <li><strong>Page type display name</strong>: Doctor</li>\n  <li><strong>Namespace</strong>: Training</li>\n  <li><strong>Name</strong>: Doctor</li>\n</ul>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/78f2b9c5-692d-4081-a033-64a4e3e6d82c/CreatingPageTypes2.png","alt":"CreatingPageTypes2.png"},"strapline":""},{"title":"","body":"<p>In Step 2, leave the default values.&nbsp;</p>\n<div class=\"infobox note\"><p>Make sure the <strong>Content-only page type</strong> checkbox is selected. This ensures that any pages based on this page type will be content-only. That means the pages will hold data added by editors, support workflows and versioning, but will not necessarily represent an actual page on the live site. Depending on how you set up the system, editors may also be able to preview the live site page content within the administration interface.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/bb616af2-7ac6-48ee-b9f6-a2a6bb757da0/CreatingPageTypes3.png","alt":"CreatingPageTypes3.png"},"strapline":""},{"title":"","body":"<p>In Step 3, click the<strong> New field</strong> button and fill in the following values:</p>\n<ul>\n  <li><strong>Field name</strong>: FirstName</li>\n  <li><strong>Required</strong>: (enabled)</li>\n  <li><strong>Field caption</strong>: First name</li>\n</ul>\n<p>Leave default values in the other field settings, and hit <strong>Save</strong>. The wizard creates a new <em>FirstName</em> text field in your page type.</p>\n<p>Repeat the same process and create fields which will hold values for the doctor's last name, degree, and specialty.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/56735639-dad7-41ae-a201-69c4f0e57c59/MVCCreatingPageTypes4.png","alt":"MVCCreatingPageTypes4.png"},"strapline":""},{"title":"","body":"<p>To create a field which will hold a doctor's profile image, create a new field with the following values:</p>\n<ul>\n  <li><strong>Field name</strong>: Image</li>\n  <li><strong>Data type</strong>: File</li>\n  <li><strong>Required</strong>: (enabled)</li>\n  <li><strong>Field caption</strong>: Photo</li>\n</ul>\n<p>Leave default values in the other field settings, and <strong>Save</strong> the field. You can use the <strong>Up </strong>arrow next to the <strong>Delete</strong> button to move the <strong>Image</strong> field above the <strong>Specialty </strong>field.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5b67cd6e-e1bb-4647-9d2b-ff6cf27f7259/MVCCreatingPageTypes5.png","alt":"MVCCreatingPageTypes5.png"},"strapline":""},{"title":"","body":"<p>To add a field which will hold a doctor's biography, click the <strong>New field</strong> button and fill in the following values:</p>\n<ul>\n  <li><strong>Field name</strong>: Bio</li>\n  <li><strong>Data type</strong>: Long text</li>\n  <li><strong>Required</strong>: (disabled)</li>\n  <li><strong>Field caption</strong>: Bio</li>\n</ul>\n<div class=\"infobox note\"><p>The <strong>Long text</strong> data type automatically selects the <strong>Rich text</strong> <strong>editor</strong> form control. This means your website editors will be able to style the text, e.g., use bolding or italics, format text as headings, or create lists and hyperlinks.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ffc7cd10-efd7-45b5-9b5b-1bae063810c9/MVCCreatingPageTypes6.png","alt":"MVCCreatingPageTypes6.png"},"strapline":""},{"title":"","body":"<p>The field for a doctor's emergency shift will use a drop-down list editing interface. To create it, click <strong>New field</strong> and fill in the following values:</p>\n<ul>\n  <li><strong>Field</strong> <strong>name</strong>: EmergencyShift</li>\n  <li><strong>Data type</strong>: Integer number</li>\n  <li><strong>Required</strong>: (enabled)</li>\n  <li><strong>Field caption</strong>: Emergency shift</li>\n</ul>\n<p><em>(Continues on the next page)</em></p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5213e8c9-153f-4ee5-9e89-4599aa53e18c/MVCCreatingPageTypes7.png","alt":"MVCCreatingPageTypes7.png"},"strapline":""},{"title":"","body":"<p><em>(DoctorEmergencyShift field - continued)</em></p>\n<ul>\n  <li><strong>Form control</strong>: Drop-down list</li>\n  <li><strong>Data source</strong>: select the <em>List of options</em> radio button</li>\n  <li><strong>Data source</strong> text area:&nbsp;<br>\n1;Monday<br>\n2;Tuesday<br>\n3;Wednesday<br>\n4;Thursday<br>\n5;Friday<br>\n6;Saturday<br>\n7;Sunday</li>\n</ul>\n<p>Click <strong>Save</strong>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/98ba644f-f08d-4a05-a76b-45d45a06943d/MVCCreatingPageTypes8.png","alt":"MVCCreatingPageTypes8.png"},"strapline":""},{"title":"","body":"<p>In Step 4, change the default <strong>Page name source</strong> value to <em>LastName</em>, and click the <strong>Next</strong> button.</p>\n<div class=\"infobox note\"><p>You can later change the <em>page name </em>and <em>page alias </em>source fields on the page type's <strong>Fields</strong> tab.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a36a0f80-9554-4819-99c9-464bb3f04cad/MVCCreatingPageTypes9.png","alt":"MVCCreatingPageTypes9.png"},"strapline":""},{"title":"","body":"<p>In Step 5, select the <em>Root (CMS.Root)</em> allowed parent page type and click the <strong>Remove selected</strong> button. Then use the <strong>Add page types</strong> button and select <em>Doctor Section</em> <em>(Training.DoctorSection)</em> from the list of available page types. This will ensure that editors can create pages with the Doctor page type only under the <em>Doctor Section</em> page type.&nbsp;</p>\n<div class=\"infobox note\"><p>You can later change the allowed parent and child page types on the page type's <strong>Allowed types </strong>tab.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/fd41be4e-b545-4475-a296-906aed32c95f/MVCCreatingPageTypes10.png","alt":"MVCCreatingPageTypes10.png"},"strapline":""},{"title":"","body":"<p>In Step 6, leave the default site (<em>MedioClinic</em>) and click the <strong>Next</strong> button.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/564d0f33-13e6-4fac-b5c4-e3779e566b48/CreatingPageTypes11.png","alt":"CreatingPageTypes11.png"},"strapline":""},{"title":"","body":"<p>In Step 7, the wizard informs you of the actions it has performed. Click the&nbsp;<strong>Finish</strong>&nbsp;button to complete the page type wizard.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8228ec0b-01e7-4758-bbb7-72b2b37b8ddc/CreatingPageTypes12.png","alt":"CreatingPageTypes12.png"},"strapline":""},{"title":"","body":"<p>On the page type's <strong>General</strong> tab, set the following values:</p>\n<ul>\n  <li><strong>URL pattern</strong>: &nbsp;[empty]</li>\n  <li><strong>Page type icon:</strong><em> icon-user-frame</em></li>\n</ul>\n<p>Click <strong>Save</strong>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/24227f20-6cd3-465d-b4e7-1ca68d563407/MVCCreatingPageTypes13.png","alt":"MVCCreatingPageTypes13.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c5f16856-e5e1-454a-bdc3-7afe75f734ef","_parentId":"fec9f756-bf0f-4695-a0ab-d9201071050b","_type":"component","title":"Demo: Creating page types","displayTitle":"Demo: Creating page types"},{"body":"<p>Your editors will create new pages in the content tree using the available page types. To make the content tree easy to navigate around, it helps to split it into sections. Each page which defines a section parent page needs its page type, which you can create in the&nbsp;<strong>Page types&nbsp;</strong>application.</p>\n<p>The following step-by-step demo demonstrates the creation of the <strong>Doctor Section</strong> page type. Content editors will use it to define the <em>Doctor Section</em> for pages of Medio Clinic doctors. The <em>Doctor Section</em> page type will also define the presentation <strong>URL</strong> for this page and all of the doctor child pages within the administration interface. This short demo shows you how to prepare page types for your sections, and how to set the&nbsp;<strong>URL pattern</strong>.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To create a new page type, click the&nbsp;<strong>New page type</strong>&nbsp;button.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/857a62dc-1789-4a27-aa1d-fb2bd8ff56ba/MVCCreatingPageTypesDoctorSection1.png","alt":"MVCCreatingPageTypesDoctorSection1.png"},"strapline":""},{"title":"","body":"<p>In Step 1, fill in the following values:</p>\n<ul>\n  <li><strong>Page type display name</strong>: Doctor Section</li>\n  <li><strong>Namespace</strong>: Training</li>\n  <li><strong>Name</strong>: DoctorSection</li>\n</ul>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3d009a81-3481-4098-8881-3e2514a5f1ae/MVCCreatingPageTypesDoctorSection2.png","alt":"MVCCreatingPageTypesDoctorSection2.png"},"strapline":""},{"title":"","body":"<p>In Step 2, leave the default values.&nbsp;</p>\n<div class=\"infobox note\"><p>Make sure the <strong>Content-only page type</strong> checkbox is selected. This ensures that any pages based on this page type will be content-only. That means the pages will hold data added by editors, support workflows and versioning, but will not necessarily represent an actual page on the live site. Depending on how you set up the system, editors may also be able to preview the live site page content within the administration interface.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1d51e639-bda7-4434-b41f-7b71bccb1892/MVCCreatingPageTypesDoctorSection3.png","alt":"MVCCreatingPageTypesDoctorSection3.png"},"strapline":""},{"title":"","body":"<p>In Step 3, click the<strong>&nbsp;New field</strong>&nbsp;button and fill in the following values:</p>\n<ul>\n  <li><strong>Field name</strong>: Title</li>\n  <li><strong>Required</strong>: (enabled)</li>\n  <li><strong>Field caption</strong>: Title</li>\n</ul>\n<p>Leave the default values in the other field settings, and hit&nbsp;<strong>Save</strong>. The wizard creates a new&nbsp;<em>Title </em>text field in your page type.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4385961e-0360-4d66-9ae6-15340c072abb/MVCCreatingPageTypesDoctorSection4.png","alt":"MVCCreatingPageTypesDoctorSection4.png"},"strapline":""},{"title":"","body":"<p>In Step 4, make sure the default&nbsp;<strong>Page name source</strong>&nbsp;value is set to&nbsp;<em>Title</em>, and click the&nbsp;<strong>Next</strong>&nbsp;button.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c940e12c-fc01-4eb9-9221-d6079593b8d9/MVCCreatingPageTypesDoctorSection5.png","alt":"MVCCreatingPageTypesDoctorSection5.png"},"strapline":""},{"title":"","body":"<p>In Step 5, leave <em>Root (CMS.Root) </em>as the only allowed parent page type and click <strong>Next</strong>.</p>\n<div class=\"infobox note\"><p>You can later change the allowed parent and child page types on the page type's <strong>Allowed types </strong>tab.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/2d25abf7-267a-481b-839b-1df38bffcaa7/MVCCreatingPageTypesDoctorSection6.png","alt":"MVCCreatingPageTypesDoctorSection6.png"},"strapline":""},{"title":"","body":"<p>In Step 7, the wizard informs you of the actions it has performed. Click the&nbsp;<strong>Finish</strong>&nbsp;button to complete the page type wizard.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8228ec0b-01e7-4758-bbb7-72b2b37b8ddc/CreatingPageTypes12.png","alt":"CreatingPageTypes12.png"},"strapline":""},{"title":"","body":"<p>On the page type's&nbsp;<strong>General</strong>&nbsp;tab, set the following values:</p>\n<ul>\n  <li><strong>URL pattern</strong>: /{%DocumentCulture%}/Doctors</li>\n  <li><strong>Page type icon:</strong><em>&nbsp;icon-box</em></li>\n</ul>\n<p>Click&nbsp;<strong>Save</strong>.</p>\n<p>Using this page type, your editors will now be able to create the Doctor section, which will hold all the pages representing individual doctors.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b4845462-38f3-4fd2-be5c-8f1a03a3ecc3/MVCCreatingPageTypesDoctorSection7.png","alt":"MVCCreatingPageTypesDoctorSection7.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"113c2376-4a6d-4141-b4f3-9b0dfb7f3e2c","_parentId":"fec9f756-bf0f-4695-a0ab-d9201071050b","_type":"component","title":"Demo: Creating the Doctor Section","displayTitle":"Demo: Creating the Doctor Section"},{"body":"<p>To add some pages based on the page types you have just created, switch to the <strong>Pages </strong>application. You can add pages using the <strong>New </strong>button above the content tree. Clicking the button displays a list of page types that are available for creating pages within your current location (under the selected page in the content tree).</p>\n<p>The following animation shows adding of the <strong>Home </strong>page based on the<em> Home Section </em>page type.</p>\n<figure data-asset-id=\"d6f11a90-6820-4df1-be4a-0782b3c746bd\" data-image-id=\"d6f11a90-6820-4df1-be4a-0782b3c746bd\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8a3d826a-06be-4eca-83a4-899df84005c2/adding%20content%20to%20pages.gif\" data-asset-id=\"d6f11a90-6820-4df1-be4a-0782b3c746bd\" data-image-id=\"d6f11a90-6820-4df1-be4a-0782b3c746bd\" alt=\"\"></figure>\n<p>You can repeat the same process and add the rest of the website's content.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"f452a8d8-480f-4b17-9320-fa7bb2780de2","_parentId":"60f3a18a-c122-4ca0-802a-feff99c9c2d6","_type":"component","title":"Demo: Adding content to pages","displayTitle":"Demo: Adding content to pages"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select the true statement about content-only page types and pages created from them.</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Pages based on content-only page types directly represent individual pages on the live site. That's why they are suitable for MVC sites.</p>","_shouldBeSelected":false,"feedback":"<p>No, content-only pages do not always correspond to pages on the live site. The presentation of the stored content is handled by MVC views on the live site, and that's one of the reasons why they are suitable for MVC sites.</p>"},{"text":"<p>Content-only pages are based on traditional Portal Engine page templates.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Content-only pages are not based on templates. They provide a simple field-based editing structure for content, and their presentation is handled by corresponding MVC views on the live site.</p>"},{"text":"<p>Content-only page types store data within defined fields and allow editors to create pages in the content tree in the Pages application.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Content-only pages do not support workflow and versioning.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. You can apply workflows and versioning to pages based on content-only page types, and that's one of the reasons they are suitable for storing the content of MVC sites.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! Content-only page types store data within defined fields, and editors use them to create pages in the Pages application.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2c397d75-743c-4a1f-b77b-cd18a3878809","_parentId":"b1c6ccca-9ad0-4c5a-bdf1-f91c884e5051","_type":"component","title":"Progress-check: Content-only page types","displayTitle":"Progress-check: Content-only page types"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select which statement about the URL patterns of content-only page types is <strong>NOT </strong>true.</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>You need to specify the URL pattern to allow editors to create hyperlinks to pages of the given type using the built-in editor.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. This is one of the true statements.</p>"},{"text":"<p>The URL pattern allows editors to preview pages in the content tree.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. This is one of the true statements.</p>"},{"text":"<p>Having a defined URL pattern makes it possible for editors to open specific pages on the live site by clicking the Live site button in the application list of the administration interface.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. This is one of the true statements.</p>"},{"text":"<p>All content-only page types need to have a specified URL pattern.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. Not all content-only page types need to have a URL pattern. For example, you don't need to specify the URL pattern for page types meant to store partial content, which is then aggregated on another page.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"18b94a35-2ff9-42ea-a5fd-868a5aead590","_parentId":"b1c6ccca-9ad0-4c5a-bdf1-f91c884e5051","_type":"component","title":"Progress-check: Url Pattern","displayTitle":"Progress-check: Url Pattern"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select which statement is <strong>NOT </strong>true about the database tables used to store page content.</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The CMS_Document database table stores content defined by editors through the page builder.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. This statement is correct.</p>"},{"text":"<p>The CMS_Tree table stores information about the positions of pages within the content tree.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. This statement is correct.</p>"},{"text":"<p>The system creates a separate CMS_Tree and &nbsp;CMS_Document table for each culture in which the site's content is available, e.g., there are CMS_Tree_EN and CMS_Tree_ES tables to handle English and Spanish cultures.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>The data added by content editors into page fields is stored within a different database table for each page type.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. This statement is correct. The values of page fields are stored in a dedicated \"coupled data\" table for each page type.</p>"}],"_feedback":{"title":"","correct":"<p>Correct. Only one CMS_Tree and one CMS_Document table exists in the Kentico database. The CMS_Document table stores a separate record for each culture version of a page, and the CMS_Tree records are not affected by cultures.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c041e122-5e28-46a7-a875-56e4f71a04ef","_parentId":"b1c6ccca-9ad0-4c5a-bdf1-f91c884e5051","_type":"component","title":"Progress-check: Database tables","displayTitle":"Progress-check: Database tables"},{"body":"<p>Congratulations on completing the second section of the course! You now know how Kentico stores data in the content tree. You have also prepared the content of your training website.</p>\n<p>You have learned:</p>\n<ul>\n  <li>About content-only pages types and their underlying database structure</li>\n  <li>How to create page types with various types of fields and form controls</li>\n  <li>How to add and manage the website's content in the Pages application</li>\n</ul>\n<p>Ready to go to the next section and learn about setting up multilingual content in the administration interface? <strong>Click the back button&nbsp;</strong>(<strong>&lt;</strong>)<strong>&nbsp;in the top left, and continue with the course!</strong></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6c7cde2b-afe5-4dde-90aa-7c21bff8387e","_parentId":"2faa3738-5ab3-4575-af69-dc265388b086","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>How <strong>localization</strong> and <strong>multilingual content</strong> work in the <strong>administration interface</strong> for the Kentico MVC development model</li>\n  <li>What <strong>options</strong> you can use to <strong>translate website content</strong></li>\n  <li>How editors add <strong>language variants of pages</strong></li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Assigning a Spanish culture to your website in the administration interface</li>\n  <li>Adding the Medio Clinic <em>Home </em>page in the Spanish culture</li>\n  <li>Adding resource strings to localize short texts displayed on the website</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fecb5c20-4cd3-40ce-a850-e377f6b76602","_parentId":"d0c5167b-4a92-424b-b997-2b1107a4c6cf","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<h2>Multicultural MVC websites</h2>\n<p>The Kentico MVC development model allows running of multicultural websites. It provides a rich feature set and makes it easy to manage and serve content in different languages (cultures), both in the administration interface and on the live site. Kentico supports several approaches to localization, from long structured content stored as pages, to short, individual strings which for example serve as captions or title elements displayed in the footer of your website.</p>\n<h2>Localizing content of pages</h2>\n<p>Before website editors can start localizing content, developers or administrators need to assign the required cultures to the site (this can be done in the <strong>Sites</strong> application). By default, the system contains all commonly used cultures, but you can extend the list in the <strong>Localization</strong> application on the <strong>Cultures</strong> tab if necessary. These cultures do not automatically provide any actual translations of text, they only determine which language/culture options are available for the website.</p>\n<p>Multilingual content of pages can be managed in the <strong>Pages</strong> application. A site with multiple cultures stores different language variants of content in separate versions of pages in the content tree. The website editors can translate content themselves, or they can use connectors to translation services and assign translation tasks to get the content in the languages they need.</p>\n<h3>Available translation services</h3>\n<p>The integrated translation services take content prepared in one language and create its variant in another language. To create the multilingual website, the \"translators\" don't need to edit the text in the Kentico administration interface. Kentico automatically ensures data transfer between the website pages and translation providers in the standardized XLIFF format.</p>\n<p>Machine services programmatically convert source text from one language to another (by default, Kentico provides services for <strong>Microsoft Translator</strong> and <strong>Google Translate</strong>). You can also connect your website to human translation services, such as the default <strong>Translations.com</strong> service. However, you are not limited to these three services. Kentico is a highly-customizable solution, and you can develop <a href=\"https://docs.kentico.com/k12/custom-development/miscellaneous-custom-development-tasks/developing-custom-translation-services\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom translation services</a>.</p>\n<p>The system also provides manual translation services that allow editors to <strong>send content for translation via email</strong>, or <strong>export the translation data</strong> to the file system. In both cases, the export package contains <em>.xlf</em>&nbsp;files.&nbsp;Once the content is translated, the packages need to be imported back to the system manually.</p>\n<p>Find out more about how <a href=\"https://docs.kentico.com/k12/multilingual-websites/configuring-translation-services/human-translation-services-email-translation\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">email</a> and <a href=\"https://docs.kentico.com/k12/multilingual-websites/configuring-translation-services/human-translation-services-manual-translation\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">manual</a> translation services work or how you can <a href=\"https://docs.kentico.com/k12/multilingual-websites/configuring-translation-services\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configure the translation services</a> in our documentation.</p>\n<h2>Editing multicultural content in the Pages application</h2>\n<p>With a correctly set <strong>URL pattern</strong> for page types, website editors can preview the default and other culture versions of pages in the content tree. Depending on the culture they are editing, website editors can also assign different workflows and submit different culture variants of the pages to culture-specific approval processes.</p>\n<div class=\"infobox note\"><p>In the training website for this course, we use the <em>{%DocumentCulture%}</em> macro in page type URL patterns. This macro resolves into the culture code of the language selected in the Pages application, which ensures that the URL contains a culture prefix and the correct language variant is displayed in the preview.</p></div>\n<h2>Localizing individual strings on the website</h2>\n<p>Not all content on the website needs to be stored in the <strong>Pages </strong>application. Reusable pieces of text, like contact details, captions, titles, or other individual strings on the live site don't need to be added or edited in the website's content tree.</p>\n<p>With the Kentico MVC development model, you can use the standard .NET approach and localize individual pieces of text using resource strings, stored in either <em>.resx</em> files or the database.</p>\n<div class=\"infobox note\"><p>If you are not familiar with the .NET concept of <strong>string resources</strong>, they are simple <em>key/value pairs</em> of string data. Each key can have a different value for a specific culture.</p>\n<p>With Kentico you can add the string keys into your website's content, either by using special expression within text, or by calling the appropriate API in code. The strings then resolve into the correct value based on the relevant culture context.</p></div>\n<h3>Working with resource strings</h3>\n<p>Storing resource strings within resource files has a considerable disadvantage: if you - or even the website editors - want to change anything on a running production site, you need to update the related strings in the files, and then redeploy the website.</p>\n<p>Kentico provides you with a great option - editors can manage resource strings directly in the administration interface. Editors with special permissions (<strong>Localize strings </strong>permission for the <strong>Localization</strong> module) can create the strings in the <strong>Localization </strong>application on the <strong>Resource strings</strong> tab. Kentico stores strings added through the administration interface in the website's database (in the <em>CMS_ResourceString</em> and <em>CMS_ResourceTranslation</em> tables).&nbsp;</p>\n<p>You can combine both approaches and the system loads resource strings from all available sources (by default, strings in the database have priority over strings in resource files).</p>\n<p>Find out more about working with resource strings in the Kentico <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/working-with-resource-strings\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.</p>\n<h2>Localizing the administration interface</h2>\n<p>Kentico also provides the option to localize the administration interface, so that users feel at home when working with their website. Users can set the culture of the admin UI in their profiles. The interface culture determines not only the language of text in the interface, but also other factors like numeric and date formats.&nbsp;</p>\n<p>By default, the Kentico installation only provides an English (\"en-us\" culture) pack for the user interface texts. However, you can obtain packs for other languages from the Kentico community, or prepare your own translations of the used resource files.</p>\n<p>Kentico allows for managing content in any language, including double-byte (eastern) languages, such as Chinese. All content is stored and published in UNICODE.</p>\n<p>Find out more about setting up a multicultural UI in our&nbsp;<a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.</p>\n<h2>Serving multicultural content on the live site</h2>\n<p>Adding culture-specific routes, setting the current culture context, and retrieving multicultural page content through the Kentico API will be covered later in the course. So let's just get a basic overview to complete the picture of how Kentico MVC websites handle multicultural content.</p>\n<ul>\n  <li>The MVC development model allows creating of URLs with culture prefixes, which can help your website with SEO.</li>\n  <li>You can develop functionality that allows site visitors to manually switch between languages.</li>\n  <li>You need to ensure that you load the correct culture versions of pages when retrieving content in your website's code.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fbe8ccba-374c-4e9f-8b62-3ab667e4e3a6","_parentId":"99c87c4a-fca6-4690-9792-bd2014da7713","_type":"component","title":"Multicultural sites","displayTitle":"Multicultural sites"},{"body":"<h2>1. Adding a culture to the Medio Clinic site</h2>\n<p>Before you start adding language variants of the Medio Clinic website's pages, you need to assign the required culture to the site. For the purposes of this training course, you will be working with the Spanish culture.</p>\n<p>At the end of the first part of this exercise, your <em>Site</em>'s <strong>Cultures</strong> tab should look like the following screenshot:</p>\n<figure data-asset-id=\"117dd5d2-ffe1-46c3-9f4f-45fba018cdc6\" data-image-id=\"117dd5d2-ffe1-46c3-9f4f-45fba018cdc6\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c715e7bc-ab57-4d9f-815b-3a35a746b55b/mvc-adding-culture-task-final.png\" data-asset-id=\"117dd5d2-ffe1-46c3-9f4f-45fba018cdc6\" data-image-id=\"117dd5d2-ffe1-46c3-9f4f-45fba018cdc6\" alt=\"\"></figure>\n<h2>2. Adding the Spanish version of the Home page</h2>\n<p>With the culture assigned to your website, you can start adding language variants to the pages in the content tree. Create a Spanish version of the Home page and the child Medio Clinic service pages, with content based on the sections below.</p>\n<p>You can download all the text for the Home page, Service pages and the resource strings (following part) in the <a data-asset-id=\"ebc9547e-dfbd-441a-940a-31e62867cfc8\" href=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/82dcb24e-9d89-4cce-a647-7eb00279f548/medio-clinic-spanish-texts.txt\">medio-clinic-spanish-texts.txt</a> file.</p>\n<h3>Home page</h3>\n<p><strong>Name</strong>: <em>Inicio</em></p>\n<p><strong>Title</strong>: <em>Bienvenidos a Medio clinic</em></p>\n<p><strong>Text</strong>: <em>El objetivo de nuestra clínica es brindar la mejor atención médica. Para una salud integral en todo momento, también es necesario mantener un estilo de vida saludable.</em></p>\n<p><strong>Link button text</strong>: <em>Nuestros doctores</em></p>\n<h3>Service pages</h3>\n<h4>Cardio Therapy</h4>\n<p><strong>Header</strong>: <em>Terapia de cardio</em></p>\n<p><strong>Icon</strong>: cardio-therapy.png</p>\n<p><strong>Text</strong>: <em>Nuestros cardiólogos expertos le brindan las herramientas que necesita para vivir una vida saludable. Nos comprometemos a ayudar a nuestros pacientes a recuperar el más alto nivel de salud cardiovascular, rendimiento y bienestar.</em></p>\n<h4>Emergency services</h4>\n<p><strong>Header</strong>: <em>Servicios de emergencia</em></p>\n<p><strong>Icon</strong>: emergency-services.png</p>\n<p><strong>Text</strong>: <em>Abierto todos los días, las 24 horas, ofrecemos una gama completa de servicios médicos de emergencia para miles de pacientes cada año. Nuestro galardonado Departamento de Emergencia está dirigido por un equipo de médicos destacados, enfermeras altamente calificadas y profesionales de la salud que operan en instalaciones de última generación.</em></p>\n<h4>Medical Consultancy</h4>\n<p><strong>Header</strong>: <em>Consultoria Medica</em></p>\n<p><strong>Icon</strong>: medical-consultancy.png</p>\n<p><strong>Text</strong>: <em>Con nuestra amplia gama de expertos en la materia, creemos MEDIO clinic puede proporcionar soluciones innovadoras y economicas, servicios y conocimientos que se requieren para sus necesidades de atención médica. Nuestro equipo médico actualmente consiste de 20 médicos certificados por la junta con amplia experiencia en sus campos.</em></p>\n<p>At the end of this part of the exercise, the Home page and its child pages should have their Spanish variant. Your content tree should look like the following screenshot:</p>\n<figure data-asset-id=\"77277287-9665-456e-a2d6-750656f568bf\" data-image-id=\"77277287-9665-456e-a2d6-750656f568bf\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/adcea3cc-1a92-455c-a63e-07adcc9df6c7/mvc-adding-language-variant-task-final.png\" data-asset-id=\"77277287-9665-456e-a2d6-750656f568bf\" data-image-id=\"77277287-9665-456e-a2d6-750656f568bf\" alt=\"\"></figure>\n<h2>3. Adding the resource strings</h2>\n<p>To localize short texts used within the site's general layout, add the following resource strings.</p>\n<h3>Follow Us</h3>\n<p><strong>Key</strong>: Footer.FollowUs<br>\n<strong>English - United States (default)</strong>: Follow Us<br>\n<strong>Spanish - Spain</strong>: Siguenos</p>\n<h3>Contact</h3>\n<p><strong>Key</strong>:&nbsp;Footer.Contact<br>\n<strong>English - United States (default)</strong>: Contact<br>\n<strong>Spanish - Spain</strong>: Contacto</p>\n<h3>Email</h3>\n<p><strong>Key</strong>:&nbsp;Footer.Email<br>\n<strong>English - United States (default)</strong>: E-mail<br>\n<strong>Spanish - Spain</strong>: Correo electronico (e-mail)</p>\n<h3>Navigation</h3>\n<p><strong>Key</strong>:&nbsp;Footer.Navigation<br>\n<strong>English - United States (default)</strong>: Navigation<br>\n<strong>Spanish - Spain</strong>: Navegacion</p>\n<h3>Phone</h3>\n<p><strong>Key</strong>:&nbsp;Footer.Phone<br>\n<strong>English - United States (default)</strong>: Phone number<br>\n<strong>Spanish - Spain</strong>: Numero de telefono</p>\n<h3>Built-with disclaimer</h3>\n<p><strong>Key</strong>:&nbsp;Footer.BuildWithNote&nbsp;</p>\n<p><strong>English - United States (default)</strong>: Built with &lt;a href=\"http://materializecss.com\"&gt;Materialize&lt;/a&gt; for the MVC Developer training.<br>\n<strong>Spanish - Spain</strong>: Construido con &lt;a href=\"http://materializecss.com\"&gt;Materialize&lt;/a&gt; para el entrenamiento de desarrollador MVC.</p>\n<p>At the end of the third part of the exercise, your resource strings in the <strong>Localization </strong>application should like the following:</p>\n<p><br></p>\n<figure data-asset-id=\"1b6d55ca-04df-4a1a-a9bd-b1f193e6db93\" data-image-id=\"1b6d55ca-04df-4a1a-a9bd-b1f193e6db93\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/12b3340b-45f6-4ecf-a12f-c056f8847e56/mvc-adding-resource-strings-task-final.png\" data-asset-id=\"1b6d55ca-04df-4a1a-a9bd-b1f193e6db93\" data-image-id=\"1b6d55ca-04df-4a1a-a9bd-b1f193e6db93\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"641540f9-b2e1-43c3-a5ce-fc3a97ae0df3","_parentId":"c364abe4-3b7f-46ef-beeb-07fd159dd19f","_type":"component","title":"Exercise: Adding the multilingual content","displayTitle":"Exercise: Adding the multilingual content"},{"body":"<p>The following animation shows how to add a website culture in the <strong>Sites </strong>application. Alternatively, you can assign cultures to sites in the <strong>Localization</strong> application on the <strong>Cultures </strong>tab.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To assign another culture to your website:</p>\n<ol>\n  <li>Open the <strong>Sites</strong> application.</li>\n  <li>Edit your site.</li>\n  <li>Switch to the <strong>Cultures</strong> tab and click the <strong>Add cultures </strong>button.</li>\n  <li>Search for the culture you want to add. You can search for the language name, such as \"<em>Spanish</em>\" or \"<em>English</em>\", or for a specific culture localization, e.g., \"S<em>pain</em>\".</li>\n  <li>Select the culture and click the <strong>Select </strong>button to add the culture to your website.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5688cbb8-8942-4ae0-8f55-3d9b6bbdf6c5/adding%20culture%20to%20site.gif","alt":"adding culture to site.gif"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fb06cbb9-305b-486c-a4a7-4500d637e97f","_parentId":"4b9953ad-7a7e-4ab1-a95b-2d06ec52a956","_type":"component","title":"Demo: Adding a site culture","displayTitle":"Demo: Adding a site culture"},{"body":"<p>The following demo shows how to add a Spanish version of the <strong>Home</strong> page in the <strong>Pages</strong> application.</p>\n<p><br></p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the <strong>Pages</strong> application, select the page you want to translate to another culture, i.e., the <strong>Home </strong>page.</li>\n  <li>Click the <strong>Culture selector</strong> below the content tree and select the <em>Spanish </em>culture in the menu.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/2d1a9e9c-418e-41d0-a7ed-dd20893263aa/mvc-adding-spanish-page-variant1.png","alt":"mvc-adding-spanish-page-variant1.png"},"strapline":""},{"title":"","body":"<p>Select the <em>Create empty page</em> option and click the <strong>Create page</strong> button.&nbsp;</p>\n<div class=\"infobox note\"><p>When creating a culture version of a page, the following options are available:</p>\n<ul>\n  <li><strong>Create empty page</strong> - creates a new page of the same type, but without any content. The system creates the page version only after you save the new content for the first time.</li>\n  <li><strong>Copy content from another language</strong> - creates a copy of the page and populates it with content from the selected language version, e.g., English. If you select the <em>Save the new page before editing</em> check box, Kentico adds the new page immediately with the copied content. Until editors create and publish new content in the desired language, the copied content will be displayed on the live site when visitors request the given culture version of the page.</li>\n  <li><strong>Translate using translation service</strong> - the content of the language version will be provided by an external translation service. See how you can configure translation services for your website in our <a href=\"https://docs.kentico.com/k12/multilingual-websites/configuring-translation-services\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.</li>\n</ul></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1467f798-abd9-41ad-abcb-89955be88a2b/mvc-adding-spanish-page-variant2.png","alt":"mvc-adding-spanish-page-variant2.png"},"strapline":""},{"title":"","body":"<p>Note the status icon (&nbsp;</p>\n<figure data-asset-id=\"7073018f-7cd1-4e5c-8ca7-f25989e501ff\" data-image-id=\"7073018f-7cd1-4e5c-8ca7-f25989e501ff\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/521e0cd5-05a0-4120-9f32-4763f5ae4fc1/mvc-adding-spanish-page-variant5.png\" data-asset-id=\"7073018f-7cd1-4e5c-8ca7-f25989e501ff\" data-image-id=\"7073018f-7cd1-4e5c-8ca7-f25989e501ff\" alt=\"\"></figure>\n<p>&nbsp;) next to the page in the content tree which shows that the page doesn't exist yet. Fill in the fields with the following values:</p>\n<p><strong>Name</strong>: <em>Inicio</em></p>\n<p><strong>Title</strong>: <em>Bienvenidos a Medio clinic</em></p>\n<p><strong>Text</strong>: <em>El objetivo de nuestra clínica es brindar la mejor atención médica. Para una salud integral en todo momento, también es necesario mantener un estilo de vida saludable.</em></p>\n<p><strong>Link button text</strong>: <em>Nuestros doctores</em></p>\n<div class=\"infobox warning\"><p>If you are copying the text to your website from the course, paste the text into the administration interface as plain text, e.g., using <em>Ctrl+Shift+V </em>or using the Source button in the WYSIWYG editor. Otherwise, you will copy the styling from the e-learning course, which may lead to inconsistency on the live site.</p></div>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6804b27f-fb46-4584-8e3f-904bf4c85418/mvc-adding-spanish-page-variant3.png","alt":"mvc-adding-spanish-page-variant3.png"},"strapline":""},{"title":"","body":"<p>Click the <strong>Save</strong> button.</p>\n<p>The system creates the Spanish version of the <em>Home</em> page in the content tree with <em>Inicio</em>&nbsp;as the page name. The status of the page has changed to <em>published </em>which the icon (&nbsp;</p>\n<figure data-asset-id=\"1b5f4432-d31d-49dc-894d-a2d47a37fe95\" data-image-id=\"1b5f4432-d31d-49dc-894d-a2d47a37fe95\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f14a24b4-03e3-4d18-aac0-47fa93b907de/approve.png\" data-asset-id=\"1b5f4432-d31d-49dc-894d-a2d47a37fe95\" data-image-id=\"1b5f4432-d31d-49dc-894d-a2d47a37fe95\" alt=\"published page icon\"></figure>\n<p>&nbsp;)<em>&nbsp; </em>indicated in the content tree<em>.</em></p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e90291f9-c9b3-456a-8b6c-9c74771e6313/mvc-adding-spanish-page-variant4.png","alt":"mvc-adding-spanish-page-variant4.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7c5680c5-fbd2-4b72-9e1c-0d03eaab4f4c","_parentId":"4b9953ad-7a7e-4ab1-a95b-2d06ec52a956","_type":"component","title":"Demo: Adding Spanish variant of the Home page","displayTitle":"Demo: Adding Spanish variant of the Home page"},{"body":"<p>The following demo shows how to add a <strong>resource string</strong> (key/value pair). This string will be used to store and translate the text of the \"Address\" caption used in the Medio Clinic site's footer.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>Navigate to the <strong>Localization </strong>application.&nbsp;</li>\n  <li>On the <strong>Resource strings </strong>tab, click the <strong>New string </strong>button.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c816e3c9-9340-415e-a800-41a675ffc24c/mvc-adding-resource-string1.png","alt":"mvc-adding-resource-string1.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>Fill in the following values:<br>\n<strong>Key</strong>:<em> </em>Footer.Address<em><br>\n</em><strong>English - United States (default)</strong>: Address<em><br>\n</em><strong>Spanish - Spain</strong>: Direccion</li>\n  <li>Click the <strong>Save </strong>button.</li>\n</ol>\n<p>The system creates the resource string and saves it in the database.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/d3cb6827-0c9f-4090-a7b7-2d10feba08d1/mvc-adding-resource-string2.png","alt":"mvc-adding-resource-string2.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"90ac5339-c456-4baf-bff5-b9acfd1bf303","_parentId":"4b9953ad-7a7e-4ab1-a95b-2d06ec52a956","_type":"component","title":"Demo: Adding resource strings","displayTitle":"Demo: Adding resource strings"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select the correct option to make the following statement true.</p>\n<p><em>Editors with sufficient permissions can...</em></p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>choose which cultures are available for the site's content.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong! Only global administrators can assign cultures to sites.</p>"},{"text":"<p>edit resource strings in the admin UI. Strings updated in the UI are saved into resources files within the MVC application's project folder.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong! Resource strings updated in the admin UI are stored in the website's database. Strings stored in resource files cannot be modified from the admin UI (only overridden by adding a string with the same key).</p>"},{"text":"<p>edit resource strings in the admin UI. Resource strings created or updated in the UI are stored in the database.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>not edit resource strings used on the website. All strings need to be prepared in resource files before the MVC website is deployed.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong! Kentico allows users to create and edit strings in the admin UI, and stores these strings in the database.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! Editors of websites can work with individual resource strings in the administration interface, and these strings are stored in the database.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a816a339-e6a9-4198-a810-9d70cd301fab","_parentId":"f6370b4c-ed9c-4b1f-b35c-f03a6f9cd305","_type":"component","title":"Progress check: Resource strings","displayTitle":"Progress check: Resource strings"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select the correct option to make the following statement true.</p>\n<p><em>To translate their website content, editors...&nbsp;</em></p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>always need to send the data to an external translation service.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong! Individual language versions of pages can be created and edited directly through the Kentico administration interface in the Pages application.</p>"},{"text":"<p>can use Facebook Translate machine translation by default.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong! To use Facebook Translate machine translation, you need to customize your solution.&nbsp;</p>"},{"text":"<p>can use Google Translate machine translation, which programmatically converts the source text into selected languages.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>cannot download the content of pages for manual translation in a standardized format and need to manually convert text, e.g., to XLIFF.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong! Kentico provides an option to download the content of pages for manual translation. The generated .zip file contains the text in standardized .xlif format.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! By default, Kentico provides integration for machine translation via Google Translate and Microsoft Translate services.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ec93fd20-31d5-412c-a753-41b47186f272","_parentId":"f6370b4c-ed9c-4b1f-b35c-f03a6f9cd305","_type":"component","title":"Progress check: Translation services","displayTitle":"Progress check: Translation services"},{"body":"<p>Congrats! You have learned how to create multicultural sites in Kentico. You also know how the system stores multilingual content, and how you can set up the system to help editors with content translation.</p>\n<p>Hurry up to the next part of the training where you will learn how URL routing works in the Kentico MVC solution.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"68bd7e6c-7f44-488c-a0f6-a8a92ea8a1e3","_parentId":"c061cf2b-a935-419a-a196-359e114648dd","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>How routing works for Kentico websites built with the MVC development model</li>\n  <li>The role of page type URL patterns in the Kentico administration (Preview mode and other features)</li>\n  <li>How you can code the site to support multiple cultures</li>\n  <li>What constraints you might want to set for route parameters on Kentico websites</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Setting up the site's basic routing</li>\n  <li>Implementing a custom route handler that sets the application's culture context based on the URL</li>\n  <li>Creating constraints on routes so that they accept valid parameters</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"53e96b9d-f9f9-483e-af89-9baaa173da8f","_parentId":"b7febcf7-5510-4635-aad4-a5313cea4850","_type":"component","title":"Intro: Working with URLs and MVC routes","displayTitle":"Intro: Working with URLs and MVC routes"},{"body":"<p>ASP.NET websites offer you many ways to determine which culture a visitor requests.</p>\n<p>For example, you can identify the culture from a URL language prefix or the site's domain, or store each user's preferred language in their browser. You can also let the ASP.NET framework detect the culture and locale automatically based on the environment of the user's client.</p>\n<p>For websites built using the Kentico MVC development model, we recommend determining the culture using a language prefix in the URLs of incoming requests.</p>\n<p>As a refresher, the ASP.NET framework keeps track of two culture-related values - the <em>Culture</em> and <em>UICulture</em> - which determine things like date formats or currency symbols. The cultures are applied to the current request's active thread and remain active for its lifetime.</p>\n<p>With this information in mind, you can implement functionality which detects and sets the culture properties according to a route parameter.</p>\n<p>Let's review what needs to be covered. First, your solution needs to find the request's culture through a parameter defined in your route templates. Then, you need to use the value to configure the current thread's <em>CurrentCulture</em> property (using an object of the .NET <em>System.Globalization.CultureInfo</em> type).</p>\n<p>The Kentico localization API then automatically works with the given culture, for example when resolving resource strings. You also need to use the culture value to load the correct language version of pages in code that retrieves your website's content (this topic will be covered later in the course).</p>\n<p>Here is a sample implementation from the Dancing Goat sample site. The following is a custom route handler class, which can then be assigned to individual routes in the <em>RouteConfig</em>.</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (10:47). Please check the output for a content item mvc_multiculturemvcroutehandler of type CloudIntegration.Models.Cloud.CodeBlock.]\n<p>For larger websites that handle content in several cultures or different locales, you can break down the functionality into even smaller chunks.</p>\n<p>For example, you can implement another custom class which provides the currently active culture, e.g., <em>SiteContextService</em>, and use dependency injection to make it available wherever you need, for example to filter Kentico API calls that retrieve page content. You can find an example of this implementation in the <strong>Demo: Implementing multiple cultures </strong>section on this page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6d9957e5-f78d-43d4-b3f8-0fcbc76afcb8","_parentId":"9808c161-0bb2-4327-9c4d-260674b23317","_type":"component","title":"Handling URLs on a multicultural website","displayTitle":"Handling URLs on a multicultural website"},{"body":"<p>The URL routing engine in the MVC application maps incoming requests to a specific controller action. To ensure that only valid URLs match your routes, you can set up some constraints and specify which types of URL parameters are valid. Let's take a look at some of the most common types of route constraints you might want to use on your Kentico MVC website.</p>\n<h2>Culture constraint</h2>\n<p>Your website will likely support only a limited number of cultures, and your route templates should reflect that. There are a number of possible approaches you can take when defining your site's routing.</p>\n<p>For example, the Kentico API provides you with the <a href=\"http://devnet.kentico.com/docs/11_0/api/html/T_CMS_SiteProvider_CultureSiteInfoProvider.htm\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">CultureSiteInfoProvider</a> class (in the <em>CMS.SiteProvider</em> namespace), and you can call its <em>GetSiteCultures()</em> method to load the cultures assigned to the site in Kentico. This allows you to create a constraint that compares the retrieved culture codes with the culture parameter in the route. In cases where the URL does not match the constraint's requirements, you can fall back to a default culture or return a 404 response. To see an example of a culture constraint, view the code of the MedioClinic's <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Utils/SiteCultureConstraint.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SiteCultureConstraint</em></a> class.</p>\n<h2>Constraints on editor inputs</h2>\n<p>For some types of pages, you may want to give website editors control over a part of the URL. This gives them the option to create human-readable keywords in the URL.</p>\n<p>If you use the default Kentico page alias (<em>NodeAlias</em> field) for this purpose, the administration interface automatically ensures that the value is a valid URL string (without spaces or unsafe characters like ? or #).</p>\n<p>However, if you directly add custom fields into your URL patterns, you may wish to use route constraints to limit which types of inputs are valid. For example, you can use the .NET <em>AlphaRouteConstraint</em> class to allow only letter characters.</p>\n<h2>Constraint on the {nodeGuid} parameter</h2>\n<p>Using the page alias in your route templates introduces a possible challenge. Internally, the page alias is stored in the <em>NodeAlias</em> column of each page, and you can supply it into your URL patterns through the <em>{%NodeAlias%}</em> macro.</p>\n<div class=\"infobox note\"><p>Kentico only ensures that page aliases are unique within a given level of the website's content tree (under the same parent page).&nbsp;</p>\n<p>For example, pages stored directly in the&nbsp;<em>/Doctors</em>&nbsp;section will always have a unique page alias among each other. However, if one page is stored under&nbsp;<em>/Doctors/Surgeons</em>&nbsp;and another page under&nbsp;<em>/Doctors/Dentists</em>, they can both have the same page alias.</p></div>\n<p>When you give editors control over the page alias, it's possible that two or more pages could be created with the same page alias in different sections of the website. If you only use the <em>NodeAlias</em> to identify pages in your URLs and code, your website could behave incorrectly.&nbsp;</p>\n<p>We recommend that you use route templates that combine the unique <em>NodeGuid</em> value together with the page alias, for example <em>\"{culture}/Doctors/{nodeGuid}/{pageAlias}\"</em>. The Guid provides a unique identifier for the page, while the page alias adds the human-readable part of the URL.</p>\n<p>When you include the {nodeGuid} parameter in a route template, it can be useful to define a constraint. For example, you can use the .NET <em>GuidRouteConstraint</em> class to constrain the parameter to allow only values of the <em>System.Guid</em> type. You can see an example in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>implementation of the constraint</em></a> on the Medio Clinic site for pages that display doctor profiles.</p>\n<p>These three types of constraints don't exhaust all the possibilities you'd want to define on your MVC website. They are here just to give you an idea of what you should consider when defining the behavior of your website's routes.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4fcff2ce-b88e-4ca6-9361-79eccf5c933a","_parentId":"e1af5624-704d-4a18-99ff-c3f83d2e71c9","_type":"component","title":"Setting up URL constraints","displayTitle":"Setting up URL constraints"},{"body":"<p>The following text highlights in short how the Medio Clinic project implements URLs and handles multicultural content. To find examples of the specific implementation, scroll down to the demo section of this page, or view the whole project implementation on <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>GitHub</em></a>.</p>\n<ul>\n  <li>Medio Clinic's default culture is \"en-US\". The site stores content in <em>\"en-US\"</em> and <em>\"es-ES\"</em> culture variants. The <em>URL pattern</em> of the page types able to display content in multiple languages contains the <em>{% DocumentCulture %}</em> macro expression which resolves into the culture of the requested page.</li>\n  <li>The application converts all URLs to lower case for consistency.</li>\n  <li>Kentico system routes are mapped first, so incoming requests have a chance to match them before being passed to the site's more general routes.</li>\n  <li>At the end of the \"essentials\" part of the course, the <em>RouteConfig</em> will have three routes defined for the site (listed from top to bottom):\n    <ul>\n      <li><em>\"NotFound\"</em> route to handle 404 errors. You will implement the 404 logic later in the course.</li>\n      <li><em>\"DoctorWithAlias\"</em> route which will resolve into pages showing detailed information about the site's doctors. The route maps the URL to the <em>Doctors</em> controller and invokes the <em>Detail</em> action that you will implement in the next part of the training.</li>\n      <li><em>\"DefaultWithCulture\"</em> route which handles all other requests. You will implement the functionality in this part of the course.</li>\n    </ul>\n  </li>\n  <li>Routes on the Medio Clinic live site accept a <em>{culture} </em>parameter&nbsp;. A custom-made route handler gets the \"culture\" value from the URL parameter and configures the current request's thread by setting its <em>CurrentCulture</em> property.</li>\n  <li>Parameters of routes are further restricted by constraints to accept only valid cultures and correct data types. You will build the custom constraint used for the culture parameter later in this part of the course.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"ff63f1a8-6d83-494e-8d03-1ab3c087eb76","_parentId":"8fed451a-1452-440b-b3b1-2a09e6f90115","_type":"component","title":"URLs and routing on the Medio Clinic website","displayTitle":"URLs and routing on the Medio Clinic website"},{"body":"<p>The Medio Clinic website uses custom services and repositories initialized through dependency injection to deal with data stored in Kentico. You will learn about the details of the business logic (and have the opportunity to build it on your training website) in the next part of this course.</p>\n<p>For now, let's see how the site determines and processes the culture of individual requests. However, if you first want to see the big picture, feel free to jump ahead, learn about the overall approach to working with data in the MVC application in the following part, and then come back to investigate how the custom handler and other services work.</p>\n<h2>How does Medio Clinic handle cultures?</h2>\n<p>Medio Clinic uses a custom&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Utils/MultiCultureMvcRouteHandler.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MultiCultureMvcRouteHandler</em></a>, which retrieves the <em>{culture}</em> parameter from the URL, and sets the culture via the thread's <em>CurrentCulture</em> property. <em>MultiCultureMvcRouteHandler</em> is assigned to individual routes in the project's&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig</em></a>. &nbsp;</p>\n<p>The project uses a custom <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Utils/SiteContextService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SiteContextService</em></a> to make the culture accessible in other parts of the code. The service is initialized based on the thread culture and registered into the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Autofac DI container</em></a>. &nbsp;For example, the service is then used to filter page API calls in the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Query/DocumentQueryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DocumentQueryService</em></a>.</p>\n<p>To get an overview of the whole implementation, see the following classes:</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig</em></a><em>,</em></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Utils/MultiCultureMvcRouteHandler.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MultiCultureMvcRouteHandler</em></a>,</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Utils/SiteContextService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SiteContextService</em></a>&nbsp;and the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Context/ISiteContextService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ISiteContextService</em></a>&nbsp;interface the class implements,</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>AutofacConfig</em></a> (initializes the <em>SiteContextService</em> and registers it into the project's DI container),</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Query/DocumentQueryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DocumentQueryService</em></a>.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c057d6a6-bd31-4672-8f71-99c3b0e4498d","_parentId":"8fed451a-1452-440b-b3b1-2a09e6f90115","_type":"component","title":"Custom multi-culture handler","displayTitle":"Custom multi-culture handler"},{"body":"<p>In this task, you will extend your <em>MedioClinic</em> training website so that it processes requests correctly, and is able to serve content in multiple cultures.</p>\n<p>Start by doing the following in the project's <em>RouteConfig</em> class:</p>\n<ul>\n  <li>Prepare a <em>CultureInfo</em> object that will be used to set \"en-us\" as the default culture</li>\n  <li>Ensure that URLs are converted to lower case</li>\n  <li>Map Kentico system routes (before any other routes)</li>\n  <li>Add a<em> {culture}</em> segment to the default route, with the appropriate default value</li>\n</ul>\n<p>Next, create a custom constraint that restricts allowed values according to the cultures assigned to the site in Kentico. Add the constraint to the <em>culture</em> parameter of the default route in the <em>RouteConfig</em>.</p>\n<p>Finally, create a custom route handler that:</p>\n<ul>\n  <li>Reads the requested culture from the URL</li>\n  <li>Sets the culture properties of the current thread based on the culture parameter</li>\n  <li>Falls back to a 404 response if the culture parameter's value is not valid (the 404 error page will be implemented later in the course)</li>\n  <li>Is assigned to the default route in the <em>RouteConfig</em></li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b3897328-f112-45ac-be73-a67128a74444","_parentId":"8fb4bf5f-105d-4d8a-9558-c06a8b2b1c1a","_type":"component","title":"Task: Setting your site's routes and URLs","displayTitle":"Task: Setting your site's routes and URLs"},{"body":"<p>The following demo shows how you can set up your site's default routing, and extend it to handle content in multiple cultures.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Edit your project's <strong>RouteConfig.cs</strong> file and perform the following:</p>\n<ol>\n  <li>Prepare a variable of the <em>System.Globalization.CultureInfo</em> type to represent the website's default culture, and assign an instance using the <em>\"en-US\"</em> culture.</li>\n  <li>Set the <em>LowercaseUrls</em> property of your <em>RouteCollection</em> to <em>true</em> to ensure that URLs are converted to lower case.</li>\n</ol>\n<p>Make sure you set the <em>LowercaseUrls</em> property before you call the <em>Kentico().MapRoutes()</em> extension method.</p>","code":{"src":"using System.Globalization;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nusing Kentico.Web.Mvc;\n\n(...)\nnamespace MedioClinic\n{\n    public class RouteConfig\n    {\n        public static void RegisterRoutes(RouteCollection routes)\n        {\n            var defaultCulture = CultureInfo.GetCultureInfo(\"en-US\");\n\n            routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n\n            // Uses lowercase URLs for consistency and SEO-optimization\n            routes.LowercaseUrls = true;\n(...)","lang":"c_"},"strapline":""},{"title":"","body":"<p>Prepare code that will allow you to easily access the name of your Kentico site:</p>\n<ol>\n  <li>Create a simple static class named <em>AppConfig</em> (you can store it in a new folder under the <em>MedioClinic</em> project root, e.g., <em>Config</em>).</li>\n  <li>Add a constant string type property named <em>Sitename</em> and set its value to <em>\"MedioClinic\"</em> (the code name of your site in Kentico).</li>\n</ol>\n<p>You will later use the site's name when creating a constraint for the culture route parameter.</p>","code":{"src":"namespace MedioClinic.Config\n{\n    public static class AppConfig\n    {\n        public const string Sitename = \"MedioClinic\";\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Prepare a custom constraint that you will use for your culture route parameter:</p>\n<ol>\n  <li>Create a new public class named <em>SiteCultureContstraint</em> (you can store it in a new folder under the <em>MedioClinic</em> project root e.g., <em>Utils</em>).</li>\n  <li>Make the class implement the <em>IRouteConstraint</em> interface.</li>\n  <li>Define a private readonly <em>HashSet&lt;string&gt; </em>variable&nbsp;named &nbsp;<em>_allowedCultureNames </em>that will store allowed culture code values.</li>\n  <li>Use the Kentico <em>CultureSiteInfoProvider</em> class to get the culture codes that you assigned to the Medio Clinic site in a previous part of the training.</li>\n  <li>Implement the <em>Match</em> method and return a bool result - evaluate whether the HashSet of allowed cultures contains the value of the constrained route parameter.</li>\n</ol>","code":{"src":"using System;\nusing System.Collections.Generic;\nusing System.Web;\nusing System.Web.Routing;\nusing CMS.SiteProvider;\n\nnamespace MedioClinic.Utils\n{\n    /// <summary>\n    /// Route constraint restricting the culture parameter to cultures allowed by the site.\n    /// </summary>\n    public class SiteCultureConstraint : IRouteConstraint\n    {\n        private readonly HashSet<string> _allowedCultureNames;\n\n\n        /// <summary>\n        /// Creates a new instance of the culture route constraint for a specific site.\n        /// </summary>\n        /// <param name=\"siteName\">Code name of the site.</param>\n        public SiteCultureConstraint(string siteName)\n        {\n            var siteCultureNames = CultureSiteInfoProvider.GetSiteCultureCodes(siteName);\n\n            // Ignores letter case when comparing cultures\n            _allowedCultureNames = new HashSet<string>(siteCultureNames, StringComparer.InvariantCultureIgnoreCase);\n        }\n\n        /// <summary>\n        /// Determines whether the URL parameter contains an allowed culture name for this constraint.\n        /// </summary>\n        /// <param name=\"httpContext\">Object that encapsulates information about the HTTP request.</param>\n        /// <param name=\"route\">Route that this constraint belongs to.</param>\n        /// <param name=\"parameterName\">Name of the route parameter that is being checked.</param>\n        /// <param name=\"values\">Object that contains the parameters for the URL.</param>\n        /// <param name=\"routeDirection\">Object that indicates whether the constraint check is being performed when an incoming request is being handled or when a URL is being generated.</param>\n        /// <returns>True if the URL parameter contains an allowed culture name; otherwise, false.</returns>\n        public bool Match(HttpContextBase httpContext, Route route, string parameterName, RouteValueDictionary values, RouteDirection routeDirection)\n        {\n            var cultureName = values[parameterName].ToString();\n\n            return _allowedCultureNames.Contains(cultureName);\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Return to the <em>RouteConfig.cs</em> file and extend the default route by adding a <em>{culture}</em> parameter. Set the parameter's default value and apply the <em>SiteCultureConstraint</em> constraint.</p>","code":{"src":"(...)\nusing MedioClinic.Config;\nusing MedioClinic.Utils;\n(...)\n// Maps a default route with a culture URL prefix\nvar route = routes.MapRoute(\n    name: \"DefaultWithCulture\",\n    url: \"{culture}/{controller}/{action}/{id}\",\n    defaults: new { culture = defaultCulture.Name, controller = \"Home\", action = \"Index\", id = UrlParameter.Optional },\n    constraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename) }\n);","lang":"c_"},"strapline":""},{"title":"","body":"<p>To restrict the valid type of the optional {<em>id</em>} parameter in the default route, apply the .NET <em>IntRouteConstraint</em>.</p>","code":{"src":"(...)\nusing System.Web.Mvc.Routing.Constraints;\n(...)\n// Maps a default route with a culture URL prefix\nvar route = routes.MapRoute(\n    name: \"DefaultWithCulture\",\n    url: \"{culture}/{controller}/{action}/{id}\",\n    defaults: new { culture = defaultCulture.Name, controller = \"Home\", action = \"Index\", id = UrlParameter.Optional },\n    constraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename),\n                                          // Constrains the optional id parameter to the integer data type\n                                          id = new OptionalRouteConstraint(new IntRouteConstraint()) }\n);","lang":"c_"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7b3b1b62-8379-4f26-885c-50049a8d71ae","_parentId":"51bcb895-abe4-4c45-946d-f7730f4befd8","_type":"component","title":"Demo: Setting up the website's default routing","displayTitle":"Demo: Setting up the website's default routing"},{"body":"<p>Create a custom route handler that reads the requested culture from the URL and sets the culture properties of the current thread.</p>\n<p>Add a new public class named <em>MultiCultureMvcRouteHandler&nbsp;</em>(you can store it in the project's <em>Utils</em> folder). You can see the implementation in the following code snippet.&nbsp;(The implementation of the custom handler also deals with exceptions. You will learn about the handling of 404 errors in Kentico MVC later in the course.)</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (10:47). Please check the output for a content item mvc_multiculturemvcroutehandler_cs_code of type CloudIntegration.Models.Cloud.CodeBlock.]\n<p>If you have followed the previous demo and set up your <em>DefaultWithCulture </em>route, you can now assign the new handler in the <em>RouteConfig.cs</em> file.</p>\n<pre><code class=\"language-c_\">// Maps a default route with a culture URL prefix\nvar route = routes.MapRoute(\n    name: \"DefaultWithCulture\",\n    url: \"{culture}/{controller}/{action}/{id}\",\n    defaults: new { culture = defaultCulture.Name, controller = \"Home\", action = \"Index\", id = UrlParameter.Optional },\n    constraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), id = new OptionalRouteConstraint(new IntRouteConstraint()) }\n);\n\n// Assigns the custom handler to the route\n// Sets the culture of the current thread based on the 'culture' route parameter\nroute.RouteHandler = new MultiCultureMvcRouteHandler();</code></pre>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"99d1bbc1-82e6-48bd-9728-05ff64f19987","_parentId":"51bcb895-abe4-4c45-946d-f7730f4befd8","_type":"component","title":"Demo: Implementing multiple culture handling","displayTitle":"Demo: Implementing multiple culture handling"},{"body":"<p>At the end of this exercise, your overall <em>RouteConfig </em>code might look like the following snippet.</p>\n<pre><code class=\"language-c_\">using System.Globalization;\nusing System.Web.Mvc;\nusing System.Web.Mvc.Routing.Constraints;\nusing System.Web.Routing;\nusing Kentico.Web.Mvc;\nusing MedioClinic.Config;\nusing MedioClinic.Utils;\n\nnamespace MedioClinic\n{\n    public class RouteConfig\n    {\n        public static void RegisterRoutes(RouteCollection routes)\n        {\n            var defaultCulture = CultureInfo.GetCultureInfo(\"en-US\");\n\n            routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n\n            // Uses lowercase URLs for consistency and SEO-optimization\n            routes.LowercaseUrls = true;\n\n            // Maps routes to Kentico HTTP handlers and enabled MVC features \n            // Must be called before mapping your other routes, otherwise Kentico system URLs might match them and be processed incorrectly\n            routes.Kentico().MapRoutes();\n\n            // Maps a default route with a culture URL prefix\n            var route = routes.MapRoute(\n                name: \"DefaultWithCulture\",\n                url: \"{culture}/{controller}/{action}/{id}\",\n                defaults: new { culture = defaultCulture.Name, controller = \"Home\", action = \"Index\", id = UrlParameter.Optional },\n                constraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), id = new OptionalRouteConstraint(new IntRouteConstraint()) }\n            );\n\n            // Assigns a custom handler to the route that sets the culture of the current thread based on the 'culture' route parameter\n            route.RouteHandler = new MultiCultureMvcRouteHandler();\n        }\n    }\n}</code></pre>\n<p>You can further investigate:</p>\n<ul>\n  <li>What the final <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig.cs</em></a> file of the Medio Clinic site looks like,</li>\n  <li>The whole Medio Clinic website's <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>sample code</em></a> on GitHub.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2ff371ea-848f-4fdb-9653-89ff99c0d46e","_parentId":"51bcb895-abe4-4c45-946d-f7730f4befd8","_type":"component","title":"Demo: RouteConfig review","displayTitle":"Demo: RouteConfig review"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select the correct statement about the <em>Kentico().MapRoutes()</em> extension method.</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The <em>Kentico().MapRoutes()</em> extension method is required and needs to be called first, before mapping your website's other routes. The method maps routes to Kentico HTTP handlers, as well as routes required by enabled Kentico MVC features (such as the Page builder or tracking of marketing emails). Because the method adds routes based on the set of enabled Kentico features, you need to call it after you enable Kentico MVC features using the <em>ApplicationBuilder</em> instance.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>The <em>Kentico().MapRoutes()</em> extension method&nbsp;must be called after you map all other routes for your website. This ensures that the registered Kentico system routes cannot be overridden by other routes. &nbsp;As a result, your pages will display images and attachments correctly.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. You need to call <em>Kentico().MapRoutes()</em>&nbsp;as soon as possible, before registering other more general routes for your site's content.&nbsp;Otherwise the Kentico system URLs may match the other routes, which can for example result in pages being displayed without images.</p>"},{"text":"<p><em>Kentico().MapRoutes()</em> is an obsolete method that was used to map routes to Kentico HTTP handlers in previous versions. The Kentico integration packages now automatically add all required routes into your MVC application's routing table without requiring any code.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. The <em>Kentico().MapRoutes() </em>extension method needs to be called manually, typically in your MVC applications <em>RouteConfig</em> file. The method maps routes to Kentico HTTP handlers, as well as routes required by enabled Kentico MVC features.</p>"}],"_feedback":{"title":"","correct":"<p>Correct. The <em>Kentico().MapRoutes()</em> extension method must be called before you map other more general routes for your site's content. You also need to make sure that you enable optional Kentico MVC features (such as the Page builder) before you register routes, because the <em>Kentico().MapRoutes()</em> method automatically adds required routes based on the set of enabled features.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"7de41cfe-fd50-4601-9dc3-06b1e33ddc61","_parentId":"c19f9a43-04ec-4c8b-b91f-0848b0747c1d","_type":"component","title":"Progress-check: Mapping Kentico system routes","displayTitle":"Progress-check: Mapping Kentico system routes"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which is the best practice for determining the culture in the MVC application?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Do not introduce any custom functionality and let the Kentico integration code determine which culture to serve on the live site.&nbsp;</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Kentico cannot automatically determine the culture on the MVC live site. You need to identify the visitor's culture and set the application's culture context programmatically.</p>"},{"text":"<p>Store each user's preferred language in their browser using a custom cookie.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Even though this is a valid approach to handling cultures on MVC sites, Kentico recommends determining the culture using a language prefix in the URLs of incoming requests.</p>"},{"text":"<p>Create a custom route handler that determines the culture using a language prefix in the URLs of incoming requests.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. The recommended approach to determining the culture is to use language URL prefixes and a custom route handler.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"03029c72-5be9-474b-a106-f4d4dc0b33aa","_parentId":"c19f9a43-04ec-4c8b-b91f-0848b0747c1d","_type":"component","title":"Progress-check: Handling cultures","displayTitle":"Progress-check: Handling cultures"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>You have a multicultural website and want to add the option to create article pages. Select a <strong>URL pattern</strong> for the Article page type that allows content editors to add a human-readable URL slug and follows Kentico recommended practices.</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"/{%DocumentCulture%}/Articles/{%NodeID%}/{%NodeAlias%}","lang":"c_"},"feedback":"<p>Wrong. This URL pattern contains a language prefix and a human-readable page alias parameter, but the <em>NodeID</em> parameter doesn't provide a consistent identifier when hosting the website in multiple environments, e.g., when using content staging.&nbsp;</p>","_shouldBeSelected":false},{"title":"","code":{"src":"/{%DocumentCulture%}/Articles/{%NodeGUID%}/{%NodeAlias%}","lang":"c_"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"/Articles/{%NodeGUID%}","lang":"c_"},"feedback":"<p>Wrong. This pattern does not allow editors to set a human-readable part of the URL, and does not provide any way to resolve multicultural content.</p>","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"<p>Correct. This URL pattern contains a language prefix and a human-readable page alias parameter. Additionally, the <em>NodeGUID</em> parameter is unique for each node in the website's content tree, and is consistent between different environments hosting the same website (e.g., when using content staging).</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"290216ac-d0d1-4ed5-918b-21dfc137e83c","_parentId":"c19f9a43-04ec-4c8b-b91f-0848b0747c1d","_type":"component","title":"Progress-check: URL patterns","displayTitle":"Progress-check: URL patterns"},{"body":"<p>Congratulations on completing the routing section of the course! You now know how both the website and administration interface approach multilingual websites from the routing perspective.&nbsp;</p>\n<p>You have learned:</p>\n<ul>\n  <li>How routing works for Kentico websites built with the MVC development model</li>\n  <li>What role the URL pattern of page types plays in Preview mode and the Kentico administration in general</li>\n  <li>About page aliases on content-only websites</li>\n  <li>How you can implement the website's localization using a custom handler</li>\n  <li>How to build a simple constraint for site culture route parameters</li>\n</ul>\n<p>Your website is coming along nicely! Ready to go to the next section and find out how to display the content on the live site?&nbsp;<strong>Click the back button&nbsp;</strong>(<strong>&lt;</strong>)<strong>&nbsp;in the top left, and continue with the course!</strong></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2118e71c-f6b3-4624-b0c3-72d57248e2ab","_parentId":"3dd4c843-231c-4819-95d5-ea5a10e63bbc","_type":"component","title":"Conclusion: URLs and routes on MVC websites","displayTitle":"Conclusion: URLs and routes on MVC websites"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>What the <strong>recommended approach to building websites</strong> in the MVC development model</li>\n  <li>How you can <strong>display localized data from the shared database</strong> on the live site</li>\n  <li>Which steps you need to take to <strong>create a new user and role</strong></li>\n  <li>How <strong>security model</strong> works in Kentico</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Preparing classes that handle business level of the application</li>\n  <li>Build MVC-related classes on a higher-level of abstraction, e.g., <em>BaseController</em> or <em>PageViewModel</em></li>\n  <li>Display <em>Home</em>, <em>Doctors</em> listing, and <em>Doctor</em> profile pages</li>\n  <li>Create new user and workflow and test your implementation provides preview functionality</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"371947a1-2d7c-4dfa-97d6-7466e88241e1","_parentId":"d5b5ee10-6371-4676-b7de-c05d8a764d97","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<h2>Kentico API</h2>\n<p>When you create a page type, you have an option to generate its strongly typed classes, for example,&nbsp;<em>Article&nbsp;</em>and&nbsp;<em>ArticleProvider</em>&nbsp;classes. The generated providers present you a set of methods you can call to retrieve data from the content-only pages and display it on the live site.</p>\n<p>The following example uses the generated class to retrieve a list of published articles (their latest published version, respectively):</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (6:48). Please check the output for a content item mvc_code_example_retrieving_pages of type CloudIntegration.Models.Cloud.CodeBlock.]\n<p>The method above retrieves data from all columns the given object has stored in the database. However, you may not need all of the data on your live site and using the default calls may return large data sets. To improve the site's performance, we recommend that you pull only the required data from the relevant columns, and omit what you don't need.</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (7:47). Please check the output for a content item mvc_retrieving_kenticoapi_articles_example of type CloudIntegration.Models.Cloud.CodeBlock.]\n<h2>Abstraction from Kentico API</h2>\n<p>Kentico <em>Document Query</em> allows you to manage pages in your custom code. Instead of calling Kentico API directly in your MVC code, e.g., in controllers, you may want to introduce an additional layer of logic and separate your application's code from the Kentico API entirely.</p>\n<p>Separating the website's code from Kentico API brings additional benefits. For example, having custom services that are responsible for communicating with Kentico API, allows your website to use those services instead of directly using Kentico API. Your custom services can extend the available methods and call for data which the generated providers don't present, such as, the<em>&nbsp;page title</em>&nbsp;and other&nbsp;<em>page metadata</em>&nbsp;type of information. The code separation also helps with upgradability and easier hotfixing of your Kentico instances.</p>\n<p>Feel free to&nbsp;<a href=\"https://docs.kentico.com/k12/custom-development/working-with-pages-in-the-api#WorkingwithpagesintheAPI-DocumentQueryreference\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">check examples</a>&nbsp;for all the methods of the&nbsp;<em>DocumentQuery API</em>&nbsp;you can use to create additional parameters on your queries in&nbsp;<a href=\"https://docs.kentico.com/k12/custom-development/working-with-pages-in-the-api#WorkingwithpagesintheAPI-DocumentQueryreference\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>.</p>\n<h2>Working with the retrieved content</h2>\n<p>You can work with the data of the retrieved pages using its properties. The fields which content editors work with on the&nbsp;<em>Content</em>&nbsp;tab are specific to its page type. If you need to access specific fields of a page type, you can use its&nbsp;<em>Fields</em>&nbsp;property. For example, to retrieve the text of the article's teaser you can use the following snippet.<br>\n</p>\n<pre><code class=\"language-c_\">string articleTeaser = article.Fields.ArticleTeaser;</code></pre>\n<p>Fields that use the&nbsp;<strong>Rich text editor</strong>&nbsp;form control may contain <em>HTML tags</em> and <em>relative URL links</em>. To ensure that the content is displayed correctly, use&nbsp;<em>Html.Raw()</em>&nbsp;method. The method disables the HTML encoding for the values in page's views. For &nbsp;example, <em>Html.Raw(Model.Data.Doctor.Bio) </em>displays biography on the doctor's profile page in the Medio Clinic website. To resolve the relative URLs to their absolute value (and disable their HTML encoding), you can use Kentico extension method&nbsp;<em>Html.Kentico().ResolveUrls()</em>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fd64c2ab-f72f-4b37-abcb-7c40beaf9fe8","_parentId":"0924df7e-3718-4312-a143-6208a40f1746","_type":"component","title":"Retrieving pages","displayTitle":"Retrieving pages"},{"body":"<p>Attachments represent files which are associated with a particular page. Editors upload attachments through form controls defined in the page types (or using the Attachments tab in the Pages application).&nbsp;</p>\n<p>Given the way the files are stored, Kentico recognizes two types of the page attachments:</p>\n<ul>\n  <li><em>File&nbsp;</em>field&nbsp;- stores a GUID value of a page attachment under a single page type field. The GUID identifies the corresponding attachment in the <em>CMS_Attachment</em> table.</li>\n  <li><em>Attachments</em>&nbsp;- store multiple attachments into a single page type field. However, the field is always empty. Instead, the <em>CMS_Attachment</em> table stores an identifier of the related page (its <em>DocumentID</em> in the <em>AttachmentDocumentID</em> column). For attachments uploaded on the <strong>Form</strong> tab using the <em>Attachments</em> form control, the <em>CMS_Attachment</em> table identifies the form control's field in the <em>AttachmentGroupID</em> column.</li>\n</ul>\n<p>The generated strongly-typed classes use&nbsp;<em>DocumentAttachment </em>type for&nbsp;<em>files</em>,&nbsp;and&nbsp;<em>IEnumerable&lt;DocumentAttachment&gt;</em>&nbsp;for&nbsp;<em>attachments. </em>Both types are available in the <em>CMS.DocumentEngine </em>namespace<em>.</em></p>\n<h2>Creating page attachment URLs</h2>\n<p>Because Kentico MVC websites run on two applications (the MVC application and the administration interface), your system must use the <em>permanent URL format</em> for attachments. This ensures that attachment URLs work correctly in both applications. (The option to use permanent URLs is enabled by default when you install Kentico MVC site through the installer.)&nbsp;</p>\n<p>To generate URLs for&nbsp;<em>DocumentAttachments</em>&nbsp;objects, you need to call&nbsp;<em>GetPath()</em>&nbsp;method from the&nbsp;<em>Kentico.Content.Web.Mvc</em>&nbsp;namespace.</p>\n<p>For example, the Medio Clinic's <em>Doctor</em> class stores doctor's profile image in the following property:</p>\n<pre><code class=\"language-c_\">[DatabaseField]\npublic Guid Image\n{\nget\n{\nreturn ValidationHelper.GetGuid(GetValue(\"Image\"), Guid.Empty);\n}\nset\n{\nSetValue(\"Image\", value);\n}\n}</code></pre>\n<p>To retrieve the profile image, you can use the following snippet in your code:</p>\n\n<p>The call above returns a <em>relative URL</em> in the following format&nbsp;<em>~/getattachment/&lt;file GUID&gt;/&lt;filename&gt;</em>.</p>\n<h2>Displaying page attachments</h2>\n<p>Because the returned URL is&nbsp;<strong>relative</strong>, you need to resolve it on the views using one of Kentico &nbsp;extension methods, i.e.,&nbsp;<em>ImageUrl</em>&nbsp;or&nbsp;<em>FileUrl</em>.</p>\n<p>You can call the methods directly in views, or you can use a custom extension method, such as the custom&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/UrlExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>KenticoImageUrl</em></a>&nbsp;method in the Medio Clinic website, to separate the business logic from the website's code.</p>\n<h2>Working with attached images</h2>\n<p>Before you display the returned image in the view, Kentico&nbsp;<em>ImageUrl</em>&nbsp;extension method offers you a set of constraints you can call to modify the image. For example, you can change the image's height with&nbsp;<em>Url.Kentico().ImageUrl(attachmentRelativeUrl, SizeConstraint.Height(200))</em>, or its width&nbsp;<em>Url.Kentico().ImageUrl(attachmentRelativeUrl, SizeConstraint.Width(200))</em>.</p>\n<div class=\"infobox note\"><p>Please note that if you want to use the <a href=\"https://docs.kentico.com/k12/developing-websites/managing-responsive-images\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">responsive images</a> feature which lets the system automatically prepare image variants for devices with different screensizes, you need to specify the image variant in the identifier as a parameter of the <em>GetPath()</em> method, e.g., <em>GetPath(\"Tablet\")</em>. You can see an example in <a href=\"https://docs.kentico.com/k12/developing-websites/managing-responsive-images/defining-image-variants\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>.</p></div>\n<p>See the Kentico documentation for&nbsp;<a href=\"https://docs.kentico.com/k12/developing-websites/retrieving-content-in-mvc-applications/displaying-page-attachments\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">additional information about working with page attachments</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"89cc0c29-5f07-468f-b634-a5fd1e41e242","_parentId":"0924df7e-3718-4312-a143-6208a40f1746","_type":"component","title":"Retrieving page attachments","displayTitle":"Retrieving page attachments"},{"body":"<p>Kentico websites with content in multiple languages usually contain resource strings. Editors use the strings to localize various texts on the website which are not stored in the pages in the content tree.</p>\n<p>To retrieve the localized strings in the MVC application, you need to call the<em>&nbsp;ResHelper.</em><em>GetStrings</em><em>(\"codename of the string\")</em>&nbsp;method in the&nbsp;<em>CMS.Helpers</em>&nbsp;namespace in your views. For example, the following snippet retrieves a localized variant of the <em>Contact</em> heading in the Medio Clinic's footer.&nbsp;</p>\n<pre><code class=\"language-html\"><h3>@ResHelper.GetString(\"Footer.Contact\")</h3></code></pre>\n<h3>Using custom methods to localize content</h3>\n<p>The snippet above calls Kentico code in the MVC application's code which is not a recommended approach.</p>\n<p>Instead, wrap Kentico <em>ResHelper() </em>method into an extension method and call this custom method on the views. This separates the Kentico API from your code and keeps your code highly maintainable. You can see an example of this approach in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/LocalizationExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Localize()</em></a>&nbsp;extension method on the Medio Clinic website.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fdebd4df-bc50-46ad-a1cc-1300bda4c36b","_parentId":"0924df7e-3718-4312-a143-6208a40f1746","_type":"component","title":"Retrieving localized strings","displayTitle":"Retrieving localized strings"},{"body":"<p>When developing enterprise-level MVC applications in Kentico, you may want to distribute the business logic into smaller, manageable chunks, such as services, and inject them where you need. Kentico itself uses services for logging activities, handling newsletter subscriptions, etc., provided as a part of Kentico API. We We recommend not instantiating services manually, rather you should rely on the DI to do that for you.</p>\n<h2>Dependency injection design pattern</h2>\n<p>The dependency injection design pattern is a common pattern to many programming languages. &nbsp;Instead of instantiating a service instance manually, you can pass the service instance into the constructor as a parameter, and its instantiating is handled by the DI. &nbsp;If you are not familiar with the dependency injection design pattern in general, you can start with the following articles:</p>\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Dependency Injection</a> by Steve Smith</li>\n  <li><a href=\"http:// http://www.mikesdotnetting.com/article/117/dependency-injection-and-inversion-of-control-with-asp-net-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Dependency Injection and Inversion of Control with ASP.NET MVC</a> by Mike Brind</li>\n</ul>\n<p>Using dependency injection in the development of MVC application brings many benefits. As you are decoupling the classes, your solution is easier to maintain and change. It is also easier to create tests for your MVC controllers because you can test them in isolation from dependent classes.&nbsp;</p>\n<h2>Using dependency injection containers</h2>\n<p>We recommend that you instantiate your custom and Kentico services using a dependency injection container. The dependency injection containers help with mapping interfaces and concrete types which allows you to reduce the complexity of your instantiating different services and to resolve dependencies between them.</p>\n<p>The Medio Clinic website &nbsp;uses <a href=\"https://autofaccn.readthedocs.io/en/latest/integration/mvc.html\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Autofac</a> dependency injection container, however, see Kentico documentation for <a href=\"https://docs.kentico.com/k12/developing-websites/initializing-kentico-services-with-dependency-injection#InitializingKenticoserviceswithdependencyinjection-Dependencyinjectioncontainers\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">other common containers</a> you can use.&nbsp;</p>\n<p>If you want to use the dependency injection pattern with a container, we recommend that you:</p>\n<ol>\n  <li>Register any custom or Kentico service or repository used on your website into your dependency injection container,&nbsp;</li>\n  <li>Implement on-the-fly registration for all services that are part of your custom logic as well as the Kentico API (added by the <em>Kentico.Libraries</em> NuGet package). The implementation depends on your dependency injection container. On the basic level, you can get instances of services by calling <em>CMS.Core.Service.Resolve(serviceType)</em> method as you can see in <a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/DI/CmsRegistrationSource.cs#L36\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">this example</a> on Medio Clinic.</li>\n</ol>\n<p>See the Kentico documentation for an example of registering <a href=\"https://docs.kentico.com/k12/developing-websites/initializing-kentico-services-with-dependency-injection#InitializingKenticoserviceswithdependencyinjection-Initializingdependencyinjectioncontainers\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico API services in Autofac DI container</a>, or a particular implementation of registering <a href=\"https://github.com/Kentico/training-kentico-k12/tree/master/Business/DI\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom business dependencies</a> using the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/MedioClinic/App_Start/AutofacConfig.cs#L26\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Autofac DI container</a> on the Medio Clinic website.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3c13b7dd-d118-44f9-a51b-e0acc3e2cace","_parentId":"0924df7e-3718-4312-a143-6208a40f1746","_type":"component","title":"Overview of using dependency injection","displayTitle":"Overview of using dependency injection"},{"body":"<p>In the <em>Preview</em> mode, editors can view the latest versions of pages before they publish them to the live site. The latest version of the page is stored in the <em>CMS_VersionHistory</em> table and can be retrieved by calling <em>.LatestVersion()</em> method in Kentico API.&nbsp;</p>\n<p>Editors can preview their changes on the <strong>Page</strong> tab in the administration interface, e.g., when using workflows. (Developers need to enable the <em>Page</em> tab when they create the page type for the page.) If editors navigate to the&nbsp;<strong>Page</strong>&nbsp;tab, Kentico displays the page from the live site's MVC application in an&nbsp;<em>&lt;iframe&gt;</em>&nbsp;HTML element inside the administration interface.&nbsp;</p>\n<p>The preview functionality is not limited only to the administration interface. If editors need to share an unpublished page with, e.g., external contractors who don't have access to the admin interface, they can generate a <strong>Preview URL</strong> of the page on the <strong>General</strong> tab. (Find out more about <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-pages/sending-links-to-unpublished-pages\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">sending links to unpublished pages</a> in Kentico documentation.)</p>\n<h2>How does the preview work?</h2>\n<p>The <em>preview URLs</em> that Kentico generates for pages consist of parameters defined in the <em>URL pattern</em> as well as additional information, such as language version and a hash for validating the URLs.</p>\n<p>The Kentico integration package in the MVC application validates and processes the preview URL. It removes the additional information and leaves the original presentation URL based on the URL pattern. The original presentation URL goes through the standard routing process.</p>\n<p>Some additional info about the preview:</p>\n<ul>\n  <li>The preview has to be enabled by calling <em>UsePreview()</em> method in the <em>ApplicationBuilder</em> instance in the <em>App_Start.</em></li>\n  <li>Generated preview links can be too long. You might want to set the <em>maxUrlLength</em> attribute of the <em>httpRuntime</em> to, e.g., 515 characters, in the MVC project's <em>web.config</em>.</li>\n  <li>Data caching needs to be disabled for the preview mode.</li>\n  <li><em>OutputCache</em> attributes on controllers are not used in the preview mode. (It is automatically ensured by the Kentico integration packages in the MVC application.)</li>\n</ul>\n<h3>How is the preview mode protected against CSRF attacks?</h3>\n<p>If your MVC application is protected against the CSRF attacks using the <a href=\"https://msdn.microsoft.com/en-us/library/system.web.mvc.validateantiforgerytokenattribute%28v=vs.118%29.aspx?f=255&amp;MSPPError=-2147217396\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">ValidateAntiForgeryToken</a> attribute, the application automatically sends a header that enables the <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">same-origin policy</a>. The <em>UsePreview</em> feature disables the policy for the preview URLs which allows editors to preview the unpublished content displayed in the MVC application. The preview mode works even if the live site is running on a different domain than the Kentico administration interface.&nbsp;</p>\n<p>If you decide to protect your website users against <em>clickjacking, </em>you can manually enable the same-origin policy by specifying the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">X-Frame-Options HTTP response header</a> in the MVC application's <em>web.config </em>file. As a result, the browsers won't be able to render pages in the <em>&lt;iframe&gt;</em> element. If editors decide to use the preview mode and other related features, e.g., the page builder, they will see a blank page instead of the previewed content in the administration interface. However, they will still be able to preview the pages on the live site using the generated <em>Preview URL</em>. Make sure to discuss the preview mode's pros and cons when specifying the project's business requirements.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"cfea90bc-66cf-4a79-be7f-db35375308a7","_parentId":"378e27e9-c28c-4ffe-a78e-321675a24946","_type":"component","title":"Setting up the preview mode","displayTitle":"Setting up the preview mode"},{"body":"<h2>Workflows</h2>\n<p>Kentico allows you to organize and control the process of creating, updating and publishing the content-only pages by applying <strong>workflows</strong>. A workflow is <strong>a sequence of steps</strong> which details the life cycle of pages. Workflows help define <strong>review and approval processes</strong> which editors use to ensure that only a high-quality content gets published on the live site.&nbsp;</p>\n<p>In Kentico, you can <strong>specify roles</strong> that different users have, and <strong>the points</strong> within the content-only page life cycle, e.g., <em>Draft</em>, <em>Review</em>, <em>Ready for publishing</em>,<em> Published</em>, when only the specified people can work with pages. To make sure only one editor works on a page at one time, you might want to combine workflows with <a href=\"https://docs.kentico.com/k12/configuring-kentico/configuring-the-environment-for-content-editors/configuring-and-using-page-versioning/content-locking\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">content locking</a>. The workflow functionality also provides editors options to comment on approving or rejecting the changes to the page's content.</p>\n<p>An example of a simple workflow process is approving changes to a new article. A copywriter creates the article introducing a change in legal terms to website visitors and sends it for approval to an editor. The editor corrects the text and sends it to the legal department for approval. Once approved, the page moves to a content manager, who publishes the page to the live site.</p>\n<h2>The default workflow</h2>\n<p>Kentico comes with <em>a default workflow</em> which consists of three steps - <em>Edit</em>, <em>Published</em>, and <em>Archived</em>.</p>\n<p>Pages in the <em>edit</em> step are available only to the specified people in the admin UI (or via generated preview links). Pages in the <em>published </em>step are displayed on the live site. And by default, pages in the <em>archive</em>d step stay in the content tree, but they aren't displayed on the live site.&nbsp;</p>\n<h2>Types of workflows in Kentico</h2>\n<p>Kentico offers you two types of workflows - basic workflows and advanced workflows.</p>\n<p>The<strong> basic workflows</strong> consist of a flow of successive steps, where the page moves from one step to another in a direct sequence. The <strong>advanced workflows</strong> feature (available in the EMS edition of Kentico) allows you to create additional logic between the workflow steps and introduce branching by defining <em>conditions</em>, <em>waiting periods</em>, or <em>user decisions</em> before the page moves to the following steps.</p>\n<p>This course covers only working with basic workflows, however, feel free to find out more information about <a href=\"https://docs.kentico.com/k12/configuring-kentico/configuring-the-environment-for-content-editors/configuring-workflows/designing-advanced-workflows\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">designing the advanced workflows</a> in our documentation.</p>\n<h2>Applying workflows</h2>\n<p>You can apply a workflow on pages on your site using one of the two ways:</p>\n<ul>\n  <li><strong>Apply a workflow directly on a page</strong>, or a page and its children directly from the Pages application. Applying a workflow directly also creates a workflow scope.</li>\n  <li><strong>Create a workflow scope</strong> when you need to have more control when applying a workflow on the pages on your site. You can exclude pages from a workflow and control to which page types and cultures the scope applies. Each scope can also have conditions based on which it will be applied to pages. Find out more about <a href=\"http:// https://docs.kentico.com/k12/configuring-kentico/configuring-the-environment-for-content-editors/configuring-workflows/applying-workflows-to-pages#Applyingworkflowstopages-Definingworkflowscopes\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">workflow scopes</a> in our documentation.</li>\n</ul>\n<p>You can find additional information about <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-pages/using-workflows\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">using</a> and <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-pages/using-workflows\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configuring</a> workflows in Kentico documentation.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d348d0ec-94db-4868-8959-55f8acaab4cf","_parentId":"378e27e9-c28c-4ffe-a78e-321675a24946","_type":"component","title":"Working with workflows","displayTitle":"Working with workflows"},{"body":"<p>In short, Kentico data is retrieved from the shared database via custom&nbsp;<strong>repositories&nbsp;</strong>and&nbsp;<strong>services&nbsp;</strong>that wrap&nbsp;<strong>Kentico API.&nbsp;</strong>Instead of Kentico objects,<strong>&nbsp;</strong>they return DTOs (data transfer objects) to achieve higher code separation. This is handled in the&nbsp;<strong>Business project</strong>. The DTO models are used to construct custom&nbsp;<strong>view models&nbsp;</strong>and passed to&nbsp;<strong>views&nbsp;</strong>through&nbsp;<strong>controllers&nbsp;</strong>in the&nbsp;<strong>Medio Clinic project</strong>.</p>\n<h2>Retrieving data in the Business project</h2>\n<p>The essential part of the business logic in the Medio Clinic's implementation scenario - the&nbsp;<strong>DocumentQueryService.</strong></p>\n<p>Medio Clinic's custom&nbsp;<em>DocumentQueryService</em>&nbsp;implements&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Query/IDocumentQueryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IDocumentQueryService</em></a>&nbsp;interface which wraps&nbsp;<a href=\"https://docs.kentico.com/k10/custom-development/working-with-pages-in-the-api#WorkingwithpagesintheAPI-Retrievingpages\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico DocumentQuery</a>&nbsp;and returns two queries. Both queries help us unify the way the solution returns published and the latest content for the preview mode and filters data based on culture.</p>\n<p>The&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Query/DocumentQueryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DocumentQueryService</em></a>&nbsp;injects an implementation of&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Context/ISiteContextService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ISiteContextService</em></a>&nbsp;interface which contains information about the global context, such as the site's current culture codenames or the state of the preview mode.</p>\n<p>The&nbsp;<strong>DocumentQueryService</strong>&nbsp;returns two methods to load page data. The first method&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Services/Query/DocumentQueryService.cs#L15\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>loads data from a page identified by the nodeGuid</em></a>, the second determines the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Services/Query/DocumentQueryService.cs#L23\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>behavior of the page for preview mode</em></a>. If the call requests a preview of the page, it retrieves the latest version of the page. Otherwise, it returns a published version of the page.</p>\n<p>Each repository inherits from&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/BaseRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseRepository</em></a>&nbsp;which implements an empty&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/IRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IRepository</em></a>&nbsp;interface (required by the DI container) and injects&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/BaseRepository.cs#L9\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DocumentQueryService</em></a>&nbsp;object.</p>\n<p>For example, the&nbsp;<em>ICultureRepository</em>&nbsp;defines&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/Culture/ICultureRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IEnumerable&lt;CultureDto&gt;</em></a>&nbsp;with&nbsp;<em>GetSiteCultures()</em>&nbsp;method. Its implementation in&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Culture/CultureRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureRepository</em></a><em>&nbsp;&nbsp;</em>using Kentico&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/Culture/CultureRepository.cs\"><em>CultureSiteInfoProvider</em></a>&nbsp;returns culture properties, such as&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/Culture/CultureRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureCode</em>,&nbsp;<em>CultureName</em>,&nbsp;<em>CultureShortName</em>,</a>&nbsp;and maps them to&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Dto/Culture/CultureDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureDto's properties</em></a>.</p>\n<p>Creating custom objects to which you map the retrieved values from the database allows you to adjust the retrieved data.</p>\n<p>For example, the&nbsp;<strong>Country selector</strong>&nbsp;form control (used in the&nbsp;<em>Company&nbsp;</em>page type) stores values for both&nbsp;<em>country</em>, e.g., USA, and&nbsp;<em>state</em>, e.g., New Hampshire, into one database field. In your&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/CompanyRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyRepository</em></a>, you can&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/Company/CompanyRepository.cs#L22\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>split the data</em></a>&nbsp;retrieved from the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/Company/CompanyRepository.cs#L16\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">\"<em>Country</em>\"<em>&nbsp;column</em></a>, and map separate values to the&nbsp;<em>CompanyDto's</em>&nbsp;<a href=\"http://%20https//github.com/Kentico/training-kentico-k12/blob/0c4ed660bfbd29a920122e0bc9e222965b936d3b/Business/Repository/Company/CompanyRepository.cs#L41-L42\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Country and State</em></a>&nbsp;properties.</p>\n<p>All the mentioned repositories and services are instantiated through dependency injection (handled by&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/DI/BusinessDependencies.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BusinessDependencies</em>&nbsp;</a>class which implements the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/DI/IBusinessDependencies.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IBusinessDependencies</em></a>&nbsp;interface), and registered in the Autofac config. The implementation of the Medio Clinic website also allows using Kentico services which are registered in the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/DI/CmsRegistrationSource.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CmsRegistrationSource</em></a>&nbsp;class.&nbsp;</p>\n<h2>Displaying data in the Medio Clinic project</h2>\n<p>The Medio clinic project contains files typical for a standard MVC website.</p>\n<p>The&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Global.asax.cs\"><em>Global.asax</em></a>&nbsp;registers vital Kentico-related functionalities. The&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/1aa2314ddd1a0f8214a8a28b7d6bee7bbb4b284c/MedioClinic/Global.asax.cs#L18\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ApplicationBuilder</em></a>&nbsp;enables configuration of Kentico specific features, for example, the use of&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/1aa2314ddd1a0f8214a8a28b7d6bee7bbb4b284c/MedioClinic/Global.asax.cs#L21\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Preview</em></a>. It also registers Medio Clinic's custom functionalities, such as the&nbsp;<em>Autofac</em>&nbsp;dependency injection container or bundled design-related files.</p>\n<p>The&nbsp;<strong>App_Start</strong>&nbsp;folder collects classes to run on application start.</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Autofac</em></a> initializes the&nbsp;<em>Autofac&nbsp;</em>builder which registers both Kentico specific and custom services, dependencies in controllers, and resolves the dependencies.</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/BundleConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BundleConfig</em></a><em>&nbsp;</em>class is a standard ASP.NET that bundles design related resources, such as CSS and scripts.</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig</em></a>&nbsp;you have already dealt with.</li>\n</ul>\n<p>The&nbsp;<strong>Config folder</strong>&nbsp;contains custom configuration classes.</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Config/AppConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>AppConfig</em></a>&nbsp;is a simple class with the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Config/AppConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>sitename&nbsp;</em></a>variable.</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Config/ConnectionStrings.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ConnectionString.config</em></a>&nbsp;contains user specific configuration details. If you develop your website using source control, we recommend that you separate user-specific configuration data from your website's&nbsp;<em>web.config</em>. However, the web.config needs to contain the correct&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Web.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>reference</em></a>.&nbsp;</li>\n</ul>\n<p>Besides the default&nbsp;<strong>Packages</strong>, Medio Clinic has the following packages installed:</p>\n<ul>\n  <li><a href=\"https://www.nuget.org/packages/Autofac/4.8.1\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Autofac MVC 5</a>&nbsp;(4.8.1)</li>\n  <li><a href=\"https://www.nuget.org/packages/Modernizr/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Modernizr</a></li>\n</ul>\n<p><strong>Content&nbsp;</strong>folder contains design related resources, such as CSS and scripts files, and the website's images that will be coded into the MVC application, and website editors cannot influence them from the administration interface.</p>\n<p><strong>Models&nbsp;</strong>folder contains viewmodel classes for each website's page stored within respective subfolders. The&nbsp;<em>viewmodel</em>&nbsp;classes introduce an additional layer between DTOs and the views.</p>\n<ul>\n  <li>All the view models inherit from the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a>. This class implements an empty&nbsp;<em>IViewModel</em>&nbsp;class (because of DI container) and creates a generic class for working with DTOs used on all pages across the website. The<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">&nbsp;<em>first PageViewModel class</em></a>&nbsp;is more generic and builds the whole view model instantiating objects such as&nbsp;<em>Company</em>, or&nbsp;<em>Metadata</em>&nbsp;directly. It is intended for pages which will not work any other data then the listed objects, such as the&nbsp;<em>Not found</em>&nbsp;page. The second&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a>&nbsp;class inherits from the generic <em>PageViewModel</em> class accepts a generic&nbsp;<em>TViewModel</em>&nbsp;parameter for the data in individual DTOs.</li>\n</ul>\n<p>Medio Clinic's&nbsp;<strong>controllers</strong>&nbsp;work as common ASP.NET MVC 5 controllers. All the controllers inherit from the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/BaseController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController</em></a>&nbsp;class which injects business dependencies and returns the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/BaseController.cs#L22\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a>&nbsp;with website's basic data, such as the&nbsp;<em>Company</em>&nbsp;name. Individual controllers inject their suitable dependencies to retrieve data specified in the actions and return specific views.</p>\n<p>Some controller's actions are additionally parametrized with&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>route attributes</em></a>. For example,&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorWithAlias</em></a>&nbsp;route&nbsp;<em>(Doctor/Detail/{nodeGuid}/{nodeAlias})</em>&nbsp;returns&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Detail</em></a>&nbsp;action which instantiates&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorDetailViewModel</em></a>&nbsp;and returns view with additional information about Medio Clinic doctors.</p>\n<p>Each controller action returns their&nbsp;<strong>views</strong>&nbsp;stored in respective subfolders. (For example, the&nbsp;<em>Doctors</em>&nbsp;folder contains&nbsp;<em>Index</em>&nbsp;and&nbsp;<em>Detail</em>&nbsp;views.) Let's look at some details about Medio Clinic's views.</p>\n<ul>\n  <li>Medio Clinic's shared&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Layout</em></a>&nbsp;is strongly typed against the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a>&nbsp;and defines the content of the website's header and footer.</li>\n  <li>The&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>culture drop-down selector</em></a>&nbsp;shows culture menu if the website contains any culture. It receives the culture parameter by calling the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>TwoLetterISOCharacters()</em></a>&nbsp;method on thread's current culture property.</li>\n  <li>Dynamic menu is covered in the next part of the training.</li>\n  <li>The&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>footer</em></a>&nbsp;displays general information.</li>\n  <li>Data stored in the database as resource strings are wrapped in a custom&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Localize()</em></a>&nbsp;extension wrapper method.</li>\n  <li>Each page on the website has its view strongly typed against the&nbsp;<em>PageViewModel</em>, and the page data to display are passed as its parameter; the second parameter is the page's title that will also display in the browser's tab/window.</li>\n  <li>Besides&nbsp;<em>namespaces</em>&nbsp;installed by default, the MedioClinic's views&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/web.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>web.config</em></a>&nbsp;registers&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/web.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Business.Extensions</em></a>&nbsp;namespace which adds custom methods for working with&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/LocalizationExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>localization</em></a>&nbsp;and&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/UrlExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>URLs</em></a>&nbsp;of page attachments.&nbsp;</li>\n</ul>\n<p>Feel free to familiarize yourself with the following views:</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/tree/master/MedioClinic/Views/Shared\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Home page</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Doctors/Index.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Doctors (listing page)</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Doctors/Detail.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Doctor details page</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Contact/Index.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Contact page</em></a></li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a826260a-49fc-45e8-a718-dfd3c9d6b874","_parentId":"22dfb5f8-5e95-46bb-8472-d10dc55c050d","_type":"component","title":"Medio Clinic implementation","displayTitle":"Medio Clinic implementation"},{"body":"<p>Kentico provides a flexible security model that allows you to configure granular access permissions for pages and applications in the administration interface.</p>\n<p>The security model consists of the following components.</p>","_items":[{"body":"<p><strong>Users</strong> are shared among websites by default. However, you can disable sharing of users in the <strong>Settings</strong> application. The system grants individual users specific privilege levels that determine whether the user can access the administration interface and perform various types of actions.</p>","title":"Users","_graphic":null},{"body":"<p><strong>Roles</strong> determine which actions users are allowed to perform on the website and within the Kentico administration interface. Roles are defined for individual websites or globally for all sites in the system.</p>","title":"Roles","_graphic":null},{"body":"<p><strong>Memberships</strong>&nbsp;are a collection of roles that can be assigned to users. Memberships are mainly intended for e-commerce scenarios and typically associated with a specific product.</p>","title":"Membershipts","_graphic":null},{"body":"<p>Module permissions grant access to specific features in the administration interface. Permissions are assigned to roles.</p>","title":"Module permissions","_graphic":null},{"body":"<p>Page permissions define which content, page types, and pages (<strong>ACLs</strong>) a user can access or modify.</p>","title":"Page permissions","_graphic":null},{"body":"<p><strong>UI personalization</strong> feature allows hiding UI components, such as applications, individual tabs, etc.) for specific users. A personalized UI helps to make the system easier to navigate.</p>","title":"UI personalization","_graphic":null}],"instruction":"","_layout":"full","_component":"accordion","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"03d8712f-05c5-480e-afad-05c7c7dbbed2","_parentId":"e83f700f-a538-46bd-a56f-4d93e12d46f4","_type":"component","title":"Theory: Security model overview","displayTitle":"Theory: Security model overview"},{"body":"<p><strong>Permissions </strong>provide a way to control which sections of the administration interface, applications, pages in the content tree and custom tables users can access.</p>\n<p>In Kentico, you can configure permissions at three levels.</p>\n<ul>\n  <li><strong>Module permissions</strong>&nbsp;allow access to specific Kentico features or functionalities. For example, with permissions for the Content module, users get access to the whole content of the website; the Design module allows users to develop and modify the design of the pages. Module permissions can only be granted to roles, from either the&nbsp;<strong>Permissions</strong>&nbsp;or&nbsp;<strong>Roles</strong>&nbsp;applications.</li>\n  <li><strong>Page type&nbsp;</strong>permissions grant access to all pages of a specific page type, such as <em>Articles</em> or <em>Products</em>. Page type permissions can only be assigned to roles, from either the&nbsp;<strong>Permissions</strong>&nbsp;or&nbsp;<strong>Roles</strong>&nbsp;applications.</li>\n  <li><strong>Page-level permissions (ACLs)</strong>&nbsp;allow or deny users access to particular sections or individual pages in the site content tree. You can also use ACLs to limit which pages website editors see in the content tree. If a user is granted access to the parent page of a section, the permission to access its child pages is inherited. You can break the inheritance by creating another <strong>ACL</strong>, e.g., for a specific child page. ACLs are assigned in the&nbsp;Pages application on the&nbsp;<strong>Properties</strong> &gt; <strong>Security&nbsp;</strong>tab.</li>\n</ul>\n<h2>How are page permissions evaluated?</h2>\n<p>Kentico checks permissions on each level. When assessing if a user can perform an action on a specific page, Kentico merges all the three levels together. However, the Deny option overrides settings for this permission on the other levels.</p>\n<figure data-asset-id=\"2d7f3fca-7811-436c-bf19-2124d7122de9\" data-image-id=\"2d7f3fca-7811-436c-bf19-2124d7122de9\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/81384d4c-9393-44c2-ac14-b0480da6b444/mvc-page-permissions-evaluation.png\" data-asset-id=\"2d7f3fca-7811-436c-bf19-2124d7122de9\" data-image-id=\"2d7f3fca-7811-436c-bf19-2124d7122de9\" alt=\"\"></figure>\n<p>You can permit access to a particular page in the content tree for individual users. However, you need to create roles and assign them the required permissions if you want your site's users to be able to work with specific features in Kentico, access all content or particular page types and custom tables.</p>\n<h2>Permissions and the user interface</h2>\n<p>Permissions&nbsp;in Kentico control what users can do in the system, such as create or modify objects. If you are creating a new user, remember to also set up the user's interface through the&nbsp;<strong>UI personalization</strong>&nbsp;application which controls what the user can see in the system. A user can have permission to modify the content of the website, but still not be able to see the related parts of the administration interface.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"bafbc255-1aeb-4ef2-9bd9-2e91de90efc6","_parentId":"e83f700f-a538-46bd-a56f-4d93e12d46f4","_type":"component","title":"Permissions","displayTitle":"Permissions"},{"body":"<p>Every user has one of the following privilege levels assigned:</p>\n<ul>\n  <li><strong>Global administrator</strong>&nbsp;grants full access to all parts of the system, can use any application, and perform any operation in the system.</li>\n  <li><strong>Administrator</strong>&nbsp;grants access to any of the non-global applications and features.</li>\n  <li><strong>Editor</strong>&nbsp;allows access to the administration interface and on-site editing mode. It does not grant any permissions and only differentiates site editors from registered users who are limited only to the live site. Editors get permissions to applications and actions through roles.</li>\n  <li><strong>None</strong>&nbsp;restricts users to the live site where they can view pages and perform actions depending on their assigned roles or the site's security options.</li>\n</ul>\n<p>By default, Kentico creates an <strong>Administrator </strong>user with the <em>Global administrator</em> privilege level and a <strong>Public </strong>user which represents an anonymous visitor on the website.</p>\n<p>Additionally, users can have any number of roles.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"67b647ea-2f93-4067-afd8-91441e7e8291","_parentId":"e83f700f-a538-46bd-a56f-4d93e12d46f4","_type":"component","title":"Users","displayTitle":"Users"},{"body":"<p><strong>Roles&nbsp;</strong>define what actions users can perform on the website and in the administration interface. Roles create an interface that maps which permissions were granted, and as objects, roles can also be reused for any number of users. Similarly, each user can have multiple roles.</p>\n<p>You can customize and define any number of roles and grant them permissions that fit your scenario. Kentico uses a flat-role structure. It's not possible to create a hierarchy among your roles. When a user is a member of multiple roles, the permissions from all of the roles merge together.</p>\n<p>That's why it is important to carefully plan which roles you need before you start defining them and assigning their permissions. With a higher number of roles in the system, it helps when you shift thinking from&nbsp;<em>\"Users under this role cannot do\"</em>&nbsp;to&nbsp;<em>\"Only users with this role can do.\"</em></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"bc77308e-3e3f-4b13-9df1-40c5220e528c","_parentId":"e83f700f-a538-46bd-a56f-4d93e12d46f4","_type":"component","title":"Roles","displayTitle":"Roles"},{"body":"<p>To complete the exercise, make sure your training website displays the following:</p>\n<ul>\n  <li><em>Home</em> page that displays the<em> \"</em>Welcome to Medio Clinic\" headline, the claim and a link button to the <em>Doctors</em> listing page. In a different section of the page, it displays all the Medio Clinic's services, their headlines, descriptions, and their icons.</li>\n  <li>Website displays all the doctors on a listing page, e.g., <em>Doctors</em>. The page shows doctor's profile image, doctor's name, and and excerpt from the doctor's bio, e.g., 2 lines of text. The doctor's \"card\" indicates if the doctor has/has not an emergency shift based on the day of the week &nbsp;on which the website visitor loaded the page. To display the information you can use, for example, Open/Closed badges.</li>\n  <li>Website displays doctors's <em>profile pages</em> with all the information that the admin interface stores, such as their name, profile image, degree, bio and a info about the emergency shift.</li>\n  <li>The website has a unified header and footer which display the following information:\n    <ul>\n      <li>Header:\n        <ul>\n          <li>Medio Clinic icon, name of the company, static menu with the home page and the doctor page, a language selector indicated with, e.g., an &nbsp;icon, which allows users to switch between website cultures (just a placeholder, making the menu and language selector dynamic is covered later in the course).</li>\n        </ul>\n      </li>\n      <li>Footer\n        <ul>\n          <li>Company address, links to Medio Clinic's social media profiles, a navigation menu (just a placeholder, making the menu dynamically add pages from the admin interface is covered later in the course).</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"adf6fdc1-47d4-40c2-a109-2da733a919ae","_parentId":"f963a95a-5537-4c91-82e6-5e0553616366","_type":"component","title":"Task: Working with content","displayTitle":"Task: Working with content"},{"body":"<p>Before you start with coding the business infrastructure, let's prepare the MedioClinic project and bring together various resources, such as css files, scripts or classes generated in the administration interface.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To design your website, you can use the files in the <a data-asset-id=\"735cce9c-3d28-4baf-857a-0ecdb9b2797a\" href=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/69a24a6a-de58-42e7-bb93-5cadd9f48940/MedioClinicStatic.zip\">MedioClinicStatic.zip</a> file. Create a new <em>Content</em> folder and add subfolders using the standard MVC pattern (e.g., <em>Css</em> &gt; <em>Master, </em>and <em>Images &gt; Logo</em> subfolders) and <em>Scripts</em> &gt; <em>Master</em> folders in the Medio Clinic project. From the Medio Clinic zip package add suitable resources, such as styles, images or script files. In the end, your <em>Content</em> and <em>Script</em> folders can look like the image on the left.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/62ff2b02-09e0-48e1-b1dc-c369a0f1b7e5/mvc-content-design-resources-scripts.png","alt":"mvc-content-design-resources-scripts.png"},"strapline":""},{"title":"","body":"<p>Create a new custom class library using the .NET Framework, e.g., <em>Business</em>. The class library must target the same version of the .NET Framework as both your Medio Clinic project and the administration interface, e.g., 4.6.1. Don't forget to add a reference to the <em>Business</em> library.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/499f1e9f-9bfb-4fce-bc71-78551ef02df3/mvc-custom-class-library.png","alt":"mvc-custom-class-library.png"},"strapline":""},{"title":"","body":"<p>Install the following NuGet packages:</p>\n<ul>\n  <li><a href=\"https://www.nuget.org/packages/Autofac/4.8.1\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Autofac</a> 4.8.1 latest stable NuGet package to both Medio Clinic and Business projects</li>\n  <li><a href=\"https://www.nuget.org/packages/autofac.mvc5/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Autofac.Mvc5</a> 4.0.2 NuGet package to the Medio Clinic project</li>\n  <li><a href=\"https://www.nuget.org/packages/Modernizr/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Modernizr</a> 2.8.3 NuGet package to the Medio Clinic project</li>\n  <li><em>Kentico.AspNet.Mvc</em> NuGet package to the Business project. (The package will install additional two packages - <em>Kentico.Libraries</em> and <em>Kentico.LanguagePack</em>.)</li>\n</ul>\n<p>In the&nbsp;end, your <em>Business</em>&nbsp;project will have these <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/packages.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">packages</a>&nbsp;installed.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5c306b0d-e837-4418-a6b2-c4e646502f23/mvc-custom-class-library-with-packages.png","alt":"mvc-custom-class-library-with-packages.png"},"strapline":""},{"title":"","body":"<p>Copy the <em>Info</em> and <em>Provider</em> classes for page types from the administration interface, for example, into a new <em>Generated </em>&gt; <em>Pages</em> folders in the <em>Business</em> project. To generate classes for all content-only page types, you can go to the <em>Page types</em> application &gt; <em>Code tab</em> and click the <em>Generate code button</em>.</p>\n<p>By default, the generated classes are stored in<em> ~/Old_App_Code/CMSClasses/MedioClinic</em>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/34a82771-b940-45c3-a6a5-7c03866cc354/mvc-generated-classes.png","alt":"mvc-generated-classes.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a629e152-417e-4c09-b3e1-6b891ce96ea4","_parentId":"8e53ddd0-5945-4092-8d94-4d6c601574a3","_type":"component","title":"Demo: Getting the MedioClinic project ready","displayTitle":"Demo: Getting the MedioClinic project ready"},{"body":"<p>In the following steps, you will see how the business logic is implemented on the Medio Clinic. Feel free to follow the steps and build your own training website's business infrastructure.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create a new <em>Services</em> folder in the <em>Business</em> project and add an empty public interface <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/IService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IService</em></a><em>.</em></p>\n<ol>\n  <li>Create <em>Context</em> subfolder, and add a public <em>ISiteContextService</em> interface.</li>\n  <li>In the <em>ISiteContextService</em>, declare variables for the site's codename, active culture, preview culture, and a bool variable which will determine whether the preview function is enabled.</li>\n</ol>","code":{"src":"namespace Business.Services.Context\n{\n    public interface ISiteContextService\n    {\n        // Holds a codename of the current site\n        string SiteName { get; }\n\n        // Holds the active site culture\n        string CurrentSiteCulture { get; }\n\n        // Indicates which preview culture should be used in the preview mode\n        string PreviewCulture { get; }\n\n        // Indicates if preview is enabled\n        bool IsPreviewEnabled { get; }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<ol>\n  <li>To keep the context of the whole site, create a new <em>SiteContextService</em> class, e.g., in the <em>Utils</em> folder in the MedioClinic project.&nbsp;</li>\n  <li>Make the class implement the <em>ISiteContextService</em> interface and determine the site's name, culture.</li>\n  <li>To determine the culture and the preview mode, call Kentico extension methods on an instance of <em>System.Web.HttpContext</em> for the current HTTP request.</li>\n</ol>","code":{"src":"using Business.Services.Context;\nusing Kentico.Content.Web.Mvc;\nusing Kentico.Web.Mvc;\n\nnamespace MedioClinic\n{\n    public class SiteContextService : ISiteContextService\n    {\n        public string SiteName { get; }\n\n        public string CurrentSiteCulture { get; }\n\n        public string PreviewCulture => System.Web.HttpContext.Current.Kentico().Preview().CultureName;\n\n        public bool IsPreviewEnabled => System.Web.HttpContext.Current.Kentico().Preview().Enabled;\n\n        public SiteContextService(string currentCulture, string sitename)\n        {\n            CurrentSiteCulture = currentCulture;\n            SiteName = sitename;\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>To map the <em>ISiteContextService </em>(and other interfaces later), you need to configure the <em>Autofac DI </em>container. You can create the <em>AutofacConfig</em> class in the Medio Clinic's <em>App_Start </em>folder, and register all types that implement the<em> IService</em> interface from the assembly. Also, don't forget to register the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Global.asax.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>AutofacContainer</em></a> in the <em>Global.asax</em> file by calling <em>AutofacConfig.ConfigureContainter</em> method.</p>","code":{"src":"using System.Globalization;\nusing System.Web.Mvc;\nusing Autofac;\nusing Autofac.Integration.Mvc;\nusing Business.Services;\nusing Business.Services.Context;\nusing MedioClinic.Config;\nusing MedioClinic.Utils;\n\nnamespace MedioClinic.App_Start\n{\n\tpublic class AutofacConfig\n\t{\n        public static void ConfigureContainer()\n        {\n            var builder = new ContainerBuilder();\n\n            // Registers all services that implement the IService interface\n            builder.RegisterAssemblyTypes(typeof(IService).Assembly)\n                .Where(x => x.IsClass && !x.IsAbstract && typeof(IService).IsAssignableFrom(x))\n                .AsImplementedInterfaces()\n                .InstancePerRequest();\n\n            // Registers site context\n            builder.RegisterType<SiteContextService>().As<ISiteContextService>()\n                .WithParameter((parameter, context) => parameter.Name == \"CurrentCulture\",\n                    (parameter, context) => CultureInfo.CurrentUICulture.Name)\n                .WithParameter((parameter, context) => parameter.Name == \"sitename\",\n                  (parameter, context) => AppConfig.Sitename)\n                .InstancePerRequest();\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>You know you will be using different services and repositories in the controllers, so you can help yourself and inject all the dependencies at one time.</p>\n<p>Let's create, for example, a dedicated class to handle resolving the <em>ISiteContextService</em> interface (and other business-related dependencies you might be adding later). You might want to store the new class, e.g., <em>IBusinessDependencies</em>&nbsp;interface, in a new <em>DI</em> folder in the <em>Business</em> project.</p>","code":{"src":"using Business.Services.Context;\n\nnamespace Business.DI\n{\n    public interface IBusinessDependencies\n    {\n        ISiteContextService SiteContextService { get; }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>In a new class <em>BusinessDependencies</em>, you can implement your <em>IBusinessDependencies</em> interface. Don't forget to register <em>BusinessDependencies </em>in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Autofac container</em></a><em> </em>by calling <em>builder.RegisterType&lt;BusinessDependencies&gt;()</em> method.</p>","code":{"src":"using Business.Services.Context;\n\nnamespace Business.DI\n{\n    public class BusinessDependencies : IBusinessDependencies\n    {\n        public ISiteContextService SiteContextService { get; }\n\n        public BusinessDependencies(\n            ISiteContextService siteContextService\n            )\n        {\n            SiteContextService = siteContextService\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>To separate Kentico API and your MVC application's code, let's will wrap Ketnico <em>DocumentQuery</em> in a custom service. Create a new <em>Query</em> folder in the <em>Services</em> folder and add public <em>IDocumentQueryService</em> interface.</p>\n<p>The <em>IDocumentQueryInterface</em> defines two wrapper queries around the <a href=\"https://docs.kentico.com/k12/custom-development/working-with-pages-in-the-api#WorkingwithpagesintheAPI-Retrievingpages\">DocumentQuery</a>. The custom queries filter data based on active culture and handles the preview mode and return document queries. The first method accepts <em>nodeGuid</em> parameter and queries for document identified by the <em>nodeGuid</em>. The second query accepts generic <em>TDocument</em> parameter a returns type of the generated page type.</p>","code":{"src":"using System;\nusing CMS.DocumentEngine;\n\nnamespace Business.Services.Query\n{\n    public interface IDocumentQueryService : IService\n    {\n        /// <summary>\n        /// Wrapper around Kentico's DocumentQuery. \n        /// This query filters data based on active culture and handles the preview mode.\n        /// </summary>\n        /// <typeparam name=\"TDocument\">Type of the generated page</typeparam>\n        /// <param name=\"nodeGuid\">NodeGuid of the page</param>\n        /// <returns>DocumentQuery to a document identified by its nodeGuid</returns>\n        DocumentQuery<TDocument> GetDocument<TDocument>(Guid nodeGuid) where TDocument : TreeNode, new();\n\n        /// <summary>\n        /// Wrapper around Kentico's DocumentQuery. \n        /// This query filters data based on active culture and handles the preview mode.\n        /// </summary>\n        /// <typeparam name=\"TDocument\">Type of the generated page</typeparam>\n        /// <returns>DocumentQuery documents</returns>\n        DocumentQuery<TDocument> GetDocuments<TDocument>() where TDocument : TreeNode, new();\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>To retrieve data from the database, implement the <em>IDocumentQueryService</em> interface in a new <em>DocumentQueryService. </em>The class:</p>\n<ul>\n  <li>Injects the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Context/ISiteContextService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ISiteContextService</em></a> and determines the active culture and the preview mode in the <em>SiteContext</em>,</li>\n  <li>Determines whether the user requests a published page or a page in the preview mode, and constructs suitable queries for both occasions.</li>\n  <li>The first query uses Kentico <em>GetDocument()</em> method and returns page identified by its <em>nodeGuid</em>.</li>\n  <li>The second query uses Kentico <em>GetDocuments()</em> method identifies the page based on its <em>page type</em>, and either loads the latest version of the document in the preview mode, or returns the latest published version of the page on the current site in the active culture context.</li>\n</ul>","code":{"src":"using System;\nusing CMS.DocumentEngine;\nusing Business.Services.Context;\n\nnamespace Business.Services.Query\n{\n    public class DocumentQueryService : IDocumentQueryService\n    {\n        private ISiteContextService SiteContext { get; }\n\n        public DocumentQueryService(ISiteContextService siteContext)\n        {\n            SiteContext = siteContext;\n        }\n\n        public DocumentQuery<TDocument> GetDocument<TDocument>(Guid nodeGuid) where TDocument : TreeNode, new()\n        {\n            return GetDocuments<TDocument>()\n                .TopN(1)\n                .WhereEquals(\"NodeGUID\", nodeGuid);\n\n        }\n\n        public DocumentQuery<TDocument> GetDocuments<TDocument>() where TDocument : TreeNode, new()\n        {\n            var query = DocumentHelper.GetDocuments<TDocument>();\n\n            // Loads the latest version of documents as preview mode is enabled\n            if (SiteContext.IsPreviewEnabled)\n            {\n                query = query\n                    .AddColumns(\"NodeSiteID\") // Required for preview mode in Admin UI\n                    .OnSite(SiteContext.SiteName) // There could be more sites with matching documents\n                    .LatestVersion()\n                    .Culture(SiteContext.PreviewCulture);\n            } else {\n                query = query\n                    .OnSite(SiteContext.SiteName) // There could be more sites with matching documents\n                    .Published()\n                    .PublishedVersion()\n                    .Culture(SiteContext.CurrentSiteCulture);\n            }\n\n            return query;\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>To inject the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Query/DocumentQueryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DocumentQueryService</em></a> in all the repositories that will retrieve content from the database, you can create an abstract base class <em>BaseRepository</em>.</p>\n<p>It can be resolved automatically via DI container (requires an empty <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/IRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IRepository</em></a>)<em> </em>and stored in a <em>Repository </em>folder<em>. </em>Don't forget register all repositories that implement the <em>IRepository</em> in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>AutofacConfig</em></a>.</p>","code":{"src":"using Business.Services.Query;\n\nnamespace Business.Repository\n{\n    public abstract class BaseRepository\n    {\n        protected IDocumentQueryService DocumentQueryService { get; }\n\n        protected BaseRepository(IDocumentQueryService documentQueryService)\n        {\n            DocumentQueryService = documentQueryService;\n        }\n    }\n}\n","lang":"c_"},"strapline":""},{"title":"","body":"<p>You will be retrieving different types of data from the database and pass them to the views. One of the approaches is to store the required data separately from the logic which retrieves them in simple, uncomplicated classes, such as <a href=\"https://en.wikipedia.org/wiki/Data_transfer_object\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">data transfer objects</a>.</p>\n<ol>\n  <li>To store only the necessary data related to <strong>culture</strong>, create a <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Culture/CultureDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureDto</em></a>&nbsp;in a&nbsp;<em>Dtos</em>&nbsp;folder in the&nbsp;<em>Business</em>&nbsp;project.</li>\n  <li>Instantiate the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Culture/CultureDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureDto</em></a>&nbsp;in a new&nbsp;<em>CultureRepository</em>&nbsp;class. The repository gets the website's culture from the injected <em>siteContextService</em>, and then maps the Kentico data to the Dto's properties. To keep your approach to the design-pattern consistent, make the&nbsp;<em>CultureDto</em>&nbsp;implement an empty&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/e5501d068435b2ad59faad6d5ccb5059f524edab/Business/Dto/IDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IDto</em></a>&nbsp;interface.</li>\n  <li>Make your new&nbsp;<em>CultureRepository</em>&nbsp;implement an&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Culture/ICultureRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ICultureRepository</em></a><em> </em>interface which defines <em>GetSiteCultures()</em> method<em>. </em>Also, don't forget to register the new repository in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/DI/BusinessDependencies.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BusinessDependencies</em></a><em> </em>class<em>.</em></li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.Linq;\nusing CMS.SiteProvider;\nusing Business.Dto.Culture;\nusing Business.Services.Context;\n\nnamespace Business.Repository.Culture\n{\n    public class CultureRepository : ICultureRepository\n    {\n        private ISiteContextService SiteContextService { get; }\n\n        public CultureRepository(ISiteContextService siteContextService)\n        {\n            SiteContextService = siteContextService;\n        }\n\n        public IEnumerable<CultureDto> GetSiteCultures()\n        {\n            return CultureSiteInfoProvider.GetSiteCultures(SiteContextService.SiteName).Items.Select(m =>\n                new CultureDto()\n                {\n                    CultureCode = m.CultureCode,\n                    CultureName = m.CultureName,\n                    CultureShortName = m.CultureShortName\n                }\n            );\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Before you start implementing the methods Medio Clinic uses to process requests and displays content on the live site, you might want to retrieve the remaining data which repeats across the site (for example, company name and address). To keep approach consistent, you can get get the company details in the <em>CompanyRepository</em> and data related to MedioClinic's presence on social networks. (<em>SocialLinkRepository</em>).&nbsp;</p>\n<p>Note that your repositories can introduce an additional logic to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Company/CompanyDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Dtos</em></a> and build a string <em>ShortAddress</em> or work <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/CompanyRepository.cs#L20\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>with the values you are retrieving</em></a>, e.g., split the country and state names (Kentico Country selector form control stores the values into one field in the database.)</p>\n<p>At the end, your website can contain the following classes:</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Company/CompanyDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyDto</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/CompanyRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/ICompanyRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ICompanyRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Social/SocialLinkDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SocialLinkDto</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Social/SocialLinkRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SocialLinkRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Social/ISocialLinkRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ISocialLinkRepository</em></a></li>\n</ul>\n<p>Don't forget to define your new repositories in <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/DI/IBusinessDependencies.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IBusinessDependencies</em></a> interface and implement in <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/DI/BusinessDependencies.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BusinessDependencies</em></a> class.</p>","code":{"src":"// CompanyRepository\npublic CompanyDto GetCompany()\n        {\n            return DocumentQueryService.GetDocuments<CMS.DocumentEngine.Types.Training.Company>()\n                .AddColumns(\"CompanyName\", \"Street\", \"City\", \"Country\",\n            \"ZipCode\", \"PhoneNumber\", \"Email\", \"DocumentID\")\n                .TopN(1)\n                .ToList()\n                // Splits Country database field which stores values from the country and state form controls\n                .Select(m =>\n                {\n                    var splitCountry = m.Country.Split(';');\n\n                    string country;\n                    string state = null;\n                    if (splitCountry.Length == 2)\n                    {\n                        country = splitCountry[0];\n                        state = splitCountry[1];\n                    }\n                    else\n                    {\n                        country = m.Country;\n                    }\n\n                    return new CompanyDto()\n                    {\n                        Name = m.CompanyName,\n                        City = m.City,\n                        Street = m.Street,\n                        Country = country,\n                        State = state,\n                        Email = m.Email,\n                        PhoneNumber = m.PhoneNumber,\n                        ZipCode = m.ZipCode\n                    };\n                })\n                .FirstOrDefault();\n        }\n    }\n}\n\n// CompanyDto\nnamespace Business.Dto.Company\n{\n    public class CompanyDto : IDto\n    {\n        public string Name { get; set; }\n        public string Street { get; set; }\n        public string City { get; set; }\n        public string Country { get; set; }\n        public string State { get; set; }\n        public string PhoneNumber { get; set; }\n        public string Email { get; set; }\n        public string ZipCode { get; set; }\n        // Creates property ShortAddress\n        public string ShortAddress => $\"{Street}, {City}, {Country}\";\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>In the previous steps, you prepared logic which retrieves data that repeat across the website and stores it in their respective DTOs. (For example, the header and footer which always contain the same information about the company and link to its social media profiles.)</p>\n<p>You don't want to repeat the same code to model the basic information across the website. To handle the data effectively, you can introduce a <em>ViewModel</em> service layer, and store the repeating information in suitable <em>view models</em>.&nbsp;</p>\n<ul>\n  <li>The first <em>PageViewModel</em> base class can store the information that repeats everywhere (in case you need to pass only that information and nothing else),</li>\n  <li>The second <em>PageViewModel</em> can inherit from the base class and accept other <em>view models</em> as parameter. (The additional view models will model data for individual pages on the website).</li>\n</ul>\n<p>To stay consistent in the desing-pattern, let the <em>view models</em> implement the same empty <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/IViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>interface</em></a>.</p>","code":{"src":"using System.Collections.Generic;\nusing Business.Dto.Company;\nusing Business.Dto.Culture;\nusing Business.Dto.Social;\n\nnamespace MedioClinic.Models\n{\n    // Base class\n    public class PageViewModel : IViewModel\n    {\n        public CompanyDto Company { get; set; }\n        public IEnumerable<CultureDto> Cultures { get; set; }\n        public IEnumerable<SocialLinkDto> SocialLinks { get; set; }\n    }\n\n    public class PageViewModel<TViewModel> : PageViewModel where TViewModel : IViewModel\n    {\n        public TViewModel Data { get; set; }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Similarly to the base <em>PageViewModel</em>, you may want to process repeated requests in a <em>BaseController. </em>The <em>BaseController</em> will only model the repeated data, and the requests will be resolved in <em>controllers</em> derived from the <em>BaseController</em>, such as the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/HomeController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>HomeController</em></a> or <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorsController</em></a>.</p>\n<p>The base controller injects the all the necessary business dependencies and returns the <em>PageViewModel</em> with mapped properties. To store data, such as the page <em>title</em> which will be displayed in the browser tab, the <em>company name</em> in the logo area, or other types of data &nbsp;you may want to use as the page's <em>metadata</em>, the <em>PageViewModel.cs</em> creates a new <a href=\"https://github.com/Kentico/training-kentico-k12/blob/e5501d068435b2ad59faad6d5ccb5059f524edab/Business/Dto/Page/PageMetadataDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageMetadataDto</em></a> object and maps its properties &nbsp;in one of the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/e5501d068435b2ad59faad6d5ccb5059f524edab/MedioClinic/Controllers/BaseController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>controller's private methods</em></a>.</p>\n<p>If you follow the examples in your code, don't forget to invoke the <em>RegisterControllers()</em> method in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>AutofacConfig</em></a>, so the container resolves also dependencies in Medio Clinic's controllers.</p>","code":{"src":"using System.Collections.Generic;\nusing System.Web.Mvc;\nusing Business.DI;\nusing MedioClinic.Models;\nusing Business.Dto.Culture;\nusing Business.Dto.Company;\nusing Business.Dto.Social;\nusing Business.Dto.Page;\n\n\nnamespace MedioClinic.Controllers\n{\n    public class BaseController : Controller\n    {\n        protected IBusinessDependencies Dependencies { get; }\n        protected BaseController(IBusinessDependencies dependencies)\n        {\n            Dependencies = dependencies;\n        }\n\n        public PageViewModel GetPageViewModel(string title)\n        {\n            return new PageViewModel()\n            {\n                Metadata = GetPageMetadata(title),\n                Company = GetCompany(),\n                Cultures = Dependencies.CultureRepository.GetSiteCultures(),\n                SocialLinks = GetSocialLinks()\n            };\n        }\n\n        public PageViewModel<TViewModel> GetPageViewModel<TViewModel>(TViewModel data, string title) where TViewModel : IViewModel\n        {\n            return new PageViewModel<TViewModel>()\n            {\n                Metadata = GetPageMetadata(title),\n                Company = GetCompany(),\n                Cultures = GetSiteCultures(),\n                SocialLinks = GetSocialLinks(),\n                Data = data\n            };\n        }\n\n        private PageMetadataDto GetPageMetadata(string title)\n        {\n            return new PageMetadataDto()\n            {\n                Title = title,\n                CompanyName = Dependencies.SiteContextService.SiteName\n            };\n        }\n\n        private CompanyDto GetCompany()\n        {\n            return Dependencies.CompanyRepository.GetCompany();\n        }\n\n        private IEnumerable<CultureDto> GetSiteCultures()\n        {\n            return Dependencies.CultureRepository.GetSiteCultures();\n        }\n\n        private IEnumerable<SocialLinkDto> GetSocialLinks()\n        {\n            return Dependencies.SocialLinkRepository.GetSocialLinks();\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>At some point in the future, you may also want to use some of the built-in <em>Kentico services</em>, such as <a href=\"https://docs.kentico.com/k11/developing-websites/developing-sites-using-asp-net-mvc/implementing-on-line-marketing-features-on-mvc-sites/tracking-contacts-on-mvc-sites\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">tracking contacts</a> or <a href=\"https://docs.kentico.com/k11/developing-websites/developing-sites-using-asp-net-mvc/implementing-on-line-marketing-features-on-mvc-sites/email-marketing-on-mvc-sites/handling-newsletter-subscriptions-on-mvc-sites\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">handling newsletter subscriptions</a>. To get your website ready for the future enhancements, create &nbsp;a custom, e.g.,&nbsp;<em>CmsRegistrationSource&nbsp;</em>class, and call <em>RegisterSource()</em> method in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/e5501d068435b2ad59faad6d5ccb5059f524edab/MedioClinic/App_Start/AutofacConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>AutofacConfig</em></a><em>&nbsp;</em>to register it in the Medio Clinic application.</p>\n<p>See the comments in the sample code for the functionality you custom class should deal with.</p>","code":{"src":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Autofac.Builder;\nusing Autofac.Core;\n\nnamespace Business.DI\n{\n    public class CmsRegistrationSource : IRegistrationSource\n    {\n        /// <summary>\n        /// Gets whether the registrations provided by this source are 1:1 adapters on top of other components (I.e. like Meta, Func or Owned.)\n        /// </summary>\n        public bool IsAdapterForIndividualComponents => false;\n\n\n        /// <summary>\n        /// Retrieves registration for an unregistered service that is to be used by the container.\n        /// </summary>\n        /// <param name=\"service\">The service that was requested.</param>\n        /// <param name=\"registrationAccessor\">A function that returns existing registrations for a service.</param>\n        public IEnumerable<IComponentRegistration> RegistrationsFor(Service service, Func<Service, IEnumerable<IComponentRegistration>> registrationAccessor)\n        {\n            // Checks if the container already contains an existing registration for the requested service\n            if (registrationAccessor(service).Any())\n            {\n                return Enumerable.Empty<IComponentRegistration>();\n            }\n            // Checks if the required service carries valid type information\n            if (!(service is IServiceWithType swt))\n            {\n                return Enumerable.Empty<IComponentRegistration>();\n            }\n\n            // Gets an instance of the requested service using CMS.Core.API\n            object instance = null;\n            if (CMS.Core.Service.IsRegistered(swt.ServiceType))\n            {\n                instance = CMS.Core.Service.Resolve(swt.ServiceType);\n            }\n\n            if (instance == null)\n            {\n                return Enumerable.Empty<IComponentRegistration>();\n            }\n\n            // Registers the service instance in the container\n            return new[] { RegistrationBuilder.ForDelegate(swt.ServiceType, (c, p) => instance).CreateRegistration() };\n        }\n    }\n}","lang":"c_"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"aaf59c28-619a-4a3a-9f1b-77315ce89c15","_parentId":"8e53ddd0-5945-4092-8d94-4d6c601574a3","_type":"component","title":"Demo: Creating the business infrastructure","displayTitle":"Demo: Creating the business infrastructure"},{"body":"<p>The following steps show one of the many ways you can take to build the Medio Clinic's home page. It continues in building the site with the infrastructure prepared in the previous part of the course, so it's possible that your solution will differ. There are number of ways to build an MVC website, so feel free to implement your&nbsp;<em>Home</em>&nbsp;page in way you like.</p>\n<p>The code snippets and the additional comments explain how the Medio Clinic is built and do not provide step-by-step guidance. If you decide to follow the demo, please note that<strong>&nbsp;copy-pasting of the sample code snippets into your solution will not likely work and you will need to finish the classes with some custom code.</strong>&nbsp;Feel free to consult&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>the final Medio Clinic solution</em></a>&nbsp;on the GitHub any time you need to see the \"bigger\" picture.</p>\n<h3>The Home page</h3>\n<p>Data for the <em>Home</em> page are stored in four separate content-only pages - the <em>HomeSection</em> and three child pages that store information about Medio clinic's services in text and icons in the format of page attachments.</p>\n<p>Let's display all the repeated data in a shared <em>_Layout</em> view, then put it together with the <em>Home</em>'s <em>Index</em> <em>v</em>iew to display the Medio Clinic's home page.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First of all, add a new <em>_Layout</em> file within the <em>Shared</em> folder and a <em>ViewStart</em> file. Then you can take the following steps:</p>\n<ol>\n  <li>Copy-paste the content of the <em>index.html</em> file from the Medio Clinic's course resources.</li>\n  <li>Call <em>@RenderBody()</em> between the ending <em>&lt;/nav&gt;</em> and opening <em>&lt;footer&gt;</em> tags.</li>\n  <li>Strongly-type the <em>_Layout</em> against the <em>@MedioClinic.Models.PageViewModel</em>.</li>\n  <li>Update references to the design-related files, such as CSS, icons, and scripts. (The course will be covering bundling and minification later, however, feel free to follow MVC best practices and implement the bundles now.)&nbsp;</li>\n</ol>\n<p>At the end of this step (without bundling), your <em>_Layout's </em>markup might look like the snippet on the left.</p>","code":{"src":"@model MedioClinic.Models.PageViewModel\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0\" />\n    <title>Home | Medio Clinic</title>\n    <!-- CSS  -->\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"~/Content/Images/Logo/mcfavicon.ico\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <link href=\"~/Content/Css/Master/materialize.min.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n    <link href=\"~/Content/Css/Master/style.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n    <link href=\"~/Content/Css/Master/icons.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.1.0/css/all.css\" integrity=\"sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt\"\n          crossorigin=\"anonymous\">\n</head>\n\n<body>\n    <nav class=\"white\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n            <a id=\"logo-container\" href=\"index.html\" class=\"brand-logo\">\n                <img class=\"kn-logo\" src=\"assets/Logo/Logoic.png\">\n                <strong>Medio</strong>Clinic\n            </a>\n            <!-- Languages selector -->\n            <ul id=\"langs\" class=\"dropdown-content\">\n                <li>\n                    <a href=\"#\">EN</a>\n                </li>\n                <li>\n                    <a href=\"#\">ESP</a>\n                </li>\n            </ul>\n            <ul class=\"right hide-on-med-and-down\">\n                <li>\n                    <a href=\"index.html\">Home</a>\n                </li>\n                <li>\n                    <a href=\"doctors.html\">Our doctors</a>\n                </li>\n                <li>\n                    <a href=\"contact.html\">Contact us</a>\n                </li>\n                <li>\n                    <a class=\"dropdown-trigger\" href=\"#\" data-target=\"langs\">\n                        EN\n                        <i class=\"fas fa-globe-africa right\"></i>\n                    </a>\n                </li>\n            </ul>\n            <ul id=\"nav-mobile\" class=\"sidenav\">\n                <li>\n                    <a href=\"index.html\">Home</a>\n                </li>\n                <li>\n                    <a href=\"doctors.html\">Our doctors</a>\n                </li>\n                <li>\n                    <a href=\"contact.html\">Contact us</a>\n                </li>\n            </ul>\n            <a href=\"#\" data-target=\"nav-mobile\" class=\"sidenav-trigger\">\n                <i class=\"material-icons\">menu</i>\n            </a>\n        </div>\n    </nav>\n\n   @RenderBody()\n    \n    <footer class=\"page-footer blue-grey darken-4\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">Contact</h5>\n                    <div class=\"grey-text text-lighten-4\">\n                        <address>\n                            <p class=\"kn-smaller kn-address\">\n                                <strong>Medio Clinic</strong>\n                                <br> 617-600-225\n                                <br> info@medio-clinic.com\n                                <br> 7A Kentico Street, Bedford, NH 03110, USA\n                            </p>\n                        </address>\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">Follow Us</h5>\n                    <div class=\"kn-social\">\n                        <a href=\"http://www.facebook.com/KenticoCMS\" title=\"Follow us on Facebook\">\n                            <img src=\"assets/facebook.png\">\n                        </a>\n                        <a href=\"https://twitter.com/Kentico\" title=\"Follow us on Twitter\">\n                            <img src=\"assets/twitter.png\">\n                        </a>\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">Navigation</h5>\n                    <ul class=\"kn-smaller\">\n                        <li>\n                            <a class=\"white-text\" href=\"#\">Our doctors</a>\n                        </li>\n                        <li>\n                            <a class=\"white-text\" href=\"#\">Contact Us</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"footer-copyright white\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col s12\">\n                        <div class=\"blue-grey-text text-darken-2\">\n                            Built with\n                            <a href=\"http://materializecss.com\">Materialize</a> for the MVC Developer training. Kentico, 2018.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </footer>\n\n    <!-- Scripts -->\n    <script src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\n    <script src=\"~/Scripts/Master/main.js\"></script>\n    <script src=\"~/Scripts/Master/materialize.min.js\"></script>\n    <script src=\"~/Scripts/Master/init.js\"></script>\n\n</body>\n</html>","lang":"html"},"strapline":""},{"title":"","body":"<p>To retrieve Kentico data, build two separate repositories - <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Home/HomeSectionRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>the first repository </em></a>&nbsp;retrieves data from the <em>HomeSection</em> page, and <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/CompanyServiceRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>the second</em></a> from its child pages with services. Let's make the repositories implement their interfaces, and map the data in separate <em>DTOs</em>.</p>\n<p>You can compare your solution with the <em>Medio Clinic</em> sample solution using the following links:</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Home/HomeSectionRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>HomeSectionRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Home/IHomeSectionRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IHomeSectionRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Home/HomeSectionDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>HomeSectionDto</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/CompanyServiceRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyServiceRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Company/ICompanyServiceRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ICompanyServiceRepository</em></a></li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Company/CompanyServiceDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyServiceDto</em></a></li>\n</ul>\n<p>Using the retrieved data, you can create a <em>HomeViewModel</em> which gets data for <em>CompanyServices</em> and <em>HomeSections </em>that you will later pass to the view. At the end, your <em>viewmodel </em>class might look like the sample code.&nbsp;</p>","code":{"src":"using System.Collections.Generic;\nusing Business.Dto.Company;\nusing Business.Dto.Home;\n\nnamespace MedioClinic.Models.Home\n{\n    public class HomeViewModel : IViewModel\n    {\n        public IEnumerable<CompanyServiceDto> CompanyServices { get; set; }\n\n        public HomeSectionDto HomeSection { get; set; }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Make your <em>HomeController</em> inherit from the <em>BaseController</em> (which already models data for, e.g., company details). <em>HomeController</em> injects suitable dependencies and creates objects which hold the data for the home page (<em>Home section</em> page in the content tree) and Medio Clinic's services (stored in pages based on the <em>Company service</em> page type).&nbsp;</p>\n<p>The Medio Clinic home view's <em>Index </em>action defines a variable <em>homeSection</em> (with accepts data from the <em>HomeSectionRepository</em>), invokes <em>GetPageViewModel </em>method with the <em>HomeViewModel </em>as one parameter, and the page <em>title</em> as the second parameter, and passes the data to the view. &nbsp;The method creates a <em>model</em> with all the home page data and passes it to a view.&nbsp;</p>\n<p>Your <em>HomeController</em> should return the <em>HttpNotFound()</em> method in case the <em>homeSection</em> contains no data.</p>","code":{"src":"using System.Web.Mvc;\nusing Business.DI;\nusing Business.Repository.Company;\nusing Business.Repository.Home;\nusing MedioClinic.Models.Home;\n\nnamespace MedioClinic.Controllers\n{\n    public class HomeController : BaseController\n    {\n        private ICompanyServiceRepository CompanyServiceRepository { get; }\n        private IHomeSectionRepository HomeSectionRepository { get; }\n\n        public HomeController(\n            IBusinessDependencies dependencies,\n            ICompanyServiceRepository companyServiceRepository,\n            IHomeSectionRepository homeSectionRepository) : base(dependencies)\n        {\n            CompanyServiceRepository = companyServiceRepository;\n            HomeSectionRepository = homeSectionRepository;\n        }\n\n        public ActionResult Index()\n        {\n            var homeSection = HomeSectionRepository.GetHomeSection();\n             \n            if (homeSection == null)\n            {\n                return HttpNotFound();\n            }\n\n            var model = GetPageViewModel(new HomeViewModel()\n           {\n                CompanyServices = CompanyServiceRepository.GetCompanyServices(),\n                HomeSection = homeSection\n           }, homeSection.Title);\n\n            return View(model);\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<h3>Building the Medio Clinic's Home <em>Index</em> view</h3>\n<ol>\n  <li>Create a view strongly-typed view against the <em>PageViewModel</em> with the <em>HomeViewModel</em> as a parameter. To create the page's design, you can use the HTML markup from the <em>index.html</em> file - the <em>Clinic header </em>and <em>Clinic services</em> sections<em>.</em></li>\n  <li>Replace the static content with Razor inline expressions and call the appropriate properties, e.g., <em>Title</em>, <em>Text</em>, <em>Link</em> for the <em>Home</em> section.</li>\n  <li>To display each page containing information about services, call the <em>foreach</em> method and retrieve every service within the <em>CompanyServices</em> model. &nbsp;</li>\n  <li>Replace the static text with Razor code and call the <em>Header</em>, <em>Text </em>properties. To get the <em>IconPath</em> value you need to dynamically resolve icons of the services , you may declare <em>@Url.Kentico().ImageUrl(service.IconPath, SizeConstraint.Empty) </em>method which returns the URL path to the image. However, we recommend that you<strong> wrap Kentico API in a custom extension method</strong>, e.g., <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/UrlExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>KenticoImageUrl</em></a><em>. </em>Not only this gives you an opportunity<em> </em>to<em> e</em>xtend the wrapper method with an additional methods to set<em> </em><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Models/KenticoSizeConstraints.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>size constraints</em></a>, but it also eliminates Kentico-specific calls within your website's presentation layer.</li>\n</ol>","code":{"src":"<!-- Example of the Medio Clinic's Home page view -- >\n@using MedioClinic.Models.Home\n\n@model MedioClinic.Models.PageViewModel<HomeViewModel>\n<!-- Clinic header -->  \n@if (Model.Data.HomeSection != null)\n{\n    <div class=\"section kn-section-top\">\n        <div class=\"kn-header-gradient\">\n            <div class=\"container kn-header\">\n                <h1 class=\"col l10 m4 s12\">@Model.Data.HomeSection.Title</h1>\n                <div class=\"row left\">\n                    <h5 class=\"col l10 m8 s12 kn-light\">\n                        @Model.Data.HomeSection.Text\n                    </h5>\n                </div>\n                <div class=\"row\">\n                    <div class=\"left\">\n                        <a href=\"@Url.Action(\"index\", \"Doctors\")\" class=\"kn-btn-doctors btn waves-effect waves-light red darken-3\">@Model.Data.HomeSection.LinkText</a>\n                        <br>\n                        <br>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n}\n<!-- Clinic services -->\n@if (Model.Data.CompanyServices != null)\n{\n    <div class=\"container\">\n        <div class=\"section\">\n            <div class=\"row\">\n                @foreach (var service in Model.Data.CompanyServices)\n                {<div class=\"col s12 m4\">\n                        <div class=\"icon-block\">\n                            <img class=\"kn-icons kn-center\" src=\"@Url.KenticoImageUrl(service.IconPath)\" />\n                            <h4 class=\"center\">@service.Header</h4>\n                            <p class=\"light center\">\n                                @service.Text\n                            </p>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n        <br>\n        <br>\n    </div>\n}","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5b5f1816-fcd1-49b6-9232-c0252a8a67bd","_parentId":"8e53ddd0-5945-4092-8d94-4d6c601574a3","_type":"component","title":"Demo: Displaying the Home page","displayTitle":"Demo: Displaying the Home page"},{"body":"<p>In the following steps, you will see a demo of the approach we took to display Medio Clinic's doctor listing and profile pages. Feel free to implement both pages in any way - or tag along and use the hints and ideas from the sample Medio Clinic implementation.</p>\n<h3>Doctors and doctor's Details pages</h3>\n<p>Just a reminder, Kentico stores the doctor-related data in the content tree in separate content-only pages for individual doctors. All the doctor pages come under the <em>DoctorSection</em> parent page. We wanted to display doctor data in two pages:</p>\n<ul>\n  <li>Listing page with some basic information, such as name, a snippet of doctor's bio, or info about emergency shifting in the listing page, and</li>\n  <li>Doctor profile page with all the data the admin stores about the doctor.</li>\n</ul>\n<p>To display the data, you can take a similar approach to what you did with the <em>Home </em>page - retrieve the data from the database via injected repositories and store it in separate DTOs for each page type (<em>DoctorSectionDto</em> and <em>DoctorDto</em>). Then use the data to create <em>viewmodels</em> in controllers and passed them to partial views for each page.&nbsp;</p>\n<p>Feel free to code along and build your training website!</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<h3>Storing the data</h3>\n<p>Create two DTOs to map the data.&nbsp;</p>\n<ul>\n  <li>The <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Doctors/DoctorSectionDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorSectionDto</em></a> is an simple object with <em>Header</em> property.</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Doctors/DoctorDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorDto</em></a> object maps all the information about the doctor in several properties. The DTO contains a simple logic to create additional properties, such as the <em>FullName </em>property. Based on the current day, the <em>HasShiftToday</em> property also stores information if the doctor has an emergency shift.</li>\n</ul>\n<p>Retrieve the data from the shared database.</p>\n<ul>\n  <li>The <em>DoctorSectionRepository</em> implements<em> </em><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Doctor/IDoctorSectionRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IDoctorRepository</em></a><em> </em>interface, and retrieves the value of the page type's <em>Title</em> property from the database via injected custom <em>DocumentQueryService</em>. It maps its value to DoctorDto's <em>Header</em> property.</li>\n  <li>The <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Doctor/DoctorSectionRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorRepository</em></a><em> </em>implements its<em> </em><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Doctor/IDoctorRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>interface</em></a>. First, it stores the values of only the required columns in a private <em>array</em>. To save from repeating the same code, the class uses a private<em> Func&lt;&gt;</em> delegate to map the doctor data to the <em>DoctorDto</em> object. The repository injects the custom <em>DocumentQueryService</em> and returns two methods. The first method returns a collection of <em>DoctorDto </em>objects, and the second returns an individual <em>DoctorDto </em>with specific data identified by the <em>nodeGuid</em> parameter.</li>\n</ul>","code":{"src":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Kentico.Content.Web.Mvc;\nusing Business.Dto.Doctors;\nusing Business.Services.Query;\n\nnamespace Business.Repository.Doctor\n{\n    public class DoctorRepository : BaseRepository, IDoctorRepository\n    {\n\n        private readonly string[] _doctorColumns = \n        {\n            \"NodeID\", \"NodeAlias\", \"Bio\", \"Degree\", \"EmergencyShift\", \"FirstName\",\n            \"LastName\", \"Image\", \"Specialty\", \"DocumentID\"\n        };\n\n        private Func<CMS.DocumentEngine.Types.Training.Doctor, DoctorDto> DoctorDtoSelect => doctor => new DoctorDto()\n        {\n            NodeAlias = doctor.NodeAlias,\n            NodeId = doctor.NodeID,\n            Bio = doctor.Bio,\n            Degree = doctor.Degree,\n            EmergencyShift = doctor.EmergencyShift,\n            FirstName = doctor.FirstName,\n            LastName = doctor.LastName,\n            ImagePath = doctor.Fields.Image.GetPath(),\n            Specialty = doctor.Specialty\n        };\n\n        public DoctorRepository(IDocumentQueryService documentQueryService) : base(documentQueryService)\n        {\n        }\n\n        public IEnumerable<DoctorDto> GetDoctors()\n        {\n            return DocumentQueryService.GetDocuments<CMS.DocumentEngine.Types.Training.Doctor>()\n                .AddColumns(_doctorColumns)\n                .ToList()\n                .Select(DoctorDtoSelect);\n        }\n\n        public DoctorDto GetDoctor(int nodeId)\n        {\n            return DocumentQueryService.GetDocument<CMS.DocumentEngine.Types.Training.Doctor>(nodeGuid)\n                .AddColumns(_doctorColumns)\n                .Select(DoctorDtoSelect)\n                .FirstOrDefault();\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Similarly to the <em>Home</em> page, the <em>Doctors</em> page stores relevant data in the <em>viewmodel</em> created by the controller's action which is then passed to the view.&nbsp;</p>\n<ul>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/Doctors/DoctorsViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorsViewModel</em></a> used to populate the <em>Doctors</em> listing page defines <em>DoctorSection</em> and <em>Doctors</em> objects.&nbsp;</li>\n  <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/Doctors/DoctorDetailViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorDetailViewModel</em></a> for the doctor profile page defines <em>Doctor</em> object using the <em>DoctorDto</em>.</li>\n</ul>\n<p><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorsController</em></a> inherits the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController</em></a><em> </em>and injects dependencies (namely business dependencies, and both \"doctor\" repositories). The <em>DoctorsController</em> defines two actions:</p>\n<ul>\n  <li>The <em>Index()</em> action returns the <em>DoctorsViewModel</em> with data from the <em>Doctor-</em> and <em>DoctorSection-</em> repositories, and maps the header property for the page title.&nbsp;</li>\n  <li>The <em>Detail()</em> action accepts <em>nodeGuid</em> parameter from the route, creates <em>DoctorDetailViewModel</em> object, &nbsp;and returns the <em>Detail</em> view. It also maps the doctor's full name property to the page's title.</li>\n  <li>We wanted the doctor profile page to appear only under a specific URL, so there's a <em>Route </em>attribute which ensures that the controller invokes the <em>Detail()</em> action only if the incoming request matches the <em>Detail/{nodeGuid}/{nodeAlias} </em>route<em>. </em>You can also call the &nbsp;<em>GuidRouteConstraint()</em> to avoid potential issues with URLs. If you're coding your website and use similar approach, don't forget to add your new route, e.g., <em>DoctorWithAlias</em>, to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig</em></a><em> </em>class.</li>\n  <li>The DoctorsController returns HttpNotFound in case any of the controller actions return no data.</li>\n</ul>","code":{"src":"using System.Web.Mvc;\nusing Business.DI;\nusing Business.Repository.Doctor;\nusing MedioClinic.Models.Doctors;\n\nnamespace MedioClinic.Controllers\n{\n    public class DoctorsController : BaseController\n    {\n        private IDoctorRepository DoctorRepository { get; }\n        private IDoctorSectionRepository DoctorSectionRepository { get; }\n\n        public DoctorsController(\n            IBusinessDependencies dependecies,\n            IDoctorRepository doctorRepository,\n            IDoctorSectionRepository doctorSectionRepository\n            ):base(dependecies)\n        {\n            DoctorRepository = doctorRepository;\n            DoctorSectionRepository = doctorSectionRepository;\n        }\n        \n        public ActionResult Index()\n        {\n            var doctorSection = DoctorSectionRepository.GetDoctorSection();\n             \n           if (doctorSection == null)\n            {\n                return HttpNotFound();\n            }\n\n            var model = GetPageViewModel(new DoctorsViewModel()\n            {\n                Doctors = DoctorRepository.GetDoctors(),\n                DoctorSection = doctorSection\n            }, doctorSection.Header);\n\n            return View(model);\n        }\n\n        [Route(\"Detail/{nodeId}/{nodeAlias}\")]\n        public ActionResult Detail(int nodeId, string nodeAlias)\n        {\n            var doctor = DoctorRepository.GetDoctor(nodeId);\n\n            if (doctor == null)\n            {\n                return HttpNotFound();\n            }\n\n            var model = GetPageViewModel(new DoctorDetailViewModel()\n            {\n                Doctor = doctor\n            }, doctor.FullName);\n\n            return View(model);\n        }\n    } \n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>To display the profile page, you can use the <em>Doctorprofile.html </em>static page in the course materials.</p>\n<p>In Medio Clinic's website, the doctor's page uses uses <em>Detail</em> view returned by the <em>Detail()</em> action in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorsController</em></a>. Here are some basic info about the view:</p>\n<ul>\n  <li>The view is strongly-typed against the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a><em> </em>with the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/Doctors/DoctorDetailViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorDetailViewModel</em></a><em> </em>as its parameter.</li>\n  <li>The view uses custom <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/UrlExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>KetnicoImageUlr()</em></a> method to display doctor's image.</li>\n  <li>The <em>Opened/Closed</em> badges indicating the doctor has or has not an emergence shift are resolved through an <em>if-else</em> logic. The method uses the value of the <em>HasShiftToday </em>property of the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Doctors/DoctorDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorDto</em></a> object (the <em>bool</em> property is determined by the current context).</li>\n  <li>To render styling in the <em>Biography</em> field (<em>Bio </em>property in the <em>Doctor</em> page type), the view calls <em>@Html.Raw()</em> method.&nbsp;</li>\n</ul>\n<p>Feel free to inspect the code on the left for any other additional information.</p>","code":{"src":"@using MedioClinic.Models.Doctors\n\n@model MedioClinic.Models.PageViewModel<DoctorDetailViewModel>\n\n@if (Model.Data.Doctor != null)\n{\n    <div class=\"section\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"kn-doctor-profile\">\n                    <div class=\"col l4 m6 s12\">\n                        <img src=\"@Url.KenticoImageUrl(Model.Data.Doctor.ImagePath)\" alt=\"Doctor's photo\"/>\n                    </div>\n                    <div class=\"col l8 m6 s12\">\n                        <div class=\"kn-doctor-profile-box\">\n                            <div class=\"kn-doctor-profile-header\">\n                                <h4>@Model.Data.Doctor.FullName</h4>\n                            </div>\n                            @if (Model.Data.Doctor.HasShiftToday)\n                            {\n                                <span class=\"kn-badge opened\">Open</span>\n                            }\n                            else\n                            {\n                                <span class=\"kn-badge closed\">now closed</span>\n                            }\n                            <br>\n                            <div class=\"kn-doctor-profile-degree\">\n                                    <strong>Academic Degree:&nbsp;</strong>@Model.Data.Doctor.Degree\n                                    <br>\n                                    <strong>Doctor Specialty:&nbsp;</strong>@Model.Data.Doctor.Specialty\n                            </div>\n                            <div class=\"kn-doctor-profile-bio\">\n                                <h5>Biograpy</h5>\n                                <p>\n                                   @Html.Raw(Model.Data.Doctor.Bio)\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n}","lang":"html"},"strapline":""},{"title":"","body":"<h3>Displaying the Doctor's listing page</h3>\n<p>For the page's markup, you can use the <em>Doctors.html</em> static page in the course package.</p>\n<p>The HTML page is rendered as a response to the <em>Index()</em> action in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Doctors/DoctorDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DoctorsController</em></a>. The view is strongly typed against the PageViewModel with the <em>DoctorsViewModel </em>as its parameters. Here are some additional details:</p>\n<ul>\n  <li>Before the view displays the <em>Header</em>, the view runs a <em>null</em> check. In case there is no data<em>,</em> no text is displayed.</li>\n  <li>By calling the&nbsp;<em>foreach </em>Razor&nbsp;logic, the view displays doctor cards for every doctor that is stored under the <em>DoctorSection</em> parent page type in the administration interface.</li>\n  <li>The retrieve doctors' image URL paths, the view calls <em>KenticoImageUrl()</em> custom method (a wrapper around the Kentico DocumentQuery).</li>\n  <li>The <em>Opened/Closed</em> badges which indicate that the doctor has or has not emergence shift are resolved through <em>if-else</em>&nbsp;logic. The logic uses the value of the&nbsp;<em>HasShiftToday</em>&nbsp;property (the <em>bool</em> value is determined by the current context).</li>\n  <li>To render styling in the <em>Biography</em> field (<em>Bio</em> property on the <em>Doctor</em> page type), the view calls <em>@Html.Raw()</em>.</li>\n  <li>The HTML markup uses&nbsp;the <em>ellipsis</em>&nbsp;property of the CSS text-overflow class to limit the doctor&nbsp;<em>Biography</em>&nbsp;text to only 2 lines.</li>\n  <li>For the <em>See more</em> link, we use the <em>Url.Action()</em> method which takes the doctor's <em>NodeGuid</em> and <em>NodeAlias</em> parameters, resolves the URL and passes it as a value of the <em>href</em>-tag.</li>\n</ul>","code":{"src":"@using MedioClinic.Models.Doctors\n\n@model MedioClinic.Models.PageViewModel<DoctorsViewModel>\n\n<div class=\"section kn-section-top\">\n    <div class=\"container\">\n        <!-- Doctors header section-->\n        <div class=\"row\">\n            <h1 class=\"header col s12\">@(Model.Data.DoctorSection?.Header)</h1>\n        </div>\n    </div>\n</div>\n<!--   Doctors Section   -->\n@if (Model.Data.Doctors != null)\n{\n    <div class=\"section\">\n        <div class=\"container\">\n            <div class=\"row\">\n                @foreach (var doctor in Model.Data.Doctors)\n                {\n                    <div class=\"col l4 m12 s12\">\n                        <div class=\"card\">\n                            <div class=\"card-image\">\n                                <img src=\"@Url.KenticoImageUrl(doctor.ImagePath)\" alt=\"@doctor.FullName\">\n                            </div>\n                            <div class=\"card-title kn-margin-m kn-padding-m truncate\">\n                                <a href=\"@Url.Action(\"Detail\", \"Doctors\", new { nodeGuid = doctor.NodeGuid, nodeAlias = doctor.NodeAlias })\">@doctor.FullName, @doctor.Degree</a>\n                            </div>\n                            <div class=\"card-content kn-doctor-card-content\">\n                                <p>\n                                    @Html.Raw(doctor.Bio)\n                                </p>\n                            </div>\n                            <div class=\"kn-badges kn-margin-m kn-padding-m\">\n                                @if (doctor.HasShiftToday)\n                                {\n                                    <span class=\"kn-badge opened\">\n                                        Open\n                                    </span>\n                                }\n                                else\n                                {\n                                    <span class=\"kn-badge closed\">Now closed</span>\n                                }\n                            </div>\n                            <div class=\"card-action\">\n                                <a href=\"@Url.Action(\"Detail\", \"Doctors\", new { nodeGuid = doctor.NodeGuid, nodeAlias = doctor.NodeAlias })\">See more</a>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    </div>\n}\n","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a5311bd4-d76f-46cb-8ba8-c6538d2f4e59","_parentId":"8e53ddd0-5945-4092-8d94-4d6c601574a3","_type":"component","title":"Demo: Displaying the Doctor profile page","displayTitle":"Demo: Displaying the Doctor profile page"},{"body":"<p>The following demo explains how the Medio Clinic code resolves the individual resource strings stored in the database. Feel free to implement it using your favorite approach - or tag along!</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Before you start localizing the individual strings in the page's view, you can replace values for company address or links to social media with dynamic values which are hard-coded to the HTML markup.</p>\n<p>The Medio Clinic uses the same repository-pattern approach to display the basic information about the clinic. For example, links to social media are retrieved via <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Social/SocialLinkRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SociaLinkRepository</em></a> and mapped to <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Social/SocialLinkDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SocialLinkDto</em></a>. The values are then injected as an <em>IEnumerable&lt;SocialLinkDto&gt;</em> collection in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController</em></a> to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/ff8703b3525fa22633275a36b911b8cceef93dae/MedioClinic/Models/PageViewModel.cs#L20\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a><em> </em>and passed to the <em>_Layout</em> view.</p>\n<p>You can find out more information about the objects in the following classes:</p>\n<ul>\n  <li>Metadata, such as the page title\n    <ul>\n      <li><a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Page/PageMetadataDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">PageDto</a> is mapped in a private <em>GetPageMetadata()</em> method in the <em>BaseController</em></li>\n    </ul>\n  </li>\n  <li>Company\n    <ul>\n      <li>Uses the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Company/CompanyDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyDto</em></a> object in a private <em>GetCompany()</em> method in the <em>BaseController</em></li>\n    </ul>\n  </li>\n  <li>Social links\n    <ul>\n      <li>Uses a collection of <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Social/SocialLinkDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SocialLinkDto</em></a> objects mapped in a private&nbsp;<em>GetSocialLinks()</em>&nbsp;method in the&nbsp;<em>BaseController. </em>The view uses a <em>foreach</em> logic to iterate through the collection and displays them on the live site.</li>\n    </ul>\n  </li>\n</ul>\n<p>Feel free to follow the same pattern on your training website and build the functionality. The code snippet on the left shows the _<em>Layout</em> view with the updated markup at the end of the exercise. The view dynamically adds basics information about the clinic, such as its name or address.</p>","code":{"src":"@model MedioClinic.Models.PageViewModel\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0\" />\n    <!-- The Medio Clinic's name is supplied dynamically -->\n    <title>@Model.Metadata.Title | @Model.Metadata.CompanyName</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"~/Content/images/Logo/favicon.png\" />\n    <!-- CSS  -->\n   <link rel=\"shortcut icon\" type=\"image/png\" href=\"~/Content/Images/Logo/mcfavicon.ico\">\n   <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n   <link href=\"~/Content/Css/Master/materialize.min.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n   <link href=\"~/Content/Css/Master/style.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n   <link href=\"~/Content/Css/Master/icons.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n   <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.1.0/css/all.css\" integrity=\"sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt\"\n         crossorigin=\"anonymous\">\n</head>\n<body>\n\n    <nav class=\"white\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n            <a id=\"logo-container\" href=\"index.html\" class=\"brand-logo\">\n                <img class=\"kn-logo\" src=\"~/Content/images/Logo/Logoic.png\" alt=\"\">\n                <span>@Model.Metadata.CompanyName</span>\n            </a>\n            <!-- Languages selector -->\n            <ul id=\"langs\" class=\"dropdown-content\">\n                <li>\n                    <a href=\"#\">EN</a>\n                </li>\n                <li>\n                    <a href=\"#\">ESP</a>\n                </li>\n            </ul>\n            <ul class=\"right hide-on-med-and-down\">\n                <li>\n                    <a href=\"index.html\">Home</a>\n                </li>\n                <li>\n                    <a href=\"doctors.html\">Our doctors</a>\n                </li>\n                <li>\n                    <a href=\"contact.html\">Contact us</a>\n                </li>\n                <li>\n                    <a class=\"dropdown-trigger\" href=\"#\" data-target=\"langs\">EN\n                        <i class=\"fas fa-globe-africa right\"></i>\n                    </a>\n                </li>\n            </ul>\n            <ul id=\"nav-mobile\" class=\"sidenav\">\n                <li>\n                    <a href=\"index.html\">Home</a>\n                </li>\n                <li>\n                    <a href=\"doctors.html\">Our doctors</a>\n                </li>\n                <li>\n                    <a href=\"contact.html\">Contact us</a>\n                </li>\n            </ul>\n            <a href=\"#\" data-target=\"nav-mobile\" class=\"sidenav-trigger\">\n                <i class=\"material-icons\">menu</i>\n            </a>\n        </div>\n    </nav>\n\n    @RenderBody()\n\n    <footer class=\"page-footer blue-grey darken-4\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">Contact</h5>\n                    <div class=\"grey-text text-lighten-4\">\n                       <address>\n                                    <strong>@Model.Company.Name</strong>\n                                    <br> @Model.Company.PhoneNumber\n                                    <br> @Model.Company.Email\n                                    <br> @Model.Company.ShortAddress\n                                </address>>\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">Follow us</h5>\n                    <div class=\"kn-social\">\n                    <!-- Iterates through the collection of links and displays them on the live site -->\n                        @foreach (var socialLink in Model.SocialLinks)\n                        {\n                            <a href=\"@socialLink.Url\" title=\"@socialLink.Title\">\n                                <img alt=\"@socialLink.Title\" src=\"@Url.KenticoImageUrl(socialLink.IconPath)\">\n                            </a>\n                        }\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">Navigation</h5>\n                    <ul class=\"kn-smaller\">\n                        <li>\n                            <a class=\"white-text\" href=\"#\">Our doctors</a>\n                        </li>\n                        <li>\n                            <a class=\"white-text\" href=\"#\">Contact Us</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"footer-copyright white\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col s12\">\n                          <div class=\"blue-grey-text text-darken-2\">Built with\n                            <a href=\"http://materializecss.com\">Materialize</a> for the MVC Developer training. Kentico, 2018.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </footer>\n</body>\n</html>","lang":"html"},"strapline":""},{"title":"","body":"<p>The Medio Clinic uses a custom <em>Localize()</em> extension method to display localized strings which are stored in Kentico database as key-value pairs. &nbsp;The <em>Localize()</em> method wraps Kentico API.</p>\n<p>The method invokes the <em>GetString()</em> method in Kentico <a href=\"http://devnet.kentico.com/docs/11_0/api/html/Methods_T_CMS_Helpers_ResHelper.htm\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">ResHelper</a> class and accepts the \"<em>key</em>\" value from the <strong>Localization</strong> application as the parameter. The method then resolves it's paired <em>value</em> stored in the database in the view.</p>","code":{"src":"using System.Web.Mvc;\nusing CMS.Helpers;\n\nnamespace Business.Extensions\n{\n    public static class LocalizationExtensions\n    {\n\n        /// <summary>\n        /// Custom extension method that localizes text based on a given key\n        /// </summary>\n        /// <param name=\"helper\">Html helper</param>\n        /// <param name=\"key\">The full key stored in Localization app within Kentico admin interface</param>\n        /// <returns></returns>\n        public static string Localize(this HtmlHelper helper, string key)\n        {\n            return ResHelper.GetString(key);\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>In the sample code snippet of the website's footer, the <em>_Layout</em> view uses the <em>@Html</em> helper and calls the custom <em>Localize()</em> method with the \"key\" string as the method's parameter. Note that the parameter needs to match exactly the value of the \"<em>Key</em>\" field stored in the administration interface.</p>\n<figure data-asset-id=\"991fcd2d-23b1-497b-b3ae-cdd483022ecc\" data-image-id=\"991fcd2d-23b1-497b-b3ae-cdd483022ecc\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9531f238-1a64-4800-af46-043648b84102/mvc-localizing-resource-strings.png\" data-asset-id=\"991fcd2d-23b1-497b-b3ae-cdd483022ecc\" data-image-id=\"991fcd2d-23b1-497b-b3ae-cdd483022ecc\" alt=\"\"></figure>\n<p>Feel free to update all the markup of the layout view to call the <em>Localize()</em> method on the individual strings which are not saved in pages in the administration interface.</p>\n<p>Check the sample solution for what the &nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>_Layout</em></a> file can look like when you have finished updating the markup.</p>","code":{"src":"<h5 class=\"white-text\">@Html.Localize(\"Footer.Contact\")</h5>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"62131595-5fa3-4acc-af11-c657b6502735","_parentId":"8e53ddd0-5945-4092-8d94-4d6c601574a3","_type":"component","title":"Demo: Displaying localized strings","displayTitle":"Demo: Displaying localized strings"},{"body":"<p>The following demo shows how you can create a new basic workflow with custom step which requires approval from content manager, new role which will be assigned to content editors and one new user to test the workflow functionality.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Navigate to the <strong>Workflows</strong> application and create a new <em>Content management workflow </em>workflow<em>.</em></p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/681d118c-aa6d-48ec-9c4f-c118412ba9f0/mvc-create-new-workflow.gif","alt":"mvc-create-new-workflow.gif"},"strapline":""},{"title":"","body":"<p>Switch to the <strong>Step</strong> tab and create a new <em>Manager approval</em> workflow step.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/2bf16ab7-a81f-4a91-b2a6-20dfe4bb1bc5/mvc-add-new-workflow-step.gif","alt":"mvc-add-new-workflow-step.gif"},"strapline":""},{"title":"","body":"<p>Navigate to the <strong>Users</strong> application and create a new user Andy with the following values:</p>\n<ul>\n  <li>Username: <em>Andy</em></li>\n  <li>Privilege level: <em>Editor</em></li>\n</ul>\n<p>Leave the remaining fields with their default values and click <strong>Save</strong>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/fc79651d-b611-487c-a4e4-f77a8f83f3a4/mvc-adding-new-user.gif","alt":"mvc-adding-new-user.gif"},"strapline":""},{"title":"","body":"<p>Navigate to the <strong>Roles</strong> application and create a new role with the following values:</p>\n<ul>\n  <li>Role display name: <em>Content editor</em></li>\n  <li>Role name: <em>automatic</em></li>\n  <li>Is domain role: <em>no (cleared)</em></li>\n</ul>\n<p>Switch to the users tab and add user <em>Andy</em>. You have created a new <em>role</em> for content editors and added a <em>user</em> Andy.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a0ca0261-40de-4ace-ba81-1422574f8714/mvc-adding-new-role.gif","alt":"mvc-adding-new-role.gif"},"strapline":""},{"title":"","body":"<p>Edit the <strong>Content editor</strong> role in the <em>Roles</em><strong> </strong>application. Switch to the <strong>Permissions </strong>tab and <em>enable </em>permissions for the following values:</p>\n<p>Module <strong>Content</strong>:</p>\n<ul>\n  <li><em>Browse tree</em></li>\n  <li><em>Read</em></li>\n  <li><em>Modify</em></li>\n  <li><em>Create</em></li>\n  <li><em>Delete</em></li>\n</ul>\n<p>You have enabled users in the Content editor role to edit data in the Pages application both on the <strong>Page</strong> and <strong>Content</strong> tabs.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/0cb6ed9a-9417-492e-8281-ac4c52f99d90/mvc-adding-permissions-for-content-module.gif","alt":"mvc-adding-permissions-for-content-module.gif"},"strapline":""},{"title":"","body":"<p>Edit the <em>Content editor</em> role in the <em>Roles</em> application, switch to the <strong>UI personalization</strong> -&gt; <strong>Administration</strong> tab and click the <strong>Enable globally</strong> button. This will enables the <em>UI personalization</em> feature to work on all sites within Kentico instance.</p>\n<p>To allow user to work with the <strong>Pages</strong> application:</p>\n<p>Select <strong>Content</strong> in the <strong>Modules</strong> drop-down list and working top-down, enable the following:</p>\n<ul>\n  <li><em>CMS</em>\n    <ul>\n      <li><em>Administration</em></li>\n      <li><em>Content Management</em>\n        <ul>\n          <li><em>Pages</em>\n            <ul>\n              <li><em>Edit &gt; Page (MVC)</em></li>\n              <li><em>Edit &gt; Form</em></li>\n            </ul>\n          </li>\n          <li><em>Preview &gt; View</em></li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n<p>Switch to the <strong>Editor</strong> tab and click the Enable globally button. To simplify the demo, click the <strong>select all</strong> button to enable <strong>WYSIWYG editor </strong>properties.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8a9ec0c9-6d0b-46a3-a9fe-27aec30b1c60/adding-ui-personalization.gif","alt":"adding-ui-personalization.gif"},"strapline":""},{"title":"","body":"<p>You can test the workflow functionality in the <strong>Pages</strong> application. For example, you can do the following steps:</p>\n<ol>\n  <li>Apply the <strong>Manager approval</strong> workflow on the <em>Home</em> item and its children (<em>Medio Clinic services</em>) in the content tree.</li>\n  <li><strong>Impersonate</strong> Andy user and edit, for example, the &nbsp;<em>Cardio Therapy</em> item. (Note the change of the status icon in the content tree and the additional &nbsp;buttons that allow for working with the workflow.)</li>\n  <li>As user <em>Andy</em>, submit the changes for approval. (You can also open the live site or the page in the preview mode to see the changes are not displayed yet.)</li>\n  <li>Cancel impersonation in the user menu, and click the <strong>Approval</strong> button to promote Andy's changes to the live site. (Note the change of the status icon in the content tree.)</li>\n</ol>\n<p>As the next step, you can also switch to the <strong>Workflows</strong> tab and overview the changes.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/39eb7a51-7e41-469c-a838-4f01c514cad1/mvc-testing-workflow-functionality.gif","alt":"mvc-testing-workflow-functionality.gif"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"29377512-f667-424c-870c-fa93b452a5fc","_parentId":"8e53ddd0-5945-4092-8d94-4d6c601574a3","_type":"component","title":"Demo: Creating new workflow","displayTitle":"Demo: Creating new workflow"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Look at the code snippet showing a simple controller which displays content of an article on the live site. Decide which is the correct answer following the <strong>recommended practices</strong>.</p>\n<pre><code class=\"language-c_\">using System;\nusing System.Web.Mvc;\nusing CMS.DocumentEngine;\n\nnamespace MVCSampleApplication\n{\n    public class ArticleController : Controller\n    {\n        public ActionResult Index()\n        {\n            // GET: Article\n            var article = DocumentHelper.GetDocuments()\n                .Types(\"MVCSampleApplication.Article\")\n                .Path(\"/Articles/\", PathTypeEnum.Children)\n                .WhereStartsWith(\"DocumentName\")\n                .OnSite(\"MVCSampleApplication\")\n                .Culture(\"en-us\")\n                .WithCoupledColumns();\n\n            return View(article);\n        }\n    }\n}</code></pre>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The sample code is correct and it follows Kentico recommended practices for calling Kentico API.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. The sample code will compile and display content, however, it doesn't follow the best practices. We recommend that you abstract from Kentico API and create custom services that handles Kentico API separately from your MVC application code.</p>"},{"text":"<p>Wrong. Though the sample code will retrieve the requested data, it doesn't follow Kentico recommended practices which ensure smooth performance and easier upgradability of the MVC application.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Wrong. The sample code won't retrieve the requested data, as Kentico API cannot be called directly in controllers.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong. Kentico API can be called directly in the controllers, however, it is NOT recommended practice as it introduces potential issues with performance and project's upgradability.</p>"}],"_feedback":{"title":"","correct":"<p>Correct. The best practice is to create a business logic layer in which you abstract from Kentico API, and avoid calling Kentico API directly in your MVC application's code, such as in controllers.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c4c8adeb-6d46-4767-bc9e-85b79dfdc8bc","_parentId":"84185a01-7ff8-4791-8595-a278af449aee","_type":"component","title":"Progress-check: Ketnico API","displayTitle":"Progress-check: Ketnico API"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Select the correct code which enables editors to preview changes in the administration interface.</p>","_attempts":3,"_questionWeight":1,"_selectable":2,"_items":[{"title":"","code":{"src":"query = query\n                    .AddColumns(\"NodeSiteID\")\n                    .OnSite(SiteContext.SiteName)\n                    .LatestVersion()","lang":"c_"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"query = query\n                    .OnSite(SiteContext.SiteName)\n                    .LatestVersion()","lang":"c_"},"feedback":"<p>Wrong. Your code needs to identify the site which it queries, e.g., by \"<em>NodeSiteID</em>\".</p>","_shouldBeSelected":false},{"title":"","code":{"src":"query = query\n                    .OnSite(SiteContext.SiteName)\n                    .Published()\n                    .PublishedVersion()","lang":"c_"},"feedback":"<p>Wrong. The code snippet queries for the latest published version of the page, which doesn't necessarily need to be the latest, yet unpublished version of the page.</p>","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Correct. The \"<em>NodeSiteID</em>\" property ensures the preview mode works in the administration interface.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"aaba338f-d041-4fce-8735-8665889b8901","_parentId":"84185a01-7ff8-4791-8595-a278af449aee","_type":"component","title":"Progress-check: Preview","displayTitle":"Progress-check: Preview"},{"body":"<p>Congratulations on completing this part of the training. You have built your project's business logic which allows for scalability and displayed three pages on the live site - Medio Clinic's homepage, Doctors listing page and a way to show individual doctor profile pages. Your implementation supports the preview model which allows editors to see changes before they are published on the live site. You have also created a user and a basic workflow to test the preview functionality.</p>\n<p>Head on to the next part of the training course where you will learn about creating the website's navigation menu!</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3bb6c3e2-9f95-4141-978e-a14f215d1f8c","_parentId":"ddd0aa64-925e-4d55-a707-943aefcc70ac","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>Which options you have <strong>to create a navigation menu</strong></li>\n  <li>How you can <strong>build navigation menu that editors can work with </strong>in the admin interface</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Creating the page types to hold navigation menu items in the content tree</li>\n  <li>Coding the classes that display the navigation menu on the live site</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f5fdf7c9-e98f-43e6-a575-5580cd6bdfc6","_parentId":"7e5c174c-fed1-4075-9924-cfb0e636b022","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>When it comes to navigation menus on MVC sites, there is a number of approaches you can take to implement them. You should always consider the specific requirements of the project. Also, your approach should reflect how much control over the website's navigation you want to give to editors.&nbsp;</p>\n<h2>1) Hard-coded navigation</h2>\n<p>For simple MVC sites, you can hard code the navigation. The result of this approach is a static menu which gives website editors no control over the items that the menu displays or links to. Building such a static menu is fast, the initial cost is inexpensive, and you work only within the MVC application. However, any changes to the menu the client needs require developer's assistance.</p>\n<p>You can see an example of hard-coded navigation in Kentico Dancing Goat MVC sample site (NEEDS UPDATE https://github.com/Kentico/Mvc). It generates the link using the <em>ActionLink</em> helper method, supplies the link text from the <em>.resx</em> file via <em>GetString()</em> method in Kentico <em>ResHelper</em> class and calls specific controller actions of the pages in the menu.</p>\n<pre><code class=\"language-html\"><!-- DANCING GOAT NAVIGATION -->\n(...)\n                            <li>\n                                @Html.ActionLink(ResHelper.GetString(\"DancingGoatMvc.Home\"), \"Index\", \"Home\")\n                            </li>\n(...)</code></pre>\n<h2>2) Navigation defined by editors</h2>\n<p>When editors of a simple website need more control over the items in the navigation menu, you can take an opposite approach and give editors full control over which items appear in the navigation menu.</p>\n<p>The items in the content tree don't need to represent the actual structure of pages on the live site, but a means to collect data. &nbsp;You can prepare a specific page type which editors can use to create items for navigation in the content tree. This page type can collect the menu item captions and pages which editors want to put into the navigation in the content tree and allow them to define an order of these items within the website navigation.</p>\n<p>To prevent inconsistencies or incorrect behavior of the menu, you need to draft detailed specifications in the very beginning of the project to plan the website architecture design accordingly. As a result, website editors will have full control over the items that appear in the menu - provided they follow the rules you set for the menu items (and your implementation contains adequate safety-checks - just in case editors deviate from your instructions).</p>\n<p>For example, you can use the <em>UNI selector</em> form control in your page type and filter only specific pages, page types or documents under specific paths which are allowed for the menu. Without setting the right restrictions, it may happen that editors select for the menu &nbsp;items in the content tree that not supported, and the system will not generate correct data for the&nbsp;website's menu. Therefore we recommend that you investigate the project requirements closely before you consider developing this functionality.</p>\n<p>To see a concrete implementation, you can investigate how menu is implemented in Kentico MVC tutorial. The very simple tutorial website makes use of the&nbsp;<em>RelativeUrl</em>&nbsp;property of the content-tree item. Your code first loads the&nbsp;<em>NodeGUID</em>&nbsp;identifier of all objects editors have specified as menu items (using the&nbsp;<em>Page selector</em>&nbsp;form control) and returns the URL for the page whose GUID matches the given menu item's selected page. The following snippet overviews how the menu is implemented , for details, see the <a href=\"https://docs.kentico.com/k12tutorial/mvc-development\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico 12 Tutorial</a>.</p>\n\n<h2>3) Navigation defined by technically savvy editor or admin</h2>\n<p>The third option somewhat meets both approaches mentioned above in the middle.</p>\n<p>It still provides editors control over items which appear in the navigation menu within the content tree. On the other, editors who define the menu need to understand the technical background of the MVC implementation to add menu items without creating undesired behavior.<br>\nThe implementation includes specific page type for menu items which collects values of controllers and actions that are called by individual items on the live site. Controllers/Actions are passed to the MedioClinic live site where views generate link URLs using standard ASP.NET MVC methods.</p>\n<h3>Medio Clinic implementation</h3>\n<p>The Medio clinic project takes this approach to website navigation. It collects values for the menu in the content tree into pages created from the <em>MenuContainerItem</em> page type. Their values are retrieved using <em>DocumentQuery</em> service and mapped to <em>MenuItemDtos</em>. The navigation is shared in all individual controllers, so it is implemented in the BaseController which every other controller inherits.</p>\n<p>&nbsp;<em>BaseController</em> includes a collection of menu items in <em>PageViewModel</em> which is then resolved and passed to views for individual pages. You can see the detailed implementation of the navigation menu in the <em>Demo</em> section below.</p>\n<p>To sum it up, these three approaches are not supposed to describe all the available options. You should keep in mind that each of them is a trade-off, and each depends on the initial project specifications. In the end, the MVC live site is a separate application, so feel free to implement the navigation menu in any way you are used to from your previous MVC projects.&nbsp;</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0b55af29-d6bd-41b7-bf0e-6b25ed70143c","_parentId":"ab3dd36f-878b-4dd6-a9b0-4d810ac07bb8","_type":"component","title":"Theory: Navigation on the MVC websites","displayTitle":"Theory: Navigation on the MVC websites"},{"body":"<p>Create a navigation menu that allows website admins or technically savvy editors adding or removing the menu items in the content tree. Make sure that at the end of the exercise, your website navigation menu on the live site matches the following criteria:</p>\n<ul>\n  <li>Contains <em>Home</em> item links to the home page.</li>\n  <li>Contains <em>Our doctors</em> item which links to the <em>Doctors</em> listing page.</li>\n  <li>Displays the default culture (EN) in the navigation menu.</li>\n  <li>Visitors can use culture selector drop-down to manually switch between all of the supported culture versions of the website, e.g., EN and ESP.</li>\n  <li>Different website's culture versions are added dynamically to the culture selector.</li>\n  <li>The footer secondary navigation contains <em>Home</em> and <em>Our doctors</em> items which link to the respective pages.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"7076a0c9-0793-4797-82a5-eb0da644d958","_parentId":"745d5bfc-6c65-44a9-9a6a-1075a710d376","_type":"component","title":"Task: Adding website's navigation menu","displayTitle":"Task: Adding website's navigation menu"},{"body":"<p>In the following demo, you will see how we built the menu on the Medio Clinic website.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Medio Clinic menu uses the similar pattern as other content on the website. To start with, create two page types to hold the menu content in the content tree - one will serve as a container for the items, the second for the items.</p>\n<h4>Menu Container</h4>\n<ul>\n  <li><strong>MenuName&nbsp;</strong>(TEXT data type with size 200,&nbsp;<strong>required</strong>,&nbsp;<em>Menu name&nbsp;</em>caption)</li>\n</ul>\n<p>The page name source is the&nbsp;<em>MenuName </em>field. This page type is only allowed under the&nbsp;<em>Home Section</em>&nbsp;page type, and its&nbsp;<strong>URL pattern</strong>&nbsp;is empty. Optionally, the page type is decorated with&nbsp;<em>icon-folder </em>icon in the content tree.</p>\n<h4>Menu Container Item</h4>\n<ul>\n  <li><strong>Controller&nbsp;</strong>(TEXT data type with size 200,&nbsp;<strong>required</strong>,&nbsp;<em>Controller&nbsp;</em>caption)</li>\n  <li><strong>Action&nbsp;</strong>(TEXT data type with size 400, not required,&nbsp;<em>Action</em>&nbsp;caption)</li>\n  <li><strong>Caption&nbsp;</strong>(TEXT data type with size 200,&nbsp;<strong>required</strong>,&nbsp;<em>Caption</em>&nbsp;caption)</li>\n</ul>\n<p>The page name source is the&nbsp;<em>Controller&nbsp;</em>field. This page type is only allowed under the&nbsp;<em>Menu container</em>&nbsp;page type, and its&nbsp;<strong>URL pattern</strong>&nbsp;is empty. Optionally, the page type is decorated with&nbsp;<em>icon-minus</em>&nbsp;icon in the content tree.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5fe1680c-84d9-4001-899d-7a364de0919a/mvc-creating-menu-1.png","alt":"mvc-creating-menu-1.png"},"strapline":""},{"title":"","body":"<p>In the content tree, add the pages you want to place to the menu, e.g., the <em>Home</em> and <em>Doctors</em> pages.</p>\n<p>To add the <strong>Home</strong> page to the menu, use the following values:</p>\n<ul>\n  <li>Controller: <em>Home</em></li>\n  <li>Action: <em>empty</em></li>\n  <li>Caption: <em>Home</em></li>\n</ul>\n<p>To add the <strong>Doctors</strong> listing page, use these values:</p>\n<ul>\n  <li>Controller: <em>Doctors</em></li>\n  <li>Action: <em>empty</em></li>\n  <li>Caption: <em>Our doctors</em></li>\n</ul>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3cce3d43-737e-4a0e-a8dd-e3ff55a71544/mvc-creating-menu-2.png","alt":"mvc-creating-menu-2.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8be281a3-6847-4ea1-8595-0dd896222c90","_parentId":"7b9ee0a6-fbcc-4bba-ac54-258067d98909","_type":"component","title":"DEMO: Adding the navigation menu in the Admin UI","displayTitle":"DEMO: Adding the navigation menu in the Admin UI"},{"body":"<p>In the following demo, you will see how we built the navigation menu on the Medio Clinic live site application.&nbsp;</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Medio Clinic live site retrieves the items for the navigation menu via repositories. Let's first create the business logic behind the menu items.</p>\n<p>Create a <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Menu/MenuRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MenuItemRepository</em></a> which implements the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Menu/IMenuRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IMenuRepository</em></a><em>'s</em> <em>GetMenuItems()</em> method. Make the repository depend on the <em>IDocumentQueryService </em>and call its <em>GetDocuments()</em> method with <em>MenuContainerItem</em> as a parameter.&nbsp;</p>\n<p>The method should &nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/Business/Repository/Menu/MenuRepository.cs#L21\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>return</em></a> children items under <em>/Menu-items</em> path and map their values of the <em>Caption</em>, <em>Controller</em> and <em>Action</em> columns into <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Menu/MenuItemDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MenuItemDtos</em></a>.</p>","code":{"src":"using System.Collections.Generic;\nusing System.Linq;\nusing CMS.DocumentEngine;\nusing CMS.DocumentEngine.Types.Training;\nusing Business.Dto.Menu;\nusing Business.Services.Query;\n\nnamespace Business.Repository.Menu\n{\n    public class MenuRepository : IMenuRepository\n    {\n        private IDocumentQueryService DocumentQueryService { get; }\n\n        public MenuRepository(IDocumentQueryService documentQueryService)\n        {\n            DocumentQueryService = documentQueryService;\n        }\n\n        public IEnumerable<MenuItemDto> GetMenuItems()\n        {\n            return DocumentQueryService.GetDocuments<MenuContainerItem>()\n                .Path(\"/Menu-items\", PathTypeEnum.Children)\n                .AddColumns(\"Caption\", \"Controller\", \"Action\")\n                .OrderByAscending(\"NodeOrder\")\n                .Select(m => new MenuItemDto()\n                {\n                    Action = m.Action,\n                    Caption = m.Caption,\n                    Controller = m.Controller\n                });\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>Extend the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/BaseController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController</em></a> and make it responsible for generating the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\"><em>PageViewModel</em></a> with menu-related data. Because the <em>PageViewModel</em> is shared by all pages on the website, the menu items will be generated when individual controllers, such as <em>HomeController</em> and <em>DoctorsController return their view</em>s.</p>\n<p>Updated the shared <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Shared/_Layout.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>_Layout.cshtml</em></a> view so it displays the menu items. You can use Razor <em>@foreach</em> loop, which passes the menu items with the suitable data into the navigation markup. Don't forget to updated also the navigation for the mobile devices and the secondary navigation in the website's footer.</p>\n<p>The Medio Clinic's markup demos how you can use CSS to <em>highlight an active page</em> in the menu by comparing the values you retrieve from the route with the values of the the active controller (the <em>menuItem.Controller </em>parameter). The menu item representing the active page will be bolded (wrapped into <em>kn-bold</em> CSS class) in the navigation.</p>","code":{"src":"@using System.Threading\n@using System.Web.Optimization\n\n@model MedioClinic.Models.PageViewModel\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0\" />\n    <title>@Model.Metadata.Title | @Model.Metadata.CompanyName</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"~/Content/images/Logo/favicon.png\" />\n\n    <!-- CSS  -->\n    <link href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.1.0/css/all.css\" integrity=\"sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt\"\n          crossorigin=\"anonymous\">\n    @Styles.Render(\"~/bundles/master-css\")\n\n</head>\n<body>\n\n    <nav class=\"white\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n            <a id=\"logo-container\" href=\"@Url.Action(\"Index\", \"Home\")\" class=\"brand-logo\">\n                <img class=\"kn-logo\" src=\"~/Content/images/Logo/Logoic.png\" alt=\"\">\n                <span>@Model.Metadata.CompanyName</span>\n            </a>\n            <!-- Languages structure -->\n            @if (Model.Cultures != null)\n            {\n                <ul id=\"langs\" class=\"dropdown-content\">\n                    @foreach (var culture in Model.Cultures)\n                    {\n                        <li>\n                            <a href=\"@Url.Action(\n                                         ViewContext.RouteData.Values[\"action\"]?.ToString(),\n                                         ViewContext.RouteData.Values[\"controller\"]?.ToString(),\n                                         new { culture = culture.CultureCode}\n                                         )\">\n                                @culture.CultureShortName\n                            </a>\n                        </li>\n                    }\n                </ul>\n            }\n            <ul class=\"right hide-on-med-and-down\">\n                @foreach (var menuItem in Model.MenuItems)\n                {\n                    if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n                    {\n                        <li class=\"kn-bold\">\n                           <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                    else\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                }\n\n                <li>\n                    <a class=\"dropdown-trigger\" href=\"#\" data-target=\"langs\">\n                        @Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName\n                        <i class=\"fas fa-globe-africa right\"></i>\n                    </a>\n                </li>\n            </ul>\n            <ul id=\"nav-mobile\" class=\"sidenav\">\n                @foreach (var menuItem in Model.MenuItems)\n                {\n                    if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                    else\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                }\n            </ul>\n            <a href=\"#\" data-target=\"nav-mobile\" class=\"sidenav-trigger\">\n                <i class=\"material-icons\">menu</i>\n            </a>\n        </div>\n    </nav>\n\n    @RenderBody()\n\n    <footer class=\"page-footer blue-grey darken-4\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col l4 s12\">\n                    @if (Model.Company != null)\n                    {\n                    <h5 class=\"white-text\">@Html.Localize(\"Footer.Contact\")</h5>\n                        <div class=\"grey-text text-lighten-4\">\n                            <p class=\"kn-smaller kn-address\">\n                                <address>\n                                    <strong>@Model.Company.Name</strong>\n                                    <br> @Model.Company.PhoneNumber\n                                    <br> @Model.Company.Email\n                                    <br> @Model.Company.ShortAddress\n                                </address>\n                            </p>\n                        </div>\n                    }\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">@Html.Localize(\"Footer.FollowUs\")</h5>\n                    <div class=\"kn-social\">\n                        @foreach (var socialLink in Model.SocialLinks)\n                        {\n                            <a href=\"@socialLink.Url\" title=\"@socialLink.Title\">\n                                <img alt=\"@socialLink.Title\" src=\"@Url.KenticoImageUrl(socialLink.IconPath)\">\n                            </a>\n                        }\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">@Html.Localize(\"Footer.Navigation\")</h5>\n                    <ul class=\"kn-smaller\">\n                        @foreach (var menuItem in Model.MenuItems)\n                        {\n                            <li>\n                                <a class=\"white-text\" href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                            </li>\n                        }\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"footer-copyright white\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col s12\">\n                        <div class=\"blue-grey-text text-darken-2\">\n                           @Html.Raw(Html.Localize(\"Footer.BuildWithNote\")) Kentico, @DateTime.Now.Year.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </footer>\n\n    <!-- Scripts -->\n    @Scripts.Render(\"~/bundles/master-scripts\")\n\n    <!-- Additional (view specific) scripts-->\n    @RenderSection(\"scripts\", false)\n\n\n</body>\n</html>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9ad7df70-0a9d-4fa1-9c7a-b067f0c6e4e9","_parentId":"7b9ee0a6-fbcc-4bba-ac54-258067d98909","_type":"component","title":"Demo: Adding a navigation menu to the live site","displayTitle":"Demo: Adding a navigation menu to the live site"},{"body":"<p>The following demo shows you how we implemented the culture selector on the Medio Clinic website.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Visitors of the website can manually switch to their preferred culture.</p>\n<p>The functionality is implemented in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Culture/CultureRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureRepository</em></a> class. First, the <em>CultureRepository</em> injects the <em>SiteContextService</em> which retrieves values of the culture code, culture name and short name, and it stores them in a <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Culture/CultureDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureDto</em></a>. Using the <em>CultureDto</em>, the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/BaseController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController</em></a> creates a shared <a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a> with the <em>Culture</em> object (a collection of culture Dtos).</p>\n<p>The culture data object is then returned in individual controllers, such as the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/MedioClinic/Controllers/HomeController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Home</em></a> or <a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/MedioClinic/Controllers/DoctorsController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Doctors</em></a> controllers, and passed views.</p>","code":{"src":"using System.Collections.Generic;\nusing System.Linq;\nusing CMS.SiteProvider;\nusing Business.Dto.Culture;\nusing Business.Services.Context;\n\nnamespace Business.Repository.Culture\n{\n    public class CultureRepository : ICultureRepository\n    {\n        private ISiteContextService SiteContextService { get; }\n\n        public CultureRepository(ISiteContextService siteContextService)\n        {\n            SiteContextService = siteContextService;\n        }\n\n        public IEnumerable<CultureDto> GetSiteCultures()\n        {\n            return CultureSiteInfoProvider.GetSiteCultures(SiteContextService.SiteName).Items.Select(m =>\n                new CultureDto()\n                {\n                    CultureCode = m.CultureCode,\n                    CultureName = m.CultureName,\n                    CultureShortName = m.CultureShortName\n                }\n            );\n        }\n    }\n}\n","lang":"c_"},"strapline":""},{"title":"","body":"<p>The active culture in the shared <em>_Layout.cshtml</em> is determined by the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/MedioClinic/Views/Shared/_Layout.cshtml#L66\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CultureProperty of the application's thread</em></a>. It retrieves the two-letter code culture code, and passes it into the menu item in front of the globe icon.<br>\nThe <a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/MedioClinic/Views/Shared/_Layout.cshtml#L32\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>culture selector drop-down list</em></a> creates culture-specific URLs for each culture in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/59746cbb67ce679722314e1ba0795843f93bec82/MedioClinic/Models/PageViewModel.cs#L19\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Cultures </em></a>collection. It generates the URL using the specified action and controller names in the current <em>viewcontext</em> and adds a new <em>CultureCode</em> object for the route.</p>","code":{"src":"@model MedioClinic.Models.PageViewModel\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1.0\" />\n    <title>@Model.Metadata.Title | @Model.Metadata.CompanyName</title>\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"~/Content/images/Logo/favicon.png\" />\n    <!-- CSS  -->\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"~/Content/Images/Logo/mcfavicon.ico\">\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <link href=\"~/Content/Css/Master/materialize.min.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n    <link href=\"~/Content/Css/Master/style.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n    <link href=\"~/Content/Css/Master/icons.css\" type=\"text/css\" rel=\"stylesheet\" media=\"screen,projection\" />\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.1.0/css/all.css\" integrity=\"sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt\"\n          crossorigin=\"anonymous\">\n</head>\n<body>\n\n    <nav class=\"white\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n            <a id=\"logo-container\" href=\"@Url.Action(\"Index\", \"Home\")\" class=\"brand-logo\">\n                <img class=\"kn-logo\" src=\"~/Content/images/Logo/Logoic.png\" alt=\"\">\n                <span>@Model.Metadata.CompanyName</span>\n            </a>\n            <!-- Languages structure -->\n            @if (Model.Cultures != null)\n            {\n                <ul id=\"langs\" class=\"dropdown-content\">\n                    @foreach (var culture in Model.Cultures)\n                    {\n                        <li>\n                            <a href=\"@Url.Action(\n                                         ViewContext.RouteData.Values[\"action\"]?.ToString(),\n                                         ViewContext.RouteData.Values[\"controller\"]?.ToString(),\n                                         new { culture = culture.CultureCode}\n                                         )\">\n                                @culture.CultureShortName\n                            </a>\n                        </li>\n                    }\n                </ul>\n            }\n            <ul class=\"right hide-on-med-and-down\">\n                @foreach (var menuItem in Model.MenuItems)\n                {\n                    if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n                    {\n                        <li class=\"kn-bold\">\n                           <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                    else\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                }\n\n                <li>\n                    <a class=\"dropdown-trigger\" href=\"#\" data-target=\"langs\">\n                        @Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName\n                        <i class=\"fas fa-globe-africa right\"></i>\n                    </a>\n                </li>\n            </ul>\n            <ul id=\"nav-mobile\" class=\"sidenav\">\n                @foreach (var menuItem in Model.MenuItems)\n                {\n                    if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                    else\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                }\n            </ul>\n            <a href=\"#\" data-target=\"nav-mobile\" class=\"sidenav-trigger\">\n                <i class=\"material-icons\">menu</i>\n            </a>\n        </div>\n    </nav>\n\n    @RenderBody()\n\n    <footer class=\"page-footer blue-grey darken-4\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col l4 s12\">\n                    @if (Model.Company != null)\n                    {\n                    <h5 class=\"white-text\">@Html.Localize(\"Footer.Contact\")</h5>\n                        <div class=\"grey-text text-lighten-4\">\n                            <p class=\"kn-smaller kn-address\">\n                                <address>\n                                    <strong>@Model.Company.Name</strong>\n                                    <br> @Model.Company.PhoneNumber\n                                    <br> @Model.Company.Email\n                                    <br> @Model.Company.ShortAddress\n                                </address>\n                            </p>\n                        </div>\n                    }\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">@Html.Localize(\"Footer.FollowUs\")</h5>\n                    <div class=\"kn-social\">\n                        @foreach (var socialLink in Model.SocialLinks)\n                        {\n                            <a href=\"@socialLink.Url\" title=\"@socialLink.Title\">\n                                <img alt=\"@socialLink.Title\" src=\"@Url.KenticoImageUrl(socialLink.IconPath)\">\n                            </a>\n                        }\n                    </div>\n                </div>\n                <div class=\"col l4 s12\">\n                    <h5 class=\"white-text\">@Html.Localize(\"Footer.Navigation\")</h5>\n                    <ul class=\"kn-smaller\">\n                        @foreach (var menuItem in Model.MenuItems)\n                        {\n                            <li>\n                                <a class=\"white-text\" href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                            </li>\n                        }\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"footer-copyright white\">\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col s12\">\n                        <div class=\"blue-grey-text text-darken-2\">\n                           @Html.Raw(Html.Localize(\"Footer.BuildWithNote\")) Kentico, @DateTime.Now.Year.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </footer>\n\n    <!-- Scripts -->\n    <script src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\n    <script src=\"~/Scripts/Master/main.js\"></script>\n    <script src=\"~/Scripts/Master/materialize.min.js\"></script>\n    <script src=\"~/Scripts/Master/init.js\"></script>\n\n</body>\n</html>","lang":"html"},"strapline":""},{"title":"","body":"<p>The <em>foreach</em> loop iterates through cultures in the <em>Cultures</em> object and creates the culture-specific drop-down menu items. UrlAction helper method constructs the Url link from the <em>action</em> and <em>controller</em> parameters in the route and supplies the values of culture code. Secondly, it inserts short name of the language next to the global icon in the navigation menu.</p>\n<p>The code snippet shows finalized markup in the navigation section in the <em>_Layout.cshtml</em>.</p>","code":{"src":"<!-- FINALIZED NAVIGATION SECTION OF THE MEDIO CLINIC -- >\n<nav class=\"white\" role=\"navigation\">\n        <div class=\"nav-wrapper container\">\n            <a id=\"logo-container\" href=\"@Url.Action(\"Index\", \"Home\")\" class=\"brand-logo\">\n                <img class=\"kn-logo\" src=\"~/Content/images/Logo/Logoic.png\" alt=\"\">\n                <span>@Model.Metadata.CompanyName</span>\n            </a>\n            <!-- Languages structure -->\n            @if (Model.Cultures != null)\n            {\n                <ul id=\"langs\" class=\"dropdown-content\">\n                    @foreach (var culture in Model.Cultures)\n                    {\n                        <li>\n                            <a href=\"@Url.Action(\n                                         ViewContext.RouteData.Values[\"action\"]?.ToString(),\n                                         ViewContext.RouteData.Values[\"controller\"]?.ToString(),\n                                         new { culture = culture.CultureCode}\n                                         )\">\n                                @culture.CultureShortName\n                            </a>\n                        </li>\n                    }\n                </ul>\n            }\n            <ul class=\"right hide-on-med-and-down\">\n                @foreach (var menuItem in Model.MenuItems)\n                {\n                    if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n                    {\n                        <li class=\"kn-bold\">\n                           <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                    else\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                }\n\n                <li>\n                    <a class=\"dropdown-trigger\" href=\"#\" data-target=\"langs\">\n                        @Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName\n                        <i class=\"fas fa-globe-africa right\"></i>\n                    </a>\n                </li>\n            </ul>\n            <ul id=\"nav-mobile\" class=\"sidenav\">\n                @foreach (var menuItem in Model.MenuItems)\n                {\n                    if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                    else\n                    {\n                        <li>\n                            <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n                        </li>\n                    }\n                }\n            </ul>\n            <a href=\"#\" data-target=\"nav-mobile\" class=\"sidenav-trigger\">\n                <i class=\"material-icons\">menu</i>\n            </a>\n        </div>\n    </nav>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"861d20f8-26e5-4359-98f3-ca92cf54dc67","_parentId":"9a41b38d-e629-42b6-bce9-21a44642ee1c","_type":"component","title":"Demo: Updating the culture-selector","displayTitle":"Demo: Updating the culture-selector"},{"body":"<p>Congratulations on completing another part of the course. You now know how you can build the website's navigation which allows admins to work with the menu items in the content tree.</p>\n<p>Hurry up to the next part of the training in which you will find out how to work with files stored in the media libraries and display them on the live site.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fc158242-5bf7-40a7-9900-6da33777f94a","_parentId":"bb82fb9a-acd1-4bb6-bf70-cb6d8fdb4e65","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>What media libraries are and you can use them to store files</li>\n  <li>How you can configure the default settings of media libraries to match your project requirements</li>\n  <li>What is the best practice to display media library files on the live site</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Implementing the Contact us page</li>\n  <li>Adding a map with office locations generated from Kentico data</li>\n  <li>Creating a new media library and uploading files</li>\n  <li>Displaying media library files on the live site</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9fb252da-4533-4a88-8767-6b33a7f5ac39","_parentId":"7f218e1d-38ab-4ba7-9a94-88acbfa85f07","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"","_items":[{"body":"<p>Media libraries serve as central repositories for storing media on your website. They can store all types of files editors might want to work with, images, videos or non-image files, such as documents. Here is a basic overview of the behavior of media files:</p>\n<ul>\n  <li>The physical files are uploaded to the project's file system, or you can use any external storage provider, such as Azure Blob Storage or Amazon S3. However, if you decide to use the external storage provider, you need to implement it in your code and configure &nbsp;the admin interface.</li>\n  <li>Website editors can organize media files into a hierarchy of folders to group related files.&nbsp;</li>\n  <li>The physical files are not uploaded to the database, only a link to the file is added to the database (unlike the page attachments where you <a href=\"https://docs.kentico.com/k12/configuring-kentico/managing-files/storing-files\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">can decide on where files are stored</a>).&nbsp;</li>\n  <li>By default, both media library files and their folders are synchronized between the admin UI and the MVC application automatically as the web farm mode is enabled in the MVC development model.</li>\n</ul>","title":"Media library basics","_graphic":null},{"body":"<p>The physical files are stored in the file system and synced with the MVC application thanks to the web farm synchronization. The editors can upload files to the media libraries from the admin UI or they can access the file system directly and upload files via, e.g., FTP.&nbsp;</p>\n<h2>Storing media library files</h2>\n<p>The physical files in the file system are stored in the folder hierarchy that mirrors the folder hierarchy of the media library in the UI. To make navigation around the folder structure in the <em>Media libraries</em> application easier, developers can configure the number of folders which can be displayed under an expanded folder node in the media libraries tree view.&nbsp;</p>\n<p>Editors can store an unlimited number of files in the media library. However, we don't recommend storing more than 100 files per library if you want to use external storage option, such as Azure Blob Storage, as the number of files per library affects the performance of the <em>Media library </em>application's UI.&nbsp;If you plan to store the physical files only in the file system, you can store any number of files within one media library.</p>\n<h3>Configuring storage options</h3>\n<p>You can configure the locations of the folder where the system stores media files in the Settings application. If the value is empty, the system stores the files in the default location <em>~/&lt;sitecodename&gt;/media/&lt;MediaLibraryFolderName&gt;</em>.</p>\n<p>In case you run several MVC applications using one administration interface which means the files from different sites are stored in different folder structures.</p>\n<p>If you need to change the location of the media libraries file, you can specify the <em>physical path</em>,<em> root-relative path</em> or <em>UNC path</em> to store the libraries on different servers. Find out more about <a href=\"https://docs.kentico.com/k9/managing-website-content/configuring-the-environment-for-content-editors/configuring-media-libraries#Configuringmedialibraries-Configuringcustomstorageformedialibraries\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configuring custom storage</a> in Kentico documentation.</p>\n<h3>Using external storage</h3>\n<p>The media library files can be stored in the file system or in an external storage provider.&nbsp;</p>\n<p>You need to decide early in the project where the files will be stored, because it's not possible to migrate the files from, for example, the file system to Azure CDN. If you tried to migrate the files, all URLs become invalid and even the structure of the media library folders may be affected.</p>\n<p>If you want to store media libraries in a cloud-based file system, you need to configure your MVC application to use storage-specific providers. Configuration of the MVC application for external storage follows the same instruction as for Kentico projects.</p>\n<ul>\n  <li>For Azure Blob storage, see&nbsp;<a href=\"https://docs.kentico.com/k12/custom-development/working-with-physical-files-using-the-api/configuring-file-system-providers/configuring-azure-storage#ConfiguringAzurestorage-ConfiguringKenticotostoreonlymediafilesonAzurestorage\">Configuring Azure storage</a>.</li>\n  <li>For Azure CDN, see&nbsp;<a href=\"https://docs.kentico.com/k12/deploying-websites/running-kentico-on-microsoft-azure/configuring-azure-cdn\">Configuring Azure CDN</a>.</li>\n  <li>For Amazon S3, see&nbsp;<a href=\"https://docs.kentico.com/k12/custom-development/working-with-physical-files-using-the-api/configuring-file-system-providers/configuring-amazon-s3\">Configuring Amazon S3</a>.</li>\n</ul>\n<p>When storing files in an external provider, keep in mind that Kentico is case&nbsp;<em>insensitive</em>, while the external storage applications, such as&nbsp;<em>Azure Blob Storage</em>, are case&nbsp;<em>sensitive</em>.</p>\n<h2>Registering media files in the database</h2>\n<p>Files uploaded to the media library need to be registered in the database. Files that were uploaded in the admin UI get registered automatically. Files uploaded directly to the file system outside of the admin UI need to be registered either manually from the UI (unregistered files are marked by a yellow triangle icon), or you can customize the system, for example, by developing a custom scheduled task and register the files using Kentico API.</p>\n<p>When the file is registered in the database, it's not uploaded in the database. Each media library file gets an entry in the <em>Media_Files</em> database table which collects a link to the file (<em>FileGUID column</em>), the library the file is stored in (<em>FileLibraryID</em>) and other values.</p>","title":"Storing media files","_graphic":null},{"body":"<p>Media libraries can store <strong>any types of file</strong>, such as images, sound files, videos, package files, presentations or document files. By default, there are some restrictions on what types editors can upload to media library through UI, but it's possible to configure the allowed extensions and support uploading many more different file-types in the Settings application.</p>\n<h2>Supported file types in Media libraries</h2>\n<p>Editors can preview images of different types, such as <em>bmp,&nbsp;gif,&nbsp;png,&nbsp;jpg,&nbsp;</em>or <em>jpeg, </em>directly<em> </em>in the Media library application<em>. </em>The system also detects audio and video files based on their&nbsp;<a href=\"https://en.wikipedia.org/wiki/Media_type\">MIME type</a>&nbsp;(audio types starting with the&nbsp;<em>audio/</em>&nbsp;prefix, video types with the&nbsp;<em>video/</em>&nbsp;prefix) and renders appropriate HTML5 markup. In the end, the types of files that can be previewed or played on your site depend on the users web browser.</p>\n<p>Editors can store other file types, such as PDF or packages. The system recognizes these file types as documents which means they cannot be played or displayed as the images or video files. However, users can download them from the live site or preview provided that their browsers contain the necessary extensions.</p>\n<h3>Adding custom files types to media libraries</h3>\n<p>You can allow custom files types, such as <em>.svg</em>, by modifying the site's <em>web.config</em> file. If your browser supports previewing, e.g., <a href=\"https://caniuse.com/#search=svg\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">the .svg file type</a>, the system can recognize and process. Using the <em>web.config</em> keys, you can specify which file types are detected automatically; other image file types are recognized as <em>documents</em>.</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (2:1). Please check the output for a content item mvc_media_libraries_example_web_config_file_types of type CloudIntegration.Models.Cloud.CodeBlock.]\n<h2>Adjusting the maximum file upload size</h2>\n<p>The default maximum upload size for IIS 7 and higher is 30 MB. If someone tries to upload anything larger than 30 MB, the IIS returns 404 error.</p>\n<p>You can enable uploads of larger files, e.g., up to 2 GB, by changing the <em>httpRuntime</em> element's <strong>maxRequestLength</strong> attribute in the <em>&lt;system.web&gt;</em> section by adding a value in <em>kilobytes</em>:</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (2:1). Please check the output for a content item mvc_media_max_file_upload_size_code of type CloudIntegration.Models.Cloud.CodeBlock.]\n<p>Secondly, you need to add the following <em>&lt;security&gt;</em> element into the main &lt;<em>web.WebServer</em>&gt; section. To enable the 2 GB uploads, you need to set the <em>requestLimits </em>element's <strong>maxAllowedContentLength </strong>property in <em>bytes</em>.</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (6:7). Please check the output for a content item mvc_media_files_setting_the_maxallowedcontent_prop of type CloudIntegration.Models.Cloud.CodeBlock.]\n<p>&nbsp;(You can find out more in the <a href=\"http://   (Find out more in Microsoft documentation.)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft documentation</a>.)</p>","title":"Working with media library files","_graphic":null},{"body":"<h2>Retrieving media files</h2>\n<p>You can retrieve media library files in MVC application using Kentico API methods from the CMS.MediaLibrary namespace.</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (18:7). Please check the output for a content item mvc_media_libraries_code_for_retrieving of type CloudIntegration.Models.Cloud.CodeBlock.]\n<h2>Getting URLs of the media files</h2>\n<p>The code above stores two properties you can use to generate media file URLs - <em>GetDirectUrl</em> or <em>GetPermanentUrl</em> methods from the <em>MediaLibraryHelper</em> class.</p>\n<h3>GetDirectUrl</h3>\n<p><em>GetDirectUrl</em> method returns a <em>direct URL</em> to the media file in the file system, e.g., <em>~/MedioClinic/Media/emergencyservices.jpg. </em>Url generated using this method provides the best performance. However, there is not much you can do with the returned file other than display it.</p>\n<h3>GetPermanentUrl</h3>\n<p><em>GetPermanentUrl</em> method returns file's <em>permanent URL</em>, for example, <em>~/getmedia/0140bccc-9d47-41ea-94a9-ca5d35b2964c/emergency_services.jpg. </em>If you store the media files in external storage, always generate the permanent URL of the media file.</p>\n<p>The <strong>permanent URL</strong> offers you some additional features which you can use when working with the file. You can use the permanent URL to <em>set access permissions</em> for viewing or updating the file. The permanent URLs allows you to <em>resize the images</em> in views (based on constraints) using the <em>ImageUrl</em> extension method or <em>add URL extensions</em>. On the other hand, adding more logic to retrieving the files means that performance-wise, the <em>permanent URL</em> is slower than the <em>direct URL</em>.</p>\n<h2>Displaying media files</h2>\n<p>Both methods mentioned above return files' <em>relative URLs </em>which means you need to process their values through <em><strong>ImageUrl</strong></em> or <em><strong>FileUrl</strong></em> extension methods in views to get the final URL of the media file you want to display. Both methods are available in the <em>Kentico.Content.Web.Mvc</em> namespase and expose the following behavior.</p>\n<div class=\"infobox note\"><h3><strong>Available </strong><em>SizeConstraint </em><strong>parameters</strong></h3>\n<p>Calling the&nbsp;<em>ImageUrl&nbsp;</em>method on the file's permanent URL allow you to resize the image to the specified <strong>height </strong>(<em>SizeConstraint.Height(value)</em>), <strong>width</strong><em><strong>&nbsp;</strong></em><em>(SizeConstraint.Width(value))</em>&nbsp;or ensure that the image <strong>doesn't exceed the specified size</strong> (<em>SizeConstraint.MaxWidthOrHeight(value)</em>) without changing the image's aspect ratio.</p>\n<p>The&nbsp;<em>SizeConstraint.Size(value, value)</em>&nbsp;property <strong>resizes the image to the specified width and height</strong> (and changes the image's aspect ratio).</p>\n<p>No matter how large a size you specify in the&nbsp;<em>SizeConstraint</em>&nbsp;property, the resized image is never larger than its original size.</p></div>\n<p>Following code snippet shows how you can display the files in <em>model</em> (the snippet above).</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (10:2). Please check the output for a content item mvc_media_libraries_display_file_in_view_code_ex_ of type CloudIntegration.Models.Cloud.CodeBlock.]","title":"Retriving files from media libraries","_graphic":null},{"body":"<h2>Setting access permissions for media libraries</h2>\n<p>Not all the users or editors need to have access to all of the media libraries and to all the actions that can be performed with them. With the advanced functionalities of Kentico security model, you can assign user permissions to prevent undesired behavior of the website. We recommend that <strong>only the lowest number of users (or sys admins) are allowed</strong> to perform actions mentioned above.</p>\n<p>The best practice is to pre-define the folder structure of the libraries when they are created and not to allow users to further modify it. You can create a specific role to manage your media libraries and define suitable permissions for particular actions for each media library.</p>\n<p>You can find an example of <a href=\"https://docs.kentico.com/k12/configuring-kentico/configuring-the-environment-for-content-editors/configuring-media-libraries/assigning-permissions-to-media-libraries\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">defining the role and setting up permissions for media libraries</a> in Kentico documentation.</p>\n<p>If you want to modify access permissions to specific media files on the live site, for example, to only sign-in users, you need to generate permanent ULR for the media file. (Also, Kentico by default doesn't check permissions for viewing media files on the live site, so you'll need to enable <em>Check file permissions</em> in the <em>Settings </em>application. Also, to check permissions you need to retrieve files using the <em>permanent URL</em>. Files retrieved with the <em>direct URL</em> property display even if the permissions are set. )</p>","title":"Configuring the media files","_graphic":null}],"instruction":"","_layout":"full","_component":"accordion","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ade14105-06ed-4c22-8037-249441077015","_parentId":"1dac1227-fea0-43cc-a2da-e2094a629695","_type":"component","title":"Media libraries","displayTitle":"Media libraries"},{"body":"<p>Medio Clinic contains one media library. The <em>MedicalCenters</em> media library stores several <em>.jpg</em> images which are displayed on the live site's <em>Contact</em> page. The media library is synced in the web farm with the MVC application; the images are stored in the default location, i.e., <em>/MedioClinic/media/MedicalCenters</em>.<br>\nThe images are retrieved in a custom service class. First, the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/MediaLibrary/IMediaLibraryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>IMediaLibraryService</em></a> interface defines methods &nbsp;for getting media library files. The <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/MediaLibrary/MediaLibraryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MediaLibraryService</em> </a>is an implementation of IMediaLibraryService which internally uses Kentico API to obtain files from media libraries. The service maps the result to <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/MediaLibrary/MediaLibraryFileDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MediaLibraryFileDto</em></a>. The <em>MediaLibraryFileDtos</em> map <em>titles</em>, file <em>extensions</em>, and both <em>direct</em> and <em>permanent URLs</em> of the media files.</p>\n<p>The collection with media files is used in <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/Contact/ContactViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ContactViewModel</em> </a>and passed to the Contact's <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Contact/Index.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Index</em></a> view where it is looped with <em>foreach</em> method and displayed on the live site. The method calls the <em>DirectURL</em> property using custom <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/UrlExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>KenticoImageUrl</em></a> helper method.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ff338a51-c294-4daa-be56-d0aaff41c291","_parentId":"1dac1227-fea0-43cc-a2da-e2094a629695","_type":"component","title":"Implementation of media libraries on Medio Clinic","displayTitle":"Implementation of media libraries on Medio Clinic"},{"body":"<p>To see how Kentico API helps you with to display images stored in media libraries, let's build a <em>Contact</em> page. Make sure that the following statements about your training website are true at the end of this exercise.</p>\n<ul>\n  <li>Medio Clinic website contains a <em>Contact us</em> page.</li>\n  <li>The new <em>Contact</em> page displays data from the admin UI - <em>Contact us</em> header, a subtitle, a short description, and all the contact information for the Medio Clinic (as well as the website's <em>header</em> and <em>footer</em>).</li>\n  <li>The page uses data from the admin UI and displays position of <em>Medio Clinic</em>'s offices on a map.</li>\n  <li>The implementation of the map dynamically resolves any new offices which editors add in the admin UI, e.g., by a using a specific page type for map locations.</li>\n  <li>The admin UI contains a media library, e.g, <em>Medical centers</em>, which contains some images. (You can use images in the <em>Medial Centers photos</em> folder in the course assets.)</li>\n  <li>The <em>Contact</em> page uses Kentico API to display the images from the media library. (The recommended practice is to use a custom service to wrap Kentico API.)</li>\n  <li>The code that displays the images dynamically handles the images; if a new image is added to the media library in the admin UI, it's displayed on the page.</li>\n  <li>Medio Clinic's navigation menus contain the <em>Contact</em> <em>us </em>item.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2b119d0e-a78f-4ea8-aaa0-edcb88a8a5ba","_parentId":"053ac411-e964-4820-96bb-a9414f476d8c","_type":"component","title":"Task: Displaying images from the Media library","displayTitle":"Task: Displaying images from the Media library"},{"body":"<p>The following demo shows how we built the Contact page on the Medio Clinic. If you want to follow the demo, you'd need to create new media libary, e.g., <em>MedicalCenters</em>, in the administration interface and upload some files, e.g., in the <em>Medical Centers photos</em> folder. To create the library and upload the images, you can follow step by step description for both <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-files/media-library-files/creating-media-libraries\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">creating the media library</a> and <a href=\"https://docs.kentico.com/k12/managing-website-content/working-with-files/media-library-files/inserting-files-into-media-libraries\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">inserting the files</a> in Kentico documentation.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Before you display the <em>MedicalCenters</em> media library, you may want to display the content of the contact us page that exists in the admin interface. The data is stored in the <em>ContactSection</em> page type and besides the Medio Clinic's details and images from the media library, the <em>Contact</em> page should also display locations of Medio Clinic's offices on a map.</p>\n<p>To start with the page, you can follow similar pattern you used for coding the Home or doctor pages, and create a repository which injects the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/Query/DocumentQueryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>DocumentQueryService</em> </a>and maps Kentico data from the <em>ContactSection</em> page in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Contact/ContactSectionDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ContactSectionDto</em></a>.&nbsp;</p>\n<p>Similarly, you can retrieve the data for the Medio Clinic's office locations - use a <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Repository/Map/MapRepository.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>repository</em></a> and a separate <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Map/MapLocationDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MapLocationsDto</em></a>.</p>\n<p>Finally, you can bring the stored data together and define <em>Contact section</em> and <em>Office locations</em> objects in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/Contact/ContactViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ContactViewModel</em></a><em>. </em>(Remember that other data for the&nbsp;<em>Contact</em>&nbsp;page, such as company address, is already stored in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/Company/CompanyDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>CompanyDto</em></a>.)</p>","code":{"src":"using System.Linq;\nusing CMS.DocumentEngine.Types.Training;\nusing Business.Dto.Contact;\nusing Business.Services.Query;\n\nnamespace Business.Repository.Contact\n{\n    public class ContactSectionRepository : BaseRepository, IContactSectionRepository\n    {\n\n        public ContactSectionRepository(IDocumentQueryService documentQueryService) : base(documentQueryService)\n        {\n        }\n\n        public ContactSectionDto GetContactSection()\n        {\n            return DocumentQueryService.GetDocuments<ContactSection>()\n                .TopN(1)\n                .AddColumns(\"Title\", \"Subtitle\", \"Text\")\n                .ToList()\n                .Select(m => new ContactSectionDto()\n                {\n                    Header = m.Title,\n                    Subheader = m.Subtitle,\n                    Text = m.Text,\n\n                })\n                .FirstOrDefault();\n        }\n    }\n}\n","lang":"c_"},"strapline":""},{"title":"","body":"<p>As the next step, create a <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/ContactController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Contact</em></a> controller.</p>\n<ul>\n  <li>The controller creates a <em>PageViewModel</em> with the collected <em>Contact</em> information as its parameter and pass the model to a view.&nbsp;</li>\n  <li>The <em>ContactController</em> returns<em> HttpNotFound()</em> method if there the <em>contactSection</em> contains no data.&nbsp;</li>\n</ul>\n<p>(Please note that the linked code sample already contains data to that display images from the media library which is covered later in this demo.)</p>\n<p>To display the map, the Medio Clinic uses <a href=\"https://developers.google.com/maps/documentation/javascript/tutorial\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Google Maps JavaScript API</em></a>. The map is generated using Kentico data and displays markers and windows per each of the Medio Clinic's location.</p>\n<p>To create the view, use the <em>Contact</em> <em>header</em> and <em>Contact</em> <em>map</em> sections in on the <em>Contact.html</em> page in the course assets and replace the hard-coded values in the markup with <em>ContactViewModel</em> object's properties.</p>","code":{"src":"@using System.Globalization\n@using System.Web.Optimization\n@using MedioClinic.Models.Contact;\n\n@model MedioClinic.Models.PageViewModel<ContactViewModel>\n\n@section scripts {\n\n    <script type=\"text/javascript\">\n        /* Google map callback */\n        function initMap() {\n\n            var mapOptions = {\n                zoom: 3,\n                center: { lat: 0, lng: 0 },\n                mapTypeId: google.maps.MapTypeId.HYBRID\n            };\n\n            var map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n\n            /* Loops through the OfficeLocations collection and generates a map marker per each location */\n            @foreach (var location in Model.Data.OfficeLocations)\n            {\n                <text>\n                    var marker = new google.maps.Marker({\n                        position: {\n                            /* Defines map marker location using location values stored in Kentico */\n                            lat: @location.Latitude.ToString(CultureInfo.InvariantCulture),\n                            lng: @location.Longitude.ToString(CultureInfo.InvariantCulture) },\n                    map: map\n            });\n\n            marker.setMap(map);\n\n            var devwindow = new google.maps.InfoWindow({\n                 /* Passes the value of the Tooltip property into the map's InfoWindow overlay */\n                content: \"@location.Tooltip\"\n             });\n\n              devwindow.open(map, marker);\n                </text>\n            }\n        }\n    </script>\n\n    @Scripts.Render(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBqj371OzjrUb_iYNf4N-sUF_Y1JG8ePGc&callback=initMap\")\n\n}\n<!-- Contact header -->\n<div class=\"section kn-section-top\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col s12 m12\">\n                <!-- Resolves the value of the Contact section's header; if null, no information is displayed. -->\n                <h1 class=\"header \">@(Model.Data.ContactSection?.Header)</h1>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col l8 m12 s12\">\n                <!-- Resolves the value of the Contact section's subtitle; if null, no information is displayed. -->\n                <h4 class=\"contact-header\">@(Model.Data.ContactSection?.Subheader)</h4>\n                <p>\n                    <!-- Resolves the value of the Medio Clinic\"s description; if null, no information is displayed. -->\n                    @(Model.Data.ContactSection?.Text)\n                </p>\n            </div>\n            <div class=\"col l3 m12 s12 offset-l1 offset-m0 offset-s0 kn-contact-us-box\">\n                <div class=\"kn-contact-box-header\">\n                    <h5>Contact</h5>\n                </div>\n                <div class=\"kn-contact-content\">\n                    <!-- Displays Medio clinic's address using values stored in the CompanyDto -->\n                    @(Model.Company.Street)\n                    <br>@Model.Company.City\n                    <br>@Model.Company.Country @Model.Company.State\n                    <br>@Model.Company.PhoneNumber\n                    <br>@Model.Company.Email\n                </div>\n                <div class=\".kn-contact-us-box-social\">\n                    facebook twitter icons\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- Contact map --> \n<div class=\"container\">\n    <div class=\"section\">\n        <div class=\"row\">\n            <div class=\"col s12 m12\">\n                <div id=\"map\" class=\"kn-map\">\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>You can retrieve the content of the <em>Medical Centers</em> media library with the help of a custom <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Services/MediaLibrary/MediaLibraryService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MediaLibraryService</em></a><em> </em>which creates a wrapper around Kentico API.</p>\n<p>The custom service fetches all media files with their extensions from a given media library on the current site and maps to <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/MediaLibrary/MediaLibraryFileDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MediaLibraryFileDto</em></a>. You can then pass the <em>MediaLibraryFileDto</em> to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/Contact/ContactViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ContactViewModel</em></a>. Please see the code sample for detailed information about the custom service.&nbsp;</p>","code":{"src":"using System.Collections.Generic;\nusing System.Linq;\nusing CMS.MediaLibrary;\nusing Business.Dto.MediaLibrary;\n\nnamespace Business.Services.MediaLibrary\n{\n    public class MediaLibraryService : IMediaLibraryService\n    {\n        public IEnumerable<MediaLibraryFileDto> GetMediaLibraryFiles(string folder, string sitename, params string[] extensions)\n        {\n            // Gets an instance of the media library for the current site\n            var mediaLibrary = MediaLibraryInfoProvider.GetMediaLibraryInfo(folder, sitename);\n\n            // Gets a collection of media files and their extensions from the media library\n            return MediaFileInfoProvider.GetMediaFiles()\n                .WhereEquals(\"FileLibraryID\", mediaLibrary.LibraryID)\n                .WhereIn(\"FileExtension\", extensions)\n                .ToList()\n                .Select(m => new MediaLibraryFileDto()\n                {\n                    Title = m.FileTitle,\n                    Extension = m.FileExtension,\n                    DirectUrl = MediaLibraryHelper.GetDirectUrl(m),\n                    PermanentUrl = MediaLibraryHelper.GetPermanentUrl(m)\n                });\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<p>To display images on the live site, first inject the <em>MediaLibraryService</em> to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/ContactController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>ContactController</em></a> so it's resolved by the DI container.&nbsp;</p>\n<p>Update the code so that it returns the <em>ContactViewModel</em>. To include the retrieving of the media file so to the live site, call the <em>GetMediaLibraryFiles</em> method. The method will accept the codename of the<em> </em>library<em> </em>and a list of file extensions<em> </em>as its parameters<em>. </em>You can use the custom <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Utils/SiteContextService.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>SiteContextService.SiteName</em></a><em> </em>property for the method's <em>sitename </em>parameter.&nbsp;</p>\n<p>Finally, you can add the <em>Media centers media library </em>section markup from the <em>Contact.html</em> sample code to the Contact's <em>Index.cshtml</em> view. To dynamically display the images, you can loop through the collection of the medical center images and pass their properties (the <em>DirectUrl</em> and <em>Title</em> properties) to the HTML markup. Remember that the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Dto/MediaLibrary/MediaLibraryFileDto.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MediaLibraryFileDto</em></a> object holds a relative URL of the image, so you'll need to resolve the path to the image using Kentico <em>ImageUrl</em> extension method. In this demo, we use a custom <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Extensions/UrlExtensions.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>KenticoImageUrl()</em></a> wrapper around Kentico API.</p>\n<p>(The code snippet displays markup that retrieves the images from media library to the live site. &nbsp;You can see the finalized markup of the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/Contact/Index.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Contact Index.cshtml view</em></a> in the GitHub repository.)</p>","code":{"src":"<!-- Adds section which displays images from the media library to the view  -->\n<div class=\"container\">\n    <div class=\"section\">\n        <div class=\"row\">\n            <div class=\"col s12 m12\">\n                <h3>Our medical centers</h3>\n            </div>\n        </div>\n        <div class=\"row\">\n            @*Loops through the images in the Medial Center library and generates direct urls for each image stored in the library.*@\n            @foreach (var medicalCenterImage in Model.Data.MedicalCenterImages)\n            {\n                <div class=\"col l4 m6 m12\">\n                    <div class=\"kn-medcenter\">\n                        @*System returns relative ULR of the image which is processsed in the custom KenticoImageUrl helper method and the image's source parameter. Image's Title property is passed to the alt-tag. *@\n                        <img src=\"@Url.KenticoImageUrl(medicalCenterImage.DirectUrl)\" alt=\"@medicalCenterImage.Title\">\n                    </div>\n                </div>\n            }\n        </div>\n    </div>\n</div>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"dca1ba52-69fe-4909-8db1-bf561348d2bd","_parentId":"42f3af85-7039-4cf6-bc5e-f66823f05e4c","_type":"component","title":"Demo: Displaying the media library","displayTitle":"Demo: Displaying the media library"},{"body":"<p>Congratulations on completing another part of the course!</p>\n<p>You now know how you can create and use media libraries to store physical files on your website. You know what settings you can configure so it fits better your project, and how you can use the Kentico security model to set up permissions to access the individual media libraries and its files. You learned about the recommended practice to use when displaying media library files on the live site. And you have built a <em>Contact us</em> page which - besides media library files - contains a map with markers that show office locations.</p>\n<p>Hurry up and find out how you can set up a custom friendly error page in the next part of the course!</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9612bcd8-60df-4213-8773-44a7df0afcd3","_parentId":"95d72303-2400-4f38-a2ee-f8b6b4232906","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>What you will learn in this section</p>\n<ul>\n  <li>How you can handle 404 errors in MVC applications</li>\n  <li>What is the recommended practice for handling errors on websites built with MVC&nbsp;</li>\n</ul>\n<p>You will work on:</p>\n<ul>\n  <li>Creating a user friendly error page</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fb5e5865-d06a-4278-acc8-bb6d0fc87e03","_parentId":"bc8b4aa0-ba0a-45de-98c5-1e995935c56a","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>The&nbsp;<em>Page not found</em>&nbsp;error (404 HTTP status code) is one of the most common issues that visitors meet when browsing the websites.&nbsp;</p>\n<p>MVC applications typically execute user actions. Even when a user performs a request which the application doesn't support, it's unacceptable for any professional application to return a user-unfriendly error message, such as an HTTP status code or even worse, the YSOD (<em>Yellow-Screen-Of-Death</em> which IIS returns by default).</p>\n<p>The status code is too technical for website visitors, and they won't understand what's happening and what they should do differently. On the other hand, the YSOD contains parts of your code which can expose a potential vulnerability - and introduce a security issue. That's why a user-friendly error page is a must.</p>\n<h2>Errors in MVC websites</h2>\n<p>In general, there are two types of errors in ASP.NET MVC websites, and they are raised either by the MVC application itself or by the IIS.</p>\n<p>The following errors are typically raised by an MVC application:</p>\n<ul>\n  <li>The URL requested by the user doesn't match any route on the website.</li>\n  <li>The URL matches a route, but a specific controller or controller action isn't found.</li>\n  <li>Controller action returns <em>System.Web.Mvc.HttpNotFoundResult</em> by, e.g., calling the <em>HttpNotFound</em> method.</li>\n</ul>\n<p>The IIS can raise the following errors:</p>\n<ul>\n  <li>File the user requested doesn't exist.</li>\n  <li>There is no binding for the requested extension, e.g, <em>jpg1</em>.</li>\n  <li>Static file handler doesn't find the file on the disc.</li>\n</ul>\n<h2>Handling the 404 error</h2>\n<p>Any suitable response to a 404 error in a modern MVC application should ensure the following:</p>\n<ul>\n  <li>It preserves the original request URL.</li>\n  <li>It doesn't respond with a 302 redirect.</li>\n  <li>It returns correct 404 HTTP status code.</li>\n</ul>\n<h2>Implementing the error page</h2>\n<p>In the ASP.NET framework,&nbsp;there is a number of approaches you can take to implement how your website deals with error pages.</p>\n<p>We recommend handling errors on the IIS level by creating a custom friendly error MVC page or a static&nbsp;<em>.html</em>&nbsp;page and specify the path to the error page in the application's <em>Web.config</em> using the&nbsp;<em>httpErrors</em>&nbsp;element.</p>\n<p>Regarding the content of the error page, you can implement any of the following scenarios:</p>\n<ul>\n  <li>Create a static <em>.html </em>page with a hard-coded content to display as an error message.</li>\n  <li>Create a general MVC page which contains user-friendly error message&nbsp;hard-coded in the view's markup (for details see how we developed the Medio Clinic's error page).</li>\n  <li>Give a full control over the content of the error page to editors. You can create a <em>NotFound</em> page type with a suitable URL pattern and provide editors with means, e.g., suitable form controls, to populate the page with content they want to link or promote to their customers. The editors will then use the page type and create a Not found error page in the content tree. (Using this approach, you'll also need to implement the features to retrieve the content of the page to the live site. The implemented custom error page will be just another item in the content tree, and you can follow the same steps you took to display, e.g., the <em>Home</em> and other pages on the Medio Clinic live site.)</li>\n</ul>\n<h2>Setting IIS to handle 404 HTTP exceptions</h2>\n<p>If you decide to use any of the three approaches, you need to configure the behavior of your application when an error occurs. The following snippet sets that the IIS handles 404 HTTP errors.</p>\n<pre><code class=\"language-c_\">protected void Application_Error()\n{\n    // Sets 404 HTTP exceptions to be handled via IIS (behavior is specified in the \"httpErrors\" section in the Web.config file)\n    var error = Server.GetLastError();\n    if ((error as HttpException)?.GetHttpCode() == 404)\n    {\n        Server.ClearError();\n        Response.StatusCode = 404;\n    }\n}</code></pre>\n<h2>Creating a static HTML error page</h2>\n<p>Having a static .html page is arguably the safest possible approach. In some cases, it can be easier to develop, but it requires that you hard-code the styling of the page to match your website's layout and provide the user with a consistent experience.</p>\n<p>On the other hand, if there is any change to the basic site's layout, such as if there are new items in the websites' navigation, you need to update also the code of your static error page to match the experience which brings unnecessary expenses.</p>\n<p>The following code snippet shows how to reference your error page in the Web.config's <em>system.WebServer</em> node.</p>\n[Inline content item resolver provided an invalid HTML 5 fragment (4:9). Please check the output for a content item mvc_404_error_static_page_httperrors_code_example of type CloudIntegration.Models.Cloud.CodeBlock.]\n<h2>Creating a custom MVC error page</h2>\n<p>To use all MVC features, such as already defined website's layout or dynamically resolved navigation menu, you can create a custom <em>NotFound</em> controller with actions that handle the errors you need and return suitable views. Again, you need to reference the path to the respective controller action in the <em>Web.config</em>. You can see this approach in use on the Medio Clinic website.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"24e4bdef-30a2-4085-81cf-a91e206c937d","_parentId":"6fda4dcd-57da-4fd0-9d06-04852e70be60","_type":"component","title":"404 error pages in Kentico MVC","displayTitle":"404 error pages in Kentico MVC"},{"body":"<p>Medio Clinic uses a custom user-friendly error MVC page.</p>\n<p>The site's <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Global.asax.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Global.asax</em></a><em> </em>sets that the errors are handled by the IIS<em>. </em>The behavior is specified in the site's <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Web.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>web.config</em></a> which defines handling error by an <em>&lt;httpErrors&gt;</em> element added to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Web.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Web.config</em></a>'s <em>web.webServer</em> section.</p>\n<p>The <em>\"/notfound\"</em> &nbsp;path's attribute of the <em>&lt;error&gt;</em> element matches the <em>NotFound route</em> in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig.cs</em></a> class. The route invokes the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/NotFoundController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>NotFoundController's</em> <em>Index </em>action</a>. The <em>NotFoundController </em>inherits from the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/BaseController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController</em></a>,<em> </em>&nbsp;sets the page's response to 404 status code and creates a <em>PageViewModel</em> object with \"<em>Not found</em>\" parameter. Besides the string <em>Not found (</em>which is used as the live site's page's title), the <em>PageViewModel</em> contains basic Medio Clinic data, such as data for the page menu, company information or links to social media.</p>\n<p>The model is passed to <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Views/NotFound/index.cshtml\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>NotFound view</em></a> which contains the user friendly error message hard-coded in the HTML markup. (The image for the 404 page is stored in the Medio Clinic project and isn't synced to the administration interface.)</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e2630382-a7b7-4fdc-93d0-30054183a350","_parentId":"6fda4dcd-57da-4fd0-9d06-04852e70be60","_type":"component","title":"Implementaiton of 404 on Medio Clinic","displayTitle":"Implementaiton of 404 on Medio Clinic"},{"body":"<p>To complete this exercise, build a custom user friendly error page that responds to 404 HTTP status code. You can take any approach you want, however, your error page needs to pass the following criteria:</p>\n<ul>\n  <li>The \"<em>Page not found</em>\" error is handled globally on the IIS level. (Approach recommend for websites built with Kentico MVC development model.)</li>\n  <li>The error page contains a message and an image. (You can use, e.g., the <em>404.jpg</em> image in the course resources.)</li>\n  <li>The error page returns 404 HTTP status code.</li>\n  <li>It preserves the original request URL.</li>\n  <li>It doesn't respond with 302 redirect.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"4a5b049e-3663-43d0-a1cb-16c0697d65e1","_parentId":"50df62e6-cd6e-4bfc-a9ee-4dc82ace3b5d","_type":"component","title":"Task: Handling Page not found errors","displayTitle":"Task: Handling Page not found errors"},{"body":"<p>The following demo shows how the Medio Clinic website handles requests that end up with 404 \"not found\" result. Feel free to code along!</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<h2>Set up 404 error handling via IIS</h2>\n<p>In the <em>Global.asax</em> code file in your Medio Clinic's project, add an <em>Application_Error()</em> method to the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Global.asax.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MvcApplication</em></a> class.</p>","code":{"src":"protected void Application_Error()\n        {\n            // Sets 404 HTTP exceptions to be handled via IIS (behavior is specified in the \"httpErrors\" section in the MedioClinic.config file)\n            var error = Server.GetLastError();\n            if ((error as HttpException)?.GetHttpCode() == 404)\n            {\n                Server.ClearError();\n                Response.StatusCode = 404;\n            }\n        }","lang":"c_"},"strapline":""},{"title":"","body":"<h2>Create a custom user-friendly error page</h2>\n<p>To display the error page, use the <em>PageViewModel</em> class you have already built. Create a controller that inherits from the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Controllers/BaseController.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>BaseController </em></a>class which injects the basic data for the <em>navigation menu</em>, <em>page metadata</em>, Medio Clinic's <em>contact details</em>, <em>links</em> to its social media and <em>the site's cultures</em>.</p>\n<p>The <em>NotFoundController</em> sets the page's response to 404 status code, creates a new <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Models/PageViewModel.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>PageViewModel</em></a> model object with a <em>Not found</em> string as a parameter for the page's title and returns a <em>NotFound</em> view.</p>","code":{"src":"using System.Web.Mvc;\nusing Business.DI;\n\nnamespace MedioClinic.Controllers\n{\n    public class NotFoundController : BaseController\n    {\n\n        public NotFoundController(IBusinessDependencies dependencies) : base(dependencies)\n        {\n        }\n\n        public ActionResult Index()\n        {\n            Response.StatusCode = 404;\n\n            var model = GetPageViewModel(\"Not found\");\n\n            return View(model);\n        }\n    }\n}","lang":"c_"},"strapline":""},{"title":"","body":"<h2>Adding the NotFound view</h2>\n<p>Create a <em>NotFound</em> view strongly-typed against the <em>PageViewModel</em>.</p>\n<p>The view informs the website user that the content which they request cannot be found and an image, e.g., the <em>404.jpg</em> image from the course resources. In the end, your <em>Not found</em> <em>Index.cshtml</em> view might look like the code snippet on the left.</p>","code":{"src":"@model MedioClinic.Models.PageViewModel\n\n<div class=\"section\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col s12 m12\">\n                <h1>404 Page not found</h1>\n            </div>\n            <div class=\"col l8 m12 s12\">\n                <p>\n                    Sorry, but the page you are looking for can't be found. Please go back to the\n                    <a href=\"/\">home page</a>.\n                </p>\n                <img class=\"responsive-img\" src=\"~/Content/Images/notfound.jpg\" alt=\"not found img\">\n            </div>\n        </div>\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<h2>Map the NotFound route</h2>\n<p>To resolve the request URLs that return the 404 status, map the <em>NotFound</em> route to the <em>NotFoundController</em>'s <em>Index</em> action in the Medio Clinic's <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Start/RouteConfig.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>RouteConfig.cs</em></a>. The route needs to be registered separately to allow culture-less URLs.</p>\n<pre><code class=\"language-c_\">(...)\n        // Maps the Not found route (the route needs to be registered separately to allow cultureless url)\n            routes.MapRoute(\n                \"NotFound\",\n                \"notfound\",\n                new { controller = \"NotFound\", action = \"Index\" }\n            );\n(...)</code></pre>\n<h2>Add the httpErrors element to handle 404 status code</h2>\n<p>Modify the Medio Clinic project's <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Web.config\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>Web.config</em></a> and add 404 handling under the <em>system.webServer</em> node.</p>\n<p>The <em>&lt;remove&gt;</em> element clears any previous IIS setting to resolve 404 status code, and the <em>subStatusCode</em> attribute uses <a href=\"https://docs.microsoft.com/en-us/iis/configuration/system.webserver/httperrors/error\">its default value</a> which is intentionally declared for the purpose of this training website. The path attribute of the error element points to the <em>/notfound</em> route on the website.</p>","code":{"src":"(...)\n<system.webServer>\n    <httpErrors errorMode=\"Custom\" existingResponse=\"Auto\">\n      <remove statusCode=\"404\" subStatusCode=\"-1\" />\n      <error statusCode=\"404\" path=\"/notfound\" responseMode=\"ExecuteURL\" />\n    </httpErrors>\n(...)","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"06d83317-c812-4b66-8ba0-cf7544f586e7","_parentId":"1050fa73-02f4-45da-b10f-0c239eb4da1a","_type":"component","title":"Demo: Adding the Page not found feature","displayTitle":"Demo: Adding the Page not found feature"},{"body":"<p>Congrats on completing another part of the course. You now know what options you have to create a user-friendly error page, and you have built one on your training website.</p>\n<p>Hurry up to the next part of the training where you will learn how you can optimize the performance of your website.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"00b405e8-ed9d-4921-8a20-60a8b0ac0be9","_parentId":"542c406e-dd1a-44c3-af23-f4659e5d48a1","_type":"component","title":"Conclusion","displayTitle":"Conclusion"}]