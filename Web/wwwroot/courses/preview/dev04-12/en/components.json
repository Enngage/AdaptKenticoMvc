[{"body":"<p>The <strong>Kentico MVC for Developers</strong> course is divided into modules, each of which covers different topics.</p>\n<p>The second <strong>Kentico MVC – Builders </strong>module teaches the basics of Kentico page builder and form builder.</p>\n<p>In this course module, you will:</p>\n<ul>\n  <li>Learn what Kentico MVC builders are capable of</li>\n  <li>See what content editors can do with builders</li>\n  <li>Get the picture of what all you can develop for page builder and form builder</li>\n  <li>Develop a basic page builder widget with minimum complexity</li>\n  <li>Develop two advanced widgets for the Medio Clinic website</li>\n  <li>Develop two form components and a form validation rule</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"5b7b1212-7589-4fbd-b6f1-d59494ef26c3","_parentId":"dfc66105-49ce-45b1-9539-bfd28bb5c1fb","_type":"component","title":"Introduction to course","displayTitle":"Introduction to course"},{"body":"<h2>About the module</h2>\n<p>Each topic in the module is discussed on a separate page which is split into different parts. You can use&nbsp;<strong>the menu on the right&nbsp;</strong>to navigate on the page.</p>\n<h3>Theory</h3>\n<p>The&nbsp;<strong>top section of the page explains the theory</strong>&nbsp;and&nbsp;<strong>recommends the approach you should take</strong>&nbsp;and&nbsp;<strong>the best practices to follow&nbsp;</strong>when developing your Kentico website. The theory part is closed by a detailed<strong>&nbsp;description of how the Medio Clinic implements&nbsp;</strong>the feature covered<strong>&nbsp;</strong>in the topic. The hyperlinks in the course styled in<em>&nbsp;</em><a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>italics</em></a>&nbsp;point to the sample implementation.</p>\n<h3>Tasks</h3>\n<p>You can get your hands dirty and build your version of the Medio Clinic website using the MVC development pattern by completing&nbsp;<strong>tasks specified in the midsection.</strong></p>\n<h3><strong>Demos</strong></h3>\n<p>If you need to get some guidance,<strong>&nbsp;you can follow the demos&nbsp;</strong>which break Medio Clinic sample code into more manageable chunks and show you&nbsp;<strong>how the feature was implemented.</strong>&nbsp;However, in most cases, you won't be able to just copy-paste the sample snippets into your solution, and you'll have to do some thinking and coding by yourself.</p>\n<h3>Progress-checks</h3>\n<p>The bottom part of the page gives you a chance to<strong>&nbsp;check your understanding of the topics in a few quick quiz questions</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c2301f4d-b208-43ac-83a6-c507fcffec80","_parentId":"e0b71ff4-de41-4aaa-8cf4-dcfff0cfaf16","_type":"component","title":"About the module","displayTitle":"About the module"},{"body":"<p>In the first module of this course, you’ve developed a Kentico MVC website of a made-up Medio Clinic medical institution.</p>\n<p>In this module, you’ll enable this site to use Kentico page builder and form builder. Then, you’ll develop an infrastructure to create landing pages, together with one such page.</p>\n<p>You can find the photos for the landing page in the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/builders/MedioClinicStaticAssets.zip\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">MedioClinicStaticAssets.zip</a>&nbsp;archive. Specifically, in the&nbsp;<em>assets</em>&nbsp;&gt;&nbsp;<em>Landing page photos</em>&nbsp;subfolder of the archive.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e742cd49-c466-4a48-b653-bfafc94554e3","_parentId":"dbb5e220-9c29-47a6-8300-9d2bcedba653","_type":"component","title":"Medio Clinic website assets","displayTitle":"Medio Clinic website assets"},{"body":"<p>To get the final result of this course module, you can clone or fork a <a href=\"https://github.com/Kentico/training-kentico-k12/tree/builders\">feature branch of our Medio Clinic sample site in GitHub</a>.</p>\n<p>The best starting point for coding in this course is the current state of the <a href=\"https://github.com/Kentico/training-kentico-k12\">master branch</a>.</p>\n<p>We constantly improve the course materials and the code. Therefore, if you have taken the first part of the course (called Essentials) previously, we advise to check for <a href=\"https://github.com/Kentico/training-kentico-k12/pulls?q=is%3Apr+is%3Aclosed\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">pull requests</a> merged to the <em>master </em>branch and to <a href=\"https://git-scm.com/docs/git-pull\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">pull the changes</a> from the origin (from GitHub) into your local repo before you start working on this course module. This way, you'll start off with all the updates that have been done in the <em>master </em>branch in the meantime.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9fd8fa95-2ad7-4a5c-8a67-7944cecf6d1c","_parentId":"bb285a59-6281-4292-8535-2b053dfdc40d","_type":"component","title":"Get the code","displayTitle":"Get the code"},{"body":"<h2>Course navigation</h2>\n<p>The course module opens in a separate browser window. To:</p>\n<ul>\n  <li>get to <strong>another part of the page</strong>, use the navigation menu in the top-right corner of each page.</li>\n  <li>return to the&nbsp;<strong>module's home page</strong>, use the&nbsp;<strong>&lt;</strong><em>&nbsp;(back)</em>&nbsp;chevron in the top-left corner of each page.</li>\n  <li>navigate <strong>back to the course material in the browser window</strong>, use keyboard shortcut to go back.</li>\n</ul>\n<p>The module <strong>tracks your progress</strong>, so feel free to close the separate window and come back whenever you have time. You will be able to <strong>continue where you left off</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"730de684-a838-4248-9324-3fc42453f30b","_parentId":"0659d896-e874-487f-b36f-6a5d0174c332","_type":"component","title":"Navigation","displayTitle":"Navigation"},{"body":"<h2>Certification of completion</h2>\n<p>Unlike the Kentico MVC – Essentials module, this course module is optional.</p>\n<h2>Questions</h2>\n<p>If you have any questions about the course or its contents, contact us at <a href=\"mailto:elearning@kentico.com\">elearning@kentico.com</a>.</p>\n<p>Should you have concerns about specific parts of the source code, feel free to <a href=\"https://github.com/Kentico/training-kentico-k12/issues/new\">file an issue</a> in our GitHub repository.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a725e44a-b33d-4cf6-9297-53d323d10447","_parentId":"90305623-282f-4960-946c-c03ffd45db57","_type":"component","title":"Additional information","displayTitle":"Additional information"},{"body":"<p>What you will learn in this page:</p>\n<ul>\n  <li>What are the features and properties of page builder and form builder</li>\n  <li>How page builder pages differ from traditional structured pages</li>\n  <li>How to enable page builder in a Kentico MVC project</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"76e06b83-e172-4618-8560-320d3aa2c0b7","_parentId":"4b2484f0-26f8-48f3-9f99-023ffb06b9c7","_type":"component","title":"Scope","displayTitle":"Scope"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/57a20875-f09a-47b6-a253-d8e7b4c0efb6/m2_pagebuilderIntro1_fix.mp4","poster":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/cc1f0b02-b4e5-4abf-a80d-ca1ac3867f50/Introduction%20to%20Kentico%20MVC%20page%20builder%20and%20form%20builder.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<h2>Introduction to &nbsp;page builder and form builder</h2>\n<p>Kentico page builder and Kentico form builder are features on Kentico websites that are built with the MVC development pattern. Their sole purpose is to make lives of content editors easier, and Kentico went to great lengths in designing these features to make them maximally friendly to both editors and MVC developers.</p>\n<p>What are the page builder and form builder for?</p>\n<p>In short, the page builder allows content editors composing pages out of several reusable parts called editable areas, page sections, and widgets. With the form builder, editors can add forms to their MVC website and collect different visitors' data.</p>\n<p>The default interface for editors is user-friendly and adding widgets is super-easy.&nbsp;Content editors don't need any technical knowledge to use the features that the developers prepared. They just add&nbsp;instances of page sections and widgets&nbsp;to&nbsp;their website's pages or move them around as they need.</p>\n<p>With form builder, editors can now drag and drop fields to forms. To add a form to a page, they just use a built-in Form widget that comes installed with each Kentico MVC site.</p>\n<p>As a developer, you don't need to learn any new approach to .NET MVC or twist-and-turn what you already know into something Kentico-specific. To create page builder enabled page types, reusable page sections, and the MVC widgets, you can use standard&nbsp;APS.NET MVC techniques.&nbsp;</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"303c0930-3c6d-4e7d-aef4-946c80b0fba1","_parentId":"222c8949-55a7-4d5b-b7c6-c3237b6460cc","_type":"component","title":" Introduction to  page builder and form builder","displayTitle":" Introduction to  page builder and form builder"},{"body":"<p>Let’s call all pages configured to contain widgets as builder-enabled pages.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"02ea774b-bbb7-4e62-b809-def7dc01bead","_parentId":"09332169-c210-4730-85e1-44f086e56248","_type":"component","title":"Terminology","displayTitle":"Terminology"},{"body":"<div class=\"infobox note\"><h3>Localization</h3>\n<p>Content editors may create culture versions of builder-enabled pages in the ordinary way (in the Languages tab in the page). Texts and other properties of widgets are then stored separately for each culture.</p>\n<p>Texts in the source code of all artifacts of the page builder and form builder can also be translated.</p></div>\n<div class=\"infobox note\"><h3>Personalization</h3>\n<p>The contents of page builder widgets and form builder forms can be personalized for site visitors.</p>\n<p>Personalization capabilities will be covered in a separate module of this course.</p></div>\n<div class=\"infobox note\"><h3>Workflow</h3>\n<p>Page builder pages can be subject to workflow. Therefore, page publishing can be restricted, and versions of widget state can be preserved via page versioning.</p></div>\n<div class=\"infobox note\"><h3>Page builder versus form builder</h3>\n<p>Although page builder and form builder may look like separate features of Kentico, they work together. Page builder allows content editors to create pages with arbitrary structures of widgets. They do it in the Pages application. On the other hand, form builder allows editors to freely create forms in the Forms application, in the Form builder tab of a given form. However, when an editor wants to publish a form in the live site, they do it through one built-in widget—Form widget.</p>\n<p>Rendering forms via the Form widget is officially supported by Kentico. However, in rare cases where either business or technical project requirements dictate to avoid having builder-enabled pages, we’ll provide you with guidance on how to publish <strong>basic</strong> forms in the traditional ASP.NET MVC ways.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9d7cd333-7cc1-4d78-81bb-e7f679b3080c","_parentId":"31623b98-d081-4885-ae06-05c1610c69b9","_type":"component","title":"Integration with Kentico features","displayTitle":"Integration with Kentico features"},{"body":"<p>Kentico MVC development model is based on content-only page types. Unlike Portal Engine pages (utilizing the older ASP.NET Web Forms technology), content-only pages offer a much cleaner architecture. The content is separated from its presentation. Texts and page assets are held in a structured form in the content-only pages so that they could be worked on in a uniform way and presented in more than just one form. The way the texts and assets are presented (organized) in the web pages, is the responsibility of the MVC app.</p>\n<p>Page builder brings an addition to this architecture model. Unlike the textual, numerical and other data in page fields, which the content contributors aren’t supposed to visually arrange, builder-enabled pages allow that to a very high degree.</p>\n<div class=\"infobox note\"><p>Please note that builder-enabled pages also can hold data in their page fields. They are also content-only pages, with just the page builder being enabled on top of the standard functionality.</p></div>\n<p>The only important takeaway is that widget content is stored separately from page fields. As a result, each piece of content of your website will either be stored in a page field, or in a widget state. Depending on the business requirements of your project, you can decide which parts of the overall website data should be stored in the stricter form of page fields, and which parts is better to be held in widgets.</p>\n<div class=\"infobox warning\"><h3>Performance</h3>\n<p>There are also performance considerations that you should take into account when planning the use of page builder. Page builder was primarily designed for average-sized web pages like landing pages. Technically speaking, Kentico does not put any hard limits on the total amount of text, numerical data and assets put into a single widget by content contributors. Hence, they may be tempted to utilize page builder for large-scale pages with tens of thousands of words. We haven’t designed page builder for such use cases.</p>\n<p>However, you as a developer, can take appropriate measures to limit the extent of use of widgets when designing editable areas and widgets themselves.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f0d4f883-edf7-4bd5-88d2-e7ba3909b28d","_parentId":"41cbbbfc-875d-4a14-9459-d458ab3e5102","_type":"component","title":"Structured content versus builder-enabled pages","displayTitle":"Structured content versus builder-enabled pages"},{"body":"<p>Before we explain the development principles of page builder and form builder, you should learn how to <strong>enable page builder</strong> in a Kentico MVC project.</p>\n<p>The process can be split into three groups of tasks: steps in the admin UI, steps in the MVC app’s source code, and steps related to both the admin UI and the source code.</p>\n<p>In the following text, we’ll use generic examples as well as real examples taken from the Medio Clinic website. You can consult the final result by checking out a <a href=\"https://github.com/Kentico/training-kentico-k12/tree/builders\">GitHub feature branch dedicated to this module</a> of our MVC course.</p>\n<h3>Administration interface steps</h3>\n<p>Pages that you intend to have widgets (so called builder-enabled pages), need to be displayed via the <strong>Page tab</strong> in the <em>Pages</em> application.</p>\n<p>The tab can be enabled for a given page type by navigating to <em>Page types &gt; Edit &gt; General &gt; Advanced settings</em> and selecting the <em>Use Page tab</em> checkbox.</p>\n<h3>MVC app’s source code steps</h3>\n<p>In the ASP.NET MVC 5 app, page builder (together with form builder being represented by one built-in widget) should be <strong>enabled</strong> as <a href=\"https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/owin-middleware-in-the-iis-integrated-pipeline\">OWIN middleware</a>.</p>\n<p>The page builder middleware can be employed by calling an extension method on the <em>IApplicationBuilder</em> instance:</p>\n<pre><code class=\"language-csharp\">protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePageBuilder(new PageBuilderOptions()\n\t{\n\t\tDefaultSectionIdentifier = \"SomeIdentifier\",\n\t\tRegisterDefaultSection = true\n\t});\n}</code></pre>\n<p>The options allow for registering a default page section at a global level.</p>\n<p>Next, each controller that is supposed to serve builder-enabled pages, should call an extension method to <strong>add page builder features to its HTTP context</strong> (to its <em>System.Web.HttpContextBase</em> instance):</p>\n<pre><code class=\"language-csharp\">HttpContext.Kentico().PageBuilder().Initialize(landingPage.DocumentId);</code></pre>\n<p>Lastly, each such controller’s view should call a set of HTML helper methods to <strong>initialize page builder styles and scripts</strong>:</p>\n<pre><code class=\"language-csharp\">@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n// Razor code &amp; markup\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}</code></pre>\n<div class=\"infobox note\"><p>It is important to render the styles in the <em>&lt;head /&gt;</em> element of the page. The scripts, however, need to be rendered immediately before the closing tag of the <em>&lt;body /&gt;</em> element. The page builder scripts require the DOM to be fully rendered.</p></div>\n<h3>Common configuration steps</h3>\n<p>To use page builder, <strong>preview mode</strong> must be enabled, either for the site, or globally.</p>\n<p>This can be done in <em>Settings &gt; Content &gt; Content management &gt; General</em>, and check <em>Allow preview mode on the live site</em>.</p>\n<p>In the MVC app, preview gets enabled by calling an OWIN extension method on the <em>IApplicationBuilder</em> instance:</p>\n<pre><code class=\"language-csharp\">protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePreview();\n}</code></pre>\n<p>There is one last prerequisite to be configured in both the admin UI and the source code: <strong>the URL patterns and routes</strong>. Each builder-enabled page type should have its URL pattern specified. The pattern should be covered by MVC routes appropriately.</p>\n<p>It can be done in the admin UI in <em>Page types &gt; Edit &gt; General &gt; URL pattern</em>. To specify variable segments of the URL, <a href=\"https://docs.kentico.com/k12/macro-expressions/macro-syntax\">macro expressions</a> must be used.</p>\n<p>For instance, a pattern for translated landing pages that can be accessed through a node alias in the URL, could be specified like this:</p>\n<pre><code class=\"language-csharp\">/{%DocumentCulture%}/LandingPage/{%NodeAlias%}</code></pre>\n<p>The route counterpart of the URL pattern could be set in the <em>RouteConfig.cs</em> file in the following way:</p>\n<pre><code class=\"language-csharp\">// Maps route to langind pages\nroute = routes.MapRoute(\n\tname: \"LandingPage\",\n\turl: \"{culture}/LandingPage/{nodeAlias}\",\n\tdefaults: new { culture = defaultCulture.Name, controller = \"LandingPage\", action = \"Index\" },\n\tconstraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), nodeAlias = new OptionalRouteConstraint(new RegexRouteConstraint(@\"[\\w\\d_-]*\")) }\n);\n\n// A route value determines the culture of the current thread\nroute.RouteHandler = new MultiCultureMvcRouteHandler();</code></pre>\n<p>Both the above URL pattern of the landing page and its route counterpart are used in the <a href=\"https://github.com/Kentico/training-kentico-k12/tree/builders\">Medio Clinic website</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"155d107e-5e42-455d-9009-f06f8893a9bd","_parentId":"73610315-d22d-4e41-9ad0-9bb11c32368b","_type":"component","title":"Theory: Page builder prerequisites","displayTitle":"Theory: Page builder prerequisites"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How do builder-enabled pages store and utilize their content?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>They have both the traditional page fields and widget state stored separately. The contents of page fields cannot influence how widgets are rendered.</p>","_shouldBeSelected":false,"feedback":"<p>Pages have both fields and widget state. However the contents of page fields can be utilized to render widgets (although it is not a recommended practice).</p>"},{"text":"<p>They only have widget state.</p>","_shouldBeSelected":false,"feedback":"<p>The content of a builder-enabled page consists of both the traditional page fields and the widget state.</p>"},{"text":"<p>They have both the traditional page fields and widget state. All configuration and content of widgets in a page is stored in the widget state. Additionally, structured information can be stored in the page fields. Both fields and widget state can be combined together to render the widgets, however, it is not recommended unless necessary.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"Feedback","correct":"<p>Great! You've learned well that in general, content in page fields shouldn't interfere with widgets.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"4f34b630-eb08-4d2b-9860-f49d37260e71","_parentId":"4f229932-eb0d-4d80-94e1-f3b8b6348e97","_type":"component","title":"Content in builder-enabled pages","displayTitle":"Content in builder-enabled pages"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What does it take to run a builder-enabled page in a Kentico MVC site?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Enabling the <em>Page </em>tab and defining a URL pattern in the content type, adding OWIN middleware, adding features to the HTTP context, initialize styles and scripts</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Enabling the&nbsp;<em>Page&nbsp;</em>tab and defining a URL pattern in the content type, adding OWIN middleware, adding controllers to a dedicated MVC area, adding features to the HTTP context, initialize styles and scripts</p>","_shouldBeSelected":false,"feedback":"<p>Adding controllers to a dedicated MVC area is not required. It is even not possible, as page builder artifacts need to stay accessible throughout the whole app.</p>"},{"text":"<p>Enabling the&nbsp;<em>Page&nbsp;</em>tab, adding OWIN middleware, adding controllers to a dedicated MVC area, adding features to the HTTP context, initialize styles and scripts</p>","_shouldBeSelected":false,"feedback":"<p>In this list, one required step is missing. It is the definition of URL patterns. These must match to the MVC routes.</p>"}],"_feedback":{"title":"Feedback","correct":"<p>Well spotted! You've learned the prerequisites of page builder well.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"b42abd33-2567-4433-96b3-702422efc28f","_parentId":"4f229932-eb0d-4d80-94e1-f3b8b6348e97","_type":"component","title":"Page builder prerequisites","displayTitle":"Page builder prerequisites"},{"body":"<p>In this page, you’ll learn:</p>\n<ul>\n  <li>What the building blocks of page builder and form builder are</li>\n  <li>What they look like from the website visitor’s perspective</li>\n  <li>What they’re represented by in the admin UI</li>\n  <li>What they’re composed of in Visual Studio</li>\n  <li>What are the responsibilities of all the building blocks</li>\n  <li>How they connect to each other</li>\n  <li>Where in the Kentico database the page builder and form builder data is stored</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"84e90401-8be4-48d7-b425-7d176c512156","_parentId":"831235e9-77e2-4361-8506-ef22dfd8e0ed","_type":"component","title":"Scope","displayTitle":"Scope"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/24e07240-70e0-442a-8e27-f353948614e0/m2_developing_page_form_builder.mp4","poster":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4374d557-438c-4f90-935f-26888fc813f8/Developing%20the%20page%20builder%20and%20form%20builder.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<p>Developing for page builder and form builder requires only standard ASP.NET MVC skills and just a little bit of JavaScript knowledge.</p>\n<p>A typical page builder enabled page type is just an ordinary MVC controller, model, and a simple view that only contains one or more predefined editable areas. Areas may contain page sections of any shape or size.</p>\n<p>Page sections are basically rows that typically contain one or more columns. To you, MVC developers, a page section is nothing but a dead simple MVC controller with a view. In that view, you typically tell how many widget zones a page section contains and what their column width is. Of course, you're not limited to stacking widget zones into columns. You're free to compose page sections in other ways.</p>\n<p>Once editors add page sections to editable areas, they can start adding widgets to the sections. A widget is, again, a set of a controller, a view model, and a basic model which we call widget properties. Widget properties contain data used to configure (parametrize) each particular widget instance by content editors.</p>\n<p>You can allow editors to configure a widget in two ways, whichever suits you better:&nbsp;They can use either&nbsp;a configuration form, or use so-called inline editors.</p>\n<p>A configuration form is easier to implement, however, inline editors provide a better WYSIWYG experience to the user. You can of course mix and match so that one part of a widget’s configuration is done through form components and the rest with inline editors. Inline editors require a bit of JavaScript coding but not much. You can write good old plain JavaScript or you’re free to use any of your favorite frameworks.</p>\n<p>Well, that’s the whole story of Kentico page builder.</p>\n<p>As far as form builder is concerned, you can also customize it. You can develop custom form layouts through form sections, custom form components, form validation rules and field visibility conditions. Form sections are basically the same thing as page builder page sections. Form components are simply types of form fields.</p>\n<p>When developing your custom form components, you can make them collect any number of information inputs from users, as long as they boil them down to a single database value.</p>\n<p>A great thing about form components is that if required, they can be used not only in the forms of the form builder, but also to configure the properties of other form components. If you wish, you can use form components in the property configuration forms of page builder widgets. Validation rules also provide a great level of reusability. Once developed, a validation rule is usable with multiple form components, as long as a given component operates on a certain data type in the database.</p>\n<p>The development of form builder artifacts is often simpler than with page builder. A form section comprises of just a simple controller and a view. A form component involves two classes: component view model and form properties. A validation rule typically requires just one class. The same applies to visibility conditions.</p>\n<p>As you can see, there’s lots of power in page builder and form builder. In the next page you'll learn what you’ll implement throughout this course. We’ll show which piece of the solution is responsible for which piece of the final result.</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"60b304fc-fa03-451e-97f3-4292da8c7449","_parentId":"bad95897-e8ef-486d-81ac-0ede8abc46ae","_type":"component","title":"Page builder and form builder overview","displayTitle":"Page builder and form builder overview"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/dec549c1-b9df-4e68-b7a0-9c17abdafd93/page-builder-and-form-builder-code-overview.mp4","poster":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/78dfd961-a652-415f-ba04-2dded5b78eb9/Development%20overview.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":""},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"676fa8a9-5749-4efc-94b1-363736d3b26f","_parentId":"bad95897-e8ef-486d-81ac-0ede8abc46ae","_type":"component","title":"Page builder and form builder in Medio Clinic","displayTitle":"Page builder and form builder in Medio Clinic"},{"body":"<p>In the videos, you’ve seen the building blocks in both an abstract way and in the specific examples in the Medio Clinic website. We’ve tackled the responsibilities of those artifacts in the videos. Let’s now dig a bit deeper into that topic.</p>\n<p>We’ll go through the building blocks, in the natural order of execution in the page life cycle. Here, we’ll cover all artifacts in the page builder and form builder ecosystem, not just those used in the Medio Clinic website.</p>\n<p>In each phase, we’ll list the artifacts to pinpoint:</p>\n<ul>\n  <li>What they’re responsible for</li>\n  <li>How they communicate with other artifacts in the whole ecosystem</li>\n</ul>\n<div class=\"infobox note\"><p>Please note that code examples in the following chapters are simplified, to emphasize the main principles of page builder and form builder. They cannot be considered production-ready by any means.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f20fe22f-5c18-4ffb-a566-8f98317387da","_parentId":"0661b322-d8b2-463b-887c-0f961f1b6fa1","_type":"component","title":"Page type infrastructure","displayTitle":"Page type infrastructure"},{"body":"<p>In general, the page type infrastructure comprises the controller for a given Kentico page type, the model that carries the Kentico page data, either served by a generated provider or a repository object, and a view.</p>\n<p>With page builder, the page type acts as a blueprint of all builder-enabled pages of a given kind. Pages of such type are containers of all instances of editable areas, page sections and widgets (including the&nbsp;<em>Form</em>&nbsp;widget).</p>\n<p>The pages have to be rendered by an&nbsp;<strong>MVC controller, which is responsible&nbsp;</strong>for:</p>\n<ul>\n  <li>Retrieving the model of the page (from the database; preferably through repository and DTO objects)&nbsp;</li>\n  <li>Adding the feature set of page builder features into the HTTP context (as detailed in the previous page)</li>\n  <li>Invoking a view</li>\n</ul>\n<pre><code class=\"language-csharp\">public class MyController : Controller\n{\n\t// GET: my/[nodeAlias]\n\tpublic ActionResult Index(string nodeAlias)\n\t{\n\t\tvar page = MyPageProvider.GetMyPages(nodeAlias)\n\t\t\t.TopN(1)\n\t\t\t.ToList();\n\t\t\t\n\t\tHttpContext.Kentico().PageBuilder().Initialize(page.DocumentId);\n\t\t\n\t\treturn View(page);\n\t}\n}</code></pre>\n<p>The controller is not directly responsible for retrieving the widget configuration data (state) from the database. This is done automatically in the background, thanks to the statement that added page builder features to the HTTP context. The page doesn’t have to have any fields that influence the process of rendering of widgets.</p>\n<div class=\"infobox warning\"><p>We also advise against having such fields, unless there’s a valid reason for that. Bear in mind that there can be a multitude of pages based on the type, and there can also be a multitude of widgets in each of these pages. It is often better to follow the general principle of object-oriented programming—encapsulation. Therefore, configuration of widgets should be done either via widget configuration forms or through widget inline editors (explained in detail later in this course).</p></div>\n<p>The&nbsp;<strong>view,</strong>&nbsp;invoked by the controller, has two basic responsibilities:</p>\n<ul>\n  <li>To render page builder styles and scripts</li>\n  <li>To define editable areas</li>\n  <li>Optionally, select a default section that will be added to a given area automatically</li>\n  <li>Optionally, define a set of allowed widgets that can be added to a given area</li>\n</ul>\n<pre><code class=\"language-csharp\">@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n&lt;div class=\"my-editable-area\"&gt;\n\t@Html.Kentico().EditableArea(\"top\")\n&lt;/div&gt;\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}</code></pre>\n<div class=\"infobox note\"><p>Please note that although widgets are added by users into widget zones of page sections, the allowed widgets can only be defined at the higher level—in an editable area definition.</p></div>\n<div class=\"infobox idea\"><p>The set of allowed widgets doesn’t necessarily have to be hard-coded in the source code of the view. Theoretically, you could create <a href=\"https://docs.kentico.com/k12/custom-development/creating-custom-modules/adding-custom-website-settings\">custom settings</a> for your Kentico installation, and develop functionality that retrieves identifiers of allowed widgets from these settings.</p></div>\n<p>The view and its editable areas are the last static (or semi-static) elements in the whole page builder ecosystem. From now on, down the hierarchy, there will be entirely dynamic artifacts that are not bound to any particular Kentico page type, or any controller in the solution. It therefore means that, there are&nbsp;<strong>no touch points</strong>&nbsp;between editable areas and their child artifacts that you would have to care about. You don’t have to make any provisions to pass data from the view to the page sections or widgets.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a706c750-1e12-4c23-8d0d-43239a16bcc4","_parentId":"db4714f7-ee2d-433f-9dae-86c16314e696","_type":"component","title":" Page type infrastructure","displayTitle":" Page type infrastructure"},{"body":"<p>With editable areas being the top-level containers that are hard-coded, the page sections represent the inner (smaller) chunks of the overall page layout. Unlike the areas, this time, these are the content contributors who add instances of sections (into the areas).</p>\n<div class=\"infobox note\"><p>From a visual standpoint, there is one significant difference between how areas and sections look. While areas will work as rather invisible main regions of the pages, sections will split these areas vertically into rows (smaller or greater, depending on your preference).</p>\n<p>Conversely, on the inside, sections do not necessarily have to be split just into columns. You are free to visually arrange widget zones in any way you desire.</p></div>\n<p>There are just two artifacts of a page section:</p>\n<ul>\n  <li>Page section controller</li>\n  <li>Page section’s partial view</li>\n</ul>\n<p>The <strong>controller</strong> needs to take care of just one single thing—to invoke its view. It is just a bare MVC controller that doesn’t have to inherit from any Kentico base class, implement any interface, or reference any Kentico dependencies.</p>\n<pre><code class=\"language-csharp\">[assembly: RegisterSection(\n\t\"My section\", typeof(MySectionController),\n\t\"My section\", \n\tDescription = \"My custom page section.\", IconClass=\"icon-box\")]\n\npublic class MySectionController : Controller\n{\n\tpublic ActionResult Index()\n\t{\n\t\treturn PartialView(\"Sections/_MySection\");\n\t}\n}</code></pre>\n<div class=\"infobox note\"><p>Currently, content editors may only add, remove, and change a layout of a section. Beyond these actions, the page sections cannot be further configured in the UI, nor can their controllers and views accept parameters. Each controller, together with its view, is rather static. However, we’ve got good news. With the Kentico 12 Service Pack coming in 2019, this will no longer be the case. You’ll have the option to let content editors configure the sections through a configuration dialog.</p></div>\n<div class=\"infobox note\"><p>Starting with Kentico 12 Service Pack, the page sections will become configurable. As a result, their controllers will differ from what they’re like in pure Kentico 12.</p></div>\n<p>The page section’s <strong>partial view</strong> has just two responsibilities:</p>\n<ul>\n  <li>To specify markup that surrounds widget zones</li>\n  <li>To put placeholders of the widget zones into such markup</li>\n</ul>\n<pre><code class=\"language-html\">&lt;div class=\"my-page-section\"&gt;\n    &lt;div class=\"my-section-column\"&gt;\n        @Html.Kentico().WidgetZone()\n    &lt;/div&gt;\n    &lt;div class=\"my-section-column\"&gt;\n        @Html.Kentico().WidgetZone()\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>As far as the <strong>touch points</strong> of page sections are concerned, there aren’t any at all. The sections neither take any Kentico page data nor do they provide data to widget zones and widget instances alike.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"adee5754-ca24-4c0a-abac-2e01aebffd71","_parentId":"2a6abe68-0472-400c-87e7-cddd2c24c106","_type":"component","title":"Page sections","displayTitle":"Page sections"},{"body":"<p>If editable areas and page sections are responsible for the overall layout of the page, then widgets do the heavy lifting of taking input from content contributors and displaying the resulting content to the website visitors’ eyes.</p>\n<div class=\"infobox idea\"><p>Widgets don’t necessarily need to take input from content contributors. They also can be rather static. However, you’ll typically want them to be configurable and to take input data.</p></div>\n<h4>Widget controller</h4>\n<p>The responsibility of a <strong>widget controller</strong> is always to invoke a view. If the widget is supposed to take input and configuration tweaks from content editors, its responsibility is also to get such data as so-called <em>widget properties</em>.</p>\n<pre><code class=\"language-csharp\">public class MyWidgetController : WidgetController&lt;MyWidgetProperties&gt;\n{\n\tpublic ActionResult Index()\n\t{\n\t\tvar properties = GetProperties();\n\n\t\treturn PartialView(\"Widgets/_MyWidget\", new MyWidgetViewModel { Text = properties.Text });\n\t}\n}</code></pre>\n<p>In order to get the properties, the controller has to inherit from <em>Kentico.PageBuilder.Web.Mvc.WidgetController&lt;TProperties&gt;</em>. (The <em>TProperties</em> generic denotes the type of the properties data.) Internally, the <em>WidgetController</em> base class works with a <em>widget properties retriever</em> class. The <em>WidgetController</em> base class then provides a <em>GetProperties</em> method that is capable of pulling the properties data out of the database.</p>\n<p>Sometimes you may want to work with page data (stored in page fields) in your widgets. To get around that, you can call the <em>GetPage</em> method of the <em>WidgetController</em> base class. It will provide you with all field data.</p>\n<h4>Widget partial view</h4>\n<p>The responsibility of the <strong>widget partial view</strong> is twofold. The views always operate in two modes—in the edit mode (in the admin UI) and in the display mode (in the live site).</p>\n<pre><code class=\"language-csharp\">@using MyProject.Models.InlineEditors\n@using MyProject.Models.Widgets\n@model MyProject.Models.Widgets.MyWidgetViewModel\n\n@if (Context.Kentico().PageBuilder().EditMode)\n{\n    Html.RenderPartial(\"InlineEditors/_MyTextEditor\", new MyTextEditorViewModel\n    {\n        PropertyName = nameof(MyWidgetProperties.Text),\n        Text = Model.Text\n    });\n}\nelse\n{\n    @Html.Raw(Model.Text);\n}</code></pre>\n<p>When in the live site, the view’s responsible just for rendering the Razor markup with whatever widget state came from the controller through a view model object (that has no Kentico specifics).</p>\n<p>When in the admin UI, the widget view has to allow the content editors to edit the widget state somehow. It therefore has to employ inline editors, a widget configuration form, or both. In the case of inline editors, the code of the view needs to render them through nested partial views of inline editors, with data passed to them via view models.</p>\n<h4>Widget properties model</h4>\n<p>Before we get any further in the rendering pipeline, let’s stop by the <strong>widget properties model</strong>. The class (the <em>TProperties</em> mentioned above) is designed to carry the widget’s state from the admin UI back into the Kentico database, when the content editor hits the <em>Save</em> button. In the background, the data is sent from the browser to the server as JSON. Therefore, the properties model class should reflect this structure and it therefore shouldn’t have any other kinds of properties than those supported by JSON: strings, numbers, and arrays of the two.</p>\n<pre><code class=\"language-csharp\">public class TextWidgetProperties : Kentico.PageBuilder.Web.Mvc.IWidgetProperties\n{\n\tpublic string Text { get; set; }\n\t\n\t[EditingComponent(Kentico.Forms.Web.Mvc.IntInputComponent.IDENTIFIER, Label = \"Font size (pt)\" )]\n\tpublic int FontSizePt { get; set; }\n}</code></pre>\n<p>Remember the mention of using the widget configuration form in the previous paragraphs? Allowing users to configure a widget through a form is the second responsibility of the properties model class. It can be accomplished by just decorating the property members of this class with <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em> attributes. In that attribute, the type of an editing component can be specified, together with some other details. That’s all you need to render a text box, or any other form component in the configuration form, and to have its value saved to the database upon hitting <em>Save</em>.</p>\n<h4>Widget view model</h4>\n<p>This model class differs from the properties model in one significant way. It does not represent data flowing from the database into the controller, but the data that flows out of the controller to the views.</p>\n<pre><code class=\"language-csharp\">public class MyWidgetViewModel\n{\n\tpublic string Text { get; set; }\n}</code></pre>\n<p>The view model neither has any special behavior, nor has any special purpose. It is always a plain old C# class. It does not necessarily have to be Kentico-specific by any means.</p>\n<h4>Inline editor partial view</h4>\n<p>An inline editor’s responsibility is to allow content contributors to edit the widget state in the WYSIWYG manner, with as little technical skills required as possible.</p>\n<pre><code class=\"language-csharp\">@model MedioClinic.Models.InlineEditors.MyTextEditorViewModel\n\n@using (Html.Kentico().BeginInlineEditor(\"my-text-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"my-text-editor\",\n        data_font_size_pt = Model.FontSizePt.ToString()\n    }))\n{\n    @Html.Raw(Model.Text)\n}</code></pre>\n<p>First, the inline editor needs to render itself. That’s why it needs a partial view and its accompanying view model class.</p>\n<h4>Inline editor view model</h4>\n<p>Everything we said about the widget view model also applies to the inline editor view model. It is just an ordinary view model that pumps data to the inline editor at render time.</p>\n<pre><code class=\"language-csharp\">public class MyTextEditorViewModel\n{\n\tpublic string PropertyName { get; set; }\n\tpublic string Text { get; set; }\n\tpublic int FontSizePt { get; set; } = 12;\n}</code></pre>\n<h4>Inline editor JavaScript file</h4>\n<p>As we’ve explained in the videos, the inline editor needs to capture the edits done by content contributors in the page (in the admin UI) and send the changed widget state to the central browser store. From there, it is then sent back to the server (to the database) upon hitting <em>Save</em>.</p>\n<pre><code class=\"language-javascript\">(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"text-editor\", {\n        init: function (options) {\n\t\t\tvar editorHtmlElement = options.editor;\n\t\t\tvar fontSizePt = editor.getAttribute(\"data-font-size-pt\");\n\t\t\tvar acmeTextEditor = new AcmeTextEditor(editorHtmlElement, fontSizePt);\n\t\t\t\n\t\t\tacmeTextEditor.subscribe(\"textChangedByUser\", function () {\n\t\t\t\tvar event = new CustomEvent(\"updateProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: acmeTextEditor.getAllText(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n\t\t\n\t\tdestroy: function (options) {\n\t\t\t// Destroy the AcmeTextEditor instance.\n\t\t}\n    });\n})();</code></pre>\n<p>There’s only one way of achieving such a goal in the browser—through JavaScript.</p>\n<p>For that purpose, each inline editor ought to have at least one such code file. From within that code file, you should call the <em>window.kentico.pageBuilder.registerInlineEditor</em> function that’s available in the global object thanks to the initialization of page builder scripts in the builder-enabled page’s view mentioned earlier in this page. In that <em>registerInlineEditor</em> function call, an argument needs to be passed that handles both the initialization of the inline editor and sending of the edited widget state to the central browser’s store. The argument has to have a form of an anonymous object with at least one property function called <em>init</em>. Apart from initializing some JavaScript rich editor component, this property function should also hook into the events emitted by the rich editor component, and make them forwarded to the browser’s central store appropriately. The forwarding is done via a new <em>CustomEvent</em> object with a well-known <em>updateProperty</em> codename. In the detail of the custom event, you can use a <em>refreshMarkup</em> boolean property to control whether a page will be refreshed upon firing such an event.</p>\n<p>When in the <em>registerInlineEditor</em> function call, you have access to an <em>options</em> JavaScript object provided by Kentico. With it, you can retrieve the name of the widget property being edited (as <em>options.propertyName</em>), the editor’s HTML element object, and the Kentico localization service (as <em>options.localizationService</em>).</p>\n<p>On top of these three things, you may also want to pass additional configuration data to the JavaScript code. The best way to do this is pass such data from the widget controller, through the widget view model and the inline editor view model, into the inline editor’s partial view, and render such data in the form of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*\">data-* HTML attributes</a> into the inline editor’s markup. Then it can be read by the JavaScript code easily.</p>\n<p>Initialization aside, the JavaScript file may also handle the process of destroying the inline editor, and the process of dragging and dropping it within the web page.</p>\n<p>To sum the JavaScript file up, its responsibility is to forward events emitted by JavaScript components and rich editors to the browser’s central store. As for touch points, there are basically two of them: taking the data from Kentico (with the <em>options</em> object and possibly with the <em>data-* </em>attributes in hand), and providing updated data back to Kentico (through the <em>updateProperty</em> custom event).</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0ad8fe8e-4137-4ed3-bd77-0525fee8d19e","_parentId":"c2369530-8fd1-4935-b2d4-e7340799e140","_type":"component","title":"Widgets","displayTitle":"Widgets"},{"body":"<p>The page builder is undoubtedly a powerful feature, therefore the artifacts involved in page builder made up quite a large list. Form builder is no less worth its salt, but this time, with smaller complexity required.</p>\n<p>As a developer, you can build the following artifacts in form builder:</p>\n<ul>\n  <li>Layouts of <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-custom-form-layouts\">form sections</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-validation-rules\">validation rules</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-visibility-conditions\">visibility conditions</a></li>\n  <li><a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components\">Form components</a> (custom form fields)</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9fdb0767-e45f-476f-83a7-fe179e88ddc8","_parentId":"4b50a5d1-f381-455a-9d05-35a0ff306240","_type":"component","title":"Responsibilities and touch points in form builder","displayTitle":"Responsibilities and touch points in form builder"},{"body":"<p>In principle, form sections don’t differ from page sections at all. Both share the same purpose—to help in shaping up the overall layout of their parent region. While page sections manage the layout of editable areas in pages, form sections do the same in forms.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormSection(\n\t\"MySection\", \n\ttypeof(MyFormSectionController), \n\t\"My section\", \n\tDescription = \"My custom form section layout.\", \n\tIconClass = \"icon-l-cols-2\")]\n\n...\n\npublic class MyFormSectionController : Controller\n{\n\tpublic ActionResult Index()\n\t{\n\t\treturn PartialView(\"FormSectionLayouts/_MySectionLayout\");\n\t}\n}</code></pre>\n<p>Identically to page sections, form sections also have their controllers and partial views. The controller’s only responsibility is just to invoke its view, nothing else.</p>\n<pre><code class=\"language-html\">&lt;div class=\"my-form-section\"&gt;\n\t@Html.Kentico().FormZone()\n&lt;/div&gt;</code></pre>\n<p>Similarly to page sections, the view of a form section only needs to define Razor markup that surrounds the placeholders of form sections, and of course, to have these placeholders in them.</p>\n<p>Neither the controller nor the view works with data. Hence, there are <strong>no touch points</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6b83f8ee-9605-4367-b2fa-4d91361095f0","_parentId":"05da5d81-fd98-4e2e-9a21-19b94bc62f44","_type":"component","title":"Layout of a form section","displayTitle":"Layout of a form section"},{"body":"<p>Validation rules check whether values entered by website visitors into form fields conform to specified requirements. During the process of validation, the rules may also take values of other form fields into account.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormValidationRule(\n\t\"MyValidationRule\", \n\ttypeof(MyValidationRule), \n\t\"My validation rule\", \n\tDescription = \"My custom validation rule.\")]\n\n...\n\n[Serializable]\npublic class MyValidationRule : ValidationRule&lt;string&gt;\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Minimum text length\")]\n\tpublic int MinimumTextLength { get; set; }\n\n\tprotected override bool Validate(string value)\n\t{\n\t\treturn value.Length &gt;= MinimumTextLength;\n\t}\n}</code></pre>\n<p>A validation rule has only one artifact—the validation rule class. This class has its primary responsibility: to override a <em>Validate</em> method that:</p>\n<ul>\n  <li>Does the comparison of the entered form value, either against hard-coded rules, or against another field’s value.</li>\n  <li>Return true (if the validation passed), otherwise false.</li>\n</ul>\n<p>To override that method, the class has to inherit from <em>Kentico.Forms.Web.Mvc.ValidationRule&lt;TValue&gt;</em> (or <em>CompareToFieldValidationRule&lt;TValue&gt;</em>, should you wish to compare against another field).&nbsp;</p>\n<p>As the validation rule often needs to receive some fine-tuning configuration from content editors (on top of the configuration done in the code), the class also has its secondary responsibility: to define configuration form fields. This is done in the very same way as in the widget properties class. Developers simply define property members and decorate them with attributes so that Kentico knows what kind of form field to render in the validation configuration form.</p>\n<p>As for the <strong>touch points</strong> of validation rules, we should emphasize that validation rules communicate only with form fields (form components) of a compatible data type. Validation rules are strongly typed.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"423fa940-f2d9-40c8-a9ee-d0aa734a0a01","_parentId":"e70b14bf-766a-4cf5-bf1e-6dc9e49fd9a6","_type":"component","title":"Field validation rule","displayTitle":"Field validation rule"},{"body":"<p>Visibility conditions can make a form field hidden, based on any logic that you implement. These conditions can also depend on other fields’ values.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormVisibilityCondition(\n\t\"MyVisibilityCondition\", \n\ttypeof(MyVisibilityCondition), \n\t\"My custom visibility condition.\")]\n\n...\n\n[Serializable]\npublic class MyVisibilityCondition : VisibilityCondition\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Happy hours - start\")]\n\tpublic int HappyHoursStart { get; set; }\n\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Happy hours - end\")]\n\tpublic int HappyHoursEnd { get; set; }\n\n\tpublic override bool IsVisible()\n\t{\n\t\treturn DateTime.Now.Hour &gt;= HappyHoursStart &amp;&amp; DateTime.Now.Hour &lt; HappyHoursEnd;\n\t}\n}</code></pre>\n<p>The design pattern of visibility conditions highly resembles that of validation rules. Visibility condition is also defined in just one class. The class also must inherit from either <em>Kentico.Forms.Web.Mvc.VisibilityCondition</em> (or <em>AnotherFieldVisibilityCondition&lt;TValue&gt;</em>). It also has one primary responsibility as well as a secondary one.</p>\n<p>Only this time around, the class is responsible for overriding an <em>IsVisible</em> method. The method also returns <em>bool</em>.</p>\n<p>Also, as in the previous case, you can define configuration form fields by adding property members to the class, and decorate them with attributes, in exactly the same way.</p>\n<p>The conditions based on the <em>AnotherFieldVisibilityCondition&lt;TValue&gt;</em> are also strongly typed.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d2547501-d624-4646-808e-f649d7204a36","_parentId":"ffea902e-9059-4656-a0dd-5fbca5bce2c8","_type":"component","title":"Visibility conditions","displayTitle":"Visibility conditions"},{"body":"<p>Form components basically define types of form fields. If your business requirements go beyond what the components shipped with Kentico can handle, then you can develop your custom components.</p>\n<p>However unlikely it may seem, you won’t face any bulky complexity when developing components. In the source code, the component may be represented by only two classes and one view. One of the classes being the component view model (the core of the component) and the second being its accompanying properties class.</p>\n<h4>Component view model class</h4>\n<p>In the view model class, you just define one or more property members. By stating “one or more”, we mean that in the live site, a component does not necessarily have to show up as only one form input HTML element. It can be several input elements that your class boils to a single primitive database value.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormComponent(\n\t\"MyFormComponent\", \n\ttypeof(MyFormComponent), \n\t\"My form component\", \n\tDescription = \"My custom form component.\", \n\tIconClass = \"icon-picture\")]\n\n...\n\npublic class MyFormComponent : FormComponent&lt;MyFormComponentProperties, string&gt;\n{\n\t[BindableProperty]\n\tpublic string Text { get; set; } = string.Empty;\n\n\tpublic override string GetValue() =&gt; Text;\n\n\tpublic override void SetValue(string value)\n\t{\n\t\tText = value;\n\t}\n}</code></pre>\n<p>The main <strong>responsibility of the model class</strong> is to carry the value(s) from and into the database. In order to do that, you should:</p>\n<ul>\n  <li>Base your class on <em>Kentico.Forms.Web.Mvc.FormComponent&lt;TProperties, TValue&gt;</em></li>\n  <li>Create one or more property members with the <em>Kentico.Forms.Web.Mvc.BindablePropertyAttribute</em> attached</li>\n  <li>Override the <em>SetValue</em> method that is responsible for transferring (and if necessary transforming) the database value to the form field value(s)</li>\n  <li>Override the <em>GetValue</em> method that does the opposite</li>\n</ul>\n<div class=\"infobox note\"><p>The methods were named from the database’s perspective. Therefore, the <em>GetValue</em> method gets the value(s) from the <em>bindable properties</em> into the database.</p></div>\n<p>The <em>GetValue </em>and <em>SetValue</em> methods also form the main <strong>touch points</strong> of this class. There is also another touch point: the reference to the component properties class specified as the generic parameter of the <em>FormComponent</em> base class (<em>TProperties</em>).</p>\n<p>So much for the view model class. Let’s now get onto the properties class.</p>\n<h4>Component properties class</h4>\n<p>The naming of the class may resemble widget properties classes. But you shouldn’t get misled by the naming. In this case, the <strong>purpose and responsibility</strong> of the properties class is to allow content editors to configure your form component in a specific form in the <em>Forms</em> application.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\npublic class MyFormComponentProperties : FormComponentProperties&lt;string&gt;\n{\n\tpublic MyFormComponentProperties() : base(FieldDataType.Text, 200)\n\t{\n\t}\n\n\t[DefaultValueEditingComponent(TextAreaComponent.IDENTIFIER)]\n\tpublic override string DefaultValue { get; set; } = string.Empty;\n\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of rows of the text area\")]\n\t[Required]\n\tpublic int TextAreaRows { get; set; }\n\t\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of columns of the text area\")]\n\t[Required]\n\tpublic int TextAreaColumns { get; set; }\n}</code></pre>\n<p>It comes as no surprise that you can do that by adding property members to your class and decorating them with attributes. In the same way as before. On top of the configuration properties, you can also override the <em>DefaultValue</em> property of the <em>Kentico.Forms.Web.Mvc.FormComponentProperties&lt;TValue&gt; </em>base class. The <em>DefaultValue</em> property has to be of type <em>TValue</em>.</p>\n<p>However, an equally important part is the class constructor. In it, the nature of the TValue needs to be further specified, so that Kentico can create proper database schemas. You’ll learn all details in a later page of this course.</p>\n<h4>Component partial view</h4>\n<p>The view does the plumbing of the HTML input element(s).</p>\n<pre><code class=\"language-csharp\">@using MyProject.Models.FormComponents\n@model MyFormComponent\n\n@{\n    var htmlAttributes = ViewData.GetEditorHtmlAttributes();\n}\n\n@Html.TextAreaFor(model =&gt; model.Text, Model.Properties.TextAreaRows, Model.Properties.TextAreaColumns, htmlAttributes)</code></pre>\n<p>Its purpose is to render appropriate markup, and alter its contents based on the specific form field’s configuration.</p>\n<p>The configuration data, which was set by content editors in the Forms application, can be reached at runtime, via the <em>Properties</em> property of the form component’s model object.</p>\n<h4>Optional component’s JavaScript file</h4>\n<p>For the most part, you’ll be fine with just the backend code files we’ve just enumerated. However, you may want to add client-side functionality at times. You’re absolutely free to do so and there aren’t any hard requirements or constraints that you have to obey to complement your component with frontend functionality.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d06a3af6-8a4d-457e-8165-efc636ae4ed1","_parentId":"4453bb58-f296-40e2-a297-ea7971ab84f5","_type":"component","title":"Form component","displayTitle":"Form component"},{"body":"<p>If you’re interested in getting an alternative explanation of the architecture of builders, the following two links will give a good head start:</p>\n<ul>\n  <li><a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc\">Page builder development</a></li>\n  <li><a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development\">Form builder development</a>&nbsp;</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ad528d77-3386-4682-88e3-0260f42ec2ca","_parentId":"6c8037d4-f369-4776-825e-64dfe42cbafa","_type":"component","title":"Builders in the Kentico documentation","displayTitle":"Builders in the Kentico documentation"},{"body":"<p>By watching the above videos and reading the chapters, you may have deemed page builder and form builder too aligned with ASP.NET MVC best practices. Yes, at the first sight, these features may look a bit complex for some scenarios. Let us explain the philosophy behind page builder, form builder, and ASP.NET MVC in general.</p>\n<p>Over the course of the years with ASP.NET Web Forms, its creators, as well as developers, found it perfectly robust on one side, but with lots of ceremony with each and every customization on the other side. The XML syntax, primarily designed to address that ceremony, was unfortunately too declarative, and forced developers to do lots of workarounds. It resulted in heavy compromises on code brevity, maintainability and performance.</p>\n<p>MVC was built with the “convention over configuration” principle in mind. It means that you no longer have to make workarounds and compromises, without sacrificing the robustness. Particularly, it’s because:</p>\n<ul>\n  <li>There’s lots of functionality already packed in the binaries</li>\n  <li>You can override or customize a large portion of that functionality</li>\n  <li>You do that with imperative code (C#, Razor, JavaScript)</li>\n  <li>When doing so, you can lean on conventions that will help you along your way</li>\n</ul>\n<p>This leads to a conclusion that although builders may seem a bit complex for starter scenarios, they pose little to no constraints on what you can customize, develop, and most importantly, how you can maintain your code once business requirements start to change.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8bad4616-d730-4fc9-99ad-72ec1bf848ca","_parentId":"e6143666-eee8-4adb-8e28-ea09f9af1ee8","_type":"component","title":"Target scenarios","displayTitle":"Target scenarios"},{"body":"<p>Let’s tap into the topic of storage. We’ll briefly cover where the data of page builder and form builder is stored.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c1ef9f7a-09cb-440f-ad24-61398ddeafdb","_parentId":"6237528b-970d-4ed8-b5d0-75dfa9376aa3","_type":"component","title":"Data persistence","displayTitle":"Data persistence"},{"body":"<p>As we’ve explained earlier, the content contributors may configure a builder-enabled page in the following ways:</p>\n<ul>\n  <li>Add page sections to editable areas.</li>\n  <li>If required, switch from the default section layout to another.</li>\n  <li>Add widgets to each section’s widget zones.</li>\n  <li>Configure widgets and put content in them.</li>\n</ul>\n<p>All of that is captured in one single place in the database: the <em>CMS_Document</em> table. The <em>DocumentPageBuilderWidgets</em> column contains all the state of all editable areas, sections and widgets alike. The column contains all of that as a single JSON string.</p>\n<p>In the <em>CMS_Document</em> table, the rows represent culture versions. As a result, the state is held separately for these versions. The widget state can also be versioned.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5df87f23-73a4-4891-a880-ab60ab3f0734","_parentId":"6237528b-970d-4ed8-b5d0-75dfa9376aa3","_type":"component","title":"Page builder","displayTitle":"Page builder"},{"body":"<p>Conversely, the configuration of forms can be found in the <em>CMS_Form</em> table, together with the <em>CMS_Class</em> table. While the <em>CMS_Class</em> table defines the basic blueprint of the form (in the <em>ClassXmlSchema</em> and <em>ClassFormDefinition</em> columns), the <em>CMS_Form</em> table complements it with visual arrangement of form sections and their form components in the <em>FormBuilderLayout</em> column (in the form of a JSON string).</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bcb041e6-5744-491b-afbe-11c8fc546fc9","_parentId":"6237528b-970d-4ed8-b5d0-75dfa9376aa3","_type":"component","title":"Form builder","displayTitle":"Form builder"},{"body":"<p>This page explained all the important underpinnings of both page builder and form builder.</p>\n<p>You’ve learned what content contributors can do with builders, how they do it and what builders look like on the inside in the admin UI.</p>\n<p>You could also visualize what the building blocks and source code artifacts are in the Visual Studio solution. You now know where to find them, what they’re responsible for and how they interact with each other.</p>\n<p>Now, if you’ve had enough talking and reading, we’ve got great news. In the next page, you’ll enable builders in the Medio Clinic website, and you’ll start coding. You’ll create your first editable area, page sections, and most importantly, your first widget.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"40dce07e-a5b2-4994-8d61-73fcc09d0ee7","_parentId":"5c16e8cc-21ae-4aa4-abc8-44d9d43d2727","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What kind of constraints can developers put for widgets?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Developers can limit what kinds of widgets and what number of instances can be put into page sections. The limit can be set on the page section level.</p>","_shouldBeSelected":false,"feedback":"<p>Developers can only limit kinds of widgets, not the number of instances thereof.</p>"},{"text":"<p>Both developers and content contributors may set constraints on the number of widgets placed into page sections.</p>","_shouldBeSelected":false,"feedback":"<p>Constraints can only be specified in the source code (in partial views), by developers.</p>"},{"text":"<p>Developers can specify what kinds of widgets can be placed into page sections belonging to a certain editable area.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>You've got it right. Developers can define what kinds of widgets can be put to page sections in a given editable area.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"302de633-e27d-4bda-a9ba-3c6952e2c649","_parentId":"cbf4700b-9455-4a63-989c-f2fc2dacd9ac","_type":"component","title":"Widget constraints","displayTitle":"Widget constraints"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How is widget state (configuration &amp; content) stored and handled in code?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Developers need to designate a dedicated page type field to hold the widget state. Then, they must retrieve and save the state manually in widget controllers.</p>","_shouldBeSelected":false,"feedback":"<p>Widget state is saved separately from page type fields.</p>"},{"text":"<p>In the database, widget state is saved separately from page type fields. Developers use the <em>GetProperties </em>method of the <em>WidgetController&lt;&gt;</em> base class to get it. Once the state is changed in the edit mode by content contributors, it must be submitted to Kentico via custom JavaScript events of inline editors or form components.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Widget state is saved separately from page type fields. To retrieve it from the database, developers must first get a reference to a current Kentico page via a <em>GetPage </em>method. Then, they need to call the <em>GetProperties </em>method of the <em>WidgetController&lt;&gt; </em>base class.</p>","_shouldBeSelected":false,"feedback":"<p>To retrieve widget state, developers only need to call the <em>GetProperties </em>method.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! Widget state is saved and operated with independently from page type fields. Developers retrieve it through the <em>GetProperties </em>method and save it via the events of inline editors.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"9e4ceaa3-9d1f-40b0-8be2-26cad2806995","_parentId":"cbf4700b-9455-4a63-989c-f2fc2dacd9ac","_type":"component","title":"Widget state","displayTitle":"Widget state"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How can inline editors be initialized?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Developers always initialize inline editors in custom JavaScript code, by calling <em>window.kentico.pageBuilder.registerInlineEditor().</em> In the scope of the method call, they have access to the <em>options </em>object that provides reference to the editor's parent HTML element, the name of the current widget property, and the Kentico localization service. Developers can also pass additional primitive configuration values to the inline editors via data-* attributes.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Inline editors are initialized automatically by Kentico, in the background. The only thing that developers must do is to specify configuration properties in form of data-* attributes.</p>","_shouldBeSelected":false,"feedback":"<p>To keep freedom in the hands of developers, inline editors need to be initialized by custom JavaScript code.</p>"},{"text":"<p>The inline editors are initialized through their MVC partial views, together with view models. All frontend functionality is handled automatically by Kentico.</p>","_shouldBeSelected":false,"feedback":"<p>Inline editors need MVC partial views to render their default HTML markup. However, they also need JavaScript code to bootstrap and register events that update widget state upon each edit by content contributors.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! Inline editors can be made of arbitrary JavaScript functionality. Repetitive and mandatory parts of the functionality is handled by calling Kentico built-in methods in partial views and JavaScript files. However, during the initialization, developers are free to instantiate whatever JavaScript components and libraries they desire.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"8c796f29-a391-4af9-a13a-c71c762bddca","_parentId":"cbf4700b-9455-4a63-989c-f2fc2dacd9ac","_type":"component","title":"Initialization of inline editors","displayTitle":"Initialization of inline editors"},{"body":"<p>What you will learn in this section:</p>\n<ul>\n  <li>How to enable page builder features in the Medio Clinic site</li>\n  <li>How to create the basic infrastructure that supports creating of landing pages</li>\n  <li>How to implement this infrastructure in the source code</li>\n  <li>What is the minimum set of artifacts for a rich text widget</li>\n  <li>How to implement such widget in the Medio Clinic site</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a846cae8-a6d4-4187-82fd-d1944d8a12da","_parentId":"11e70049-c562-4138-ac2c-a38466fff346","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>If you haven’t watched the videos in the previous page, we’ll recap what you’ll implement throughout this course.</p>\n<p>The final result of development will be a landing page that announces a new branch office—a new clinic and a research facility of Medio Clinic, which is focused on tropical disease medicine.</p>\n<p>The page will consist of several columns of static text, an image, a few image slideshows, and finally, a form to register for the opening ceremony of the new clinic.</p>\n<p>In the background, this page will be supported by the following artifacts:</p>\n<ul>\n  <li>Two new <a href=\"https://docs.kentico.com/k12/developing-websites/defining-website-content-structure/creating-and-configuring-page-types\">page types</a></li>\n  <li>One controller, view, repository, and a DTO class, all related to one of the page types</li>\n  <li>Four <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-page-builder-sections\">page sections</a></li>\n  <li>A text <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc\">widget</a> with its <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc/defining-widget-properties-in-mvc#DefiningwidgetpropertiesinMVC-Implementinginlinepropertyeditors\">inline editor</a></li>\n  <li>A static image widget with its inline editor</li>\n  <li>An image slideshow widget, also, with its inline editor</li>\n  <li>A <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/customizing-the-form-widget\">form widget</a> (shipped with Kentico)</li>\n  <li>A media library uploader <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components\">form component</a></li>\n  <li>A media library selection form component</li>\n  <li>An image dimension <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-validation-rules\">validation rule</a></li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8b4decb6-0feb-44a9-9835-e51ce53edc5a","_parentId":"10747b0a-848d-4e69-9f0c-a394d1cb6524","_type":"component","title":"Scope of delivery","displayTitle":"Scope of delivery"},{"body":"<p>As we’ve already gone through the theory of enabling builder prerequisites in the second page of this course, let’s jump right into enabling them in the MedioClinic project!</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ecd52d8b-7dc6-4a50-9b56-a7a542a5a906","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"General information","displayTitle":"General information"},{"body":"<p>If you haven’t enabled preview during the first module of this course (Essentials), you should do so now. Also, make sure preview is enabled in the source code.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5ac87a96-a548-442a-872f-d9ff722bd5b0","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Enabling preview","displayTitle":"Enabling preview"},{"body":"<p>You should call the <em>Kentico.PageBuilder.Web.Mvc.UsePageBuilder</em> extension method on your <em>IApplicationBuilder</em> instance during the startup phase of the <em>MedioClinic</em> project.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c0852d56-5963-44c2-872a-9542333fe14c","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Enabling page builder as OWIN middleware","displayTitle":"Enabling page builder as OWIN middleware"},{"body":"<p>Then, you need to create the page types. One of them will serve as just a section container in the content tree. The other will act as a base of the landing page.</p>\n<p>In order for the landing page to be viewed and worked on in the <em>Pages</em> application, Kentico needs to have means of routing into the page. Hence, the page type needs an URL pattern. The pattern should have two variable segments in it: document culture and the node alias path.</p>\n<p>The landing page type requires just one text field: <em>LandingPageName</em>.</p>\n<p>Optionally, you can configure the section page type to be allowed in just the content tree root, with the landing page type being the only allowed child page type.</p>\n<p>Don’t forget that the page type needs to have the <em>Page</em> tab enabled.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"abb65dd5-09c7-4ce6-a51c-3fdf23a61d5a","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Creating page types","displayTitle":"Creating page types"},{"body":"<p>Create a new MVC route in the source code of the app. The route will handle requests to all landing pages.</p>\n<p>According to MVC best practices, the route should be placed in the lower part of the <em>RegisterRoute</em> method body so that it does not interfere with more specific routes.</p>\n<p>The route pattern should reflect the URL pattern set in the page type.</p>\n<p>For the URL segment of the document culture, specify the same constraint as in the other routes.</p>\n<p>For the URL segment of the node alias path, specify a regular expression constraint that allows only alphabetical characters, digits, dashes and underscores in that segment. To make the routing less error-prone, make the node alias path segment optional.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a8393535-e37e-4b96-b817-2970968d7e91","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Adding a route for landing pages","displayTitle":"Adding a route for landing pages"},{"body":"<p>You can create the landing page controller in very much the same way as you created the others.</p>\n<p>Once you save your generated page type class from the admin UI to the <em>Business</em> project &gt; <em>Generated</em> &gt; <em>Pages</em>, you will be able to prepare the repository and the DTO classes.</p>\n<p>In this phase, you should decide which of the landing page data to pass through the controller to the view. It is certainly the <em>DocumentName</em> field (which mirrors the <em>LandingPageName</em> field value). As each builder-enabled controller has to add a page builder feature set to its HTTP context (explained previously), it needs to do that with the <em>DocumentID</em> in hand. Therefore, <em>DocumentID</em> and <em>DocumentName</em> should be present in your DTO objects.</p>\n<p>Once you have the document ID, you can add the features through the extension method call in the controller.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"608b6a94-4936-456a-a3bc-93c6ee0fc9a6","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Creating a landing page controller, DTO, and view","displayTitle":"Creating a landing page controller, DTO, and view"},{"body":"<p>In the fist step, enable preview.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"Enabling preview","body":"<ol>\n  <li>In Visual Studio, go to <em>MedioClinic &gt; App_Start &gt; ApplicationConfig.cs</em>.</li>\n  <li>Make sure that the <em>builder.UsePreview();</em> statement is present in the body of the <em>RegisterFeatures</em> method.</li>\n  <li>You can leave the file open for further changes.</li>\n</ol>","code":{"src":"using Kentico.Content.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Web.Mvc;\n\nnamespace MedioClinic\n{\n    public class ApplicationConfig\n    {\n        public static void RegisterFeatures(IApplicationBuilder builder)\n        {\n            // Enable required Kentico features\n\n            builder.UsePreview();\n        }\n    }\n}","lang":"csharp"},"strapline":"Enabling preview"}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"41fcae4c-1964-4b1d-b09c-2536f9a2bd87","_parentId":"f76fa876-6950-408e-b803-52f67f8fb37a","_type":"component","title":"Enabling preview","displayTitle":"Enabling preview"},{"body":"<p>Next, enable the OWN middleware.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the <em>ApplicationConfig.cs</em> file, make sure that the <em>UsePageBuilder</em> method is called in the body of the <em>RegisterFeatures</em> method.</li>\n  <li>As an argument, supply a <em>PageBuilderOptions</em> object with an identifier of a default page section (implemented later).</li>\n</ol>","code":{"src":"public static void RegisterFeatures(IApplicationBuilder builder)\n{\n\t// Enable required Kentico features\n\n\tbuilder.UsePreview();\n\n\tbuilder.UsePageBuilder(new PageBuilderOptions()\n\t{\n\t\tDefaultSectionIdentifier = \"MedioClinic.Section.SingleColumn\",\n\t\tRegisterDefaultSection = true\n\t});\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9b835181-3b97-449a-a0ca-ca3ab9508274","_parentId":"ae933c34-f4b5-4d3f-8b62-9e7d0985dfa6","_type":"component","title":"Enabling page builder as OWN middleware","displayTitle":"Enabling page builder as OWN middleware"},{"body":"<p>Allow repositories query by page aliases.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In <em>Business &gt; Serivces &gt; Query &gt; IDocumentQueryService.cs</em>, define a new overloaded signature of the <em>GetDocument&lt;&gt;</em> method that takes a page alias.</p>","code":{"src":"DocumentQuery<TDocument> GetDocument<TDocument>(string pageAlias) where TDocument : TreeNode, new();","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In <em>Business &gt; Serivces &gt; Query &gt; DocumentQueryService.cs</em>, implement the new overload of the method.</p>","code":{"src":"public DocumentQuery<TDocument> GetDocument<TDocument>(string pageAlias) where TDocument : TreeNode, new()\n{\n\treturn GetDocuments<TDocument>()\n\t\t.TopN(1)\n\t\t.WhereEquals(\"NodeAlias\", pageAlias);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0213aa69-fd1e-4750-89bd-26bbc35b4d1b","_parentId":"358ca161-e58e-4957-843b-dcf41ef1ca55","_type":"component","title":"Enhancing the query service","displayTitle":"Enhancing the query service"},{"body":"<p>In this step, create page types.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the admin UI, navigate to <em>Page types</em>.</li>\n  <li>Create a new page type. The wizard will appear.</li>\n  <li>Set <em>“Landing page section”</em> as the display name.</li>\n  <li>Set the namespace to <em>“MedioClinic”</em> (same as other page types).</li>\n  <li>Set the name to <em>“LandingPageSection”</em>.</li>\n  <li>Click <em>Next</em>.</li>\n  <li>Leave the values of the second step of the wizard at its defaults.</li>\n  <li>Click <em>Next</em>.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b1276692-ecc4-411b-8ae0-484363d154ee/001.png","alt":"001.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the third step, click the <em>New field</em> button.</li>\n  <li>Set the new field’s name to <em>“LandingPageSectionName”</em>.</li>\n  <li>Set the field caption to <em>“Landing page section name”</em>.</li>\n  <li>Click <em>Save</em>.</li>\n  <li>Click <em>Next</em> twice.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/98bec18c-f1e5-4abf-97c3-277b4ae5eabb/002.png","alt":"002.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the step no. 5, remove all page types except <em>CMS.Root</em>.</li>\n  <li>Click <em>Next</em> repeatedly, until you finish the wizard.</li>\n  <li>When in the <em>General</em> tab of your new page type, you can optionally set the page type icon to <em>“icon-l-header-cols-2-footer”</em>.</li>\n  <li>Click Save.</li>\n  <li>Navigate up one level, to the <em>Page types</em> application.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6dd17d5d-6077-4c8c-b212-ba7460970b9b/003.png","alt":"003.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>Create another page type.</li>\n  <li>Set <em>“Landing page”</em> as the display name.</li>\n  <li>Set the namespace to <em>“MedioClinic”</em> (same as other page types).</li>\n  <li>Set the name to <em>“LandingPage”</em>.</li>\n  <li>Click Next.</li>\n  <li>Leave the values of the second step of the wizard at its defaults.</li>\n  <li>Click Next.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/42e3e5fe-c0af-452b-94ea-6d4976768ffc/004.png","alt":"004.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the third step, hit the <em>New field</em> button.</li>\n  <li>Set the new field’s name to <em>“LandingPageName”</em>.</li>\n  <li>Check <em>Required</em>.</li>\n  <li>Set the field caption to <em>“Landing page name”</em>.</li>\n  <li>Click <em>Save</em>.</li>\n  <li>Click <em>Next</em> twice.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6feec8f6-2ec6-44a0-be62-7f172b7be42d/005.png","alt":"005.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the step no. 5, remove all page types except <em>MedioClinic.LandingPageSection</em>.</li>\n  <li>Click <em>Next</em> repeatedly, until you finish the wizard.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/92536fcb-eb99-4ff5-86dc-e2d86e2a288d/006.png","alt":"006.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the <em>General</em> tab of your new page type, specify the URL pattern to <em>“/{%DocumentCulture%}/LandingPage/{%NodeAlias%}”</em>.</li>\n  <li>Optionally, set the page type icon to <em>“icon-l-img-2-cols-3”</em>.</li>\n  <li>Below, in the <em>Advanced settings</em> section of the <em>General</em> tab, check <em>Use Page tab</em>.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/bf8e3501-fb41-454a-acb5-b9a5229c2bfb/007.png","alt":"007.png"},"strapline":""},{"title":"","body":"<p>Generate model classes for page types.</p>\n<ol>\n  <li>In the <em>Page types</em> application, edit the <em>Landing page</em> page type.</li>\n  <li>Navigate to the <em>Code</em> tab.</li>\n  <li>Below the <em>Save path</em> selector, click <em>Save code</em>.</li>\n  <li>If you encounter errors when saving, check your file system permissions. The application pool’s identity must have <em>Modify</em> permissions to the <em>CMS</em> folder. (Alternatively, you can copy the code and paste it into a new file.)</li>\n  <li>Copy the saved code files into <em>Business &gt; Generated &gt; Pages</em>.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5003bace-2e25-4c34-8975-fc7dbc3a43c4/042.png","alt":"042.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"37cdbecc-7cdc-4fee-a43a-e57fc5de3cd0","_parentId":"fa2e91f2-251f-497a-a82d-266d3bf4e7ac","_type":"component","title":"Creating page types","displayTitle":"Creating page types"},{"body":"<p>In this step, define a route.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In Visual Studio, go to <em>MedioClinic &gt; App_Start &gt; RouteConfig.cs</em>.</li>\n  <li>Locate the very last route called <em>DefaultWithCulture</em>.</li>\n  <li>Right above this route, create a new route called <em>“LandingPage”</em>.</li>\n  <li>Compose the URL so that the variable route segments match the macro expressions specified in the URL pattern that you’ve just configured in the page type.</li>\n  <li>Set the default controller name to <em>“LandingPage”</em>.</li>\n  <li>For the <em>culture</em> variable segment of the route, specify the <em>SiteCultureConstraint</em>, in the same way as with the other routes.</li>\n  <li>For the <em>nodeAlias</em> variable segment of the route, add a regular expression constraint. Set the regular expression to <em>\"[\\w\\d_-]*\"</em> (with the @ sign preceeding the literal).</li>\n  <li>Wrap the <em>RegexRouteConstraint</em> constructor call into the <em>OptionalRouteConstraint</em> constructor call.</li>\n  <li>Save the file.</li>\n</ol>","code":{"src":"// Maps route to langind pages\nroute = routes.MapRoute(\n\tname: \"LandingPage\",\n\turl: \"{culture}/LandingPage/{nodeAlias}\",\n\tdefaults: new { culture = defaultCulture.Name, controller = \"LandingPage\", action = \"Index\" },\n\tconstraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), nodeAlias = new OptionalRouteConstraint(new RegexRouteConstraint(@\"[\\w\\d_-]*\")) }\n);\n\n// A route value determines the culture of the current thread\nroute.RouteHandler = new MultiCultureMvcRouteHandler();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4083255a-4a6a-492b-922e-9781c4484a38","_parentId":"ed12dbff-b7b7-405c-a54c-63b71b5b168b","_type":"component","title":"Adding a route for landing pages","displayTitle":"Adding a route for landing pages"},{"body":"<p>In this series of steps, create the various code files for landing pages.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In Visual Studio, go to <em>Business &gt; Dto</em>, and create a new <em>“LandingPage”</em> subfolder.</li>\n  <li>In that folder, create a new <em>“LandingPageDto.cs”</em> class file.</li>\n  <li>Make the new class implement <em>IDto</em>.</li>\n  <li>Put an integer property called <em>DocumentId</em> into the class.</li>\n  <li>Add a string property called <em>Title</em>.</li>\n  <li>Save the file and close it afterwards.</li>\n</ol>","code":{"src":"public class LandingPageDto : IDto\n{\n\tpublic int DocumentId { get; set; }\n\tpublic string Title { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<ol>\n  <li>Go to <em>Business &gt; Repository</em>, and create a new <em>“LandingPage”</em> subfolder.</li>\n  <li>In that folder, create a new <em>“ILandingPageRepository.cs”</em> interface file.</li>\n  <li>Make the new interface implement <em>IRepository</em>.</li>\n  <li>Define a signature of a method—<em>GetLandingPage</em>.</li>\n  <li>The method takes the page alias and returns <em>LandingPageDto</em>.</li>\n  <li>Save the file and close it afterwards.</li>\n</ol>","code":{"src":"public interface ILandingPageRepository : IRepository\n{\n\tLandingPageDto GetLandingPage(string pageAlias);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<ol>\n  <li>While staying in the same folder, create a new <em>“LandingPageRepository.cs”</em> class file.</li>\n  <li>Make the new class inherit from <em>BaseRepository</em>, and make it implement <em>ILandingPageRepository</em>.</li>\n  <li>In order to make use of the base class’ methods, create a constructor that takes <em>IDocumentQueryService</em> implementations and in turn passes them onto the base class’ constructor.</li>\n  <li>Implement the <em>GetLandingPage</em> method you’ve defined previously. Make use of the <em>DocumentQueryService</em> member of the base class.</li>\n  <li>Get a single document.</li>\n  <li>Constrain the retrieval to just the <em>“DocumentID”</em> and <em>“DocumentName”</em> columns.</li>\n  <li>When getting the single-item query results, project it to new <em>LandingPageDto</em> objects.</li>\n  <li>Transform the sequence into a <em>LandingPageDto</em> object.</li>\n  <li>Save the file and close it afterwards.</li>\n</ol>","code":{"src":"public class LandingPageRepository : BaseRepository, ILandingPageRepository\n{\n\tpublic LandingPageRepository(IDocumentQueryService documentQueryService) : base(documentQueryService)\n\t{\n\t}\n\n\tpublic LandingPageDto GetLandingPage(string pageAlias)\n\t{\n\t\treturn DocumentQueryService.GetDocument<CMS.DocumentEngine.Types.MedioClinic.LandingPage>(pageAlias)\n\t\t\t.AddColumns(\"DocumentID\", \"DocumentName\")\n\t\t\t.ToList()\n\t\t\t.Select(landingPage => new LandingPageDto()\n\t\t\t{\n\t\t\t\tDocumentId = landingPage.DocumentID,\n\t\t\t\tTitle = landingPage.DocumentName\n\t\t\t})\n\t\t\t.FirstOrDefault();\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>When you’re done with the DTO and repository implementation, you’re ready to build the controller.</p>\n<ol>\n  <li>Go to <em>MedioClinic &gt; Controllers</em>, and create a new <em>“LandingPageController.cs”</em> class file.</li>\n  <li>Make your new controller inherit from <em>BaseController</em>.</li>\n  <li>To be able to use your previously created repository, add an <em>ILandingPageRepository</em> getter-only property.</li>\n  <li>Fill that property’s value in a constructor.</li>\n  <li>In the same constructor, pass the <em>IBusinessDependencies</em> implementation to the base class.</li>\n  <li>Make your Index action method accept the node alias you’ve specified in the route.</li>\n  <li>In the body of the Index method, take the DTO object, secure the retrieval with a null check that returns <em>HttpNotFound()</em> if it fails.</li>\n  <li>Make use of the base class’ <em>GetPageViewModel</em> method (the non-generic overload) to build a view model with the page title in hand.</li>\n  <li>Add the page builder features to the current HTTP context through a statement found in this code snippet.&nbsp;</li>\n  <li>You can close the file now.</li>\n</ol>","code":{"src":"public class LandingPageController : BaseController\n{\n\tprotected ILandingPageRepository LandingPageRepository { get; }\n\n\tpublic LandingPageController(\n\t\tIBusinessDependencies dependencies, ILandingPageRepository landingPageRepository) : base(dependencies)\n\t{\n\t\tLandingPageRepository = landingPageRepository ?? throw new ArgumentNullException(nameof(landingPageRepository));\n\t}\n\n\t// GET: LandingPage/[nodeAlias]\n\tpublic ActionResult Index(string nodeAlias)\n\t{\n\t\tvar landingPageDto = LandingPageRepository.GetLandingPage(nodeAlias);\n\n\t\tif (landingPageDto == null)\n\t\t{\n\t\t\treturn HttpNotFound();\n\t\t}\n\n\t\tvar model = GetPageViewModel(landingPageDto.Title);\n\t\tHttpContext.Kentico().PageBuilder().Initialize(landingPageDto.DocumentId);\n\n\t\treturn View(model);\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>For the time being, the controller is ready. Now, let’s create the view. Before you do that, we strongly recommend adding a namespace reference to your views’ web.config file.</p>\n<ol>\n  <li>Go to the <em>Views</em> folder, and open the web.config file.</li>\n  <li>In that file, locate the <em>system.web.webPages.razor &gt; pages &gt; namespaces</em> XML element.</li>\n  <li>Add a new line according to this code snippet.</li>\n  <li>You can now save and close the file.</li>\n</ol>","code":{"src":"<add namespace=\"Kentico.PageBuilder.Web.Mvc\"/>","lang":"html"},"strapline":""},{"title":"","body":"<p>Let’s create the view itself.</p>\n<ol>\n  <li>While staying in the <em>Views</em> folder, create a new <em>“LandingPage”</em> subfolder.</li>\n  <li>In that folder, create a new <em>“Index.cshtml”</em> view file.</li>\n  <li>Add the <em>@section</em> directives to render page builder styles and scripts.</li>\n  <li>Render the scripts at the end of the file.</li>\n  <li>Add markup, together with one editable area, as depicted in this code snippet.</li>\n</ol>","code":{"src":"@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n<div class=\"section\">\n    <div class=\"container\">\n        <div class=\"kn-system-messages\"></div>\n        @Html.Kentico().EditableArea(\"top\")\n    </div>\n</div>\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}","lang":"html"},"strapline":""},{"title":"","body":"<p>For both of the <em>@section</em> directives to work, add a <em>@RenderSection</em> directive to the layout file.</p>\n<ol>\n  <li>In <em>Views</em> &gt; <em>Shared</em> &gt; <em>_Layout.cshtml</em>, locate the closing tag of the <em>&lt;head /&gt;</em> element.</li>\n  <li>Put the directive right above the closing tag.</li>\n</ol>","code":{"src":"@RenderSection(\"Styles\", required: false)","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finally, create a CSS style for the landing pages.</p>\n<ol>\n  <li>In the <em>Content &gt; Css &gt; Master</em> folder, open the <em>style.css</em> file.</li>\n  <li>Put the style snippet into the file.</li>\n  <li>Save and close the file.</li>\n</ol>","code":{"src":"/* LANDING PAGE STYLES */\n.kn-system-messages p {\n    padding: 0.5rem;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ab4c40ae-ec72-4725-972b-6323df889ce0","_parentId":"e6284bdc-db57-4246-b1bb-f9a381ea55e9","_type":"component","title":"Creating a controller, repository, DTO, and view","displayTitle":"Creating a controller, repository, DTO, and view"},{"body":"<p>The theory in the previous page said that creating sections was trivial. You’ll certainly agree. In this task, your job is to create four sections, each having a different layout:</p>\n<ul>\n  <li>A single-column layout</li>\n  <li>Three double-column layouts\n    <ul>\n      <li>With a 50/50 width ratio</li>\n      <li>With a 40/60 ratio</li>\n      <li>With a 60/40 ratio</li>\n    </ul>\n  </li>\n</ul>\n<p>You may recall the videos saying that sections need to be registered in the system, via an assembly-level attribute placed into the section controller file. Specifically, you want to use the <em>Kentico.PageBuilder.Web.Mvc.RegisterSectionAttribute</em>, in which you can specify the unique identifier of the section, its type, name, and other details.</p>\n<p>Apart from registering itself, the controller’s only responsibility is to invoke the partial view.</p>\n<p>We recommend storing the section controllers in <em>MedioClinic &gt; Controllers &gt; Sections</em>.</p>\n<p>As far as the view is concerned, it is only there to render the widget zones by calling <em>@Html.Kentico().WidgetZone()</em>, together with surrounding markup.</p>\n<p>Remember that in order for the partial view to be usable across the whole project, it should be placed into <em>MedioClinic &gt; Views &gt; Shared &gt; Sections</em>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"22809dc7-1ad0-473a-9273-0fcc269fba37","_parentId":"0c5c2380-b22c-48a8-b551-66ead2f16e04","_type":"component","title":"Task: Creating sections","displayTitle":"Task: Creating sections"},{"body":"<div class=\"infobox note\"><p>From now on, all the implementation happens in just the <em>MedioClinic</em> project. We’ll no longer give instructions to “go to <em>MedioClinic &gt; Folder</em>”, just “<em>Folder</em>”.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, create a single-column controller.</p>\n<ol>\n  <li>In Visual Studio, go to the <em>Controllers</em> folder.</li>\n  <li>In that folder, create a new <em>“Sections”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>SingleColumnSectionController.cs</em> class file.</li>\n  <li>Add the <em>[assembly: RegisterSection()]</em> statement according to this code snippet.</li>\n  <li>Invoke the future <em>Sections/_SingleColumnSection</em> view.</li>\n</ol>","code":{"src":"[assembly: RegisterSection(\n\t\"MedioClinic.Section.SingleColumn\", \n\ttypeof(SingleColumnSectionController), \n\t\"Single column\", \n\tDescription = \"Single-column section\", \n\tIconClass = \"icon-square\")]\n\nnamespace MedioClinic.Controllers.Sections\n{\n    public class SingleColumnSectionController : Controller\n    {\n        public ActionResult Index()\n        {\n            return PartialView(\"Sections/_SingleColumnSection\");\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now you can get onto creating the view.</p>\n<ol>\n  <li>Go to <em>Views &gt; Shared</em>.</li>\n  <li>In that folder, create a new <em>“Sections”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>_SingleColumnSection.cshtml</em> view file.</li>\n  <li>Add Razor code according to this code snippet, which contains the desired widget zone placeholder.</li>\n</ol>","code":{"src":"<div class=\"row section\">\n    <div class=\"col s12\">\n        @Html.Kentico().WidgetZone()\n    </div>\n</div>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b55e57ed-eecc-4339-a0c5-c938221d28e0","_parentId":"42385e2b-02f9-41da-9eb3-a6a6590f761e","_type":"component","title":"Demo: Creating sections","displayTitle":"Demo: Creating sections"},{"body":"<div class=\"infobox note\"><p>The other three sections don’t differ in principle. Instead of giving you tedious instructions to create them in steps, it is better for you to copy them directly from GitHub.</p>\n<p>Copy your controllers from the <a href=\"https://github.com/Kentico/training-kentico-k12/tree/builders/MedioClinic/Controllers/Sections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Controllers &gt; Sections folder</a>. You can find the partial views in the <a href=\"https://github.com/Kentico/training-kentico-k12/tree/builders/MedioClinic/Views/Shared/Sections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Views &gt; Shared &gt; Sections folder</a>.</p>\n<p>Just bear in mind that their metadata (names, descriptions) use translation macro expressions. You’ll implement localization in one of the following pages in this course. For now, you can just use string literals as names and descriptions instead.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a4ce7f0d-a551-4e6b-a754-2d22591c5eb0","_parentId":"42385e2b-02f9-41da-9eb3-a6a6590f761e","_type":"component","title":"Notes","displayTitle":"Notes"},{"body":"<p>This theory chapter should act as a short refresher of the principles you’ve learned in the previous page.</p>\n<p>Widgets can be made of just a few code artifacts. As a minimum, each widget needs a <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Controllers\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">controller</a>, a <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Partialviews\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">partial view</a>, and ideally a <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Models\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">view model</a> connecting them. Should a widget allow content contributors to produce content (yes, widgets were designed for that), then it also needs a properties class, and:</p>\n<ul>\n  <li>One or more <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc/defining-widget-properties-in-mvc#DefiningwidgetpropertiesinMVC-Implementinginlinepropertyeditors\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">inline editors</a></li>\n  <li>A <a href=\"https://docs.kentico.com/k12/managing-website-content/using-widgets-in-mvc#UsingwidgetsinMVC-Workingwithwidgets\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configuration form</a></li>\n  <li>A combination of the two</li>\n</ul>\n<p>In this phase of the course, you’ll create the least-complex widget that allows content contributors to create content—a text widget.</p>\n<p>The widget will intentionally be kept as simple as possible. It will be almost identical to that of our <em>Dancing Goat</em> MVC sample site that can be deployed to IIS with the Kentico installer. The simplicity of the widget will help you put your hands on the real coding on one side, while also allowing you to clearly understand the underpinnings of page builder on the other.</p>\n<p>Once you familiarize yourself with the implementation details, you’ll then implement the two remaining custom widgets used in the landing page: the static image widget and the image slideshow widget.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bb442f66-589c-4eda-91b5-36c08092a55c","_parentId":"b0d1dfac-b3cc-46ae-8bb2-0cabac76b0f8","_type":"component","title":"Theory: Creating a text widget","displayTitle":"Theory: Creating a text widget"},{"body":"<p>Let’s summarize the requirements you have for the widget. You need it to be able to:</p>\n<ul>\n  <li>Edit text</li>\n  <li>Add basic formatting</li>\n  <li>Provide the changes of the inserted text to the central browser store via events</li>\n</ul>\n<p>This requires some browser functionality implemented in JavaScript.</p>\n<p>You can certainly implement everything yourself, however, why not use an existing code base that’s available on the Internet?</p>\n<p>One of the components out there that meets the above requirements, is <a href=\"https://yabwe.github.io/medium-editor/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">MediumEditor</a>. To get it working in a widget, all you have to do is to put its .js and .css files into the same file system location of your widget’s .js (and .css) file. The Kentico NuGet packages will then add them to the ASP.NET MVC bundle that they automatically create for all widgets in the background.</p>\n<p>Before you set out to develop the widget, you may want to recall the important parts of the design:</p>\n<ul>\n  <li>The widget controller needs to be <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Registeringwidgets\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">registered</a> and it needs to inherit from <em>WidgetController&lt;TProperties&gt;</em>.</li>\n  <li>A property class is required.</li>\n  <li>The property class needs to have properties of primitive values serializable to JSON.</li>\n  <li>The property class provides the widget state, originally obtained from the browser, stored in the database.</li>\n  <li>To get the widget state from the database, in the action method, it needs to get the properties by calling the base class’ method.</li>\n  <li>It should pass the state of the widget—the text content—to the partial view, via a view model.</li>\n  <li>The widget partial view should be designed to operate in both modes: the display mode and the edit mode.</li>\n  <li>In edit mode, the view should invoke the inline editor partial view and pass required data onto it via its own view model.</li>\n  <li>When in edit mode, Kentico will automatically run your widget JavaScript file.</li>\n  <li>In that file, you need to initialize the <em>MediumEditor</em> object, subscribe to its events, and pass the text content from the editor to the browser store, in the <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc/defining-widget-properties-in-mvc#DefiningwidgetpropertiesinMVC-Implementinginlinepropertyeditors\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">required format</a>.&nbsp;</li>\n</ul>\n<p>If you feel like implementing it all by yourself, off you go. If not, feel free to code along in the following demo chapter.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b7289c7c-764d-4841-b935-d729fc6b54d9","_parentId":"0bf9a467-12dc-427d-916e-e9ccf6dcc22f","_type":"component","title":"Task: Creating a text widget","displayTitle":"Task: Creating a text widget"},{"body":"<p>In this series of steps, create the text widget.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the properties class.</p>\n<ul>\n  <li>In the <em>Models</em> folder, create a new <em>“Widgets”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextWidget”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextWidgetProperties.cs”</em> class file.</li>\n  <li>Make the class implement <em>Kentico.PageBuilder.Web.Mvc.IWidgetProperties</em>.</li>\n  <li>Add a “<em>Text”</em> string property.</li>\n</ul>","code":{"src":"using Kentico.PageBuilder.Web.Mvc;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class TextWidgetProperties : IWidgetProperties\n    {\n        public string Text { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, let’s create the view model class.</p>\n<ul>\n  <li>When in the <em>Models &gt; Widgets &gt; TextWidget</em> folder, create a new <em>“TextWidgetViewModel.cs”</em> class file.</li>\n  <li>Add a Text string property.</li>\n</ul>","code":{"src":"namespace MedioClinic.Models.Widgets\n{\n    public class TextWidgetViewModel\n    {\n        public string Text { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let’s continue with the controller.</p>\n<ul>\n  <li>In the <em>Controllers</em> folder, create a new <em>“Widgets”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>TextWidgetController.cs</em> class file.</li>\n  <li>Add the <em>[assembly: RegisterWidget()]</em> statement according to this code snippet.</li>\n  <li>In the action method, get the properties.</li>\n  <li>Invoke the to-be-created <em>“Widgets/_TextWidget”</em> view with the view model populated with the text data obtained from the properties object.</li>\n</ul>","code":{"src":"using System.Web.Mvc;\n\nusing MedioClinic.Controllers.Widgets;\nusing MedioClinic.Models.Widgets;\n\nusing Kentico.PageBuilder.Web.Mvc;\n\n[assembly: RegisterWidget(\n\t\"MedioClinic.Widget.Text\", \n\ttypeof(TextWidgetController), \n\t\"{$Widget.Text.Name$}\", \n\tDescription = \"{$Widget.Text.Description$}\", \n\tIconClass = \"icon-l-text\")]\n\nnamespace MedioClinic.Controllers.Widgets\n{\n    public class TextWidgetController : WidgetController<TextWidgetProperties>\n    {\n        public ActionResult Index()\n        {\n            var properties = GetProperties();\n\n            return PartialView(\"Widgets/_TextWidget\", new TextWidgetViewModel { Text = properties.Text });\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>At this point, you have the properties class designed to carry the widget data provided by the browser to the database. You can consume that data in your controller and pass it onto the widget view.</p>\n<p>Now you should take steps to display the widget contents in both the live site as well as in the admin UI. You need your widget view.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared</em> folder, create a new <em>“Widgets”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“_TextWidget.cshtml”</em> partial view.</li>\n  <li>Make your view strongly-typed on <em>MedioClinic.Models.Widgets.TextWidgetViewModel</em>.</li>\n  <li>Add the if-statement, according to this code snippet, to split the rendering based on whether the widget runs in the admin UI or in the live site.</li>\n  <li>In case of the former, pass the text data, together with the property’s codename, to the future inline editor’s partial view. (The codename doesn’t have to be unique across the whole page, just in the scope of the widget instance.)</li>\n  <li>In case of the latter, display the text.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@using MedioClinic.Models.Widgets\n@model MedioClinic.Models.Widgets.TextWidgetViewModel\n\n@if (Context.Kentico().PageBuilder().EditMode)\n{\n    Html.RenderPartial(\"InlineEditors/_TextEditor\", new TextEditorViewModel\n    {\n        PropertyName = nameof(TextWidgetProperties.Text),\n        Text = Model.Text\n    });\n}\nelse\n{\n    @Html.Raw(Model.Text);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The rendering of the widget contents in the live site has already been dealt with in the widget view. However, the widget still needs means of taking users’ input in the admin UI. You need an inline editor.</p>\n<p>To bootstrap your editor, create its view model first. Then you’ll create the partial view and the JavaScript file.</p>\n<p>As you may have noticed, the inline editor always needs to know the codename of the widget property it operates on. All inline editors in the project will need a way to find that out. It is not recommended to design editors in a way that they determine the name of the property all by themselves. Instead, the widget should do that, and let the inline editors know via an editor view model.</p>\n<p>Therefore, it is best to wrap that property codename into an abstract class that each inline editor’s view model inherits.&nbsp;</p>\n<ol>\n  <li>In the <em>Models</em> folder, create a new <em>“InlineEditors” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“InlineEditorViewModel.cs”</em> class file.</li>\n  <li>Make that class abstract and add a <em>“PropertyName”</em> string property.</li>\n</ol>","code":{"src":"namespace MedioClinic.Models.InlineEditors\n{\n    public abstract class InlineEditorViewModel\n    {\n        public string PropertyName { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now inherit from the abstract class in your text editor view model.</p>\n<ul>\n  <li>While in the <em>Models &gt; InlineEditors</em> folder, create a new <em>“TextEditor”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextEditorViewModel.cs”</em> class file.</li>\n  <li>Make that class inherit from the abstract class and add a <em>“Text”</em> string property.</li>\n</ul>","code":{"src":"namespace MedioClinic.Models.InlineEditors\n{\n    public class TextEditorViewModel : InlineEditorViewModel\n    {\n        public string Text { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Your inline editor now only needs the partial view to render and the JavaScript file to update the database with edits.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared</em> folder, create a new <em>“InlineEditors”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“_TextEditor.cshtml”</em> partial view file.</li>\n  <li>Make your view strongly-typed on <em>TextEditorViewModel</em>.</li>\n  <li>Add the using-statement as depicted in this code snippet. The statement makes sure all the mandatory markup for an inline editor is rendered properly.</li>\n  <li>As arguments, pass the unique codename of your editor, the codename of the widget property you’ve obtained from your view model, and an anonymous object to specify the CSS class of the editor’s HTML element.</li>\n  <li>In the body of the using-statement, simply render the text.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.InlineEditors.TextEditorViewModel\n\n@using (Html.Kentico().BeginInlineEditor(\"text-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"text-editor\"\n    }))\n{\n    @Html.Raw(Model.Text)\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>We’re getting to the grand finale. Let’s create the JavaScript file.</p>\n<ol>\n  <li>In the <em>Content</em> folder, create a new <em>“InlineEditors”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextEditor”</em> subfolder.</li>\n  <li><a href=\"https://github.com/yabwe/medium-editor/archive/master.zip\">Download</a> the ZIP archive of MediumEditor and copy the <em>medium-editor-master\\dist</em> folder from the archive to the folder you’ve just created. You can rename the copied <em>dist</em> folder to <em>“medium-editor”</em> for better brevity.</li>\n  <li>While in the <em>medium-editor</em> folder, delete the <em>*.min.*</em> files as Kentico will bundle and minify the files for itself.</li>\n  <li>In the parent <em>TextEditor</em> folder, create a <em>“text-editor.js”</em> file.</li>\n  <li>In order not to pollute the global object in the browser, add an immediately-invoked function expression (IIFE) and put a call to the page builder’s registration function inside, according to the code snippet.</li>\n  <li>As arguments, pass a codename of your inline editor, and an anonymous object with two function properties: <em>“init”</em> and <em>“destroy”</em>.</li>\n  <li>In the <em>init</em> function, get the editor’s HTML element, create the configuration for the <em>MediumEditor</em> instance, and create that instance with the element and the configuration as arguments.</li>\n  <li>At the same time, subscribe to the <em>“editableInput”</em> event, and run code that sends a <em>CustomEvent</em> object, with the depicted structure.</li>\n  <li>Finally, implement the destroy function.&nbsp;</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"text-editor\", {\n        init: function (options) {\n            var editor = options.editor;\n            var config = {\n                toolbar: {\n                    buttons: [\n                        \"bold\",\n                        \"italic\",\n                        \"underline\",\n                        \"orderedlist\",\n                        \"unorderedlist\",\n                        \"h1\",\n                        \"h2\",\n                        \"h3\",\n                        \"customHtml\"\n                    ]\n                },\n                imageDragging: false,\n                extensions: {\n                  imageDragging: {}\n                }\n            };\n\n            var mediumEditor = new MediumEditor(editor, config);\n\n            mediumEditor.subscribe(\"editableInput\", function () {\n                var event = new CustomEvent(\"updateProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: mediumEditor.getContent(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n            });\n        },\n\n        destroy: function (options) {\n            var mediumEditor = MediumEditor.getEditorFromElement(options.editor);\n            if (mediumEditor) {\n                mediumEditor.destroy();\n            }\n        }\n    });\n})();","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Finally, add some CSS to support the text editor.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; TextEditor</em> folder, create a new <em>“TextEditor.css”</em> stylesheet file.</li>\n  <li>Add selectors and styles according to this code snippet.</li>\n</ol>","code":{"src":"div.medium-editor-anchor-preview, div.medium-editor-toolbar {\n    z-index: 100000;\n}\n\n.medium-editor-element:focus {\n    outline: 0;\n}\n\n.medium-editor-element:not([data-medium-focused]):hover {\n    background-color: rgba(155, 155, 155, 0.17);\n}\n\n.medium-editor-placeholder:after {\n    position: relative !important;\n}\n\n.medium-editor-placeholder *:only-child br:only-child {\n    display: none;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0214ff1d-16a8-4cd7-a207-55d681d2f1c8","_parentId":"dbb97ce1-9c0e-45f0-ac12-c4305ec81f6e","_type":"component","title":"Demo: Creating a text widget","displayTitle":"Demo: Creating a text widget"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How to define a URL pattern for a multi-language landing page?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"“/{%DocumentCulture%}/LandingPage/{%NodeAlias%}”","lang":"csharp"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"“/LandingPage/{%NodeAlias%}”.","lang":"csharp"},"feedback":"<p>The patterns lacks a macro expression that denotes the document culture.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"“/{%PageCulture%}/LandingPage/{%NodeAlias%}”.","lang":"csharp"},"feedback":"<p>Kentico pages are called \"documents\" in the API, for backwards compatibility reasons. Therefore, the correct wording of the first macro expression is <em>{%DocumentCulture%}.</em></p>","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"e459cbf8-d327-4f21-a3a6-d60eed9f1df8","_parentId":"6ed1c4b8-a6d2-438b-abb8-7aba17d5529a","_type":"component","title":"URL pattern","displayTitle":"URL pattern"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How to properly register page builder features on a global (application-wide) level?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePreview();\n}","lang":"csharp"},"feedback":"<p>During the application start phase, not only preview needs to be enabled but also page builder itself.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePreview();\n\t\n\tApplicationBuilder.Current.UsePageBuilder(new PageBuilderOptions()\n\t{\n\t\tDefaultSectionIdentifier = \"MedioClinic.Section.SingleColumn\",\n\t\tRegisterDefaultSection = true\n\t});\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Correct. To register page builder features on a global level, one needs to add two pieces of OWIN middleware: for both preview and page builder.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"e3166230-8ad8-49b0-a7fe-caa6dbdcaeb9","_parentId":"6ed1c4b8-a6d2-438b-abb8-7aba17d5529a","_type":"component","title":"Global page builder features","displayTitle":"Global page builder features"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the proper way of initializing an inline editor?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"my-inline-editor\", {\n        init: function (options) {\n\t\t\tvar editorHtmlElement = options.editor;\n\t\t\tvar acmeTextEditor = new AcmeTextEditor(editorHtmlElement);\n\t\t\t\n\t\t\tacmeTextEditor.subscribe(\"textChangedByUser\", function () {\n\t\t\t\tvar event = new CustomEvent(\"editProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: acmeTextEditor.getAllText(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n    });\n})();","lang":"javascript"},"feedback":"<p>The initialization code is correctly placed into an IIFE (self-invoking function), which helps in keeping the code collision-free. However, one important details is wrong in this sample: the codename of the <em>CustomEvent </em>instance. The correct wording is <em>\"updateProperty\"</em>, not <em>\"editProperty\"</em>.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"<script>\n    window.kentico.pageBuilder.registerInlineEditor(\"my-inline-editor\", {\n        init: function (options) {\n\t\t\tvar editorHtmlElement = options.editor;\n\t\t\tvar acmeTextEditor = new AcmeTextEditor(editorHtmlElement);\n\t\t\t\n\t\t\tacmeTextEditor.subscribe(\"textChangedByUser\", function () {\n\t\t\t\tvar event = new CustomEvent(\"updateProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: acmeTextEditor.getAllText(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n    });\n</script>","lang":"javascript"},"feedback":"<p>The code is generally correct, however, the presence of the <em>&lt;script /&gt;</em> tag means that it was placed directly into the partial view of the inline editor. Such approach goes directly against JavaScript best practices, hence is not supported.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"my-inline-editor\", {\n        init: function (options) {\n\t\t\tvar editorHtmlElement = options.editor;\n\t\t\tvar acmeTextEditor = new AcmeTextEditor(editorHtmlElement);\n\t\t\t\n\t\t\tacmeTextEditor.subscribe(\"textChangedByUser\", function () {\n\t\t\t\tvar event = new CustomEvent(\"updateProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: acmeTextEditor.getAllText(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n    });\n})();","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Awesome! You've proved tobe aware of all the important details. The correct code sample was enclosed into an IIFE (self-invoking function) and it also uses the correct <em>\"updateProperty\"</em> codename of the <em>CustomEvent </em>instance that's sent to Kentico.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"ae6816cc-9254-47ea-8233-4b49556fdb39","_parentId":"6ed1c4b8-a6d2-438b-abb8-7aba17d5529a","_type":"component","title":"Initializing inline editors","displayTitle":"Initializing inline editors"},{"body":"<p>Congratulations! You’ve just implemented your first Kentico MVC widget.</p>\n<p>You can give it a quick test by:</p>\n<ul>\n  <li>Navigating to the <em>Pages</em> application</li>\n  <li>Creating a landing page section page</li>\n  <li>Creating a test landing page underneath</li>\n  <li>Adding your widget to the page</li>\n  <li>Writing some text</li>\n  <li>Saving it to the database&nbsp;</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"b7b1b74e-79f9-4587-85fe-795cb6f29f61","_parentId":"a66b8c77-bd9b-463f-b946-30eb51444264","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you’ll implement two new widgets for the landing page:</p>\n<ul>\n  <li>A static image widget</li>\n  <li>An image slideshow widget</li>\n</ul>\n<p>Along the way, you’ll learn a few useful tricks, including:</p>\n<ul>\n  <li>Making your inline editors take additional configuration</li>\n  <li>Creating JavaScript objects for universal usage in both the display mode and edit mode</li>\n  <li>Keeping the browser’s code collision-free and organized</li>\n  <li>Supporting the inline editor with additional backend code</li>\n  <li>Serializing inline editor data</li>\n  <li>Editing without unnecessary page redraws</li>\n</ul>","instruction":"Creating advanced widgets","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b5668e05-ed52-4f0c-a6de-8dfa290accab","_parentId":"72b4d886-ea0a-4bcb-899c-50647cb0d0cc","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Now that you’ve had an A-to-Z hands-on experience with creating a widget and an inline editor, why not accept the challenge of creating an advanced widget?</p>\n<p>We’ll go one step at a time and we’ll split the process in two halves. First, you’ll get acquainted with most of the advanced techniques by implementing a static image widget. Once you get up to speed with the new knowledge, you’ll be able to put it through its paces and create the image slideshow widget. Similarly to the text widget, the static image widget is derived from the one you’ll find in our Dancing Goat sample site. Here, it is used as a spring board that will allow you to take your knowledge to another level.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7ead64f6-1e11-457e-b74c-b378a96036e0","_parentId":"9447a510-3690-47e0-9620-841ba1a7c8e5","_type":"component","title":"Theory: Creating a static image widget","displayTitle":"Theory: Creating a static image widget"},{"body":"<p>Let’s elaborate a bit about the user story of that image widget. It should:</p>\n<ul>\n  <li>Allow the user to select an image file</li>\n  <li>Preferably in the drag-n-drop fashion</li>\n  <li>Upload it as an attachment of the current Kentico page</li>\n  <li>Render it on the live site</li>\n  <li>Upload a different image as a replacement of the current one</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"454468c7-d9a3-4fe4-8414-5f17e1b51776","_parentId":"ff9855d6-915d-4bf9-99a1-f229c5c64898","_type":"component","title":"Design goals","displayTitle":"Design goals"},{"body":"<p>Again, if you feel like exploring things yourself without having step-by-step guidance, we’ll gladly provide you with just the design principles.</p>\n<h4>Frontend functionality</h4>\n<p>The most notable UI difference from the text widget is obviously the usage of a file uploader, instead of the text editor. Therefore, you need different JavaScript functionality to support that. A great deal of such functionality can be found in the <a href=\"https://www.dropzonejs.com/\">Dropzone.js</a> component available on the Internet. It works in the way that for a given HTML element, you just create its JavaScript object, together with some configuration.</p>\n<pre><code class=\"language-javascript\">var dropzoneElement = document.getElementById(\"myId\");\n\nvar dropzone = new Dropzone(dropzoneElement, {\n\tacceptedFiles: \".jpg, .gif\",\n\turl: \"https://my-url/upload\"\n});</code></pre>\n<p>It supports both drag-n-drop and <a href=\"https://www.dropzonejs.com/#config-clickable\">picking files</a> via a native modal dialog.</p>\n<pre><code class=\"language-javascript\">var dropzoneElement = document.getElementById(\"myId\");\nvar clickableModalDialog = dropzoneElement.querySelector(\".dz-clickable\");\n\nvar dropzone = new Dropzone(dropzoneElement, {\n\tacceptedFiles: \".jpg, .gif\",\n\turl: \"https://my-url/upload\",\n\tclickable: clickableModalDialog\n});</code></pre>\n<p>It also emits events of both <a href=\"https://www.dropzonejs.com/#event-success\">successful</a> and <a href=\"https://www.dropzonejs.com/#event-error\">erroneous</a> uploads.</p>\n<pre><code class=\"language-javascript\">dropzone.on(\"success\", function (event) {\n\tvar responseContent = JSON.parse(event.xhr.response);\n});</code></pre>\n<h4>Backend functionality</h4>\n<p>The other significant difference lies in the way the input data is transferred to Kentico. While the text widget can cope with just the properties class to carry the text from the browser to the database, the image widget will have to have a dedicated controller listening in the background for the image uploads.</p>\n<p>The Dropzone component will have to upload the image files to the controller, and trade it for an identifier of the uploaded file in Kentico. As the files will be stored as page attachments, the controller will simply return the attachment’s GUID. The identifier will then be the only information passed through the properties class to the widget’s state in the database.</p>\n<pre><code class=\"language-csharp\">// POST: ImageUploader/Upload\n[HttpPost]\npublic ActionResult Upload(int pageId)\n{\n\tTreeNode page = DocumentHelper.GetDocument(pageId, null);\n\tGuid imageGuid = FileManagementHelper.AddUnsortedAttachment(page, \"C:\\Temp\", Request.Files[0] as HttpPostedFileWrapper);\n\n\treturn Json(new { guid = imageGuid }); \n}</code></pre>\n<p>When implementing the inline editor, you’ll face one important issue: how to protect your image uploader controller against malicious requests. It might seem as a hard problem, but it is not. As the inline editor will only run in the edit mode in the admin UI, you get around that easily by using the <a href=\"https://docs.kentico.com/k12/developing-websites/retrieving-content-in-mvc-applications/adding-preview-mode-support#Addingpreviewmodesupport-Loadingthelatestversionsofpages\">Kentico.Content.Web.Mvc.UrlHelperPreviewExtensions.AuthenticateUrl</a> helper method. This method can decorate your upload URL with additional security information so that the preview tab in the <em>Pages</em> application stays the one and only valid source of the requests.</p>\n<pre><code class=\"language-csharp\">string url = Url.Kentico().AuthenticateUrl(Url.Action(\"Upload\", \"ImageUploader\", new\n\t{\n\t\tpageId = Context.Kentico().PageBuilder().PageIdentifier\n\t}), false);</code></pre>\n<p>Apart from the authentication of the upload URL itself via server-side code (typically in the partial view of your inline editor), there need to be means of using the URL in the inline editor’s JavaScript code. To transfer such configuration, you can put it into the editor’s markup as a <em>data-*</em> HTML attribute, and retrieve its value later in the JavaScript file.</p>\n<pre><code class=\"language-csharp\">@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName, new\n    {\n        data_upload_url = url\n    }))\n{\n\t&lt;div class=\"uploader\" /&gt;\n}</code></pre>\n<p>All right. If you’re up for the challenge, feel free to develop the widget yourself. If not, don’t worry. You can of course code along in the following demo chapters.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0ba62428-d4cb-43ed-a6c9-40056aa820b8","_parentId":"6af8bb96-74c5-4214-a817-ceddb08df04f","_type":"component","title":"Design guidelines","displayTitle":"Design guidelines"},{"body":"<p>Just as in the previous case, the widget shall consist of its controller, properties class, a widget partial view, an inline editor partial view (together with their accompanying view models), and a JavaScript file. On top of that, you’ll need your image uploader controller.</p>\n<p>You’ll be surprised that the code files won’t drastically differ from those of the text widget. There’s nothing to worry about.</p>\n<div class=\"infobox note\"><p>From now on, all the implementation happens in just the <em>MedioClinic</em> project. We’ll no longer give instructions to “go to <em>MedioClinic &gt; Folder</em>”, just “<em>Folder</em>”.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the properties class.</p>\n<ol>\n  <li>In the <em>Models &gt; Widgets</em> folder, create a new <em>“ImageWidget”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“ImageWidgetProperties.cs”</em> class file.</li>\n  <li>Make the class implement <em>IWidgetProperties</em>.</li>\n  <li>Add one <em>System.Guid</em> property called <em>“ImageGuid”</em>.</li>\n  <li>You can now close the file.</li>\n</ol>","code":{"src":"using System;\n\nusing Kentico.PageBuilder.Web.Mvc;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public sealed class ImageWidgetProperties : IWidgetProperties\n    {\n        public Guid ImageGuid { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can continue by creating a widget controller.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Widgets</em> folder, create a new <em>“ImageWidgetController.cs”</em> class file.</li>\n  <li>As with the text widget, make the class inherit from <em>WidgetController&lt;ImageWidgetProperties&gt;</em>.</li>\n  <li>Add the same mandatory pieces of code as in the case of the text widget, i.e. an assembly-level attribute to register the widget, and an <em>ActionResult</em> method.</li>\n  <li>In the action method, get the properties, and write a statement that retrieves an image via a future <em>“GetImage”</em> method. You’ll implement that method in the next step.</li>\n  <li>To complete the action method, make it return the future <em>“Widgets/_ImageWidget”</em> partial view.</li>\n  <li>The partial view needs to display the image. Therefore, you’ll also need a simple view model. For now, just return the view.&nbsp;</li>\n</ol>","code":{"src":"using System.Linq;\nusing System.Web.Mvc;\n\nusing CMS.DocumentEngine;\nusing Kentico.PageBuilder.Web.Mvc;\nusing MedioClinic.Controllers.Widgets;\nusing MedioClinic.Models.Widgets;\n\n[assembly: RegisterWidget(\n\t\"MedioClinic.Widget.Image\", \n\ttypeof(ImageWidgetController), \n\t\"Image\", \n\tDescription = \"Image widget\", \n\tIconClass = \"icon-picture\")]\n\nnamespace MedioClinic.Controllers.Widgets\n{\n    public class ImageWidgetController : WidgetController<ImageWidgetProperties>\n    {\n        public ActionResult Index()\n        {\n            var properties = GetProperties();\n            var image = GetImage(properties);\n\n            return PartialView(\"Widgets/_ImageWidget\");\n        }\n    } \n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The controller lacks the <em>GetImage</em> method. Let’s create it, right below the action method.</p>\n<ol>\n  <li>Take the properties with the image GUID.</li>\n  <li>Make use of the <em>GetPage</em> method of the <em>WidgetController</em> base class.</li>\n  <li>Once you get the current page, filter the first object in the <em>AllAttachments</em> collection using the image GUID in the properties.</li>\n  <li>Be sure to leave your controller file open, since you’ll add some final touches in a few moments.</li>\n</ol>","code":{"src":"protected DocumentAttachment GetImage(ImageWidgetProperties properties)\n{\n\tvar page = GetPage();\n\t\n\treturn page?.AllAttachments.FirstOrDefault(x => x.AttachmentGUID == properties.ImageGuid);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>To be able to pass the image to the widget’s view, create a view model.</p>\n<ol>\n  <li>In the <em>Models &gt; Widgets &gt; ImageWidget</em> folder, create a new <em>“ImageWidgetViewModel.cs”</em> class file.</li>\n  <li>Add just one property that represents the image. It should be of type <em>CMS.DocumentEngine.DocumentAttachment</em>.</li>\n</ol>","code":{"src":"using CMS.DocumentEngine;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class ImageWidgetViewModel\n    {\n        public DocumentAttachment Image { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now that you have your view model, you can finish the widget controller.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Widgets &gt; ImageWidget &gt; ImageWidgetController.cs</em> file, find the return statement of your action method.</li>\n  <li>Alter that statement so that the view gets a new <em>ImageWidgetViewModel</em> object.</li>\n  <li>Use the initializer syntax to fill the Image property with what you’ve obtained from your <em>GetImage</em> method.</li>\n</ol>","code":{"src":"public ActionResult Index()\n{\n\tvar properties = GetProperties();\n\tvar image = GetImage(properties);\n\n\treturn PartialView(\"Widgets/_ImageWidget\", new ImageWidgetViewModel\n\t{\n\t\tImage = image\n\t});\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let’s create the widget view. Unlike the text widget, which was entirely split by the current mode (edit or display), you can now render the image regardless of the mode. Only in case of the edit mode you’ll render the inline editor’s markup, on top of the image itself.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; Widgets</em> folder, create a new <em>“_ImageWidget.cshtml”</em> view file.</li>\n  <li>Make it strongly-typed against <em>ImageWidgetViewModel</em>.</li>\n  <li>Add Razor code that outputs the <em>&lt;img /&gt;</em> tag of the image.</li>\n  <li>Add an if-statement that asks about the edit mode. If that applies, render the future <em>“InlineEditors/_ImageUploaderEditor”</em> partial view of the inline editor.</li>\n  <li>For now, save this file and leave it open. Let’s go create the inline editor.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@using MedioClinic.Models.Widgets\n@model MedioClinic.Models.Widgets.ImageWidgetViewModel\n\n@{\n    if (Model.Image != null)\n    {\n        var imageUrl = Url.KenticoImageUrl(Model.Image.GetPath());\n        <img src=\"@Html.Raw(imageUrl)\" class=\"responsive-img\" />\n    }\n\t\n\tif (Context.Kentico().PageBuilder().EditMode)\n    {\n        Html.RenderPartial(\"InlineEditors/_ImageUploaderEditor\");\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Start with the view model. Just as in the previous case, you want your editor’s view model to carry the codename of the current widget’s property. It also must signal the existence of an image, so that the dropzone’s HTML element knows whether it should span across the whole underlying image, or stay at its default minimum dimensions.</p>\n<ol>\n  <li>In the <em>Models &gt; InlineEditors</em> folder, create a new <em>“ImageUploaderEditorViewModel.cs”</em> class file.</li>\n  <li>You now don’t have to add the <em>PropertyName</em> string property, because you’ve already added it into the <em>InlineEditorViewModel</em> abstract class. Just inherit from it.</li>\n  <li>Add the Image property member of type <em>CMS.DocumentEngine.DocumentAttachment</em>.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"using CMS.DocumentEngine;\n\nnamespace MedioClinic.Models.InlineEditors\n{\n    public class ImageUploaderEditorViewModel : InlineEditorViewModel\n    {\n        public DocumentAttachment Image { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The widget will be capable of re-uploading another image to replace the current one. To keep the static image widget simple, it won’t support replacing the page attachment. When the user drags a new image on top of an existing one, the inline editor will not delete the original page attachment. It will just upload another attachment and display it.</p>\n<p>To allow the editor to span across an image, you’ll want to check if the view model has such image, and assign an appropriate CSS class to the editor’s HTML element.</p>\n<p>Apart from this decision logic, the editor’s partial view needs to pass the authenticated upload URL to the JavaScript code via a <em>data-*</em> HTML attribute (see the theory chapter above for a detailed explanation).</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; InlineEditors</em> folder, create a new <em>“_ImageUploaderEditor.cshtml”</em> view file.</li>\n  <li>Make the view strongly-typed against the <em>ImageUploaderEditorViewModel</em> view model you’ve just created.</li>\n  <li>Add the using-statement to generate the mandatory editor markup. Insert the dropzone container HTML element, the uploader element, and a message box element (all of that goes to the body of that statement).</li>\n  <li>Add the <em>GetContainerClass</em> Razor method. To authenticate the upload URL, add a <em>GetActionUrl</em> Razor method to the top of the file, according to the code snippet.</li>\n  <li>Then, use the results of those method calls in the appropriate places in the using statement.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@model ImageUploaderEditorViewModel\n\n@{\n    string GetContainerClass() =>\n        Model.Image != null ? \"kn-image-uploader-container\" : \"kn-image-uploader-empty-container\";\n\n    // Gets the URL to the ImageUploaderController's action.\n    HtmlString GetActionUrl()\n    {\n        return Url.Kentico().AuthenticateUrl(Url.Action(\"Upload\", \"ImageUploader\", new\n        {\n            pageId = Context.Kentico().PageBuilder().PageIdentifier\n        }), false);\n    }\n}\n\n@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"kn-image-uploader-editor\",\n        data_upload_url = GetActionUrl().ToString()\n    }))\n{\n    <div class=\"@GetContainerClass()\">\n        <div class=\"dz-uploader\">\n            <div class=\"dz-message top\">\n                @Html.Raw(\"Drop image here or <a class=\"dz-clickable\">click</a> to browse\")\n            </div>\n        </div>\n    </div>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>It is time to bring the frontend functionality into your widget.</p>\n<p>We’ll split the implementation of the JavaScript file into four slides. First, you’ll implement the initialization logic. Then, you’ll add code that intercepts the events of the <em>Dropzone.js</em> component and emits your custom events (this will take two slides). In the last slide, we’ll show a snippet that handles the cleanup logic.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors</em> folder, create a new <em>“ImageUploaderEditor”</em> subfolder.</li>\n  <li>Copy the <em>dropzone.js</em> file in the <em>MedioClinicStaticAssets &gt; js</em> folder of the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/builders/MedioClinicStaticAssets.zip\">assets archive</a> over to your newly created subfolder.</li>\n  <li>In that same subfolder, create a new <em>“image-uploader-editor.js”</em> file.</li>\n  <li>Add the IIFE (self-invoking function) and put the call to <em>“registerInlineEditor”</em> inside.</li>\n  <li>Add the anonymous object with the <em>“init”</em> property function.</li>\n  <li>Prior to instantiating the <em>Dropzone</em> object, you’ll need to capture references to the editor’s HTML element as well as the element supposed to invoke the file selection modal dialog (the <em>“clickable”</em>).</li>\n  <li>As you can see in the code snippet, you’ll want to pass the authenticated URL from the custom <em>“data-upload-url”</em> HTML attribute to the <em>Dropzone</em> object.</li>\n  <li>As the page will always re-draw upon each new image upload, there is no need to generate image thumbnails by <em>Dropzone.js</em>.</li>\n  <li>Save the file but leave it open for the additional edits in the following slides.</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"image-uploader-editor\", {\n        init: function (options) {\n            var editor = options.editor;\n            var zone = editor.querySelector(\".dz-uploader\");\n            var clickable = editor.querySelector(\".dz-clickable\");\n\n            var dropzone = new Dropzone(zone, {\n                    acceptedFiles: \".bmp, .gif, .ico, .png, .wmf, .jpg, .jpeg, .tiff, .tif\",\n                    maxFiles: 1,\n                    url: editor.getAttribute(\"data-upload-url\"),\n                    createImageThumbnails: false,\n                    clickable: clickable,\n                    dictInvalidFileType: \"Unsupported file type. Please upload files of the following types: .bmp, .gif, .ico, .png, .wmf, .jpg, .jpeg, .tiff, .tif\"\n                });\n        }\n    });\n})();","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In order for you to handle the dropzone’s <em>success</em> and <em>error</em> events, you need functionality that facilitates displaying of error messages to the user.</p>\n<ol>\n  <li>In the <em>image-uploader-editor.js</em> file, locate the body of the <em>init</em> function property.</li>\n  <li>Insert the three inner functions into the body, according to this code snippet.</li>\n  <li>The <em>“processErrors”</em> function sits atop the call hierarchy, with the <em>“showMessage”</em> function being in the middle of the call stack, and the <em>“buildMessageMarkup”</em> function completing the hierarchy in its bottom.</li>\n  <li>Save the file but leave it open for the additional edits in the following slides.</li>\n</ol>","code":{"src":"var processErrors = function (statusCode) {\n\tvar errorFlag = \"error\";\n\n\tif (statusCode >= 500) {\n\t\tshowMessage(\"The upload of the image failed. Please contact the system administrator.\"), errorFlag);\n\t} else if (statusCode === 422) {\n\t\tshowMessage(\"The uploaded image could not be processed. Please contact the system administrator.\"), errorFlag);\n\t} else {\n\t\tshowMessage(\"An unknown error happened. Please contact the system administrator.\"), errorFlag);\n\t}\n};\n\nvar showMessage = function (message, type) {\n\tvar messageElement = document.querySelector(\".kn-system-messages\");\n\n\tif (message && type) {\n\t\tif (type === \"info\") {\n\t\t\tmessageElement.appendChild(buildMessageMarkup(message, \"light-blue lighten-5\"));\n\t\t\tconsole.info(message);\n\t\t} else if (type === \"warning\") {\n\t\t\tmessageElement.appendChild(buildMessageMarkup(message, \"yellow lighten-3\"));\n\t\t\tconsole.warn(message);\n\t\t} else if (type === \"error\") {\n\t\t\tmessageElement.appendChild(buildMessageMarkup(message, \"red lighten-3\"));\n\t\t\tconsole.error(message);\n\t\t}\n\t}\n};\n\nvar buildMessageMarkup = function (message, cssClasses) {\n\tvar paragraph = document.createElement(\"p\");\n\tparagraph.classList = cssClasses;\n\tparagraph.innerText = message;\n\n\treturn paragraph;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>It is time to handle the events of <em>Dropzone.js</em>.</p>\n<p>The <em>“success”</em> event gets fired after the file has been uploaded by Dropzone. The <em>“error”</em> event deals with failed uploads.</p>\n<p>Both events have access to the <em>XMLHttpRequest</em> object (<em>XHR</em>, for short) used to upload the file.</p>\n<ol>\n  <li>In the <em>image-uploader-editor.js</em> file, locate the body of the <em>init</em> function property.</li>\n  <li>Insert a statement that hooks into the <em>“success”</em> event. In that statement, define a function, which takes the GUID of the file attachment from the XHR’s body, and passes that into the detail of your <em>CustomEvent</em> object.</li>\n  <li>In the function that deals with <em>“error”</em> events, you want to use the <em>“status”</em> property of the XHR (the status code returned by your future upload controller), and pass its value to the <em>“processErrors”</em> method you’ve just implemented.</li>\n  <li>Save the file but leave it open for the additional edits in the following slide.</li>\n</ol>","code":{"src":"dropzone.on(\"success\",\n\tfunction (e) {\n\t\tvar content = JSON.parse(e.xhr.response);\n\n\t\tvar event = new CustomEvent(\"updateProperty\",\n\t\t\t{\n\t\t\t\tdetail: {\n\t\t\t\t\tvalue: content.guid,\n\t\t\t\t\tname: options.propertyName\n\t\t\t\t}\n\t\t\t});\n\n\t\teditor.dispatchEvent(event);\n\t});\n\ndropzone.on(\"error\",\n\tfunction (e) {\n\t\tdocument.querySelector(\".dz-preview\").style.display = \"none\";\n\t\tprocessErrors(e.xhr.status, options.localizationService);\n\t});","lang":"javascript"},"strapline":""},{"title":"","body":"<p>As the last step in the <em>image-uploader-editor.js</em> file, you may want to implement the cleanup logic that destroys the stale <em>Dropzone</em> JavaScript object upon the removal of the widget from the page by the user.</p>\n<p>The <em>Dropzone.js</em> component always makes itself visible as a <em>“dropzone”</em> property of its parent HTML element. You can use that to clean up the object if needed.</p>\n<ol>\n  <li>In the <em>image-uploader-editor.js</em> file, locate the <em>init</em> function property.</li>\n  <li>Add an additional function property called <em>“destroy”</em>, right below the <em>init</em> property.</li>\n  <li>In the body, try to get the <em>“dropzone”</em> property of the editor’s HTML element, and destroy it if it exists.</li>\n  <li>For the time being, you can close the file.</li>\n</ol>","code":{"src":"destroy: function (options) {\n\tvar dropZone = options.editor.querySelector(\".dz-uploader\").dropzone;\n\n\tif (dropZone) {\n\t\tdropZone.destroy();\n\t}\n}","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Before we get to creating the backend support for your widget, you might want to finalize the frontend part with CSS styling.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; ImageUploaderEditor</em> folder, create a new <em>“ImageUploaderEditor.cs”</em> file.</li>\n  <li>Add styling according to this snippet.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":".kn-image-uploader-editor .kn-image-uploader-empty-container, .kn-image-uploader-editor .kn-image-uploader-container {\n    width: 100%;\n    height: 100%;\n    min-height: 20rem;\n    min-width: 20rem;\n    text-align: center;\n}\n\n.kn-image-uploader-editor .kn-image-uploader-container {\n    position: absolute;\n    top: 0px;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e781fd45-bb85-443b-be36-432f4c836472","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Demo: Creating a static image widget","displayTitle":"Demo: Creating a static image widget"},{"body":"<p>As you already know, the only information that is sent through the widget properties class is the GUID of an image. We’ve designed the inline editor in a way that it obtains that GUID from a future backend controller. Users won’t approach that controller directly (by typing its URL in the address bar), it will only listen to file uploads.</p>\n<p>The best practices in ASP.NET MVC tell us to keep our controllers at their core functionality. This means that it should only be responsible for:</p>\n<ul>\n  <li>Taking the input from the route data</li>\n  <li>Getting the model from the storage</li>\n  <li>Building a view model</li>\n  <li>Selecting a proper view</li>\n</ul>\n<p>All ancillary methods should be kept away from controllers. Therefore, as part of this demo, you’ll also create two additional helper classes:</p>\n<ul>\n  <li><em>FileManagementHelper</em></li>\n  <li><em>ErrorHelper</em></li>\n</ul>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The controller will take a file off of the <em>Request</em> property of its base class, save it in a temporary file system location, save it as a page attachment, and return its GUID in a JSON response.</p>\n<ol>\n  <li>In the <em>Controllers</em> folder, create a new <em>“InlineEditors” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“ImageUploaderController.cs”</em> class file.</li>\n  <li>As usual, base the class on <em>System.Mvc.Web.Controller</em>.</li>\n  <li>Add the property members of the two helper classes mentioned above. Classify them as interface implementations so that the objects can be polled from <em>Autofac</em>.</li>\n  <li>Add a constructor that does the IoC retrieval.</li>\n  <li>Add one <em>“Upload”</em> action method, decorated with a <em>System.Web.Mvc.HttpPostAttribute</em>.</li>\n  <li>In the method’s body, check for the edit mode via the future <em>ErrorHelper</em> class first.</li>\n  <li>Then, get the current page, based on the route data <em>“pageId”</em> argument.</li>\n  <li>Then, try to take the first file in the request collection, add it as an attachment through the future <em>FileManagementHelper</em> class, and return either the GUID, or an error status code (via <em>ErrorHelper</em>).</li>\n</ol>","code":{"src":"using System;\nusing System.Web;\nusing System.Web.Mvc;\n\nusing MedioClinic.Utils;\n\nnamespace MedioClinic.Controllers.Widgets\n{\n    public class ImageUploaderController : Controller\n    {\n        protected string TempPath => $\"{Server.MapPath(@\"~\\\")}App_Data\\\\Temp\\\\ImageUploaderEditor\";\n\n        protected IFileManagementHelper FileManagementHelper { get; }\n\n        protected IErrorHelper ErrorHelper { get; }\n\n        public ImageUploaderController(IFileManagementHelper fileManagementHelper, IErrorHelper errorHandler)\n        {\n            FileManagementHelper = fileManagementHelper ?? throw new ArgumentNullException(nameof(fileManagementHelper));\n            ErrorHelper = errorHandler ?? throw new ArgumentNullException(nameof(errorHandler));\n        }\n\n        // POST: ImageUploader/Upload/[pageId]\n        [HttpPost]\n        public ActionResult Upload(int pageId)\n        {\n            ErrorHelper.CheckEditMode(HttpContext, nameof(ImageUploaderController.Upload));\n            var page = FileManagementHelper.GetPage(pageId);\n            var imageGuid = Guid.Empty;\n\n            if (Request.Files[0] is HttpPostedFileWrapper file && file != null)\n            {\n                try\n                {\n                    imageGuid = FileManagementHelper.AddUnsortedAttachment(page, TempPath, file);\n                }\n                catch (Exception ex)\n                {\n                    return ErrorHelper.HandleException(\n                        nameof(ImageUploaderController), \n                        nameof(Upload), \n                        ex, \n                        ErrorHelper.UnprocessableStatusCode);\n                }\n\n                return Json(new { guid = imageGuid }); \n            }\n\n            return new HttpStatusCodeResult(ErrorHelper.UnprocessableStatusCode);\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, create the underlying interfaces of the two helpers.</p>\n<ol>\n  <li>In the <em>Utils</em> folder, create a new <em>“IErrorHelper.cs”</em> interface file.</li>\n  <li>Add the member definitions according to the top part code snippet.</li>\n  <li>In the same folder, create a new <em>“IFileManagementHelper”</em> interface file.</li>\n  <li>Add the member definitions according to the bottom part of the snippet.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"// ~\\Utils\\IErrorHelper.cs\n\nusing System;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MedioClinic.Utils\n{\n    public interface IErrorHelper\n    {\n        int UnprocessableStatusCode { get; }\n\n        void CheckEditMode(HttpContextBase httpContext, string source);\n        \n        HttpStatusCodeResult HandleException(string source, string eventCode, Exception exception, int statusCode = 500);\n\n        void LogException(string source, string eventCode, Exception exception);\n    }\n}\n\n// ~\\Utils\\IFileManagementHelper.cs\n\nusing System;\nusing System.Web;\n\nusing CMS.DocumentEngine;\n\nnamespace MedioClinic.Utils\n{\n    public interface IFileManagementHelper\n    {\n        TreeNode GetPage(int pageId);\n\t\t\n        string EnsureUploadDirectory(string directoryPath);\n        \n\t\tbool CheckPagePermissions(TreeNode page);\n        \n\t\tstring GetTempFilePath(string directoryPath, string fileName);\n        \n\t\tGuid AddUnsortedAttachment(TreeNode page, string uploadDirectory, HttpPostedFileWrapper file);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>ErrorHelper</em> class.</p>\n<ol>\n  <li>In the <em>Utils</em> folder, create a new <em>“ErrorHelper.cs”</em> class file.</li>\n  <li>Add the <em>“CheckEditMode”</em>, <em>“HandleException”</em>, and <em>“LogException”</em> methods.</li>\n  <li>Note that the check for the edit mode is the same as the one you’ve used previously in the views.</li>\n  <li>In the <em>LogException</em> method, make use of the <em>CMS.EventLog.EventLogProvider</em> class to let the admins know about possible exceptions.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"using System;\nusing System.Web;\nusing System.Web.Mvc;\n\nusing CMS.EventLog;\nusing CMS.SiteProvider;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Web.Mvc;\n\nnamespace MedioClinic.Utils\n{\n    public class ErrorHelper : IErrorHelper\n    {\n        public int UnprocessableStatusCode => 422;\n\n        public void CheckEditMode(HttpContextBase httpContext, string source)\n        {\n            if (!httpContext.Kentico().PageBuilder().EditMode)\n            {\n                throw new HttpException(403, \"The operation is only available when the page builder is in the edit mode.\");\n            }\n        }\n\n        public HttpStatusCodeResult HandleException(string source, string eventCode, Exception exception, int statusCode = 500)\n        {\n            LogException(source, eventCode, exception);\n\n            return new HttpStatusCodeResult(statusCode);\n        }\n\n        public void LogException(string source, string eventCode, Exception exception) =>\n            EventLogProvider.LogException(source, eventCode, exception, SiteContext.CurrentSiteID);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>FileManagementHelper</em> class.</p>\n<ol>\n  <li>In the <em>Utils</em> folder, create a new <em>“FileManagementHelper.cs”</em> class file.</li>\n  <li>Make the class implement the <em>IFileManagementHelper</em> interface, and let Visual Studio add the members through <em>Ctrl+.</em></li>\n  <li>In this step, implement the <em>AllowedExtensions</em> property and the <em>CheckPagePermissions</em> expression-bodied method, as per the code snippet.</li>\n  <li>Leave the file open for further edits.</li>\n</ol>","code":{"src":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Web;\n\nusing CMS.DataEngine;\nusing CMS.DocumentEngine;\nusing CMS.Membership;\nusing CMS.SiteProvider;\n\nnamespace MedioClinic.Utils\n{\n    public class FileManagementHelper : IFileManagementHelper\n    {\n        public static HashSet<string> AllowedExtensions =>\n            new HashSet<string>(new[]\n        {\n            \".bmp\",\n            \".gif\",\n            \".ico\",\n            \".png\",\n            \".wmf\",\n            \".jpg\",\n            \".jpeg\",\n            \".tiff\",\n            \".tif\"\n        }, StringComparer.OrdinalIgnoreCase);\n\n        public bool CheckPagePermissions(TreeNode page) => \n            page?.CheckPermissions(PermissionsEnum.Modify, SiteContext.CurrentSiteName, MembershipContext.AuthenticatedUser) ?? false;\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>FileManagementHelper</em> class.</p>\n<ol>\n  <li>Implement the <em>GetPage</em> method.</li>\n  <li>Make use of the <em>DocumentHelper</em> class for that.</li>\n  <li>Throw an exception if the call fails.</li>\n  <li>Leave the file open for further edits.</li>\n</ol>","code":{"src":"public TreeNode GetPage(int pageId)\n{\n\tvar page = DocumentHelper.GetDocument(pageId, null);\n\n\tif (page != null && !CheckPagePermissions(page))\n\t{\n\t\tthrow new HttpException(403, \"You are not authorized to upload an image to the page.\");\n\t}\n\n\treturn page;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>FileManagementHelper</em> class.</p>\n<ol>\n  <li>Implement the <em>EnsureUploadDirectory </em>method.</li>\n  <li>Check if the requested physical folder exists.</li>\n  <li>Create it if it doesn’t exist.</li>\n  <li>Leave the file open for further edits.</li>\n</ol>","code":{"src":"public string EnsureUploadDirectory(string directoryPath)\n{\n\tif (string.IsNullOrEmpty(directoryPath))\n\t{\n\t\tthrow new ArgumentException(\"Directory path must be specified.\", nameof(directoryPath));\n\t}\n\n\tif (!Directory.Exists(directoryPath))\n\t{\n\t\tDirectory.CreateDirectory(directoryPath);\n\t}\n\n\treturn directoryPath;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>FileManagementHelper</em> class.</p>\n<ol>\n  <li>Implement the <em>GetTempFilePath </em>method by simply combining the folder path with the file name.</li>\n  <li>Leave the file open for further edits.</li>\n</ol>","code":{"src":"public string GetTempFilePath(string directoryPath, string fileName)\n{\n\tif (string.IsNullOrEmpty(directoryPath))\n\t{\n\t\tthrow new ArgumentException(\"Directory path must be specified.\", nameof(directoryPath));\n\t}\n\n\tif (string.IsNullOrEmpty(fileName))\n\t{\n\t\tthrow new InvalidOperationException(\"Cannot upload file without file name.\");\n\t}\n\n\tif (!AllowedExtensions.Contains(Path.GetExtension(fileName)))\n\t{\n\t\tthrow new InvalidOperationException(\"Cannot upload file of this type.\");\n\t}\n\n\treturn Path.Combine(directoryPath, fileName);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>FileManagementHelper</em> class.</p>\n<ol>\n  <li>Implement the <em>AddUnsortedAttachment </em>method.</li>\n  <li>Use the <em>EnsureUploadDirectory</em> and <em>GetTempFilePath</em> methods you just created.</li>\n  <li>You can close the file now.</li>\n</ol>","code":{"src":"public Guid AddUnsortedAttachment(TreeNode page, string uploadDirectory, HttpPostedFileWrapper file)\n{\n\tif (page == null)\n\t{\n\t\tthrow new ArgumentNullException(nameof(page));\n\t}\n\n\tif (string.IsNullOrEmpty(uploadDirectory))\n\t{\n\t\tthrow new ArgumentException(\"Upload directory path must be specified.\", nameof(uploadDirectory));\n\t}\n\n\tif (file == null)\n\t{\n\t\tthrow new ArgumentNullException(nameof(file));\n\t}\n\n\tvar directoryPath = EnsureUploadDirectory(uploadDirectory);\n\tvar imagePath = GetTempFilePath(directoryPath, file.FileName);\n\tbyte[] data = new byte[file.ContentLength];\n\tfile.InputStream.Seek(0, SeekOrigin.Begin);\n\tfile.InputStream.Read(data, 0, file.ContentLength);\n\tCMS.IO.File.WriteAllBytes(imagePath, data);\n\tvar attachmentGuid = DocumentHelper.AddUnsortedAttachment(page, Guid.NewGuid(), imagePath).AttachmentGUID;\n\tCMS.IO.File.Delete(imagePath);\n\n\treturn attachmentGuid;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>As a final step in the process of implementing the static image widget, you should register your two interfaces, together with their implementations, in <em>Autofac</em>.</p>\n<ol>\n  <li>In the <em>App_Start</em> folder, open the <em>AutofacConfig.cs</em> file.</li>\n  <li>Locate the <em>DependencyResolver.SetResolver()</em> method call in the bottom of the file.</li>\n  <li>Place this code snippet above that method call.&nbsp;</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"// Registers the common file management helper\nbuilder.RegisterType<FileManagementHelper>().As<IFileManagementHelper>()\n\t.InstancePerRequest();\n\n// Registers the common error handler\nbuilder.RegisterType<ErrorHelper>().As<IErrorHelper>()\n\t.InstancePerRequest();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"40500527-3d82-451c-b5a5-4f065b2adf97","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Creating the backend support for the image widget","displayTitle":"Creating the backend support for the image widget"},{"body":"<p>If you’ve followed the instructions, you should be good to go with testing.</p>\n<p>Go to the <em>Pages</em> application, create a landing page section in the root of the content tree. Then, create a test landing page. Now you can give your new widget a try.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b54b92ae-90ba-42c9-ad2d-3ce8e03eaff3","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>After using the two previous widgets—the text widget and the static image widget—as a way to ramp up your knowledge, nothing should stop you from accepting the greatest challenge in this module of the MVC course: the image slideshow widget.</p>\n<p>The static image widget gave you all the necessary Kentico-related knowledge, applied into practice. However, so far, we haven’t diverted much from what can be found in the <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development\">documentation of page builder</a>.</p>\n<p>When building the slideshow widget, you’ll get your hands on some more advanced JavaScript development. Fear not; we won’t force you to do any rocket science at all. If you are an avid JavaScript practitioner, you’ll rather find the added knowledge to be “basics of safe JavaScript development”.</p>\n<p>Specifically, the new skills will allow you to:</p>\n<ul>\n  <li>Create JavaScript objects for universal usage in both the display mode and edit mode</li>\n  <li>Keep the browser’s code collision-free and organized</li>\n  <li>Serialize collections in widget properties</li>\n  <li>Make your editor run great with high-latency connections (run with fewer page redraws)</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"447b3414-e57e-4666-ac48-c035e4aa6946","_parentId":"3d1c52a9-f7b4-4da6-8916-c392f318597b","_type":"component","title":"General information","displayTitle":"General information"},{"body":"<p>As for the process of the implementation, we’ll have to slightly change our habits now. So far, you’ve been presented with general guidance in the <em>Theory</em> chapters, with task objectives in the eponymous <em>Task</em> chapters, and with copy-paste instructions in the <em>Demo</em> sections. We’ll switch from this ready-made approach to an iterative and more natural one, where we progressively reveal problems, and present you with the best solution afterwards. In two cases, we’ll even offer you two alternative solutions to a problem. As a result, this theory chapter won’t go into much detail, in favor of the demo chapters that will follow. Additionally, bear in mind that you’ll sometimes be editing the same pieces of code more than just once or twice.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"46de7f9d-e608-4baf-9340-2e0f05483591","_parentId":"3d1c52a9-f7b4-4da6-8916-c392f318597b","_type":"component","title":"A different approach to learning","displayTitle":"A different approach to learning"},{"body":"<p>The new widget will leverage all the design principles of the static image widget. It will also use the <em>Dropzone.js</em> component for image uploads, and it will also have its own dedicated backend controller.</p>\n<p>However, it will differ in the following ways:</p>\n<ul>\n  <li>There won’t be just one JavaScript component, but two.</li>\n  <li>The new kid on the block—<a href=\"http://idangero.us/swiper/\">Swiper.js</a>—will serve as a wrapper of multiple <em>Dropzone.js</em> objects.</li>\n  <li>Each slide in the swiper will be either an image HTML element drawn by the server code, or a <em>Dropzone</em> object (until the user saves the widget state).</li>\n  <li>Adding of new slides by users won’t require roundtrips to the server.</li>\n  <li>Users will be free to add and remove slides, in any position in the slide sequence.</li>\n  <li>Adding an image into a slide will only incur an <em>XMLHttpRequest</em> roundtrip (for the image upload), not a page redraw.</li>\n  <li>Once an image is dropped onto a slide, the user won’t be allowed to place another image on the same slide again.</li>\n  <li>To remove an image, the user will simply remove the slide.</li>\n  <li>When a slide is removed, the inline editor will make sure the respective page attachment is also deleted in Kentico.</li>\n  <li>The user will have a choice between drawing the live site’s images as fully responsive, or with a dimension ceiling.</li>\n  <li>In case of the latter, Kentico will resize the images so that they fit the maximum dimensions.</li>\n</ul>\n<p>Enough said. Let’s start with the coding!</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"dad14932-894a-4a7f-85e9-5674a2589254","_parentId":"3d1c52a9-f7b4-4da6-8916-c392f318597b","_type":"component","title":"Widget architecture","displayTitle":"Widget architecture"},{"body":"<p>Spoiler alert: Of course, they get along with each other well. However, we’ve promised we’d simulate the natural process of development. Here we go then.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the official snippets in the <a href=\"http://idangero.us/swiper/get-started/\">Get started</a> page, you’ll find that you can write markup of all the slides in the <em>Swiper</em> object, together with the <em>previous</em> and <em>next</em> buttons, and a few other controls.</p>","code":{"src":"<!-- Slider main container -->\n<div class=\"swiper-container\">\n    <!-- Additional required wrapper -->\n    <div class=\"swiper-wrapper\">\n        <!-- Slides -->\n        <div class=\"swiper-slide\">Slide 1</div>\n        <div class=\"swiper-slide\">Slide 2</div>\n        <div class=\"swiper-slide\">Slide 3</div>\n        ...\n    </div>\n    <!-- If we need pagination -->\n    <div class=\"swiper-pagination\"></div>\n\n    <!-- If we need navigation buttons -->\n    <div class=\"swiper-button-prev\"></div>\n    <div class=\"swiper-button-next\"></div>\n\n    <!-- If we need scrollbar -->\n    <div class=\"swiper-scrollbar\"></div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>You’ll also learn how to initialize the <em>Swiper</em> JavaScript object.</p>","code":{"src":"window.onload = function () {\n\t//initialize swiper when document ready\n\tvar mySwiper = new Swiper ('.swiper-container', {\n\t\t// Optional parameters\n\t\tdirection: 'vertical',\n\t\tloop: true\n\t})\n};","lang":"html"},"strapline":""},{"title":"","body":"<p>But wait! We need the slides to be dynamically added by content contributors. Also, we need each such new slide to have a <em>Dropzone</em> object embedded.</p>\n<p>That’s why we need to set up a tiny test project. Not an ASP.NET project, just a folder with a few static files.</p>\n<ol>\n  <li>Create a temporary folder for the test project (e.g. <em>“C:\\temp\\swiper-demo”</em>).</li>\n  <li>Copy the .js and .css files from the <em>MedioClinicStaticAssets &gt; swiper</em> folder in the assets archive, into a <em>“swiper”</em> subfolder of your project folder.</li>\n  <li>Also, copy the <em>dropzone.js</em> file from the <em>MedioClinic</em> project &gt; <em>Content &gt; InlineEditors &gt; ImageUploaderEditor</em> folder, into the root of your test project folder.</li>\n  <li>In your test project folder, create an <em>“index.html”</em> file.</li>\n  <li>Add the default markup from the <a href=\"http://idangero.us/swiper/get-started/\">Get started</a> page, with modifications seen in this code snippet.</li>\n</ol>","code":{"src":"<!DOCTYPE html>\n<html lang=\"en\">\n\n    <head>\n        <link rel=\"stylesheet\" href=\"./swiper/css/swiper.css\" />\n\t\t\n        <style>\n            .swiper-container {\n                width: 600px;\n                height: 300px;\n            }\n            .swiper-slide {\n                background-color: orange;\n            }\n        </style>\n    </head>\n\n    <body>\n        <!-- Slider main container -->\n        <div class=\"swiper-container\">\n            <!-- Additional required wrapper -->\n            <div class=\"swiper-wrapper\">\n                <!-- Slides -->\n                <div class=\"swiper-slide\"><div id=\"sw-1\">Slide 1 - <a class=\"dz-clickable\">click</a></div></div>\n                <div class=\"swiper-slide\"><div id=\"sw-2\">Slide 2 - <a class=\"dz-clickable\">click</a></div></div>\n                <div class=\"swiper-slide\"><div id=\"sw-3\">Slide 3 - <a class=\"dz-clickable\">click</a></div></div>\n            </div>\n\n            <!-- If we need navigation buttons -->\n            <div class=\"swiper-button-prev\"></div>\n            <div class=\"swiper-button-next\"></div>\n        </div>\n\n        <script src=\"./dropzone.js\"></script>\n        <script src=\"./swiper/js/swiper.js\"></script>\n    </body>\n</html>","lang":"html"},"strapline":""},{"title":"","body":"<p>Now you have a chassis to experiment on.</p>\n<ol>\n  <li>Below the two <em>&lt;script /&gt;</em> tags, place another one.</li>\n  <li>In that new tag, add code to instantiate the swiper. While doing so, you can test the configuration properties used in the future widget.</li>\n  <li>Don’t forget to capture a reference to your new <em>Swiper</em> object in a variable.</li>\n  <li>To add a new slide dynamically, call the <a href=\"http://idangero.us/swiper/api/\">appendSlide</a> function property.</li>\n  <li>Test your code in the browser. You’ll see the fourth slide added dynamically.</li>\n  <li>Now, try to add a <em>Dropzone</em> object into your new slide, together with a reference to a <em>“clickable”</em> element inside.</li>\n  <li>Reload the page and test the <em>Dropzone</em> object by clicking the <em>clickable</em> element. Upon clicking it, the file picker dialog opens.</li>\n  <li>You now know that you can put this basic principle into practice in your future widget.</li>\n</ol>","code":{"src":"<script>\n\tvar swiper = new Swiper('.swiper-container', {\n\t\tloop: true,\n\t\tspeed: 300,\n\t\tnavigation: {\n\t\t\tnextEl: '.swiper-button-next',\n\t\t\tprevEl: '.swiper-button-prev'\n\t\t},\n\t\teffect: 'fade',\n\t\tfadeEffect: {\n\t\t\tcrossFade: true\n\t\t}\n\t});\n\n\tswiper.appendSlide('<div class=\"swiper-slide\"><div id=\"sw-4\">Slide 4 - <a class=\"dz-clickable\">click</a></div></div>');\n\tvar dz7 = new Dropzone('div#sw-4', { url: '/whatever', clickable: document.querySelector('div#sw-4 a.dz-clickable') });\n</script>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1ff74111-e63d-4107-bcce-e049322791c5","_parentId":"2953fae0-4598-443b-ac4f-2482632a486d","_type":"component","title":"Demo: Verifying the compatibility","displayTitle":"Demo: Verifying the compatibility"},{"body":"<p>The next step towards the final result is to implement a working sample in your MVC project with the lowest possible level of complexity. In this phase, you’ll have to figure out means of serializing the data of a swiper via the widget properties class.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>If widget state is sent to Kentico as JSON in the background, it should be possible to have not only a single GUID value in your properties class, but also an array of them.</p>\n<ol>\n  <li>In the <em>Models &gt; Widgets</em> folder, create a new <em>“SlideshowWidget”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“SlideshowWidgetProperties.cs”</em> class file.</li>\n  <li>Insert the <em>“ImageIds”</em> property of type <em>“Guid[]”</em>.</li>\n</ol>","code":{"src":"using System;\n\nusing Kentico.PageBuilder.Web.Mvc;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class SlideshowWidgetProperties : IWidgetProperties\n    {\n        public Guid[] ImageIds { get; set; }\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a widget controller.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Widgets</em> folder, create a new <em>“SlideshowWidgetController.cs”</em> class file.</li>\n  <li>Implement the controller in a similar fashion as you’ve done for the static image widget’s controller.</li>\n  <li>The only difference should be the assumption of multiple GUIDs in the properties, also being reflected in the way the attachment(s) are retrieved from the database.</li>\n</ol>","code":{"src":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\n\nusing CMS.DocumentEngine;\nusing Kentico.PageBuilder.Web.Mvc;\nusing MedioClinic.Controllers.Widgets;\nusing MedioClinic.Models.Widgets;\n\n[assembly: RegisterWidget(\n\t\"MedioClinic.Widget.Slideshow\", \n\ttypeof(SlideshowWidgetController), \n\t\"Slideshow\", \n\tDescription = \"Slideshow widget that displays multiple images stored as page attachments.\", \n\tIconClass = \"icon-carousel\")]\n\nnamespace MedioClinic.Controllers.Widgets\n{\n    public class SlideshowWidgetController : WidgetController<SlideshowWidgetProperties>\n    {\n        public ActionResult Index()\n        {\n            var properties = GetProperties();\n            var images = GetImages(properties?.ImageIds);\n\n            return PartialView(\"Widgets/_SlideshowWidget\", new SlideshowWidgetViewModel\n            {\n                Images = images,\n            });\n        }\n\n        protected IEnumerable<DocumentAttachment> GetImages(IEnumerable<Guid> guids)\n        {\n            var page = GetPage();\n\n            if (guids != null && guids.Any())\n            {\n                var guidList = guids.ToList();\n\n                return page?\n                    .AllAttachments\n                    .Where(attachment => guids.Any(guid => guid == attachment.AttachmentGUID))\n                    .OrderBy(attachment => guidList.IndexOf(attachment.AttachmentGUID))\n                    .ToList();\n            }\n\n            return new List<DocumentAttachment>();\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a widget view model.</p>\n<ol>\n  <li>In the <em>Models &gt; Widgets &gt; SlideshowWidget</em> folder, create a new <em>“SlideshowWidgetViewModel.cs”</em> class file.</li>\n  <li>Add the <em>“Images”</em> property as a sequence of <em>CMS.DocumentEngine.DocumentAttachment</em> objects.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\n\nusing CMS.DocumentEngine;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class SlideshowWidgetViewModel\n    {\n        public IEnumerable<DocumentAttachment> Images { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In your widget view, you should loop through the attachments, and render them.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; Widgets</em> folder, create a new <em>“_SlideshowWidget.cshtml”</em> view file.</li>\n  <li>Add the basic Razor code, together with a statement to invoke the inline editor’s partial view, according to this code snippet.</li>\n</ol>","code":{"src":"@using CMS.DocumentEngine\n@using MedioClinic.Models.Widgets\n@using MedioClinic.Models.InlineEditors\n@model SlideshowWidgetViewModel\n\n@{\n    var editMode = Context.Kentico().PageBuilder().EditMode;\n}\n\n<div class=\"swiper-container\">\n    <div class=\"swiper-wrapper\">\n        @if (Model.Images != null && Model.Images.Any())\n        {\n            // Loop through all images.\n            foreach (var image in Model.Images)\n            {\n                if (image != null)\n                {\n\t\t\t\t\tstring imageUrl = Url.KenticoImageUrl(image.GetPath());\n\n                    <div class=\"swiper-slide\">\n                        <img src=\"@Html.Raw(imageUrl)\" />\n                    </div>\n                }\n            }\n        }\n    </div>\n\n\t<div class=\"swiper-button-prev\"></div>\n\t<div class=\"swiper-button-next\"></div>\n\n    @if (editMode)\n    {\n        Html.RenderPartial(\"InlineEditors/_SlideshowEditor\", new SlideshowEditorViewModel\n        {\n            PropertyName = nameof(SlideshowWidgetProperties.ImageIds),\n            Images = Model.Images,\n        });\n    }\n</div>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ce871ba5-a5ce-4467-94ad-ad7c4374ba9c","_parentId":"2feed756-9b7e-4786-b5ec-326538568255","_type":"component","title":"Demo: Creating a single-swiper setup","displayTitle":"Demo: Creating a single-swiper setup"},{"body":"<p>The code can now render the images. However, to make them transition from one to another, you need to instantiate a <em>Swiper</em> object.</p>\n<p>For educational purposes, just assume that we only need one <em>Swiper</em> object in the whole page. Later, we’ll bring support for multiple instances.</p>\n<p>Now, an important question arises: Can you instantiate your <em>Swiper</em> object the same way you did the other JavaScript objects before? Well, you can’t. The swiper doesn’t run only in the edit mode, as an inline editor. It also runs in the display mode on the live site.</p>\n<p>Given these circumstances, how would you go about spinning up your swiper?</p>\n<p>You need your own JavaScript namespace.</p>\n<p>JavaScript namespaces can be created as self-invoking functions (<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">IIFE</a>), which form boundaries to the otherwise ubiquitous phenomenon of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#Description\">variable hoisting</a>. This way, you’re free to create private properties and functions on one side, along with externally-visible ones on the other side. All of that caters to collision-free JavaScript environments. Without IIFEs, you’d pollute the global “window” object with lots of unwanted public variables.</p>\n<p>Ideally, this namespace should be named according to your project’s namespace (i.e. the company name in our case).</p>\n<p>The good news is also that JavaScript namespaces can be nested into sub-namespaces. In our case, we can create a <em>“window.medioClinic.slideshowWidget”</em> namespace.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>How do we achieve that?</p>\n<ol>\n  <li>In the <em>Content &gt; Widgets</em> folder, create a new <em>“SlideshowWidget”</em> subfolder.</li>\n  <li>Copy the <em>“swiper”</em> folder that you’ve used in our test project, into that subfolder. Kentico will make sure its content is bundled and minified along with the widget’s other assets.</li>\n  <li>In the <em>SlideshowWidget</em> subfolder, create a <em>“slideshow-widget.js”</em> file.</li>\n  <li>At the top of the file, add the statement that checks for the existence of the <em>“window.medioClinic”</em> variable (namespace). If it finds one, it simply re-assigns it to itself. Otherwise, it creates an empty object (namespace).</li>\n  <li>Below that, add the IIFE. As an argument, supply the same kind of statement as you’ve created in the first line. This time, create the nested namespace.</li>\n  <li>In the body of the IIFE, define the <em>“initSwiper”</em> function property you’re about to invoke from within your widget view.</li>\n</ol>","code":{"src":"window.medioClinic = window.medioClinic || {};\n\n(function (slideshowWidget) {\n    slideshowWidget.initSwiper = function () {\n        var configuration = {\n            loop: false,\n            speed: 300,\n            navigation: {\n                nextEl: \".swiper-button-next\",\n                prevEl: \".swiper-button-prev\"\n            },\n            effect: \"fade\",\n            fadeEffect: {\n                crossFade: true\n            },\n            autoHeight: true\n        };\n\n        var swiper = new Swiper(\".swiper-container\", configuration);\n    };\n\n}(window.medioClinic.slideshowWidget = window.medioClinic.slideshowWidget || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You’re now free to invoke your <em>initSwiper</em> function in your view.</p>\n<p>You want to make sure the function is called after the <a href=\"https://docs.kentico.com/k12/developing-websites/page-builder-development/developing-widgets-in-mvc\">DOM is loaded</a>.</p>\n<ol>\n  <li>In your <em>Views &gt; Shared &gt; Widgets &gt; _SlideshowWidget.cshtml</em> file add this <em>&lt;script /&gt;</em> tag to the very end of the file.</li>\n  <li>Unfortunately, due to limitations in the ASP.NET MVC design, we cannot add the script via the <em>@section</em> directive (it can only be used in parent views, not partial views).</li>\n</ol>","code":{"src":"@* Partial views don't support @section directives. *@\n<script>\n    @{\n        var initSwiperLiteral = \"window.medioClinic.slideshowWidget.initSwiper();\";\n    }\n\n    // Initialize the current Swiper object.\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", function () {\n                @Html.Raw(initSwiperLiteral)\n            });\n    } else {\n        @Html.Raw(initSwiperLiteral)\n    }\n</script>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1c28baf3-8aca-4025-b797-48b9ef0834c6","_parentId":"528b76ff-1935-406b-b7c1-6c5eb657f0a5","_type":"component","title":"Creating an instance of Swiper.js","displayTitle":"Creating an instance of Swiper.js"},{"body":"<p>In this phase, let’s settle on having just a basic goal: adding a few dummy images to the swiper (without saving them as page attachments), and serializing their GUIDs as the widget state in the database.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>As you’ve already made provisions to render the slides (with their images) in the widget’s view, the remaining responsibility of the inline editor is just to render controls that add or remove slides. It should also authenticate URLs to upload and delete the page attachments in your future backend controller.</p>\n<ol>\n  <li>In your <em>Views &gt; Shared &gt; InlineEditors</em> folder, create a new <em>“_SlideshowEditor.cshtml”</em> view file.</li>\n  <li>Make the view strongly-typed against the future <em>“SlideshowEditorViewModel”</em> (implemented in the next step).</li>\n  <li>Add the same <em>GetActionUrl</em> Razor method that you’ve created in the static image widget view. This time, it should point to the future <em>“SlideshowManagement”</em> controller.</li>\n  <li>Add the call to the <em>BeginInlineEditor</em> helper and supply the authenticated URLs as the route data arguments.</li>\n  <li>Render the <em>“plus”</em> and <em>“minus”</em> buttons.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@model SlideshowEditorViewModel\n\n@{\n    // Gets the URL to the SlideshowManagementController's action.\n    HtmlString GetActionUrl(string action)\n    {\n        return Url.Kentico().AuthenticateUrl(Url.Action(action, \"SlideshowManagement\", new\n        {\n            pageId = Context.Kentico().PageBuilder().PageIdentifier\n        }), false);\n    }\n}\n\n@using (Html.Kentico().BeginInlineEditor(\"slideshow-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"kn-slideshow-editor\",\n        data_upload_url = GetActionUrl(\"Upload\").ToString(),\n        data_delete_url = GetActionUrl(\"Delete\").ToString(),\n    }))\n{\n    <ul class=\"kn-slideshow-buttons\">\n        <li>\n            <button class=\"kn-swiper-plus\">+</button>\n        </li>\n        <li>\n            <button class=\"kn-swiper-minus\">-</button>\n        </li>\n    </ul>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>As you could see, the only piece of data used in the editor’s view is the codename of the widget property.</p>\n<p>You may think of not creating a view model and using the <em>InlineEditorViewModel</em> class instead.</p>\n<p>However, soon you’ll want to ask about all the images in the editor’s view.</p>\n<ol>\n  <li>In your <em>Models &gt; InlineEditors</em> folder, create a new <em>“SlideshowEditor”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>“SlideshowEditorViewModel”</em> class file.</li>\n  <li>Inherit from <em>InlineEditorViewModel</em>.</li>\n  <li>Add the Images property member.</li>\n</ol>","code":{"src":"namespace MedioClinic.Models.InlineEditors\n{\n    public class SlideshowEditorViewModel : InlineEditorViewModel\n    {\n\t\tpublic IEnumerable<DocumentAttachment> Images { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, create a stub of the frontend initialization logic of your editor.</p>\n<p>The <em>“init”</em> property function will point to other functions, which you’ll implement in the next step.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors</em> folder, create a new <em>“SlideshowEditor”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>“slideshow-editor.js”</em> file.&nbsp;</li>\n  <li>In your <em>“init”</em> function, add variables capturing the main objects.</li>\n  <li>Also, call a set of future functions to collect IDs of all images or dropzones in the swiper.</li>\n  <li>Then, create an <em>“addSlide”</em> nested function, and attach it to the <em>“click”</em> event of the plus button that you’ve captured to a variable (at the top).</li>\n  <li>You want your slides (images) to have non-colliding IDs in the page. A great way to achieve such a thing is to use GUIDs. For now, just let JavaScript generate random GUIDs through a function that will be defined later. Note that each such GUID needs to be prefixed, because IDs of HTML elements must start with a letter.</li>\n  <li>In this code snippet, you may have noticed the use of a new namespace <em>“window.medioClinic.dropzoneCommon”</em>. This is where you’ll put code that caters to both the static image and slideshow widget.</li>\n  <li>In the handler of the <em>“success”</em> event, you’ll add the GUID of the new slide into the right position in the <em>“imageGuids”</em> array, and send the GUIDs to Kentico via a function that will be defined later.</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"slideshow-editor\", {\n        init: function (options) {\n            var imageGuidPrefix = \"i-\";\n            var editor = options.editor;\n\t\t\tvar swiper = editor.parentElement.swiper;\n            var plusButton = editor.parentElement.querySelector(\"ul.kn-slideshow-buttons .kn-swiper-plus\");\n            var minusButton = editor.parentElement.querySelector(\"ul.kn-slideshow-buttons .kn-swiper-minus\");\n\t\t\tvar slideIds = window.medioClinic.slideshowWidget.collectImageIds(swiper);\n\n            var imageGuids = slideIds.map(function (slideId) {\n                return window.medioClinic.slideshowWidget.getGuidFromId(slideId);\n            });\n\n            /** Adds a new slide to the Swiper object, together with a new Dropzone object. */\n            var addSlide = function () {\n                var tempGuid = generateUuid();\n                var tempId = imageGuidPrefix + tempGuid;\n\n                var markup =\n                    buildSlideMarkup(tempId, \"Drop image here or <a class=\"dz-clickable\">click</a> to browse\");\n\n                var activeIndexWhenAdded = swiper.slides.length > 0 ? swiper.activeIndex + 1 : 0;\n                swiper.addSlide(activeIndexWhenAdded, markup);\n                swiper.slideNext();\n\n                var dropzone = new Dropzone(editor.parentElement.querySelector(\"div#\" + tempId + \".dropzone\"), {\n                    acceptedFiles: window.medioClinic.dropzoneCommon.acceptedFiles,\n                    maxFiles: 1,\n                    url: editor.getAttribute(\"data-upload-url\"),\n                    clickable: editor.parentElement.querySelector(\"div#\" + tempId + \".dropzone a.dz-clickable\"),\n                    dictInvalidFileType: \"Unsupported file type. Please upload files of the following types: .bmp, .gif, .ico, .png, .wmf, .jpg, .jpeg, .tiff, .tif\"),\n                });\n\n                dropzone.on(\"success\",\n                    function (event) {\n                        var newGuid = tempGuid;\n                        var childElementIndex = getChildElementIndex(dropzone.element);\n                        imageGuids.splice(childElementIndex, 1, newGuid);\n                        dispatchBuilderEvent(imageGuids);\n                    });\n            };\n\n            plusButton.addEventListener(\"click\", addSlide);\n        }\n    });\n})();","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You can now implement the local methods that you’ve called from your <em>init</em> function.</p>\n<ol>\n  <li>In the <em>init</em> function’s body, locate the last statement that assigns the <em>addSlide</em> function as an event handler.</li>\n  <li>Place this code snippet right above that statement.</li>\n  <li>Note that the <em>dispatchBuilderEvent</em> function does the ordinary job of creating a CustomEvent object. It passes the array of GUIDs into the browser’s global store (and the Kentico database, respectively).</li>\n</ol>","code":{"src":"var getChildElementIndex = function (dropzoneElement) {\n\treturn Array.prototype.slice.call(dropzoneElement.parentElement.parentElement.children)\n\t\t.indexOf(dropzoneElement.parentElement);\n};\n\nvar buildSlideMarkup = function (id, dropText) {\n\treturn \"<div class=\\\"swiper-slide dropzone-previews\\\"><div class=\\\"dropzone\\\" id=\\\"\"\n\t\t+ id + \"\\\"><div class=\\\"dz-message\\\">\" + dropText + \"</div></div></div>\";\n};\n\nvar generateUuid = function () {\n\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n\t\tvar r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 0x3 | 0x8;\n\n\t\treturn v.toString(16);\n\t});\n};\n\nvar dispatchBuilderEvent = function (imageGuids) {\n\tvar customEvent = new CustomEvent(\"updateProperty\",\n\t\t{\n\t\t\tdetail: {\n\t\t\t\tname: options.propertyName,\n\t\t\t\tvalue: imageGuids,\n\t\t\t}\n\t\t});\n\n\teditor.dispatchEvent(customEvent);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Since you need to specify the same set of allowed file name extensions in the slideshow editor as in the static image editor, you can create a namespace to concentrate such common code.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors</em> folder, create a new <em>“Shared”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>“dropzone-common.js”</em> file to hold the common code.</li>\n  <li>In the same way as before, create an IIFE.</li>\n  <li>Add the <em>“acceptedFiles”</em> property to capture the literal.</li>\n  <li>While having this file open, move the <em>“processErrors”</em> function from the <em>image-uploader-editor.js</em> file into this file.</li>\n  <li>Adjust the rest of your source code to use the resulting <em>“dropzoneCommon.processErrors”</em> function instead.</li>\n  <li>For the time being, you don’t have to worry about the presence of the <em>“localizationService”</em> parameter. You’ll make use of it later in the course.</li>\n</ol>","code":{"src":"window.medioClinic = window.medioClinic || {};\n\n(function (dropzoneCommon) {\n    dropzoneCommon.acceptedFiles = \".bmp, .gif, .ico, .png, .wmf, .jpg, .jpeg, .tiff, .tif\";\n\n    dropzoneCommon.processErrors = function (statusCode, localizationService) {\n        var errorFlag = \"error\";\n\n\t\tif (statusCode >= 500) {\n\t\t\tmedioClinic.showMessage(\"The upload of the image failed. Please contact the system administrator.\"), errorFlag);\n\t\t} else if (statusCode === 422) {\n\t\t\tmedioClinic.showMessage(\"The uploaded image could not be processed. Please contact the system administrator.\"), errorFlag);\n\t\t} else {\n\t\t\tmedioClinic.showMessage(\"An unknown error happened. Please contact the system administrator.\"), errorFlag);\n\t\t}\n    };\n}(window.medioClinic.dropzoneCommon = window.medioClinic.dropzoneCommon || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>As part of the little refactoring in the previous step, move the <em>showMessage</em> function from the <em>image-uploader-editor.js</em> file to the main.js file.</p>\n<ol>\n  <li>In the <em>Scripts &gt; Master &gt; main.js</em> file, add an IIFE to the bottom of the file.</li>\n  <li>Move the <em>showMessage</em> function, together with its <em>buildMessageMarkup</em> companion, to the body of the IIFE.</li>\n  <li>Adjust the rest of the code base to this change.</li>\n</ol>","code":{"src":"(function (medioClinic) {\n    medioClinic.showMessage = function (message, type) {\n        var messageElement = document.querySelector(\".kn-system-messages\");\n\n        if (message && type) {\n            if (type === \"info\") {\n                messageElement.appendChild(buildMessageMarkup(message, \"light-blue lighten-5\"));\n                console.info(message);\n            } else if (type === \"warning\") {\n                messageElement.appendChild(buildMessageMarkup(message, \"yellow lighten-3\"));\n                console.warn(message);\n            } else if (type === \"error\") {\n                messageElement.appendChild(buildMessageMarkup(message, \"red lighten-3\"));\n                console.error(message);\n            }\n        }\n    };\n\n    var buildMessageMarkup = function (message, cssClasses) {\n        var paragraph = document.createElement(\"p\");\n        paragraph.classList = cssClasses;\n        paragraph.innerText = message;\n\n        return paragraph;\n    };\n}(window.medioClinic = window.medioClinic || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In the <em>init</em> function, you’ve also called two functions in the <em>window.medioClinic.slideshowWidget</em> namespace. Here’s the source code.</p>\n<ol>\n  <li>In the <em>Content &gt; Widgets &gt; SlideshowWidget &gt; slideshow-widget.js</em> file, add the function from the code snippet into the IIFE.</li>\n  <li>The function iterates over the slides to collect IDs of dropzones in the swiper and returns them in an array.</li>\n</ol>","code":{"src":"slideshowWidget.getGuidFromId = function (id) {\n\treturn id.slice(-36);\n};\n\nslideshowWidget.collectImageIds = function (swiper) {\n\tvar output = [];\n\n\tfor (var s = 0; s <= swiper.slides.length - 1; s++) {\n\t\tvar childElement = swiper.slides[s].children[0];\n\t\toutput.push(childElement.id);\n\t}\n\n\treturn output;\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ef8169b9-3b88-4317-bfe8-d5b35d8d36f4","_parentId":"768085d0-6934-45ea-bc4c-c3ff4eda3bef","_type":"component","title":"Adding a basic inline editor","displayTitle":"Adding a basic inline editor"},{"body":"<p>At this point, you can test the transfer of GUIDs “over the wire”, from the browser, to the database, in the form of an array.</p>\n<p>If you haven’t created your testing page earlier, you can do so now. Go to the Pages application, create a landing page section in the root of the content tree. Then, create a test landing page.</p>\n<p>Add a slideshow widget. Add a few slides, together with their dummy images, and save the page.</p>\n<p>When you place a breakpoint into the <em>SlideshowWidgetController</em>, namely in the line where you call the <em>GetProperties</em> method of the base class, you should be able to see an array of <em>System.Guid</em> values in the properties.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"94242fa4-897a-4956-9154-19c040fe1cc6","_parentId":"768085d0-6934-45ea-bc4c-c3ff4eda3bef","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>So far, we’ve covered the basic scenario of having one swiper in the page. The next requirement to fulfill is to bring support for multiple swipers in one page. If you think about this requirement for a while, you’ll realize that within the lexical scope of the <em>window.kentico.pageBuilder.registerInlineEditor</em> function call, there’s no way of tracking on which of the swipers the code works.</p>\n<p>We’ve designed the first version of the <em>window.medioClinic.slideshowWidget.initSwiper</em> function so that it uses a hard-coded selector to get the swiper (<em>“.swiper-container”</em>). While this works fine in cases where we know there’s just one instance in the page, it will cease to work once we add another.</p>\n<p>You need two things:</p>\n<ul>\n  <li>A way of assigning each swiper its own unique ID</li>\n  <li>Some means of keeping track of all swipers in the page</li>\n</ul>\n<p>The first task can be dealt with when the widget renders its markup, the second with code that:</p>\n<ul>\n  <li>Either gets a reference to the current swiper from DOM elements.</li>\n  <li>Or, a set of functions that keep track of swipers in a central location.</li>\n</ul>\n<p>The latter option is best implemented in the <em>window.medioClinic.slideshowWidget</em> namespace. Why in this namespace? Because you want to create <em>Swiper</em> objects no matter if the widget runs in display mode or in edit mode.</p>\n<div class=\"infobox note\"><p>In our case, we’re lucky because the <em>Swiper.js</em> component provides access to the <em>Swiper</em> object by exposing it as a <em>“swiper”</em> property of its parent HTML element.</p>\n<p>However, there are JavaScript components out there that omit providing such access.</p>\n<p>Therefore, in this phase, we’ll present you with two alternative ways of implementing the swiper management functionality.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The best place to address the first task is in the widget partial view.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; Widgets &gt; SlideshowWidget &gt; _SlideshowWidget.cshtml</em> file, add an expression that factors the swiper ID by concatenating <em>“swiper-“</em> and a new <em>System.Guid</em> value.</li>\n  <li>Use the result as the ID of the top-most <em>&lt;div /&gt;</em> HTML element.</li>\n</ol>","code":{"src":"@{\n    var swiperId = \"swiper-\" + Guid.NewGuid().ToString().ToLower();\n}\n\n<div class=\"swiper-container\" id=\"@swiperId\">\n    <div class=\"swiper-wrapper\">\n\t\t...\n\t</div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<ol>\n  <li>Add a <em>“SwiperId”</em> string property to the <em>SlideshowEditorViewModel</em> class you’ve created earlier.</li>\n  <li>Pass the value into the <em>“data_swiper_guid”</em> route data argument in the <em>_SlideshowEditor.cshtml</em> file you’ve created.</li>\n</ol>","code":{"src":"@using (Html.Kentico().BeginInlineEditor(\"slideshow-editor\", Model.PropertyName,\n    new\n    {\n        ...\n\t\tdata_swiper_guid = Model.SwiperId,\n        ...\n    }))\n{\n\t...\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let’s now take the reference to the <em>Swiper</em> object. In this step, you’ll implement the first alternative, where you’ll rely on the <em>swiper</em> property of the HTML element (see the info box above).</p>\n<ol>\n  <li>In the <em>Content &gt; Widgets &gt; SlideshowWidget &gt; slideshow-widget.js</em> file, add a new <em>“slideshowWidget.getCurrentSwiper”</em> function.</li>\n  <li>Take an <em>“editor”</em> parameter representing the inline editor’s HTML element.</li>\n  <li>In the body, just return the <em>“swiper”</em> property of the editor’s parent element.</li>\n</ol>","code":{"src":"slideshowWidget.getCurrentSwiper = function (editor) {\n\treturn editor.parentElement.swiper;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>If the <em>Swiper.js</em> component hadn’t provided the <em>swiper</em> JavaScript property, you would’ve needed to resort to the second alternative approach: to store references to all swipers in an array.</p>\n<p>That’s exactly what you’ll implement in the following few steps. This is the second alternative approach that you’ll need to take with certain JavaScript components that do not have proper references.</p>\n<ol>\n  <li>In the <em>slideshow-widget.js</em> file, add a <em>“slideshowWidget.getSwiper”</em> function.</li>\n  <li>Each of the array elements will be composed of a swiper ID, and the <em>Swiper</em> object itself.</li>\n  <li>The function filters the <em>“swipers”</em> array, and returns either null or the swiper.</li>\n</ol>","code":{"src":"var swipers = [];\n\nslideshowWidget.getSwiper = function (id) {\n\tvar found = swipers.filter(function (currentSwiper) {\n\t\treturn currentSwiper.id === id;\n\t});\n\n\tif (found.length > 0) {\n\t\treturn found[0];\n\t} else {\n\t\treturn null;\n\t}\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>The <em>getSwiper</em> function will be used in another function, <em>“addSwiper”</em>.</p>\n<ol>\n  <li>In the <em>slideshow-widget.js</em> file, add a <em>“slideshowWidget.addSwiper”</em> function.</li>\n  <li>It calls <em>getSwiper</em> to determine the existence of such a swiper, and adds the swiper if needed.</li>\n</ol>","code":{"src":"slideshowWidget.addSwiper = function (id, swiper) {\n\tvar found = window.medioClinic.slideshowWidget.getSwiper(id);\n\n\tif (!found) {\n\t\tvar swiperToAdd = {\n\t\t\tid: id,\n\t\t\tswiper: swiper\n\t\t};\n\n\t\tswipers.push(swiperToAdd);\n\t}\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Now, add a <em>“removeSwiper”</em> function.</p>\n<ol>\n  <li>In the <em>slideshow-widget.js</em> file, add a <em>“slideshowWidget.removeSwiper”</em> function.</li>\n  <li>It simply removes a swiper from the array.</li>\n</ol>","code":{"src":"slideshowWidget.removeSwiper = function (id) {\n\tfor (var i = swipers.length - 1; i >= 0; i--) {\n\t\tif (swipers[i].id === id) {\n\t\t\tswipers.splice(i, 1);\n\t\t}\n\t}\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Adapt the <em>initSwiper</em> method to the new swiper management infrastructure.&nbsp;</p>\n<ol>\n  <li>In the <em>slideshow-widget.js</em> file, edit the <em>slideshowWidget.initSwiper</em> function.</li>\n  <li>Add a <em>“swiperId”</em> parameter to it.</li>\n  <li>Concatenate it with the <em>“#”</em> sign to get the selector.</li>\n  <li>Use the selector to initialize the <em>Swiper</em> object.</li>\n  <li>Call <em>“addSwiper”</em> to add the new swiper to the array.</li>\n</ol>","code":{"src":"slideshowWidget.initSwiper = function (swiperId) {\n\tvar swiperSelector = \"#\" + swiperId;\n\n\tvar configuration = {\n\t\t...\n\t};\n\n\tvar swiper = new Swiper(swiperSelector, configuration);\n\twindow.medioClinic.slideshowWidget.addSwiper(swiperId, swiper);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You can now swap the code in the body of the <em>getCurrentSwiper</em> function to reflect the second alternative approach you’ve just implemented.</p>\n<ol>\n  <li>In the <em>slideshow-widget.js</em> file, edit the <em>slideshowWidget.getCurrentSwiper</em> function.</li>\n  <li>Add a <em>“swiperGuidAttribute”</em> parameter that denotes the name of the <em>data-*</em> attribute with the swiper ID.</li>\n  <li>Call into <em>getSwiper</em> to get the proper <em>Swiper</em> object, according to the <em>data-*</em> attribute value.</li>\n</ol>","code":{"src":"slideshowWidget.getCurrentSwiper = function (editor, swiperGuidAttribute) {\n\treturn window.medioClinic.slideshowWidget.getSwiper(editor.getAttribute(swiperGuidAttribute)).swiper;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Finally, you should also replace the code of your <em>init</em> function that gets a reference to the current swiper.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; SlideshowEditor &gt; slideshow-editor.js</em> file, locate the first lines of the <em>init</em> function.</li>\n  <li>In there, replace the statement that produces <em>“var swiper”</em>.</li>\n  <li>In the new statement, make use of the <em>window.medioClinic.slideshowWidget.getCurrentSwiper</em> function.</li>\n  <li>To specify the name of the <em>data-*</em> attribute, use the <em>window.medioClinic.slideshowWidget.swiperGuidAttribute</em> constant.</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"slideshow-editor\", {\n        init: function (options) {\n\t\t\t...\n            var swiper = window.medioClinic\n                .slideshowWidget\n                .getCurrentSwiper(editor, window.medioClinic.slideshowWidget.swiperGuidAttribute);\n\t\t\t...\n        },\n\t\t...\n    });\n})();","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9ddf59f4-6761-4e49-a995-683de36abf44","_parentId":"6e9ad87d-ac0e-43fc-86d6-1796f3367a32","_type":"component","title":"Demo: Adding support for multiple swipers","displayTitle":"Demo: Adding support for multiple swipers"},{"body":"<p>It is time to fill one of the major remaining gaps—to implement the slideshow management controller. It will upload the images to Kentico as page attachments, and it will also be able to delete them in case the user removes a slide with an image in it.</p>\n<p>Before you set off, you might want to add the required counterpart to the <em>addSlide</em> JavaScript function of your inline editor: the <em>“removeSlide”</em> function.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The <em>removeSlide</em> function will collect the IDs of all slides, find the ID of the currently displayed slide, and ultimately it will issue an <em>XMLHttpRequest</em> to the controller to delete the page attachment.</p>\n<ol>\n  <li>In the <em>slideshow-editor.js</em> file, locate the <em>addSlide</em> function in the body of the <em>init</em> property function.</li>\n  <li>Add the <em>“removeSlide”</em> function next to it, according to the code snippet.</li>\n</ol>","code":{"src":"/** Removes a slide from the current Swiper object. */\nvar removeSlide = function () {\n\tvar slideChildElement = swiper.slides[swiper.activeIndex].children[0];\n\tvar childElementIndex = getChildElementIndex(slideChildElement);\n\n\tif (imageGuids[childElementIndex]) {\n\t\tvar body = \"attachmentGuid=\" + imageGuids[childElementIndex];\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open(\"DELETE\", editor.getAttribute(\"data-delete-url\"), true);\n\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState === 4 && xhr.status === 204) {\n\t\t\t\twindow.medioClinic.showMessage(\n\t\t\t\t\t\"Could not remove the slide image from page attachments.\", \"warning\");\n\t\t\t\tconsole.warn(\n\t\t\t\t\t\"Could not remove the slide image from page attachments.\");\n\t\t\t}\n\t\t};\n\n\t\txhr.send(body);\n\t}\n\n\timageGuids.splice(childElementIndex, 1);\n\tswiper.removeSlide(swiper.activeIndex);\n\tdispatchBuilderEvent(imageGuids);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Controller time!</p>\n<ol>\n  <li>In <em>Controllers &gt; InlineEditors</em>, add a new <em>“SlideshowManagementController.cs”</em> class file.</li>\n  <li>As a first step, add the necessary boilerplate code to support your action methods.</li>\n  <li>Namely, the previously-implemented file management helper and error helper.</li>\n  <li>Also, a path to a temporary file system folder.</li>\n</ol>","code":{"src":"using System;\nusing System.Net;\nusing System.Web;\nusing System.Web.Mvc;\n\nusing CMS.DocumentEngine;\nusing MedioClinic.Utils;\n\nnamespace MedioClinic.Controllers\n{\n    public class SlideshowManagementController : Controller\n    {\n\t\tprotected string TempPath => $\"{Server.MapPath(@\"~\\\")}App_Data\\\\Temp\\\\SlideshowEditor\";\n\n\t\tprotected IFileManagementHelper FileManagementHelper { get; }\n\n\t\tprotected IErrorHelper ErrorHelper { get; }\n\n\t\tpublic SlideshowManagementController(IFileManagementHelper fileManagementHelper, IErrorHelper errorHandler)\n\t\t{\n\t\t\tFileManagementHelper = fileManagementHelper ?? throw new ArgumentNullException(nameof(fileManagementHelper));\n\t\t\tErrorHelper = errorHandler ?? throw new ArgumentNullException(nameof(ErrorHelper));\n\t\t}\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now add the <em>“Upload”</em> action method, similarly as you’ve done in the <em>ImageUploaderController</em> class.</p>\n<ol>\n  <li>The method checks for edit mode through the error helper.</li>\n  <li>Then, it gets the current page.</li>\n  <li>Lastly, it adds the attachment through the file management helper.</li>\n  <li>Should anything go wrong down in the call stack, it returns proper HTTP status codes back to your JavaScript code.</li>\n</ol>","code":{"src":"// POST: SlideshowManagement/Upload\n[HttpPost]\npublic ActionResult Upload(int pageId)\n{\n\tErrorHelper.CheckEditMode(HttpContext, nameof(SlideshowManagementController.Upload));\n\tvar page = FileManagementHelper.GetPage(pageId);\n\tvar imageGuid = Guid.Empty;\n\n\tif (Request.Files[0] is HttpPostedFileWrapper file && file != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\timageGuid = FileManagementHelper.AddUnsortedAttachment(page, TempPath, file);\n\t\t}\n                catch (Exception ex)\n                {\n                    return ErrorHelper.HandleException(\n                        nameof(SlideshowManagementController), \n                        nameof(Upload),\n                        ex, \n                        ErrorHelper.UnprocessableStatusCode);\n                }\n\n\t\treturn Json(new { guid = imageGuid });\n\t}\n\n\treturn new HttpStatusCodeResult(ErrorHelper.UnprocessableStatusCode);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>To finish the controller, you now can add the <em>“Delete”</em> action method.</p>\n<ol>\n  <li>As usual, the method takes the page ID to know which page attachments to delete.</li>\n  <li>Additionally, it takes the attachment GUID from the body of the <em>XMLHttpRequest</em> issued by your JavaScript code.</li>\n  <li>Again, in case anything happens in the background code, it returns various HTTP status codes.</li>\n</ol>","code":{"src":"// DELETE: SlideshowManagement/Delete\n[HttpDelete]\npublic ActionResult Delete(int pageId, [System.Web.Http.FromBody] Guid? attachmentGuid)\n{\n\tErrorHelper.CheckEditMode(HttpContext, nameof(SlideshowManagementController.Delete));\n\n\tif (attachmentGuid != null)\n\t{\n\t\tvar page = FileManagementHelper.GetPage(pageId);\n\n\t\tif (page != null)\n\t\t{\n\t\t\tvar attachment = DocumentHelper.GetAttachment(page, attachmentGuid.Value);\n\n\t\t\tif (attachment != null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tDocumentHelper.DeleteAttachment(page, attachmentGuid.Value);\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\tErrorHelper.HandleException(\n\t\t\t\t\t\tnameof(SlideshowManagementController), \n\t\t\t\t\t\tnameof(Delete), \n\t\t\t\t\t\tex, \n\t\t\t\t\t\tConvert.ToInt32(HttpStatusCode.NoContent));\n\t\t\t\t}\n\n\t\t\t\treturn new HttpStatusCodeResult(HttpStatusCode.Accepted);\n\t\t\t} \n\t\t}\n\t}\n\n\treturn new HttpStatusCodeResult(HttpStatusCode.NoContent);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1e10ebcb-11ab-4562-af9c-419ad580b8f3","_parentId":"a70a26c3-78e9-4041-9e32-274c1eb99caf","_type":"component","title":"Demo: Creating the slideshow management controller","displayTitle":"Demo: Creating the slideshow management controller"},{"body":"<p>At this point, we’ll offer you another pair of alternatives. Currently, to get the IDs of elements in the slides (images, dropzones), your code polls the DOM for the entire set of IDs. In pages with a simple UI, this poses no problems. Our <em>MedioClinic</em> project perfectly falls into the category of small projects, and it can very well live with the current approach. However, in the name of best practices, we recommend taking the plunge and refactoring a few lines of JavaScript code.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>It may come as a small surprise, but you want to start in the inline editor’s partial view, because the best source of the initial set of IDs is the database.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; InlineEditors &gt; _SlideshowEditor.cshtml</em> file, locate the code block that contains the <em>GetActionUrl</em> method.</li>\n  <li>Add the <em>“SerializeGuids”</em> expression-bodied method according to this code snippet.</li>\n  <li>Use is to build the <em>“data_image_guids”</em> route data attribute.</li>\n  <li>This will save your JavaScript code from getting all slides in the swiper by constantly hammering the DOM. The JavaScript code will be able to lean on the collection obtained from the server, and it will do just the atomic adjustments in it (add slide, remove slide).</li>\n</ol>","code":{"src":"@{\n\t...\n\n    string SerializeGuids(IEnumerable<Guid> guids) =>\n        string.Concat(guids.Select(guid => guid.ToString() + \";\"));\n}\n\n@using (Html.Kentico().BeginInlineEditor(\"slideshow-editor\", Model.PropertyName,\n    new\n    {\n        ...\n\t\tdata_image_guids = SerializeGuids(Model.Images.Select(image => image.AttachmentGUID)),\n        ...\n    }))\n{\n\t...\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Replace the browser code that polls the DOM with a newer one that takes the GUIDs from the server.</p>\n<ol>\n  <li>Go to the <em>Content &gt; InlineEditors &gt; SlideshowEditor &gt; slideshow-editor.js</em> file.</li>\n  <li>In the first lines of the <em>init</em> property function, locate the two expressions that produce the <em>slideIds</em> and <em>imageGuids</em> variables.</li>\n  <li>Replace them with this code snippet.</li>\n  <li>It takes the initial set of IDs from the view model (from the <em>“data-image-guids”</em> data-* attribute) and parses them into a JavaScript array.</li>\n</ol>","code":{"src":"// Image GUID retrieval: Alternative 1 (begin)\n/*var slideIds = window.medioClinic.slideshowWidget.collectImageIds(swiper);\n\nvar imageGuids = slideIds.map(function (slideId) {\n\treturn window.medioClinic.slideshowWidget.getGuidFromId(slideId);\n});*/\n// Image GUID retrieval: Alternative 1 (end)\n\n// Image GUID retrieval: Alternative 2 (begin)\nvar imageGuids = editor.getAttribute(\"data-image-guids\").split(\";\");\nimageGuids.splice(-1, 1);\n// Image GUID retrieval: Alternative 2 (end)","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"690c00a5-b9c0-4ad1-88ed-61e4d43f173c","_parentId":"8602c339-a3f2-4437-b1fd-064209b0ca6b","_type":"component","title":"Demo: Improving image ID management","displayTitle":"Demo: Improving image ID management"},{"body":"<p>Even in terms of its basic functionality, the code still has its flaws. For instance, the JavaScript code still cannot figure out the GUID of the page attachment in Kentico, once a new image has been dropped onto a slide.</p>\n<p>From now on, we’ll guide you to address all the issues. Along the way, you’ll also shape up your widget to support browser-side image previews, configurable image dimensions, transitions, and more.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Start in the properties class.</p>\n<ol>\n  <li>Go to the <em>Models &gt; Widgets &gt; SlideshowWidget &gt; SlideshowWidgetProperties.cs</em> file.</li>\n  <li>Adjust the class according to this snippet.</li>\n  <li>This will add the required configuration options in the widget’s configuration form.</li>\n</ol>","code":{"src":"using System;\n\nusing Kentico.Forms.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class SlideshowWidgetProperties : IWidgetProperties\n    {\n        public Guid[] ImageIds { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Transition delay (milliseconds)\", Order = 1)]\n        public int TransitionDelay { get; set; } = 5000;\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Transition speed (milliseconds)\", Order = 2)]\n        public int TransitionSpeed { get; set; } = 300;\n\n        [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"Display arrow signs on the live site\", Order = 3)]\n        public bool DisplayArrowSigns { get; set; } = true;\n\n        [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"Enforce dimensions in live site\", Order = 4)]\n        public bool EnforceDimensions { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Width (pixels)\", Order = 5)]\n        public int Width { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Height (pixels)\", Order = 6)]\n        public int Height { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Adjust the widget view model.</p>\n<ol>\n  <li>In the same folder, open the <em>SlideshowWidgetViewModel.cs</em> file.</li>\n  <li>Add the property members so that the class matches this code snippet.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\n\nusing CMS.DocumentEngine;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class SlideshowWidgetViewModel\n    {\n        public IEnumerable<DocumentAttachment> Images { get; set; }\n        public int Width { get; set; }\n        public int Height { get; set; }\n        public bool EnforceDimensions { get; set; }\n        public int TransitionDelay { get; set; }\n        public int TransitionSpeed { get; set; }\n        public bool DisplayArrowSigns { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Do the same sort of adjustments in the widget controller.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Widgets &gt; SlideshowWidgetController.cs</em> file, replace the code of the Index action method with this code snippet.</li>\n  <li>This will make sure the widget knows the configuration values.</li>\n</ol>","code":{"src":"public ActionResult Index()\n{\n\tvar properties = GetProperties();\n\tvar images = GetImages(properties?.ImageIds);\n\n\treturn PartialView(\"Widgets/_SlideshowWidget\", new SlideshowWidgetViewModel\n\t{\n\t\tImages = images,\n\t\tWidth = properties.Width,\n\t\tHeight = properties.Height,\n\t\tEnforceDimensions = properties.EnforceDimensions,\n\t\tTransitionDelay = properties.TransitionDelay,\n\t\tTransitionSpeed = properties.TransitionSpeed,\n\t\tDisplayArrowSigns = properties.DisplayArrowSigns\n\t});\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the following five steps, adjust the widget’s view.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; Widgets &gt; _SlideshowWidget.cshtml</em> file, replace the code block in the top part of the view with what you see in the code snippet.</li>\n  <li>This change will allow your view to decide in which of the dimensions the image should be constrained.</li>\n</ol>","code":{"src":"@{\n    var editMode = Context.Kentico().PageBuilder().EditMode;\n    var swiperId = \"swiper-\" + Guid.NewGuid().ToString().ToLower();\n    var containerAspectRatio = (double)Model.Width / (double)Model.Height;\n\n    // Gets the image constraint in case \"Enforce dimensions in the live site\" is checked (and for the edit mode).\n    IImageSizeConstraint GetImageSizeConstraint(DocumentAttachment documentAttachment, int frameWidth, int frameHeight)\n    {\n        var attachmentAspectRatio = (double)documentAttachment.AttachmentImageWidth / (double)documentAttachment.AttachmentImageHeight;\n\n        if (containerAspectRatio >= attachmentAspectRatio)\n        {\n            return new Width(frameWidth);\n        }\n        else\n        {\n            return new Height(frameHeight);\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Attach the swiper’s ID to the top <em>“swiper-container”</em> <em>&lt;div /&gt;</em> element.</p>","code":{"src":"<div class=\"swiper-container\" id=\"@swiperId\">","lang":"html"},"strapline":""},{"title":"","body":"<p>Adjust the inner <em>&lt;div /&gt;</em> element, the <em>“swiper-wrapper”</em>.</p>\n<ol>\n  <li>Inside the <em>swiper-container</em> element, replace the whole <em>swiper-wrapper</em> child element with what you can find in this snippet.</li>\n  <li>The new code can draw images dynamically resized to the specified size using the <em>KenticoImageUrl</em> method implemented in the Essentials module of this course.</li>\n</ol>","code":{"src":"<div class=\"swiper-wrapper\">\n\t@if (Model.Images != null && Model.Images.Any())\n\t{\n\t\tvar dimensionAttribute = string.Empty;\n\n\t\t// Calculate whether images are responsive or with fixed dimensions.\n\t\tif (!editMode && Model.EnforceDimensions)\n\t\t{\n\t\t\tdimensionAttribute = $\"width=\\\"{Model.Width}\\\" height=\\\"{Model.Height}\\\"\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdimensionAttribute = $\"class=\\\"responsive-img\\\"\";\n\t\t}\n\n\t\t// Loop through all images.\n\t\tforeach (var image in Model.Images)\n\t\t{\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tstring imageUrl;\n\n\t\t\t\tif (!editMode && Model.EnforceDimensions)\n\t\t\t\t{\n\t\t\t\t\t// In edit mode and with \"Enforce dimensions in the live site\", we can leverage Kentico responsive images feature to get images resized to fixed dimensions.\n\t\t\t\t\tvar sizeConstraint = GetImageSizeConstraint(image, Model.Width, Model.Height);\n\t\t\t\t\timageUrl = Url.KenticoImageUrl(image.GetPath(), sizeConstraint);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Otherwise, we can get the full sized images and let Materialize CSS resize them via browser-side code.\n\t\t\t\t\timageUrl = Url.KenticoImageUrl(image.GetPath());\n\t\t\t\t}\n\n\t\t\t\t<div class=\"swiper-slide\">\n\t\t\t\t\t<img src=\"@Html.Raw(imageUrl)\" @Html.Raw(dimensionAttribute) id=\"i-@image.AttachmentGUID\" />\n\t\t\t\t</div>\n\t\t\t}\n\t\t}\n\t}\n</div>","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The rest of the <em>swiper-container</em> also needs some final touches.</p>\n<ol>\n  <li>Inside the <em>swiper-container</em> element, locate the markup of the <em>“swiper-button-prev”</em> and <em>“swiper-button-next”</em> buttons.</li>\n  <li>Enclose it into an if-statement, as seen in the code snippet.</li>\n  <li>Now, the widget can hide arrow buttons.</li>\n  <li>Leave the file open as you’ll next make a small change elsewhere, before getting back.</li>\n</ol>","code":{"src":"@if (editMode || Model.DisplayArrowSigns)\n{\n\t<div class=\"swiper-button-prev\"></div>\n\t<div class=\"swiper-button-next\"></div>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Part of the configuration data needs to be able to make it to the inline editor’s view, hence this adjustment of the editor’s view model.</p>\n<ol>\n  <li>Open the <em>Models &gt; InlineEditors &gt; SlideshowEditor &gt; SlideshowEditorViewModel.cs</em> file.</li>\n  <li>Add the required property members according to this snippet.</li>\n  <li>You can return to the <em>_SlideshowWidget.cshtml</em> file you’ve just left.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\n\nusing CMS.DocumentEngine;\n\nnamespace MedioClinic.Models.InlineEditors\n{\n    public class SlideshowEditorViewModel : InlineEditorViewModel\n    {\n        public IEnumerable<DocumentAttachment> Images { get; set; }\n        public string SwiperId { get; set; }\n        public bool EnforceDimensions { get; set; }\n        public int Width { get; set; }\n        public int Height { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Adjust the part that invokes the inline editor’s partial view.</p>\n<ol>\n  <li>Being back in the <em>_SlideshowWidget.cshtml</em> file, locate the statement that sits right below the markup of arrow buttons.</li>\n  <li>Replace the code with the current code snippet.</li>\n  <li>This will make the editor’s view aware of the properties data that the editor produced before the user clicked the <em>Save</em> button.</li>\n</ol>","code":{"src":"@if (editMode)\n{\n\tHtml.RenderPartial(\"InlineEditors/_SlideshowEditor\", new SlideshowEditorViewModel\n\t{\n\t\tPropertyName = nameof(SlideshowWidgetProperties.ImageIds),\n\t\tImages = Model.Images,\n\t\tWidth = Model.Width,\n\t\tHeight = Model.Height,\n\t\tSwiperId = swiperId\n\t});\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Lastly, tune the way the JavaScript code is invoked in the view.</p>\n<ol>\n  <li>Replace the last part—the <em>&lt;script /&gt;</em> tag—with what’s in this snippet.</li>\n  <li>Thanks to this change, the swiper will know that in display mode, it should auto-play the images in a loop.</li>\n  <li>It also will configure the cadence and speed of transitions.</li>\n  <li>You’re done with the <em>_SlideshowWidget.cshtml</em> file. You can close it now.</li>\n</ol>","code":{"src":"@* Partial views don't support @section directives. *@\n<script>\n    @{\n        var editModeLiteral = editMode.ToString().ToLower();\n        var initSwiperLiteral = $\"window.medioClinic.slideshowWidget.initSwiper(\\\"{swiperId}\\\", {editModeLiteral}, {Model.TransitionDelay}, {Model.TransitionSpeed});\";\n    }\n\n    // Initialize the current Swiper object.\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", function () {\n                @Html.Raw(initSwiperLiteral)\n            });\n    } else {\n        @Html.Raw(initSwiperLiteral)\n    }\n</script>","lang":"html"},"strapline":""},{"title":"","body":"<p>In this step, you’ll alter the code of the <em>initSwiper</em> function that you called in the last step.</p>\n<ol>\n  <li>In the <em>Content &gt; Widgets &gt; SlideshowWidget &gt; slideshow-widget.js</em> file, replace the <em>slideshowWidget.initSwiper</em> function with what you’ll find in the code snippet.</li>\n  <li>Note that now, the code dynamically adds a new <em>“autoplay”</em> property to the <em>configuration</em> object.</li>\n</ol>","code":{"src":"slideshowWidget.initSwiper = function (swiperId, editMode, transitionDelay, transitionSpeed) {\n\tvar swiperSelector = \"#\" + swiperId;\n\n\tvar configuration = {\n\t\tloop: !editMode,\n\t\tspeed: transitionSpeed,\n\t\tnavigation: {\n\t\t\tnextEl: \"#\" + swiperId + \" .swiper-button-next\",\n\t\t\tprevEl: \"#\" + swiperId + \" .swiper-button-prev\"\n\t\t},\n\t\teffect: \"fade\",\n\t\tfadeEffect: {\n\t\t\tcrossFade: true\n\t\t},\n\t\tautoHeight: true\n\t};\n\n\tif (!editMode) {\n\t\tconfiguration[\"autoplay\"] = {\n\t\t\tdelay: transitionDelay,\n\t\t\tdisableOnInteraction: true\n\t\t};\n\t}\n\n\tvar swiper = new Swiper(swiperSelector, configuration);\n\twindow.medioClinic.slideshowWidget.addSwiper(swiperId, swiper);\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"262b3b9d-22fd-4c53-9bc8-c98f78e120e2","_parentId":"998c6601-0718-4f1b-a3f8-7aad09972d23","_type":"component","title":"Demo: Making the widget completely work","displayTitle":"Demo: Making the widget completely work"},{"body":"<p>After you’ve finalized the state of the server-side code of the widget, you can now bring the changes to life in the inline editor as well.</p>\n<p>Besides that, the most important thing you’ll do in the inline editor will be the implementation of browser-side previews.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Enrich the <em>addSlide</em> method that you’ve implemented earlier.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; SlideshowEditor &gt; slideshow-editor.js </em>file, locate the <em>addSlide</em> function in the <em>init</em> property function.</li>\n  <li>Replace it with what you’ll find in the code snippet.</li>\n  <li>Note that now, the code uses a predefined placeholder markup where the <em>Dropzone.js</em> component places the preview on the fly.</li>\n  <li>It also computes the required dimensions of the preview image, either based on the content contributor’s configuration, or by seeking the dimensions in the widget’s HTML element.</li>\n</ol>","code":{"src":"/** Adds a new slide to the Swiper object, together with a new Dropzone object. */\nvar addSlide = function () {\n\tvar tempGuid = generateUuid();\n\tvar tempId = imageGuidPrefix + tempGuid;\n\n\tvar markup =\n\t\tbuildSlideMarkup(tempId, \"Drop image here or <a class=\"dz-clickable\">click</a> to browse\");\n\n\tvar activeIndexWhenAdded = swiper.slides.length > 0 ? swiper.activeIndex + 1 : 0;\n\timageGuids.splice(activeIndexWhenAdded, 0, tempGuid);\n\tswiper.addSlide(activeIndexWhenAdded, markup);\n\tswiper.slideNext();\n\n\tvar previewTemplate = \"<div class=\\\"dz-preview dz-file-preview\\\"><img data-dz-thumbnail /></div>\";\n\tvar enforceDimensions = editor.getAttribute(\"data-enforce-dimensions\") === \"true\";\n\tvar computedStyle = window.getComputedStyle(editor.parentElement);\n\tvar computedWidth = computedStyle.width.substring(0, computedStyle.width.length - 2);\n\tvar computedHeight = computedStyle.height.substring(0, computedStyle.height.length - 2);\n\tvar width = enforceDimensions ? editor.getAttribute(\"data-width\") : Math.round(computedWidth);\n\tvar height = enforceDimensions ? editor.getAttribute(\"data-height\") : Math.round(computedHeight);\n\n\tvar dropzone = new Dropzone(editor.parentElement.querySelector(\"div#\" + tempId + \".dropzone\"), {\n\t\tacceptedFiles: window.medioClinic.dropzoneCommon.acceptedFiles,\n\t\tmaxFiles: 1,\n\t\turl: editor.getAttribute(\"data-upload-url\"),\n\t\tclickable: editor.parentElement.querySelector(\"div#\" + tempId + \".dropzone a.dz-clickable\"),\n\n\t\tdictInvalidFileType: \"Unsupported file type. Please upload files of the following types: .bmp, .gif, .ico, .png, .wmf, .jpg, .jpeg, .tiff, .tif\",\n\n\t\tpreviewsContainer: swiper.slides[activeIndexWhenAdded],\n\t\tpreviewTemplate: previewTemplate,\n\t\tthumbnailWidth: width,\n\t\tthumbnailHeight: height\n\t});\n\n\tdropzone.on(\"success\",\n\t\tfunction (event) {\n\t\t\tvar content = JSON.parse(event.xhr.response);\n\t\t\tvar newGuid = content.guid;\n\t\t\treplaceId(dropzone.element, imageGuidPrefix + newGuid);\n\t\t\thideDropzoneLabels(dropzone.element);\n\t\t\tvar childElementIndex = getChildElementIndex(dropzone.element);\n\t\t\timageGuids.splice(childElementIndex, 1, newGuid);\n\t\t\tdispatchBuilderEvent(imageGuids);\n\t\t});\n\n\tdropzone.on(\"error\",\n\t\tfunction (event) {\n\t\t\twindow.medioClinic.dropzoneCommon.processErrors(event.xhr.status, options.localizationService);\n\t\t});\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>The new code calls into two new functions that you can add now.</p>\n<ol>\n  <li>Right below the <em>addSlide</em> function, add the two new helper functions: <em>“replaceId”</em>, and <em>“hideDropzoneLabels”</em>.</li>\n  <li>Replace it with what you’ll find in the code snippet.</li>\n  <li>Note that now, the code uses a predefined placeholder markup where the <em>Dropzone.js</em> component places the preview on the fly.</li>\n  <li>It also computes the required dimensions of the preview image, either based on the content contributor’s configuration, or by seeking the dimensions in the widget’s HTML element.</li>\n</ol>","code":{"src":"var replaceId = function (htmlElement, newId) {\n\thtmlElement.id = newId;\n};\n\nvar hideDropzoneLabels = function (dropzoneElement) {\n\tdropzoneElement.querySelector(\"a.dz-clickable\").style.display = \"none\";\n\tdropzoneElement.querySelector(\".dz-message\").style.display = \"none\";\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b67f9f44-e166-4dcd-a61a-c34e389c7086","_parentId":"998c6601-0718-4f1b-a3f8-7aad09972d23","_type":"component","title":"Adjusting the inline editor to the recent changes","displayTitle":"Adjusting the inline editor to the recent changes"},{"body":"<p>As part your efforts to finalize the widget, you’ll now take care of Swiper objects and their <em>Dropzone</em> objects that reside in the client’s memory. Once removed by content editors from the page, they should be scrapped.</p>\n<p>Let’s tidy up the household!&nbsp;</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>As one might expect, this can be accomplished with the <em>destroy</em> property function advertised previously.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; SlideshowEditor &gt; slideshow-editor.js</em> file, locate the <em>init</em> property function.</li>\n  <li>Add a comma to the closing curly bracket.</li>\n  <li>Add another property function according to this code snippet.</li>\n  <li>Note that the property function first makes use of the <em>“collectImageIds”</em> function that we’ve advised to abandon earlier. This time the iteration of the DOM objects is your only option as the <em>destroy</em> function is not guaranteed to run right after the page is drawn. The collection of IDs could have been changed a lot in the meantime.</li>\n  <li>The function iterates over the fresh collection of slide IDs and destroys the <em>Dropzone</em> objects in each of the slides.</li>\n  <li>It also has to remove the swiper from the collection in the <em>window.medioClinic.slideshowWidget</em> namespace.</li>\n  <li>As a final step, it destroys the swiper itself.</li>\n</ol>","code":{"src":"destroy: function (options) {\n\tvar swiper = window.medioClinic\n\t\t.slideshowWidget\n\t\t.getCurrentSwiper(options.editor, window.medioClinic.slideshowWidget.swiperGuidAttribute);\n\n\tif (swiper) {\n\t\tvar slideIds = window.medioClinic.slideshowWidget.collectImageIds(swiper);\n\n\t\tif (slideIds && Array.isArray(slideIds)) {\n\t\t\tslideIds.forEach(function (dropzoneId) {\n\t\t\t\tvar dropzoneElement = document.getElementById(dropzoneId);\n\n\t\t\t\tif (dropzoneElement && dropzoneElement.dropzone) {\n\t\t\t\t\tdropzoneElement.dropzone.destroy();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\twindow.medioClinic.slideshowWidget.removeSwiper(swiper.el.id);\n\t\tswiper.destroy();\n\t}\n}","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6aa95ecc-6bc5-4e61-a661-93f571fd885c","_parentId":"998c6601-0718-4f1b-a3f8-7aad09972d23","_type":"component","title":"Cleaning up the removed swipers","displayTitle":"Cleaning up the removed swipers"},{"body":"<p>To give the widget a proper look, you now want to create a few CSS styles.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s add styles for the widget. These styles will apply to both display mode and edit mode.</p>\n<ol>\n  <li>In the <em>Content &gt; Widgets &gt; SlideshowWidget</em> folder, create a new <em>“SlideshowWidget.css”</em> file.</li>\n  <li>Add selectors and styles according to this code snippet.</li>\n</ol>","code":{"src":".kn-slideshow-image {\n    background-position: center;\n    background-repeat: no-repeat;\n}\n\n.swiper-container, .swiper-wrapper {\n    z-index: initial !important;\n}\n\n.dz-preview {\n    position: absolute;\n    top: 0;\n    z-index: -1;\n}","lang":"css"},"strapline":""},{"title":"","body":"<p>Also, create styles for the inline editor. These styles apply only to the edit mode.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; SlideshowEditor</em> folder, create a new <em>“SlideshowEditor.css”</em> file.</li>\n  <li>Add selectors and styles according to this code snippet.</li>\n</ol>","code":{"src":".kn-slideshow-editor {\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 10000;\n}\n\nul.kn-slideshow-buttons {\n    margin: 2rem;\n}\n\n    ul.kn-slideshow-buttons li {\n        float: left;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n        ul.kn-slideshow-buttons li button {\n            box-sizing: border-box;\n            cursor: pointer;\n            display: block;\n            font-size: 14px;\n            line-height: 1.33;\n            margin: 0;\n            padding: 15px;\n            text-decoration: none;\n            background-color: #262524;\n            border: 0;\n            color: #fff;\n            height: 50px;\n            min-width: 50px;\n            -webkit-transition: background-color .2s ease-in;\n            transition: background-color .2s ease-in\n        }\n\n.swiper-container {\n    min-height: 20rem;\n    min-width: 20rem;\n}\n\n.data-dz-thumbnail {\n    width: 100%;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"57565ea8-fa6a-48cc-852d-836c40d4f9c3","_parentId":"998c6601-0718-4f1b-a3f8-7aad09972d23","_type":"component","title":"Adding CSS styles","displayTitle":"Adding CSS styles"},{"body":"<p>Congratulations! You’ve completed the implementation of the image slideshow widget.</p>\n<p>After building your solution, you can test it out by quickly creating a test page, adding the widget, adding the first slide, and dropping an image onto it.</p>\n<figure data-asset-id=\"b37543a9-115f-4bc3-8c00-ba57f09fcfc1\" data-image-id=\"b37543a9-115f-4bc3-8c00-ba57f09fcfc1\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/66dfd89a-c9ec-45b7-a616-5221620536a0/008.png\" data-asset-id=\"b37543a9-115f-4bc3-8c00-ba57f09fcfc1\" data-image-id=\"b37543a9-115f-4bc3-8c00-ba57f09fcfc1\" alt=\"\"></figure>\n<figure data-asset-id=\"f23b0131-85f4-40ef-b329-8ca7980ec3fa\" data-image-id=\"f23b0131-85f4-40ef-b329-8ca7980ec3fa\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f4ea4f9c-57bb-45c5-ab4a-edc8d415dbf0/009.png\" data-asset-id=\"f23b0131-85f4-40ef-b329-8ca7980ec3fa\" data-image-id=\"f23b0131-85f4-40ef-b329-8ca7980ec3fa\" alt=\"\"></figure>\n<figure data-asset-id=\"27f3acea-6d7e-4a17-a513-b722ebc56fc0\" data-image-id=\"27f3acea-6d7e-4a17-a513-b722ebc56fc0\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/10cf2ca7-2cf2-4ebc-86d5-ce184ef77753/010.png\" data-asset-id=\"27f3acea-6d7e-4a17-a513-b722ebc56fc0\" data-image-id=\"27f3acea-6d7e-4a17-a513-b722ebc56fc0\" alt=\"\"></figure>\n<p><br></p>\n<p>You can repeat the process to add any number of images. The images will be immediately uploaded as page attachments. However, bear in mind that the image GUIDs will be saved to the widget’s state in the database only after you click the <em>Save</em> button.</p>\n<p>Images removed from the widget with the <em>minus</em> button will also be deleted in the attachments collection in Kentico.</p>\n<p>You can also add and remove slides at any position in the swiper’s sequence. The widget will be able to keep track of all the additions and removals in its in-memory state.</p>\n<div class=\"infobox warning\"><p>The Kentico 12 Service Pack, slated for H2/2019, will introduce a templating engine that will allow content editors to save the state of page sections and widgets in a given page as a template. Pages created according to such a template will inherit all configuration and content from the original page. However, page attachments won’t be included in the scope of templates. Therefore, the images used in the static image widget and slideshow widget will not replicate themselves into new pages.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"745e7864-b317-4b7e-93da-91bba17d47cf","_parentId":"2eac8268-a724-4261-b4a7-848334fc45e5","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the proper way of authenticating JavaScript calls of inline editors to MVC actions?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        data_upload_url = Html.Action(\"Upload\", \"ImageUploader\", new { ... })\n    }))\n{","lang":"csharp"},"feedback":"<p>The URL is correctly authenticated in the inline editor's partial view. However, calling Html.Action is not enough. The URL also needs to be decorated with additional security information.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        data_upload_url = Url.Kentico().AuthenticateUrl(Url.Action(\"Upload\", \"ImageUploader\", new { ... })).ToString()\n    }))\n{","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Perfect! You've spotted the difference well. The URLs used to call from inline editors to MVC actions need to be pre-processed in partial views using the <em>Url.Kentico().AuthenticateUrl()</em> calls.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"cbaa1bcf-3bf4-4367-92be-02d9f672c768","_parentId":"5d6f4e02-3df1-4dd2-bbb2-2baa89c860ff","_type":"component","title":"Calling controllers from inline editors","displayTitle":"Calling controllers from inline editors"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Is there a Kentico API that provides a unified way to create JavaScript objects for both display mode and edit mode?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Yes, there is a window.kentico.createUbiquitousObject function that accepts an arbitrary anonymous factory function. Then, in the scope of the window.kentico.pageBuilder.registerInlineEditor() call, developers may access the objects via options.ubiquitousObjectCollection.</p>","_shouldBeSelected":false,"feedback":"<p>There is no such feature in Kentico yet. However, having such built-in feature would not add much value as there's quick and easy way of doing this with just a small amount of code. The code comprises of a simple JavaScript namespace that registers references to objects produced during the life cycle of the inline editor's partial view, and provides them to the initialization code that runs in the scope of window.kentico.pageBuilder.registerInlineEditor().</p>"},{"text":"<p>There is no such feature in Kentico yet. However, having such built-in feature would not add much value as there's quick and easy way of doing this with just a small amount of code. The code comprises of a simple JavaScript namespace that registers references to objects produced during the life cycle of the inline editor's partial view, and provides them to the initialization code that runs in the scope of window.kentico.pageBuilder.registerInlineEditor().</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Great! You've learned the best practice well. Although there is no built-in feature to create JavaScript objects for both display mode and edit mode, developers don't have to factor them twice.</p>\n<p>The solution is a simple JavaScript namespace that registers references to objects produced during the life cycle of the inline editor's partial view, and provides them to the initialization code that runs in the scope of window.kentico.pageBuilder.registerInlineEditor().</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"f8e73f70-f4bd-4416-8962-d07b18c3415e","_parentId":"5d6f4e02-3df1-4dd2-bbb2-2baa89c860ff","_type":"component","title":"JavaScript objects in display mode and edit mode","displayTitle":"JavaScript objects in display mode and edit mode"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the properties class?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The class represents the widget state. It can be modeled as a deep hierarchical object with whatever structure. The class represents the widget state throughout the whole life cycle of all page builder artifacts (widget controller, widget view, inline editor view).</p>","_shouldBeSelected":false,"feedback":"<p>The first sentence is true. However, as page builder sends state of all widgets from the browser to the database in form of JSON data, the structure of the properties class must be serializable to JSON. Moreover, although it might be possible to use the properties class beyond the scope of a widget controller, it is not recommended. Instead, separate view models should be used for later phases of the page life cycle.</p>"},{"text":"<p>The properties class represents widget state coming from the browser to the database. It is used in the widget controller to retrieve the widget state.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. Page builder sends state of all widgets from the browser to the database in form of JSON data. To retrieve the state in a widget controller, a properties class must be defined. The structure of the properties class must be serializable to JSON.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"64b2d2b7-bf5e-43c8-abd9-28a883331e5d","_parentId":"5d6f4e02-3df1-4dd2-bbb2-2baa89c860ff","_type":"component","title":"The properties class","displayTitle":"The properties class"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to localize the builder-enabled pages</li>\n  <li>How to localize artifacts of page builder</li>\n  <li>How these pages behave in workflows</li>\n  <li>How to personalize builder-enabled pages</li>\n</ul>\n<p>You will work with:</p>\n<ul>\n  <li>The various parts of the source code that support translations</li>\n  <li>The Localization application in Kentico</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"87a50e21-dbb9-48df-ab45-6de6714f764e","_parentId":"90dd2dee-3cad-494a-8278-2062bc902046","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>The first part of this page will be dedicated to localization. First, you’ll make provisions to localize the content, then, you’ll localize the UI of page builder artifacts that you’ve created.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"efbd8afa-cddf-4548-9bea-e30c15512df7","_parentId":"c26fc50c-4389-43e1-bbab-fb46cdb52c20","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>When it comes to <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components\">localization</a>, the contents of the pages can be divided into page field data, and page builder data.</p>\n<p>You may recall what we’ve stated before: Builder-enabled pages are ordinary Kentico pages, enriched with page builder features. Their standard properties were not hurt by the introduction of page builder.</p>\n<p>Therefore, the page field data can be translated in exactly the same way as before. The technical underpinnings of localization haven’t been changed either.</p>\n<figure data-asset-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\" data-image-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/15f15132-08e0-4a81-9d66-639d887487a3/011.png\" data-asset-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\" data-image-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\" alt=\"\"></figure>\n<figure data-asset-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\" data-image-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/bbdb042e-d373-4130-97d5-821470b09107/012.png\" data-asset-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\" data-image-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\" alt=\"\"></figure>\n<p><br></p>\n<p>You also may recall that the whole state of a widget instance is stored in the <em>CMS_Document</em> table. The placement in the <em>CMS_Document</em> table also means that content editors may localize the texts and configuration of widgets in the same way.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"165d198a-ac60-4f11-93e7-464ff88d4e32","_parentId":"39cba046-f642-49cc-8f54-95d3a7dc7b23","_type":"component","title":"Theory: Localization of builder-enabled pages","displayTitle":"Theory: Localization of builder-enabled pages"},{"body":"<p>In this short task:</p>\n<ul>\n  <li>If you haven’t created any landing pages yet, create one now.</li>\n  <li>Translate the contents of the <em>“Landing page name”</em> page field.</li>\n  <li>Add a text widget and translate its contents too.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"07eccdbc-c64d-4874-b0c9-37c07ab65b4d","_parentId":"7a856e80-2e52-414b-9c7f-96696a829ce9","_type":"component","title":"Task: Localization of builder-enabled pages","displayTitle":"Task: Localization of builder-enabled pages"},{"body":"<p>In this demo, you'll translate the landing page.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create a landing page.</p>\n<ol>\n  <li>In the <em>Pages</em> application of the administration interface, create a new page of type <em>Landing page section</em>.</li>\n  <li>In the section, create a page of type <em>Landing page</em>.</li>\n  <li>Fill the <em>Landing page name</em> field with text in the English language.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ba71f5b5-2fc6-41c4-8f15-c2ef40f1f709/015.png","alt":"015.png"},"strapline":""},{"title":"","body":"<p>Add a text widget.</p>\n<ol>\n  <li>Add a text widget into the default section of the page.</li>\n  <li>Type in a caption for the page.</li>\n  <li>Select the whole text and format it as <em>H1</em>.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/2453e76f-8665-4bf2-a8f6-dede27fbce65/014.png","alt":"014.png"},"strapline":""},{"title":"","body":"<p>Add a Spanish culture version.</p>\n<ol>\n  <li>Go to the <em>Languages</em> tab and create the Spanish version with the little <em>plus</em> sign in the left end of the row.</li>\n  <li>Let Kentico copy the English contents into the Spanish culture version.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/af5cb091-e822-42ba-a462-411563bbbab6/011.png","alt":"011.png"},"strapline":""},{"title":"","body":"<p>Translate the page field.</p>\n<ol>\n  <li>In the <em>Content</em> tab, translate the <em>Landing page name</em> field.</li>\n  <li>Save the page.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6a66caf8-8b4c-4b98-a282-40fec3b9eb86/012.png","alt":"012.png"},"strapline":""},{"title":"","body":"<p>Translate the widget text.</p>\n<ol>\n  <li>In the <em>Page</em> tab, replace the text of the text widget with a Spanish translation.</li>\n  <li>Save the page.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/15da8ab1-522b-4dd0-9aa5-65f6926a3805/013.png","alt":"013.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5e8f1f14-2b64-4c4c-88e6-a8b33bc8e791","_parentId":"d491fd90-807f-4f21-883d-6c7196f9caa2","_type":"component","title":"Demo: Localization of builder-enabled pages","displayTitle":"Demo: Localization of builder-enabled pages"},{"body":"<div class=\"infobox idea\"><p>The whole state of all the widgets is saved separately for English and Spanish culture versions. Therefore, we recommend creating the page structure with page sections first, and then creating the culture versions of the page. This will save you time spent by re-creating the structure multiple times.</p></div>\n<div class=\"infobox warning\"><p>The attachment GUIDs have different values in the contexts of different culture versions of the page. This is why you cannot reuse existing attachments in the static image widget and the slideshow widget. You should upload the images separately for each culture variant.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"84aa78c6-4b93-472a-92e1-f43fe5446b9b","_parentId":"a418e03a-a98a-468e-9d71-ba51d46628c9","_type":"component","title":"Side notes","displayTitle":"Side notes"},{"body":"<p>In the previous pages of the course, we instructed you to register page section controllers and widgets. In these registrations, you’ve hard-coded the section or widget names and descriptions.</p>\n<p>You also added string literals into various places in the source code.</p>\n<p>These literals can also be localized.</p>\n<h4>Data location</h4>\n<p>The first question that comes to mind when thinking of localization is <strong>where</strong> the localized data comes from.</p>\n<p>As a quick refresher, the localized texts can be <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/working-with-resource-strings\">stored</a> in two following ways in Kentico:</p>\n<ul>\n  <li>In .resx files in your MVC app’s source code</li>\n  <li>In the Kentico database, via the <em>Localization</em> application</li>\n</ul>\n<p>The way the texts are identified is the same in both the .resx files and the <em>Localization</em> application. Each piece of reusable text has its key and several values (one value per culture).</p>\n<div class=\"infobox note\"><p>Both ways have their pros and cons.</p>\n<p>While the texts in the database can be easily managed in the <em>Localization</em> application, they fall short when it comes to portability of the data. For instance, if you plan on distributing your widgets in the company (or publicly), your best bet is to place the UI texts into .resx files, not into the database.</p></div>\n<h4>Implementation</h4>\n<p>Another arising question is <strong>how</strong> you go about translating the texts in the source code.</p>\n<p>When page builder and form builder artifacts are <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components#LocalizingMVCbuildercomponents-Localizingbuildercomponentmetadata\">registered in the system</a>, their metadata (e.g., names and descriptions) can be translated by replacing the original string literals with <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-text-fields\">macro expressions</a>. The format consists of curly braces and a dollar sign. Like so:</p>\n<pre><code class=\"language-csharp\">\"{$KeyOfTranslatedText}\"</code></pre>\n<p>In the case of widget registration, the result might look like the following:</p>\n<pre><code class=\"language-csharp\">[assembly: RegisterWidget(\n\t\"MyWidget\", \n\ttypeof(MyWidget), \n\t\"{$Widget.MyWidget.Name$}\", \n\tDescription = \"{$Widget.MyWidget.Description$}\", \n\tIconClass = \"icon-carousel\")]</code></pre>\n<p>In <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components\">other cases in your server-side code</a>, you can easily call methods in the <em>CMS.Helpers.ResHelper</em> static class. The class is capable of retrieving the localized texts from <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/working-with-resource-strings\">both the .resx files and the database</a>.</p>\n<p>The <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components#LocalizingMVCbuildercomponents-Localizinginlineeditorscripts\">JavaScript files of inline editors</a> can also leverage the localization capabilities of Kentico.</p>\n<p>Translation can be done via the <em>options</em> object in the <em>Init</em>, <em>destroy</em>, <em>dragStart</em>, and <em>drop</em> functions. The <em>options</em> object exposes the <em>localizationService</em> property with its <em>getString</em> method. The method takes just the key of the translated text as a parameter and returns the version of the current culture.</p>\n<p>In rare cases where the <em>options</em> object is not available, you may reach the data of the localization service by calling into a <em>window.localization.strings[]</em> array. You can use the resource key of the resource string as the array entry accessor.</p>\n<div class=\"infobox note\"><p>When localizing builder artifact metadata and partial views, both .resx files and the database can serve as the source of data.</p>\n<p>However, in inline editor JavaScript files, the only option is .resx files.</p></div>\n<div class=\"infobox idea\"><p>Putting string literals into .resx files (or the database) also reduces the need to compile the app after each text revision.</p></div>\n<div class=\"infobox note\"><p>Translation from the default language into other languages is done simply by creating subfolders in the <em>App_Data &gt; Global &gt; Resources</em> folder (or <em>App_Data &gt; [site name] &gt; Resources</em>, respectively). Subfolders, named after language codes, may contain .resx files in the same way as the parent folder.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a837c2f1-abe8-49a6-9f19-260ee2d1751e","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Theory: Localizing the UI of page builder","displayTitle":"Theory: Localizing the UI of page builder"},{"body":"<p>In this task, your goal is to:</p>\n<ul>\n  <li>Choose the source of data for translated texts</li>\n  <li>Localize the page section and widget metadata</li>\n  <li>Localize the texts used in partial views of page sections, widgets and inline editors</li>\n  <li>Localize the texts used in the inline editor JavaScript files</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"afb02802-cd9f-44af-8c7b-86987af83486","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Task: Localizing the UI of page builder artifacts","displayTitle":"Task: Localizing the UI of page builder artifacts"},{"body":"<p>In the <a href=\"https://github.com/Kentico/training-kentico-k12/tree/builders\">Medio Clinic website</a>, we’ve decided to take full advantage of the database storage. The content editors can therefore freely alter the UI texts via the Localization application. Only a small part of the texts is stored in .resx files, due to the front-end nature of inline editors.</p>\n<p>In the following series of steps, you’ll go through the existing code base, and you’ll replace the hard-coded texts with expressions that retrieve the localized strings from the database (and .resx files, respectively).</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the controller of the single-column section.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Sections &gt; SingleColumnSectionController.cs</em> file, locate the assembly-level attribute expression in the top part of the file.</li>\n  <li>Copy the name literal into the clipboard.</li>\n  <li>In the administration interface, go to <em>Localization</em>, add a new resource string, and paste the text into the English culture version.</li>\n  <li>Give the resource string a <em>“Section.SingleColumn.Name”</em> key.</li>\n  <li>Do the same sequence of steps for the description.</li>\n  <li>In the controller, replace the literals with macro expressions, according to the code snippet.</li>\n  <li>You can now save and close the controller file.</li>\n  <li>If you’ve created additional sections earlier, repeat the steps for them too.</li>\n</ol>","code":{"src":"[assembly: RegisterSection(\n\t\"MedioClinic.Section.SingleColumn\", \n\ttypeof(SingleColumnSectionController), \n\t\"{$Section.SingleColumn.Name$}\", \n\tDescription = \"{$Section.SingleColumn.Description$}\", \n\tIconClass = \"icon-square\")]","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Repeat the same process with widget controllers.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Widgets &gt; TextWidgetController.cs</em> file, locate the assembly-level attribute expression in the top part.</li>\n  <li>Copy the name literal into the clipboard.</li>\n  <li>In the <em>Localization</em> application, add a new resource string, and paste the text into the English culture version.</li>\n  <li>Give the resource string a <em>“Widget.Text.Name”</em> key.</li>\n  <li>Do the same sequence of steps for the description.</li>\n  <li>In the controller, replace the literals with macro expressions, according to the code snippet.</li>\n  <li>You can now save and close the controller file.</li>\n</ol>\n<p>Do the same in the <em>ImageWidgetController.cs</em> and <em>SlideshowWidgetController.cs</em> files.</p>","code":{"src":"[assembly: RegisterWidget(\n\t\"MedioClinic.Widget.Text\", \n\ttypeof(TextWidgetController), \n\t\"{$Widget.Text.Name$}\", \n\tDescription = \"{$Widget.Text.Description$}\", \n\tIconClass = \"icon-l-text\")]","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Previously, you used a string literal in the inline editor of the static image widget. Let’s replace it with a resource string.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; InlineEditors &gt; _ImageUploaderEditor.cshtml</em> file, locate the using-statement that draws mandatory pieces of its markup.</li>\n  <li>Copy the user message to the clipboard.</li>\n  <li>This time around, you’ll want to put the string into a .resx file, because you’ll use that resource string in one of the JavaScript files later.</li>\n  <li>Go to <em>App_Data &gt; Global &gt; Resources</em>, and create a <em>“MedioClinic.resx”</em> file.</li>\n  <li>Open the file using the standard Visual Studio resource editor and make sure <em>No code generation</em> is selected in the <em>Access Modifier</em> dropdown list.</li>\n  <li>In the file, create a new record with an <em>“InlineEditors.Dropzone.DropText”</em> key, as seen in the code snippet.</li>\n  <li>Replace the using-statement with the code snippet.</li>\n  <li>Note that the code uses the <em>Localize</em> helper method you’ve created in the first module of this course.</li>\n  <li>You can now save and close the view file.</li>\n  <li>Leave the <em>MedioClinic.resx</em> file open for future edits.</li>\n</ol>","code":{"src":"using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"kn-image-uploader-editor\",\n        data_upload_url = GetActionUrl().ToString()\n    }))\n{\n    <div class=\"@GetContainerClass()\">\n        <div class=\"dz-uploader\">\n            <div class=\"dz-message top\">\n                @Html.Raw(Html.Localize(\"InlineEditors.Dropzone.DropText\"))\n            </div>\n        </div>\n    </div>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, localize the labels in the configuration dialog of the slideshow widget.</p>\n<ol>\n  <li>Open the <em>Models &gt; Widgets &gt; SlideshowWidget &gt; SlideshowWidgetProperties.cs</em> file.</li>\n  <li>Copy the labels into database resource strings.</li>\n  <li>Use the keys found in the code snippet.</li>\n  <li>You can replace the whole code of the properties class with the code snippet.</li>\n</ol>","code":{"src":"using System;\n\nusing Kentico.Forms.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\n\nnamespace MedioClinic.Models.Widgets\n{\n    public class SlideshowWidgetProperties : IWidgetProperties\n    {\n        public Guid[] ImageIds { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.TransitionDelay$}\", Order = 1)]\n        public int TransitionDelay { get; set; } = 5000;\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.TransitionSpeed$}\", Order = 2)]\n        public int TransitionSpeed { get; set; } = 300;\n\n        [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.DisplayArrowSigns$}\", Order = 3)]\n        public bool DisplayArrowSigns { get; set; } = true;\n\n        [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.EnforceDimensions$}\", Order = 4)]\n        public bool EnforceDimensions { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.Width$}\", Order = 5)]\n        public int Width { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.Height$}\", Order = 6)]\n        public int Height { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the last two steps, localize the inline editors of your widgets.</p>\n<ol>\n  <li>Open the <em>Content &gt; InlineEditors &gt; ImageUploaderEditor &gt; image-uploader-editor.js</em> file.</li>\n  <li>Locate the <em>dictInvalidFileType</em> property in the statement that factors a new <em>Dropzone</em> object.</li>\n  <li>Copy the message into a new <em>“InlineEditors.Dropzone.InvalidFileType”</em> record in the <em>MedioClinic.resx</em> file that you left a while ago.</li>\n  <li>Back in the <em>image-uploader-editor.js</em> file, replace the message literal with a call to <em>“options.localizationService.getString()”</em>, as seen in the code snippet.</li>\n</ol>","code":{"src":"var dropzone = new Dropzone(zone, {\n\t\tacceptedFiles: medioClinic.dropzoneCommon.acceptedFiles,\n\t\tmaxFiles: 1,\n\t\turl: editor.getAttribute(\"data-upload-url\"),\n\t\tcreateImageThumbnails: false,\n\t\tclickable: clickable,\n\t\tdictInvalidFileType: options.localizationService.getString(\n\t\t\t\"InlineEditors.Dropzone.InvalidFileType\")\n\t});","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Now, use the same resource string in the slideshow inline editor’s JavaScript file.</p>\n<ol>\n  <li>Open the <em>Content &gt; InlineEditors &gt; SlideshowEditor &gt; slideshow -editor.js</em> file.</li>\n  <li>Locate the <em>dictInvalidFileType</em> property in the statement that creates a new <em>Dropzone</em> object.</li>\n  <li>Replace the message literal with a call to <em>“options.localizationService.getString()”</em>, in the same way as you did in the previous step.</li>\n  <li>Leave the file open for the next step.</li>\n</ol>","code":{"src":"var dropzone = new Dropzone(editor.parentElement.querySelector(\"div#\" + tempId + \".dropzone\"), {\n\tacceptedFiles: window.medioClinic.dropzoneCommon.acceptedFiles,\n\tmaxFiles: 1,\n\turl: editor.getAttribute(\"data-upload-url\"),\n\tclickable: editor.parentElement.querySelector(\"div#\" + tempId + \".dropzone a.dz-clickable\"),\n\n\tdictInvalidFileType: options.localizationService.getString(\n\t\t\"InlineEditors.Dropzone.InvalidFileType\"),\n\n\tpreviewsContainer: swiper.slides[activeIndexWhenAdded],\n\tpreviewTemplate: previewTemplate,\n\tthumbnailWidth: width,\n\tthumbnailHeight: height\n});","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Finally, localize the error message that’s displayed when the slideshow management controller fails to delete a page attachment.</p>\n<ol>\n  <li>Locate the <em>removeSlide</em> function that sits inside the <em>init</em> property function.</li>\n  <li>In the inner code that handles the <em>xhr.onreadystatechange</em> event, take the literal, and put it into the <em>MedioClinic.resx</em> file.</li>\n  <li>Replace the literals in the <em>slideshow-editor.js</em> file with a statement that retrieves resources via <em>“window.localization.strings”</em>, as seen in the code snippet.</li>\n</ol>","code":{"src":"xhr.onreadystatechange = function () {\n\tif (xhr.readyState === 4 && xhr.status === 204) {\n\t\twindow.medioClinic.showMessage(\n\t\t\tkentico.localization.strings[\"InlineEditors.SlideshowEditor.ImageNotDeleted\"], \"warning\");\n\t\tconsole.warn(\n\t\t\tkentico.localization.strings[\"InlineEditors.SlideshowEditor.ImageNotDeleted\"]);\n\t}\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"34f83bcb-6652-46fa-a251-666b754e4848","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Demo: Localizing the UI of page builder artifacts","displayTitle":"Demo: Localizing the UI of page builder artifacts"},{"body":"<p>Great! You have prepared the project to be localized to Spanish, as well as any other language that you add later.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"47c44bd1-02d0-4524-aa6d-9dbbc093bd5f","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>The content of widgets and sections is included within the scope of <a href=\"https://docs.kentico.com/k12/managing-website-content/using-widgets-in-mvc\">workflow</a>.</p>\n<p>Editing of widgets is restricted by the rules of the defined workflow steps.</p>\n<p>Content changes do not appear on the live site until the page is published (after going through the workflow approval process).</p>\n<p>The system tracks saved widget changes as part of page versioning.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bbc796ba-3185-4561-9e1f-014d763d25d9","_parentId":"dcbc0e04-4c2d-4455-8e63-870342323557","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>In this short demo, you’ll create a user account, add it into a newly-created approver role, and give this role permissions to approve publishing of pages within a workflow.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the user account.</p>\n<p>1. In the administration interface, go to the <em>Users</em> application and create a new user.</p>\n<p>Give the user a user name and a full name. That should be enough for the purposes of this demo.</p>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8701ca44-b9d7-4d8c-b59d-390f7cdd40ee/019.png","alt":"019.png"},"strapline":""},{"title":"","body":"<p>Create the approvers role.</p>\n<p>1. Go to the <em>Roles</em> application and create a new role.</p>\n<p>2. Call the role <em>“Content approvers”</em>.</p>\n<p>Assign the new user to this role on the <em>Users</em> tab.</p>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a75cfddf-4c04-42a4-a4a0-459f612fc4f6/020.png","alt":"020.png"},"strapline":""},{"title":"","body":"<p>Give the role appropriate permissions.</p>\n<ol>\n  <li>Switch to the <em>Permissions</em> tab.</li>\n  <li>In the top part of the page, select <em>Module</em>, and <em>Content</em>.</li>\n  <li>Select the checkboxes according to the screenshot.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/786e3b5c-3464-461f-bac7-e9c1c2dc0a6d/026.png","alt":"026.png"},"strapline":""},{"title":"","body":"<p>Create the approval workflow.</p>\n<p>1. Go to the Workflows application and create a new basic workflow.</p>\n<p>Call the workflow <em>“Landing page workflow”</em>.</p>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e584002d-bf95-47bc-889b-031448f77e7d/016.png","alt":"016.png"},"strapline":""},{"title":"","body":"<p>Add the approval step to the workflow.</p>\n<ol>\n  <li>Switch to the <em>Steps</em> tab.</li>\n  <li>Add a new workflow step.</li>\n  <li>Call it <em>“Approval”</em>.</li>\n  <li>Finish the creation of the new step.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/7d03f996-f468-4b01-b6ba-108ad1231c5d/017.png","alt":"017.png"},"strapline":""},{"title":"","body":"<p>Allow only content approvers to work with the step.</p>\n<ol>\n  <li>Switch to the <em>Security</em> tab.</li>\n  <li>In the <em>Roles which can approve, reject and make changes</em> section of the page, select <em>Only listed</em>.</li>\n  <li>Click <em>Add roles</em> to add the <em>Content approvers</em> role.</li>\n  <li>Navigate up one level, to the workflow edit page.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8cc35ae9-9195-4867-9666-9d70f3c22344/021.png","alt":"021.png"},"strapline":""},{"title":"","body":"<p>Set the scope of the workflow.</p>\n<ol>\n  <li>Switch to the <em>Scope</em> tab.</li>\n  <li>Click <em>Select</em> in the <em>This scope covers</em> section of the page.</li>\n  <li>In the modal dialog, select the section that contains the landing pages.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c09c6aff-97db-48cb-9708-f5cf7759f91c/022.png","alt":"022.png"},"strapline":""},{"title":"","body":"<p>Test the whole setup.</p>\n<ol>\n  <li>Go back to the <em>Pages</em> application.</li>\n  <li>Click into any widget and make an update.</li>\n  <li>(In the landing page in the screenshot, we’ve swapped <em>“March”</em> with <em>“April”</em>.)</li>\n  <li>Save the page.</li>\n  <li>Submit the page for approval.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f8f9a735-9ddf-4491-b337-7866f8e2696f/025.png","alt":"025.png"},"strapline":""},{"title":"","body":"<p>Impersonate the user assigned to the <em>Content approvers</em> role.</p>\n<ol>\n  <li>In the top right corner of the administration interface, click the user menu.</li>\n  <li>Click <em>Impersonate</em>.</li>\n  <li>Select the user you’ve created earlier.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a50f9f44-8484-461b-9b6c-417168cb3652/024.png","alt":"024.png"},"strapline":""},{"title":"","body":"<p>Approve the page for publishing.</p>\n<ol>\n  <li>In the <em>Pages</em> application, navigate to the page in the content tree.</li>\n  <li>In the Page tab, hit <em>Publish</em>.</li>\n  <li>From this moment on, the changes will be visible on the live site.</li>\n  <li>You can test it directly by switching to the <em>Properties &gt; General</em> tab, and clicking the <em>Live URL</em> link.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c33a563e-6660-412a-aeb5-e0202cb14124/027.png","alt":"027.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2a90caa9-4492-414d-9b8c-a3d4f49a7fb6","_parentId":"ad2642e0-d87b-4b80-bfea-091f8d2113ea","_type":"component","title":"Demo: Applying workflow to a builder-enabled page","displayTitle":"Demo: Applying workflow to a builder-enabled page"},{"body":"<p>As you can see, workflow and versioning work with builder-enabled pages just like with any other pages.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"ddf75a07-2c2a-496e-9b6b-4bb0a37f18b2","_parentId":"78ebe72f-c8cc-41db-b83a-5f78b8864bf6","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this short chapter, we’ll just touch the basics of personalization of builder-enabled pages. Personalization belongs into the large topic of online marketing in Kentico. Online marketing features will be dealt with in a standalone future module of this course.</p>\n<p>A great description of the personalization capabilities can be found in the <a href=\"https://docs.kentico.com/k12/on-line-marketing-features/managing-your-on-line-marketing-features/personalizing-widgets-in-mvc\">Kentico documentation</a>. However, if you don’t need the full details, we’ve prepared an excerpt of it.</p>\n<h3>Personalization variants</h3>\n<p>The basics are that Kentico allows creation of variants of widgets. These variants are called personalization variants. Different variants are displayed to site visitors who fulfill certain criteria.</p>\n<p>The criteria are called personalization conditions and are based on condition types.</p>\n<p>When the content editor wants to create a variant, they first choose what condition type governs the rendering of the variants.</p>\n<figure data-asset-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\" data-image-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1fea87d7-2081-4582-8667-39f02a387d3f/029.png\" data-asset-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\" data-image-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\" alt=\"\"></figure>\n<p><br></p>\n<p>Then, based on the data provided by the condition type, they create the widget variant itself.</p>\n<figure data-asset-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\" data-image-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e0217774-8899-4285-852c-d3327df41e41/030.png\" data-asset-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\" data-image-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\" alt=\"\"></figure>\n<p><br></p>\n<p>While the creation of personalization variants can easily be done by content editors, personalization condition types are the developer’s job.</p>\n<p>If you don’t want to wait and are eager to develop personalization condition types, you’re welcome to explore the <a href=\"https://docs.kentico.com/k12/on-line-marketing-features/configuring-and-customizing-your-on-line-marketing-features/content-personalization-on-mvc-sites/developing-personalization-condition-types\">Kentico documentation</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"bc29203c-e404-40e1-a468-7c57ae09d38f","_parentId":"c58627aa-5c2b-4a47-86ad-1f11bb8ec31e","_type":"component","title":"Theory","displayTitle":"Theory"},{"body":"<p>In this page, you’ve learned how to localize both the content of builder-enabled pages and the UI of page builder artifacts. If you’ve followed the demos, you now have everything set up for translation into Spanish in your Medio Clinic website.</p>\n<p>You also did a small mouse exercise when configuring workflows in the site.</p>\n<p>And finally, we’ve also given you a small teaser for a future module of this course dedicated to online marketing features.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"66b19fa6-a7d8-4938-bd13-184fde04ca90","_parentId":"3d198f63-763a-43c8-9d84-b97736da0809","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How are the widgets localized in Kentico?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>To localize contents of a builder-enabled page, content editors first need to agree upon certain resource keys with developers. Then, they need to localize the contents of pages via the Localization application. The UI of widgets is localized in the very same way.</p>","_shouldBeSelected":false,"feedback":"<p>The contents of builder-enabled pages is localized in the same way as it was done before. Editors simply create a culture variant of a page and write text (or submit the page for translation). The localization of widgets' UI is done in a different way.</p>"},{"text":"<p>The contents of builder-enabled pages is localized in the same way as it was done before. Editors simply create a culture variant of a page and write text (or submit the page for translation). The localization of widgets' UI is done in a different way. The metadata of page builder artifacts can be translated either using the Localization application or via .resx files. UI texts defined in JavaScript code can be translated only through .resx files.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Good! Culture variants of builder-enabled pages are created in the very same way as with traditional Kentico pages. The whole widget state is stored separately for each culture variant of a given widget.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"818cb621-6a91-4117-b3b8-a17bb862eb80","_parentId":"1192c2c1-d366-457e-996c-e52d5c750759","_type":"component","title":"Localizing MVC widgets","displayTitle":"Localizing MVC widgets"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which workflow-related features does Kentico provide in relation to builder-enabled pages?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Editing of pages can be restricted as with traditional Kentico pages. Also, publishing can be gated through workflow. Kentico also tracks versions of builder-enabled pages.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Kentico tracks versions of builder-enabled pages. To allow content editors to restrict editing of builder-enabled pages and approve them for publishing, developers can create custom action workflow steps.</p>","_shouldBeSelected":false,"feedback":"<p>To restrict editing and approve builder-enabled pages for publishing, no coding is necessary.</p>"}],"_feedback":{"title":"","correct":"<p>You've remembered it right. Editing of pages can be restricted as with traditional Kentico pages. Also, publishing can be gated through workflow. Kentico also tracks versions of builder-enabled pages.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"dc6f7cd3-b5bf-4dad-8211-b62d35201b89","_parentId":"1192c2c1-d366-457e-996c-e52d5c750759","_type":"component","title":"Workflows on builder-enabled pages","displayTitle":"Workflows on builder-enabled pages"},{"body":"<p>In this theory page, you will learn:</p>\n<ol>\n  <li>Basic principles of form builder</li>\n  <li>How page builder and form builder work together</li>\n  <li>What the main artifacts of form builder are</li>\n</ol>\n<p>In the next page, you’ll put the theory into practice by creating two form components and a validation rule for the Medio Clinic website.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d6857d2e-ba05-44ad-a804-58fdcf21022b","_parentId":"5e1e3d1e-a8f9-489d-bd8a-6a9d82b86150","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>From the previous pages of this course, you may remember the basic underpinnings of form builder. We’ll recap them here, together with additional useful information and tips.</p>\n<p>Form builder allows content editors to <a href=\"https://docs.kentico.com/k12/managing-website-content/forms/composing-forms\">compose forms</a> without any technical knowledge needed. The forms can be crafted in the <em>Forms</em> application. After a new form has been created, the administration interface presents the user with a few editing tabs, one of them being the <em>Form builder</em> tab. This is where the creative process happens.</p>\n<p>When composing the form, content editors can leverage the habits acquired when working with page builder. The forms are composed of form sections and form components that get placed into them.</p>\n<figure data-asset-id=\"064b2905-e125-4f50-bd56-fa121c6509c5\" data-image-id=\"064b2905-e125-4f50-bd56-fa121c6509c5\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/408b4258-fad0-45fb-ae9e-309f43e7b7bc/031.png\" data-asset-id=\"064b2905-e125-4f50-bd56-fa121c6509c5\" data-image-id=\"064b2905-e125-4f50-bd56-fa121c6509c5\" alt=\"\"></figure>\n<p><br></p>\n<p>Form sections highly resemble page sections in page builder. Also, the way form components are placed into them is the same as with widgets in the page builder. Once placed into the form, form components can be moved around freely, exactly as widgets.</p>\n<figure data-asset-id=\"8b70bc1d-1128-4a54-9e42-e5944f390901\" data-image-id=\"8b70bc1d-1128-4a54-9e42-e5944f390901\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ab5404dc-a5b0-4a74-982a-27f0b2ac3663/032.png\" data-asset-id=\"8b70bc1d-1128-4a54-9e42-e5944f390901\" data-image-id=\"8b70bc1d-1128-4a54-9e42-e5944f390901\" alt=\"\"></figure>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3f689646-df0f-4c31-8d73-727a1b5eb29c","_parentId":"fd87b2a3-bdb7-4f70-9923-3b71e87c530b","_type":"component","title":"Basic principles of form builder","displayTitle":"Basic principles of form builder"},{"body":"<p>How do form builder and page builder work together? Simply put, forms created in form builder are displayed in the live site through page builder. More specifically, Kentico ships with one built-in widget called <em>Form</em>.</p>\n<figure data-asset-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\" data-image-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6d2a5caf-1d1a-48dc-8240-28f9f3d08ebc/033.png\" data-asset-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\" data-image-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\" alt=\"\"></figure>\n<p><br></p>\n<p>When placed onto a page in the Pages application, the widget instructs the user to select from forms in a dropdown list.</p>\n<figure data-asset-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\" data-image-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/db9c1349-a334-42b2-a6cf-04681adc82c7/034.png\" data-asset-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\" data-image-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\" alt=\"\"></figure>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0b947407-9d92-4ef0-bf38-0201928ffa57","_parentId":"09770c14-fd07-42e6-8130-e508d58940aa","_type":"component","title":"Form builder and page builder coexistence","displayTitle":"Form builder and page builder coexistence"},{"body":"<p>Before we dive into developing with form builder in the next page, we’ll give you a refresher on:</p>\n<ol>\n  <li>What are the artifacts that form builder consists of</li>\n  <li>Which responsibilities they have</li>\n  <li>How they interact with each other</li>\n</ol>\n<p>Kentico offers the possibility of developing the following form builder artifacts:</p>\n<ol>\n  <li>Layouts of <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-custom-form-layouts\">form sections</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-validation-rules\">validation rules</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-visibility-conditions\">visibility conditions</a></li>\n  <li><a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components\">Form components</a></li>\n</ol>\n<p>Apart from that, it is also possible to <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/customizing-the-form-widget\">customize the form widget</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"52127c3e-a66f-4759-b9c2-cac10f27bc2c","_parentId":"baf07af8-87a9-4271-b397-a2aa8f1a7b4d","_type":"component","title":"Theory: Form builder artifacts","displayTitle":"Theory: Form builder artifacts"},{"body":"<p>Form sections work in the same way as page sections in page builder. They dictate the looks of a certain portion of the form’s overall layout.</p>\n<p>As with page sections, form sections stack up onto each other in the form. Inside the form section, developers may divide the layout in any way. Ranging from a set of columns to various composite sub-layouts.</p>\n<p>Kentico ships with a <em>Default</em> form section that consists of just a single column.</p>\n<p>A custom form section is implemented via a controller and a partial view. The <strong>controller</strong> doesn’t have to inherit or implement any Kentico functionality. However, it must have an assembly-level attribute that <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-custom-form-layouts#Developingcustomformlayouts-Registeringformsections\">registers the section into the system</a>. The metadata provided in the attribute can be localized using <a href=\"https://docs.kentico.com/k12/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components\">macro expressions</a>.</p>\n<p>Apart from registering the section, the controller’s only remaining job is to invoke the partial view.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormSection(\n\t\"MySection\", \n\ttypeof(MyFormSectionController), \n\t\"My section\", \n\tDescription = \"My custom form section layout.\", \n\tIconClass = \"icon-l-cols-2\")]\n\n...\n\npublic class MyFormSectionController : Controller\n{\n\tpublic ActionResult Index()\n\t{\n\t\treturn PartialView(\"FormSectionLayouts/_MySectionLayout\");\n\t}\n}</code></pre>\n<p>The <strong>view</strong> is where the creative process happens. It specifies the markup that surrounds the <strong>widget zones</strong> and contains invocation statements for widget zones.</p>\n<pre><code class=\"language-html\">&lt;div class=\"my-form-section\"&gt;\n\t@Html.Kentico().FormZone()\n&lt;/div&gt;</code></pre>\n<p>The view can be accompanied by CSS and JavaScript files of its own. Kentico bundles and minifies all such files placed under <em>Content &gt; FormSections</em>. The bundle is then used for all builder-enabled pages.</p>\n<p>Form sections don’t communicate with other artifacts in the form builder ecosystem. They only handle the portions of the form layout.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"175effd9-7f0b-4925-b718-c564ec4b6f93","_parentId":"f9520fa0-a2df-469e-9307-e6458bfe0c67","_type":"component","title":"Layouts of form sections","displayTitle":"Layouts of form sections"},{"body":"<p>Validation rules can be assigned by users to any form component in the form that operates on a compatible database field.</p>\n<p><a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-validation-rules\">Validation rules</a> can operate on either just the form field that they’ve been assigned to (basic validation rules), or on a depending form field (field comparison rules).</p>\n<p>In Visual Studio, the validation rule is represented by a <strong>single class</strong>. The class needs to inherit from <em>Kentico.Forms.Web.Mvc.ValidationRule&lt;TValue&gt;</em>. The <em>TValue</em> generic denotes the type of the database field. Validation rules must also be registered in the system via an assembly-level attribute. Additionally, the class must be decorated with <em>System.SeralizableAttribute</em>.</p>\n<p>The class may list several configuration properties. When decorated with <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em>, the property becomes visible in the configuration pane of the validation rule on the <em>Form builder</em> tab.</p>\n<p>Apart from the properties, the class may override a <em>GetTitle</em> method. The title constructed in this method will appear in the list of all rules applied to a given form field.</p>\n<p>Most importantly, the class needs to override the <em>Validate</em> method. In this method, configuration input (gathered from content contributors on the <em>Form builder</em> tab), together with the actual form field value (gathered from the site visitor), is evaluated to verify the validity.</p>\n<p>The <strong>field comparison rules</strong> differ in the two ways:</p>\n<ul>\n  <li>They inherit from <em>Kentico.Forms.Web.Mvc.CompareToFieldValidationRule&lt;TValue&gt;</em>.</li>\n  <li>As descendants of this base class, they have access to a <em>DependeeFieldValue</em> property. This property can be used for comparisons in the <em>Validate</em> method mentioned above.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6012727f-3f0f-4bcf-a263-1fca268867ea","_parentId":"42697f75-817a-4c34-8588-d5b820929cd4","_type":"component","title":"Field validation rules","displayTitle":"Field validation rules"},{"body":"<p>Each form field can be assigned a visibility condition that operates on a compatible type. Visibility conditions perform real-time evaluations of whether a given field should be hidden in the form.</p>\n<p><a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/defining-field-visibility-conditions\">Visibility conditions</a> also operate on either a single database field (basic visibility conditions), or on a related field (depending visibility conditions). The conditions also need just one class. They also need to be registered in the system via an assembly-level attribute. As with validation rules, the class needs a <em>System.SerializableAttribute</em> on it.</p>\n<p><strong>Basic visibility conditions</strong> are descendants of <em>Kentico.Forms.Web.Mvc.VisibilityCondition</em>. They can also have configuration properties, in the same way as validations rules can. The conditions must override the <em>IsVisible</em> method of the base class.</p>\n<p>The <em>IsVisible</em> method usually evaluates contextual information about the current site visitor to decide about the visibility of the field.</p>\n<p>The <strong>depending visibility conditions</strong> inherit from <em>Kentico.Forms.Web.Mvc.AnotherFieldVisibilityCondition&lt;TValue&gt;</em>, where <em>TValue</em> denotes the type of the compatible database field. The depending conditions share the same perks as their basic counterparts. On top of that, they have access to the <em>DependeeFieldValue</em> property that represents the form field value which is being compared.</p>\n<div class=\"infobox note\"><p>In addition to visibility conditions, Kentico provides a feature called <a href=\"https://docs.kentico.com/k12/managing-website-content/forms/using-smart-fields-in-forms\">Smart fields</a>. Smart fields can also conceal form fields. Hence, the difference between the two features might be blurred on first sight. In simple words, it lies in the moment in time when these features apply. While visibility conditions work in real time, smart fields apply during repeated visits of a given site visitor to the page with the form in question. Simply put, in contrast to fields with visibility conditions, smart fields are hidden or displayed in a way that progressively presents different parts of the form on subsequent visits.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f023517b-4384-4d62-80f3-011ded6204d3","_parentId":"8246d72d-3b0f-4ff2-9065-798d44cdc0d8","_type":"component","title":"Field visibility conditions","displayTitle":"Field visibility conditions"},{"body":"<p>Form components are at the core of form builder. They represent the form fields themselves. By adding instances of form components to the form in the Form builder tab, users create fields.</p>\n<p>Kentico ships with 10 built-in form components:</p>\n<ul>\n  <li><em>Checkbox</em></li>\n  <li><em>Consent agreement</em></li>\n  <li><em>Drop-down list</em></li>\n  <li><em>Email</em></li>\n  <li><em>Numeric input</em></li>\n  <li><em>Radio buttons</em></li>\n  <li><em>reCAPTCHA</em></li>\n  <li><em>Text area</em></li>\n  <li><em>Text input</em></li>\n  <li><em>U.S. phone number</em></li>\n</ul>\n<p><a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components\">Form components</a> can be used not only on the <em>Form builder</em> tab. They convey configuration of widgets (in their configuration forms), form validation rules, and visibility conditions. Lastly, form components can be used to configure other form components. In this role, they are called <em>editing components</em>.</p>\n<p>A form component requires two classes:</p>\n<ul>\n  <li>A form component view model</li>\n  <li>A form component properties class</li>\n</ul>\n<p>The first class is the center point. It holds the data of the form field. It also plays a role of the broker between the UI and the database.</p>\n<p>The properties class provides configuration for the form component.</p>\n<p>The UI of the form component is handled with a partial view placed under <em>Views &gt; Shared &gt; FormComponents</em>.&nbsp;</p>\n<h4>Form component view model class</h4>\n<p>This <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components/defining-form-component-properties\">class</a> must inherit from <em>Kentico.Forms.Web.Mvc.FormComponent&lt;TProperties, TValue&gt;</em>. In this contract, <em>TProperties</em> is the form component properties class, and <em>TValue</em> means the type of the underlying database field.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormComponent(\n\t\"MyFormComponent\", \n\ttypeof(MyFormComponent), \n\t\"My form component\", \n\tDescription = \"My custom form component.\", \n\tIconClass = \"icon-picture\")]\n\n...\n\npublic class MyFormComponent : FormComponent&lt;MyFormComponentProperties, string&gt;\n{\n\t[BindableProperty]\n\tpublic string Text { get; set; } = string.Empty;\n\n\tpublic override string GetValue() =&gt; Text;\n\n\tpublic override void SetValue(string value)\n\t{\n\t\tText = value;\n\t}\n}</code></pre>\n<p>It goes without much saying that this class also requires an assembly-level registration attribute.</p>\n<p>In the body of the class, there might be one or more property members, decorated with <em>Kentico.Forms.Web.Mvc.BindablePropertyAttribute</em>. They contain the data of the form field. Form components—in a close alignment to their name—can therefore be composed of multiple input data (coming from multiple HTML elements). An example of such component is the <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components/example-developing-a-custom-form-component\">RGB input form component</a> showcased in the official Kentico documentation.</p>\n<p>The role of the broker between the UI and the database is accomplished via two methods that must be overridden:</p>\n<ul>\n  <li><em>GetValue</em>, used to retrieve the values from the UI and put them into the database</li>\n  <li><em>SetValue</em>, used to do it the other way around</li>\n</ul>\n<div class=\"infobox note\"><p>These methods were named from the UI perspective, hence such semantics of the&nbsp;<em>SetValue</em>&nbsp;method.</p></div>\n<p>Kentico calls the <em>GetValue</em> method every time the user updates the form fields, not just when the Submit button is pressed. This is due to the visibility conditions that were designed to kick in in real time. The automatic posting can be switched off by overriding the <em>CustomAutoPostHandling</em> boolean property and setting it to <em>false</em>.</p>\n<h4>Form component properties class</h4>\n<p>The <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components/defining-form-component-properties\">properties class</a> facilitates the configuration of the form component. It must inherit from <em>Kentico.Forms.Web.Mvc.FormComponentProperties&lt;TValue&gt;</em> where <em>TValue</em> means the same thing as in the view model class—the data type of the database field.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\npublic class MyFormComponentProperties : FormComponentProperties&lt;string&gt;\n{\n\tpublic MyFormComponentProperties() : base(FieldDataType.Text, 200)\n\t{\n\t}\n\n\t[DefaultValueEditingComponent(TextAreaComponent.IDENTIFIER)]\n\tpublic override string DefaultValue { get; set; } = string.Empty;\n\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of rows of the text area\")]\n\t[Required]\n\tpublic int TextAreaRows { get; set; }\n\t\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of columns of the text area\")]\n\t[Required]\n\tpublic int TextAreaColumns { get; set; }\n}</code></pre>\n<p>However, to further specify the nature of the <em>TValue</em> data, the class should contain an implicit constructor that in turn calls the base class’ constructor, passing around a <em>CMS.DataEngine.FieldDataType</em> enumeration value as an argument.</p>\n<p>By overriding the <em>DefaultValue</em> property, developers can set the initial value that can be re-configured later by content editors in the <em>Form builder</em> tab.</p>\n<p>Most importantly, the class may contain property members decorated with <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em> and <em>System.ComponentModel.DataAnnotations</em> attributes. This way, other form components can be utilized to configure the current form component (they play the role of an <em>editing component</em>).</p>\n<h4>Form component partial view</h4>\n<p>The partial view needs to be named after the fully-qualified type name of the form component view model class, with an underscore prefix (e.g. <em>“_MedioClinic.FormComponent.MediaLibraryUploader.cshtml”</em>). The naming convention can be <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components#Developingformcomponents-Registeringformcomponents\">overridden</a> in the registration assembly-level attribute.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"97e29eb1-d6fb-456b-b71c-98192d95af1b","_parentId":"46d0fc34-0eca-4f13-b40f-1c219b63ca32","_type":"component","title":"Form components","displayTitle":"Form components"},{"body":"<p>In this page, you’ve learned all the necessary theory. You’ll be able to put it through its paces in the next page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9aaa9830-b2e6-4958-bbd3-bacc035763dd","_parentId":"e6da40c9-61e0-4ef8-b7a5-0864675f5184","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the purpose of the <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em> attribute?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The attribute allows the form components to be used as editing components. This way, form components can not only be used in Kentico forms, but they can convey configuration of other form components. They can also be used to configure form validation rules, field visibility conditions, and widgets.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>With the attribute, one can limit the usage of a form component to only certain forms.</p>","_shouldBeSelected":false,"feedback":"<p>The attribute does not serve as means of constraints. Configuration properties of form components, form validation rules, field visibility rules and page builder widgets can be decorated with this attribute. Then, the form component will be rendered automatically in the configuration dialogs.</p>"}],"_feedback":{"title":"","correct":"<p>Right! The attribute allows the form components to be used as editing components. This way, form components can not only be used in Kentico forms, but they can convey configuration of other form components. They can also be used to configure form validation rules, field visibility conditions, and widgets.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"13c9f630-86af-45f5-bed3-68ec68b043bf","_parentId":"008ba931-ce51-44e9-b543-089e7c523418","_type":"component","title":"Form component's attributes","displayTitle":"Form component's attributes"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the purpose of the GetTitle method of the ValidationRule base class?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The method produces a validation error message for the form in the live site.</p>","_shouldBeSelected":false,"feedback":"<p>The method does not deal with validation error messages at all. It provides a summary of the configuration of a validation rule in relation to a specific form component instance.</p>"},{"text":"<p>The method provides a configuration summary to the content editors. This is because there can be multiple validation rules applied to a single form component instance in a form. The summaries help in keeping a good overview of what can be put into a form component in the live site.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. As there can be multiple validation rules applied to a single form component instance, there must be a way of telling the user a summary of what a given validation rule enforces. The method produces such summary.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"395b4a21-42c0-4819-bfa4-5612dfa8dc7b","_parentId":"008ba931-ce51-44e9-b543-089e7c523418","_type":"component","title":"Validation rules base class","displayTitle":"Validation rules base class"},{"body":"<p>In this page, you will:</p>\n<ol>\n  <li>Implement a media library uploader form component</li>\n  <li>Create a complementary media library selector form component</li>\n  <li>Create a form validation rule that checks image dimensions</li>\n</ol>\n<p>You’ll work with:</p>\n<ol>\n  <li>All mandatory form component artifacts, including view models, properties classes, and views</li>\n  <li>Optional form component artifacts as backend controllers and JavaScript logic</li>\n  <li>Form components in the role of <em>editing components</em></li>\n</ol>\n<p>All the three components created in this page will result in the following file uploader form field:</p>\n<figure data-asset-id=\"cb64a6dc-08ee-4a9a-a39b-e672694ce238\" data-image-id=\"cb64a6dc-08ee-4a9a-a39b-e672694ce238\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3ec9ffc4-3a20-4ad2-828e-f7dec5e9aadb/041.png\" data-asset-id=\"cb64a6dc-08ee-4a9a-a39b-e672694ce238\" data-image-id=\"cb64a6dc-08ee-4a9a-a39b-e672694ce238\" alt=\"\"></figure>\n<p><br></p>\n<p>The media uploader form component will upload images to a media library that content editors configure on the <em>Form builder</em> tab. They’ll use the media library selector form component to do that. Additionally, they will be able to assign the image dimension validation rule to the media library uploader form component. This rule will check that the uploaded file is an image with dimensions in a range configured on the <em>Form builder</em> tab.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3d6c80e1-05d8-4c61-8554-00534b9e19f9","_parentId":"9c19a9f7-955a-479e-9c29-42d4cd1978b9","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>The order of steps outlined in the introductory chapter was great to explain the relationship between the media library uploader form component and the media library selector form component.</p>\n<p>However, we will swap the ordering now, for two reasons:</p>\n<ol>\n  <li>The simplicity of the media library selection form component makes it great for explaining the basic principles and development techniques</li>\n  <li>It is an <em>editing component</em> of the media library uploader form component (hence, a prerequisite thereof)</li>\n</ol>\n<p>Therefore, we’ll start with the media library selection component first.</p>\n<p>The only objective of this component is to list Kentico media libraries in a dropdown list.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To achieve that, make use of a more specific base class—the <em>SelectorFormComponent&lt;&gt;</em> class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“FormComponents”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibrarySelection”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibrarySelectionComponent.cs”</em> class file.</li>\n  <li>Insert an assembly-level attribute to register the component, as seen in this code snippet.</li>\n  <li>In the registration attribute, use macro expressions to support translation. Add the descriptions via the <em>Localization</em> application in Kentico.</li>\n  <li>Inherit from <em>Kentico.Forms.Web.Mvc.SelectorFormComponent&lt;TProperties&gt;</em>, instead of just <em>FormComponent&lt;TProperties&gt;</em>. Use <em>“MediaLibrarySelectionProperties”</em> as the constructed generic parameter (implemented in the very next step). The <em>SelectorFormComponent&lt;&gt; </em>class is a descendant of <em>FormComponent&lt;&gt;</em>.</li>\n  <li>This way, you’ll be able to override the <em>GetItems</em> method that was tailored to retrieve sequences of <em>System.Web.Mvc.SelectListItem</em> objects.</li>\n  <li>In the body of the method, call the <a href=\"https://docs.kentico.com/api12/content-management/media-libraries#Medialibraries-Updatingamedialibrary\">CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraries</a> static method to get the collection of media libraries. Transform each item into the <em>SelectListItem</em> object mentioned above.</li>\n  <li>As a single-statement method, it can be made expression-bodied.</li>\n  <li>Don’t forget to specify the <em>“Identifier”</em> constant that will represent this component in the system.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\n\nusing CMS.MediaLibrary;\nusing CMS.SiteProvider;\nusing Kentico.Forms.Web.Mvc;\nusing MedioClinic.Models.FormComponents;\n\n[assembly: RegisterFormComponent(\n    MediaLibrarySelectionComponent.Identifier, \n    typeof(MediaLibrarySelectionComponent), \n    \"{$FormComponent.MediaLibrarySelection.Name$}\", \n    Description = \"{$FormComponent.MediaLibrarySelection.Description$}\", \n    IconClass = \"icon-menu\")]\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibrarySelectionComponent : SelectorFormComponent<MediaLibrarySelectionProperties>\n    {\n        public const string Identifier = \"MedioClinic.FormComponent.MediaLibrarySelection\";\n\n        protected override IEnumerable<SelectListItem> GetItems() => \n            MediaLibraryInfoProvider\n                .GetMediaLibraries()\n                .WhereEquals(\"LibrarySiteID\", SiteContext.CurrentSiteID)\n                .TypedResult\n                .Items\n                .Select(mediaLibraryInfo => new SelectListItem\n                {\n                    Text = mediaLibraryInfo.LibraryDisplayName,\n                    Value = mediaLibraryInfo.LibraryID.ToString()\n                });\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>As form components need their properties companions, add one now.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; FormComponents &gt; MediaLibrarySelection</em>, create a new <em>“MediaLibrarySelectionProperties.cs”</em> class file.</li>\n  <li>In alignment with the view model class, inherit from <em>Kentico.Forms.Web.Mvc.SelectorProperties</em>, not just <em>FormComponentProperties</em>.</li>\n  <li>Leave the body of the class empty.</li>\n</ol>","code":{"src":"using Kentico.Forms.Web.Mvc;\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibrarySelectionProperties : SelectorProperties\n    {\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a partial view of the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared, </em>create a new <em>“FormComponents” </em>subfolder.</li>\n  <li>In that subfolder, create a partial view named in the following way.</li>\n  <li>As a proper partial view, its name should start with an underscore character. Then, add the identifier <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components\">used during the registration</a> of the form component in the remaining part of the name.</li>\n  <li>Make the view strongly-typed against <em>MediaLibrarySelectionComponent</em>.</li>\n  <li>Continue by defining the body of the view.</li>\n  <li>To transfer the required attributes to the HTML elements in the view, first get them via the <em>Kentico.Forms.Web.Mvc. GetEditorHtmlAttributes</em> extension method, as seen in the code example.</li>\n  <li>In the standard <em>Html.DropDownListFor()</em> call, get the data from <em>“Model.Items”</em> provided by the base class of your view model.</li>\n  <li>Use the HTML attributes you’ve just retrieved. The attributes will help Kentico stay aware of changes in the form content, thus allowing the various validation rules and visibility conditions to work.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.FormComponents\n@model MediaLibrarySelectionComponent\n\n@{ \n    var htmlAttributes = ViewData.GetEditorHtmlAttributes();\n}\n\n@Html.DropDownListFor(model => model.SelectedValue, Model.Items, htmlAttributes)","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"45263d4d-d5d3-4f7b-a622-455abd69083d","_parentId":"46645c6e-ea50-45c3-900f-a3277c3d9011","_type":"component","title":"Demo: Creating a basic form component","displayTitle":"Demo: Creating a basic form component"},{"body":"<p>Good. Your <em>editing component</em> is ready. Apart from this use case, it also can be added into the bodies of forms on the <em>Form builder</em> tab to provide IDs of media libraries. However, we’ll just stick with using it as an <em>editing component</em>.</p>\n<div class=\"infobox note\"><p>To ban the form component from being added into forms, you may simply edit the <a href=\"https://docs.kentico.com/k12/developing-websites/form-builder-development/developing-form-components#Developingformcomponents-Registeringformcomponents\">assembly-level attribute</a>. Adding an optional “<em>IsAvailableInFormBuilderEditor = false”</em> argument to the attribute makes the component work only as <em>editing components</em>.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"edd7048b-42d2-4533-ba50-7131838abc74","_parentId":"46645c6e-ea50-45c3-900f-a3277c3d9011","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>The media library uploader form component will allow site visitors to:</p>\n<ul>\n  <li>Select a file through an <em>&lt;input type=”file” /&gt;</em> HTML element</li>\n  <li>Upload the file to a media library configured previously by content editors, through an <em>&lt;input type=”button” /&gt;</em> HTML element</li>\n  <li>Receive a GUID of the uploaded media library file in return (into an <em>&lt;input type=”hidden” /&gt;</em> HTML element)</li>\n  <li>Post the form with the GUID saved in a hidden <em>&lt;input /&gt;</em> element</li>\n</ul>\n<p>On top of that, the form component will allow the content editors to view uploaded images in the context of a form submission—in the <em>Recorded data</em> tab.</p>\n<div class=\"infobox warning\"><p>To display an image file on the <em>Recorded data</em> tab, the component uses decision logic that works around the lack of a form context class in Kentico 12. In the upcoming versions of Kentico, this class will become an officially supported means of determining whether a given form component is rendered in the <em>Form builder</em> tab, the <em>Recorded data</em> tab, or on the live site.</p>\n<p>Therefore, bear in mind that we don’t recommend replicating our workaround in production code. It was used just to demo a future Kentico feature.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create a view model of the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; FormComponents,</em> create a new <em>“MediaLibraryUploader” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibraryUploaderComponent.cs”</em> class file.</li>\n  <li>Add an assembly-level registration attribute according to the code snippet.</li>\n  <li>Add the full English texts of the name and description into the <em>Localization</em> application in Kentico.</li>\n  <li>Unlike the media library selector form component, inherit from the <em>Kentico.Forms.Web.Mvc.FormComponent&lt;TProperties, TValue&gt;</em> class. Use <em>MediaLibraryUploaderProperties</em> and <em>string</em> as the generic parameters.</li>\n  <li>Add the <em>“FileGuid”</em> bindable property to capture the GUID of the uploaded media library file.</li>\n  <li>To make viewing on the Recorded data tab possible, add a non-bindable <em>“SiteName” </em>property.</li>\n  <li>Implement the <em>GetValue</em> and <em>SetValue</em> methods as simple retrievals/assignments of the <em>FileGuid</em> property.</li>\n</ol>","code":{"src":"using CMS.SiteProvider;\nusing Kentico.Forms.Web.Mvc;\nusing MedioClinic.Models.FormComponents;\n\n[assembly: RegisterFormComponent(\n    \"MedioClinic.FormComponent.MediaLibraryUploader\", \n    typeof(MediaLibraryUploaderComponent), \n    \"{$FormComponent.MediaLibraryUploader.Name$}\", \n    Description = \"{$FormComponent.MediaLibraryUploader.Description$}\", \n    IconClass = \"icon-picture\")]\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibraryUploaderComponent : FormComponent<MediaLibraryUploaderProperties, string>\n    {\n        [BindableProperty]\n        public string FileGuid { get; set; } = string.Empty;\n\n        public string SiteName => SiteContext.CurrentSiteName;\n\n        public override string GetValue() => FileGuid;\n\n        public override void SetValue(string value)\n        {\n            FileGuid = value;\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a properties class of the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; FormComponents &gt; MediaLibraryUploader,</em> create a new <em>“MediaLibraryUploaderProperties.cs”</em> class file.</li>\n  <li>Inherit from <em>Kentico.Forms.Web.Mvc.</em> <em>FormComponentProperties&lt;TValue&gt;</em> class. Use <em>string</em> as the generic parameter.</li>\n  <li>Add an empty-bodied implicit constructor, and call the base class’ constructor with the <em>CMS.DataEngine.FieldDataType</em> enumeration value as an argument. This will further specify the nature of the underlying database column.</li>\n  <li>Override the <em>DefaultValue</em> property and initialize it to <em>string.Empty</em>.</li>\n  <li>Add the MediaLibraryId property and specify the media library selection component as an <em>editing component</em>.</li>\n</ol>","code":{"src":"using System.ComponentModel.DataAnnotations;\n\nusing CMS.DataEngine;\nusing Kentico.Forms.Web.Mvc;\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibraryUploaderProperties : FormComponentProperties<string>\n    {\n        public MediaLibraryUploaderProperties() : base(FieldDataType.Text, 400)\n        {\n        }\n\n        [DefaultValueEditingComponent(TextInputComponent.IDENTIFIER)]\n        public override string DefaultValue { get; set; } = string.Empty;\n\n        [EditingComponent(MediaLibrarySelectionComponent.Identifier, \n            Label = \"{$FormComponent.MediaLibraryUploader.MediaLibraryId.Name$}\", \n            Tooltip = \"{$FormComponent.MediaLibraryUploader.MediaLibraryId.Tooltip$}\", \n            ExplanationText = \"{$FormComponent.MediaLibraryUploader.MediaLibraryId.ExplanationText$}\")]\n        [Required]\n        public string MediaLibraryId { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a partial view. The view will be rendered not just on the <em>Form builder</em> tab, but also the <em>Recorded data</em> tab, and the live site.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; FormComponents,</em> create a new partial view file. Use the pattern consisting of an underscore character, followed by the identifier used in the component registration attribute.</li>\n  <li>As C# code will make up the majority of the view file, add a code block to enclose it.</li>\n  <li>Create one constant and three Razor methods to support the rendering process: <em>PreviewImageMaximumSize, RoundDoubleCalculation(), GetCurrentPageId(),</em>and<em> GetActionUrl()</em>.</li>\n  <li>The <em>RoundDoubleCalculation</em> method will take a delegate of an arbitrary method with a <em>System.Double</em> result. It will then round it.</li>\n  <li>The <em>GetCurrentPageId</em> method is used to determine where the component is rendered: on the <em>Form builder</em> tab, <em>Recorded data</em> tab, or on the live site. <strong>Warning</strong>: This method is a workaround used to demo a capability that will be available in a future version of Kentico. Currently, we work around things by using page builder’s feature set to determine a page ID. Do not use such determination logic in your projects.</li>\n  <li>The <em>GetActionUrl</em> method does a similar job as the eponymous methods in inline editor views. It decorates URLs with authentication information.</li>\n  <li>Leave the file open for further edits in the following steps.</li>\n</ol>","code":{"src":"@using CMS.Helpers\n@using CMS.MediaLibrary\n@using Kentico.Forms.Web.Mvc\n@using MedioClinic.Models.FormComponents\n@using MedioClinic.Extensions\n@model MediaLibraryUploaderComponent\n\n@{\n    const int PreviewImageMaximumSize = 320;\n\n    int RoundDoubleCalculation(Func<double> doubleCalculation) =>\n        Convert.ToInt32(Math.Round(doubleCalculation(), MidpointRounding.AwayFromZero));\n\n    // Gets the current page ID, if any.\n    // Returns -1 in the Form builder tab, 0 in the Recorded data tab.\n    int GetCurrentPageId()\n    {\n        var feature = Context.Kentico().PageBuilder();\n        int pageId = -1;\n\n        try\n        {\n            pageId = feature.PageIdentifier;\n        }\n        catch\n        {\n            // Rendered inside the Forms app, just return -1.\n        }\n\n        return pageId;\n    }\n\n    // Gets the URL to the MediaLibraryUploaderController's action.\n    // Takes the filePathId and passes it to the controller to know which form element to fill with the file GUID.\n    string GetActionUrl(string filePathId)\n    {\n        var path = Url.Action(\"Upload\", \"MediaLibraryUploader\", new\n        {\n            filePathId = filePathId,\n            mediaLibraryId = Model.Properties.MediaLibraryId\n        });\n\n        var decorated = VirtualContext.GetPreviewPathFromVirtualContext(path, false, \"en-us\", true); ;\n\n        return decorated;\n    }\n\t\n\t// The rest will be implemented in the following steps.\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the code block, below the Razor methods you just implemented, add the actual markup.</p>\n<ol>\n  <li>First, call the <em>GetCurrentPageId</em> method to get a notion of where the view runs.</li>\n  <li>If the method returns zero, it means that the view runs on the <em>Recorded data</em> tab.</li>\n  <li>Let’s implement the <em>Recorded data</em> environment first.</li>\n  <li>Create an if-statement that asks about zero.</li>\n  <li>In the body of the statement, first parse the GUID value from the form data.</li>\n  <li>Then, use the GUID value to retrieve the media file uploaded in the form.</li>\n  <li>If the file exists, constrain the image size so that it fits nicely into the <em>Recorded data</em> page.</li>\n  <li>To constrain the image properly, you should calculate the recommended <em>width</em> and <em>height</em> attributes of the <em>&lt;img /&gt;</em> HTML element.</li>\n  <li>While the previously-created <em>KenticoImageUrl</em> HTML helper method will happily resize the image according to the <em>MaxWidthOrHeight</em> setting, you still need to calculate the preview width and height values yourself.</li>\n  <li>To do that, you first need to determine the orientation of the image by calculating the dimension ratio.</li>\n  <li>If the ratio is greater than one (a landscape image), the preview width will be set to the <em>PreviewImageMaximumSize</em> constant, and the preview height will be set by dividing the width and the ratio.</li>\n  <li>For portrait images, it will be calculated in the opposite fashion.</li>\n  <li>Now, all it takes to produce the preview image is to call <em>MediaLibraryHelper.GetPermanentUrl()</em>, and pass the result, together with the <em>MaxWidthOrHeight</em> constraint to the <em>KenticoImageUrl</em> method implemented in the Essentials module of the course.</li>\n</ol>","code":{"src":"int currentPageId = GetCurrentPageId();\n\nif (currentPageId == 0)\n{\n\t// When in Recorded data tab:\n\n\tGuid guid;\n\tguid = Guid.TryParse(Model.FileGuid, out guid) ? guid : Guid.Empty;\n\tvar mediaFileInfo = MediaFileInfoProvider.GetMediaFileInfo(guid, Model.SiteName);\n\n\tif (mediaFileInfo != null)\n\t{\n\t\tvar ratio = (double)mediaFileInfo.FileImageWidth / (double)mediaFileInfo.FileImageHeight;\n\t\tint previewWidth, previewHeight;\n\n\n\t\tif (ratio > 1)\n\t\t{\n\t\t\tpreviewWidth = PreviewImageMaximumSize;\n\t\t\tpreviewHeight = RoundDoubleCalculation(() => PreviewImageMaximumSize / ratio);\n\t\t}\n\t\telse if (ratio < 1)\n\t\t{\n\t\t\tpreviewWidth = RoundDoubleCalculation(() => PreviewImageMaximumSize * ratio);\n\t\t\tpreviewHeight = PreviewImageMaximumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpreviewWidth = PreviewImageMaximumSize;\n\t\t\tpreviewHeight = PreviewImageMaximumSize;\n\t\t}\n\n\t\tvar mediaFileUrl = MediaLibraryHelper.GetPermanentUrl(mediaFileInfo);\n\n\t\t<img src=\"@Url.KenticoImageUrl(mediaFileUrl, new MedioClinic.Models.MaxWidthOrHeight(PreviewImageMaximumSize))\" width=\"@Html.Raw(previewWidth)\" height=\"@Html.Raw(previewHeight)\" />\n\t}\n\telse\n\t{\n\t\t<p>There is no image with the ID @Html.Raw(Model.FileGuid) found in any of the media libraries.</p>\n\t}\n}\nelse\n{\n\t// When in Form builder tab and in the Form widget:\n\t\n\t// The code will be implemented in the subsequent step.\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>At this point, add a few rules to the main CSS file.</p>\n<ol>\n  <li>In <em>MedioClinic</em> &gt; <em>Content </em>&gt; <em>Css </em>&gt; <em>Master </em>&gt; <em>style.css</em>, add the selectors with rules.</li>\n  <li>These rules mostly override the default styling of the checkboxes and their labels that come with the Materialize CSS library.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"[type=\"checkbox\"] {\n    padding: initial;\n}\n\n[type=\"checkbox\"]:not(:checked),\n[type=\"checkbox\"]:checked {\n    position: initial;\n    opacity: initial;\n    pointer-events: initial;\n}\n\nlabel {\n    font-size: initial;\n}\n\nspan.ktc-checkbox {\n    line-height: 3rem;\n}","lang":"css"},"strapline":""},{"title":"","body":"<p>The rendering logic applied in the <em>Recorded data</em> is now complete. Let’s get onto rendering the component in the context of live site pages (and the <em>Form builder</em> tab).</p>\n<ol>\n  <li>If you inspect the code snippet, you’ll find that there are three main elements that make up the overall markup of the component: The <strong>file input</strong> element, the <strong>upload button</strong>, and most importantly, a <strong>hidden input</strong> element that will take the GUID of the uploaded media library file from the backend controller (implemented in a few moments later).</li>\n  <li>Apart from that, you’ll also find two <em>&lt;div /&gt;</em> elements to display the file size and the MIME type of the file to be uploaded.</li>\n  <li>However, before you render the markup, you need to forward HTML attributes provided by Kentico to the elements, so that validation rules and visibility conditions work properly. You can do that in the same way as with the media library selector form component.</li>\n  <li>However, you want to custom-tailor the collection for each of the said main HTML elements.</li>\n  <li>While there’s just one HTML attributes collection, we have three elements. The only feasible way to clone the collection into three is by retrieving it repeatedly via <em>ViewData.GetEditorHtmlAttributes()</em>.</li>\n  <li>In each of the three collections (<em>fileInputAttributes, hiddenInputAttributes, buttonAttributes</em>), you want to add new items according to the code snippet. It will mostly be statements that invoke event handlers in a JavaScript file that you’ll implement next.</li>\n  <li>Please note the <em>currentFilePathId</em> variable at the top. It identifies the HTML element to which the JavaScript code will put the GUID received from the backend controller.</li>\n</ol>","code":{"src":"if (currentPageId == 0)\n{\n\t// When in Recorded data tab:\n\t\n\t// Implemented in the previous step.\n}\nelse\n{\n\t// When in Form builder tab and in the Form widget:\n\n\tstring currentFilePathId = Html.IdFor(model => model.FileGuid).ToString();\n\tIDictionary<string, object> fileInputAttributes = ViewData.GetEditorHtmlAttributes();\n\tfileInputAttributes[\"onchange\"] = \"medioClinic.mediaLibraryUploaderComponent.renderFileDetails(this);\";\n\tIDictionary<string, object> hiddenInputAttributes = ViewData.GetEditorHtmlAttributes();\n\tIDictionary<string, object> buttonAttributes = ViewData.GetEditorHtmlAttributes();\n\tbuttonAttributes[\"onclick\"] = $\"medioClinic.mediaLibraryUploaderComponent.uploadFile(this, \\\"{GetActionUrl(currentFilePathId)}\\\");\";\n\tbuttonAttributes[\"type\"] = \"button\";\n\n\t<div class=\"kn-media-library-uploader grey lighten-5\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col s6\">\n\t\t\t\t@Html.CustomInput(\"file\", \"mediaLibraryUploader\", string.Empty, fileInputAttributes)\n\t\t\t\t@Html.HiddenFor(model => model.FileGuid, hiddenInputAttributes)\n\t\t\t</div>\n\t\t\t<div class=\"kn-upload-file-details col s6\">\n\t\t\t\t<div class=\"kn-file-size\"></div>\n\t\t\t\t<div class=\"kn-file-type\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col s6 upload-button\">\n\t\t\t\t@Html.Button(Html.Localize(\"FormComponent.MediaLibraryUploader.Upload\"), buttonAttributes)\n\t\t\t</div>\n\t\t</div>\n\t</div>\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7d85e322-e8f8-4adb-8979-40b2650631df","_parentId":"0d2464ba-8705-4d76-9b67-dd6b8cf77379","_type":"component","title":"Demo: Creating an advanced form component","displayTitle":"Demo: Creating an advanced form component"},{"body":"<p>Add JavaScript logic to the form component. It will handle the upload process before the whole form is post to the server.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To add JavaScript logic in a clean and maintainable way, you again want to use a separate sub-namespace of your <em>window.medioClinic</em> namespace.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Content</em>, create a new <em>“FormComponents”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibraryUploader”</em> subfolder.</li>\n  <li>In that subfolder, create a new “media-library-uploader-component.js” file.</li>\n  <li>Create the <em>“mediaLibraryUploaderComponent”</em> sub-namespace.</li>\n  <li>As you go, you can also add the first function right away—the <em>“renderFileDetails”</em> function.</li>\n  <li>The function is called each time a site visitor selects a file for upload. It does an initial validation and populates the two <em>&lt;div /&gt;</em> elements with the file size and the MIME type.</li>\n</ol>","code":{"src":"window.medioClinic = window.medioClinic || {};\n\n(function (mediaLibraryUploaderComponent) {\n    mediaLibraryUploaderComponent.renderFileDetails = function (target) {\n        var mbSize = 1048576;\n        var file = target.files[0];\n\n        if (file) {\n            var detailsElement = target.parentElement.parentElement.querySelector(\".kn-upload-file-details\");\n            var uploadButton = target.parentElement.parentElement.parentElement.querySelector(\".upload-button button\");\n\n            if (file.type === \"image/jpeg\" || file.type === \"image/png\") {\n                var fileSize = 0;\n                uploadButton.disabled = false;\n\n                if (file.size > mbSize) {\n                    fileSize = (Math.round(file.size * 100 / mbSize) / 100).toString() + 'MB';\n                } else {\n                    fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'kB';\n                }\n\n                detailsElement.querySelector(\".kn-file-size\").innerHTML =\n                    \"<strong>Size:</strong> \"\n                    + fileSize;\n                detailsElement.querySelector(\".kn-file-type\").innerHTML =\n                    \"<strong>Type:</strong> \"\n                    + file.type;\n            } else {\n                detailsElement.querySelector(\".kn-file-type\").innerHTML =\n                    \"<strong>Type:</strong> Invalid file type. Please upload a .jpg or .png file.\";\n\n                uploadButton.disabled = true;\n            }\n        }\n    };\n}(window.medioClinic.mediaLibraryUploaderComponent = window.medioClinic.mediaLibraryUploaderComponent || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>At this point, add a CSS file that takes care of the component’s styling.</p>\n<ol>\n  <li>In the same <em>MedioClinic &gt; Content &gt; FormComponents &gt; MediaLibraryUploader</em> folder, create a new <em>“MediaLibraryUploaderComponent.css”</em> file.</li>\n  <li>Add styling according to this code snippet.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"select {\n    display: initial;\n}\n\n.kn-media-library-uploader {\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    margin-bottom: 8px;\n}\n\n    .kn-media-library-uploader:active {\n        border-bottom: 2px solid #26a69a;\n    }\n\n    .kn-media-library-uploader > div.row {\n        margin-bottom: initial;\n    }\n\n        .kn-media-library-uploader > div.row:first-of-type {\n            min-height: 3rem;\n        }","lang":"css"},"strapline":""},{"title":"","body":"<p>Before you can handle the file upload process in the <em>uploadFile</em> method (shown in the last slide), you may want to first create some background functions to support that process.</p>\n<p>All these functions can stay local; not visible outside of the lexical environment of the sub-namespace.</p>\n<ol>\n  <li>As there can be multiple instances of the form component on a single page, you first want to find a way to get a reference to the <em>&lt;form /&gt;</em> HTML element that the component runs within.</li>\n  <li>Thus, you need a <em>getParentForm</em> function.</li>\n  <li>The function is a recursive one; it calls itself until a terminating condition occurs.</li>\n  <li>In each recursive iteration, the function inspects the <em>tagName</em> property of the current <em>parentElement</em>, until it eventually encounters a <em>&lt;form /&gt;</em> element.</li>\n</ol>","code":{"src":"var getParentForm = function (target, mostParentElement) {\n\tif (!mostParentElement) {\n\t\tmostParentElement = document.getElementsByTagName(\"body\")[0];\n\t}\n\n\tif (target !== mostParentElement) {\n\t\tvar parent = target.parentElement;\n\n\t\tif (parent.tagName === \"FORM\") {\n\t\t\treturn parent;\n\t\t} else {\n\t\t\treturn getParentForm(parent, mostParentElement);\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Now, implement the <em>processErros</em> local function.</p>\n<ol>\n  <li>The function is nearly identical to the eponymous <em>processErrors</em> function in the <em>window.medioClinic.dropzoneCommon</em> namespace, except for one thing.</li>\n  <li>It is the absence of the localization service.</li>\n  <li>As a result, only fixed literals can be used in this case.</li>\n</ol>","code":{"src":"var processErrors = function (statusCode) {\n\tvar errorFlag = \"error\";\n\n\tif (statusCode >= 500) {\n\t\twindow.medioClinic.showMessage(\n\t\t\t\"The upload of the image failed. Please contact the system administrator.\",\n\t\t\terrorFlag);\n\t} else if (statusCode === 422) {\n\t\twindow.medioClinic.showMessage(\n\t\t\t\"The uploaded image could not be processed. Please contact the system administrator.\",\n\t\t\terrorFlag);\n\t} else {\n\t\twindow.medioClinic.showMessage(\n\t\t\t\"An unknown error happened. Please contact the system administrator.\",\n\t\t\terrorFlag);\n\t}\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Next, a trio of event handlers should be created: <em>onUploadCompleted, onUploadProgressChange</em>, and <em>onUploadFailed</em>.</p>\n<ol>\n  <li>Let’s start with <em>onUploadCompleted.</em></li>\n  <li>The method makes sure that the GUID of the media library file gets inserted into the hidden <em>&lt;input /&gt;</em> element.</li>\n  <li>First, the event handler needs to tell all the elements apart (in a given page). It will take the ID from the backend controller (previously captured into the <em>currentFilePathId</em> variable in the partial view).</li>\n  <li>You may ask yourself, why you need to pass the ID from the partial view to the backend controller and then take it back from it. Good question. The reason is that the <em>onUploadCompleted </em>function is an event handler. As such, it has almost no sense of context. It is invoked with just the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">Event</a> object as an argument, nothing else. Thus, the current ID must be passed around to the controller action and back, together with the payload (the GUID).</li>\n</ol>","code":{"src":"var onUploadCompleted = function (e) {\n\tif (e.target.status >= 200 && e.target.status < 300) {\n\t\tvar responseObject = JSON.parse(e.target.response);\n\t\tvar filePathElement = document.getElementById(responseObject.filePathId);\n\t\tfilePathElement.value = responseObject.fileGuid;\n\t\twindow.medioClinic.showMessage(\n\t\t\t\"Upload of the image is complete. File GUID: \"\n\t\t\t+ responseObject.fileGuid, \"info\");\n\t} else {\n\t\tprocessErrors(e.target.status);\n\t}\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>If you wonder what the complexity of the remaining two functions will be (<em>onUploadProgressChange, onUploadFailed)</em>, don’t worry. These functions certainly won’t set the world on fire.</p>\n<ol>\n  <li>Let’s start with <em>onUploadProgressChange.</em></li>\n  <li>The function just computes a percentage of the current upload progress and logs it to the browser console.</li>\n  <li>The <em>onUploadFailed</em> function is even simpler as it just calls <em>processErrors</em> with the status code as an argument.</li>\n</ol>","code":{"src":"var onUploadProgressChange = function (e) {\n\tvar percentComplete = Math.round(e.loaded * 100 / e.total);\n\tconsole.info(\n\t\t\"Upload progress: \"\n\t\t+ percentComplete + \"%\");\n};\n\nvar onUploadFailed = function (e) {\n\tprocessErrors(e.target.status);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>As a last step in this code file, you can now write down the code of the <em>uploadFile</em> method that, literally, uploads the file to the backend controller.</p>\n<ol>\n  <li>The method is an event handler of the <em>onclick</em> event of the upload button.</li>\n  <li>It takes reference to that button, as well as a URL decorated with security information.</li>\n  <li>In the method, you create an ordinary <em>XMLHttpRequest</em> object to reach the background controller.</li>\n  <li>Then, you’ll want to call the <em>getParentForm</em> method, so that you can create a <em>FormData</em> object with a reference of the parent form in hand.</li>\n  <li>Then, you’ll hook into the <em>load</em>, <em>progress</em> and <em>error</em> events with the event handler methods you’ve created in the previous steps.&nbsp;</li>\n  <li>Finally, you’ll send the <em>FormData</em> object via the <em>XMLHttpRequest</em> object.</li>\n</ol>","code":{"src":"mediaLibraryUploaderComponent.uploadFile = function (target, url) {\n\tif (url && url.length > 0) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\tvar parentForm = getParentForm(target, null);\n\t\tvar formData = new FormData(parentForm);\n\t\txhr.addEventListener(\"load\", onUploadCompleted, false);\n\t\txhr.addEventListener(\"progress\", onUploadProgressChange, false);\n\t\txhr.addEventListener(\"error\", onUploadFailed, false);\n\t\txhr.open(\"POST\", url);\n\t\txhr.send(formData);\n\t}\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"98533188-f221-4593-be51-eec52ad93368","_parentId":"0d2464ba-8705-4d76-9b67-dd6b8cf77379","_type":"component","title":"Adding JavaScript functionality to the component","displayTitle":"Adding JavaScript functionality to the component"},{"body":"<p>Let’s connect the last link in the whole chain—the controller. It bears a general resemblance to the backend controllers that you’ve implemented earlier. Specifically, the controller shares the previously created helper classes and some of the design patterns.</p>\n<div class=\"infobox warning\"><p>The controller presented in this demo chapter saves all received files into a single (root) folder of the configured media library. If the media libraries are configured to use cloud storage services in the background (like Azure Blob Storage or Amazon S3), you should bring additional measures to avoid storing more than <a href=\"https://docs.kentico.com/k12/configuring-kentico/configuring-the-environment-for-content-editors/configuring-media-libraries#Configuringmedialibraries-Medialibrarylimitationswhenstoringfilesinanexternalstorage\">100 files per media library folder</a>.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the first phase, you’ll add the required dependencies and a string property.</p>\n<ol>\n  <li>First, you want to define a temporary file system path for all uploads.</li>\n  <li>Then, you’ll need the <em>IFileManagementHelper</em> instance to ensure the local upload folder, and an <em>IErrorHelper</em> instance to handle exceptions in a unified way.</li>\n  <li>Assign these instances to getter-only properties, through a constructor.</li>\n</ol>","code":{"src":"using System;\nusing System.IO;\nusing System.Web;\nusing System.Web.Mvc;\n\nusing CMS.Helpers;\nusing CMS.MediaLibrary;\nusing CMS.SiteProvider;\nusing MedioClinic.Utils;\n\nnamespace MedioClinic.Controllers\n{\n    public class MediaLibraryUploaderController : Controller\n    {\n        protected string TempPath => $\"{Server.MapPath(@\"~\\\")}App_Data\\\\Temp\\\\MediaLibraryUploader\";\n\n        protected IFileManagementHelper FileManagementHelper { get; }\n\n        protected IErrorHelper ErrorHelper { get; }\n\n        public MediaLibraryUploaderController(\n            IFileManagementHelper fileManagementHelper, \n            IErrorHelper errorHandler)\n        {\n            FileManagementHelper = fileManagementHelper \n                ?? throw new ArgumentNullException(nameof(fileManagementHelper));\n            ErrorHelper = errorHandler \n                ?? throw new ArgumentNullException(nameof(errorHandler));\n        }\n\t\t\n\t\t...\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add the workhorse of the controller—the <em>Upload</em> action method.</p>\n<ol>\n  <li>The method uses one of the helpers to ensure the existence of the temporary upload folder.</li>\n  <li>Then, it concatenates the path with the file name to produce the “<em>imagePath”</em> variable.</li>\n  <li>To reveal some of the metadata about the file, it needs a <em>CMS.IO.FileInfo</em> object.</li>\n  <li>Once the object is created, it passes the <em>“fileInfo”</em> object to the <em>“CreateMediaFile”</em> helper method (implemented in just a moment).</li>\n</ol>","code":{"src":"[HttpPost]\npublic ActionResult Upload(string filePathId, int mediaLibraryId)\n{\n\tif (Request.Files[0] is HttpPostedFileWrapper file && file != null)\n\t{\n\t\tstring directoryPath = null;\n\n\t\ttry\n\t\t{\n\t\t\tdirectoryPath = FileManagementHelper.EnsureUploadDirectory(TempPath);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\treturn ErrorHelper.HandleException(nameof(MediaLibraryUploaderController), nameof(Upload), ex);\n\t\t}\n\n\t\tif (!string.IsNullOrEmpty(directoryPath))\n\t\t{\n\t\t\tstring imagePath = null;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\timagePath = FileManagementHelper.GetTempFilePath(directoryPath, file.FileName);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\treturn ErrorHelper.HandleException(nameof(MediaLibraryUploaderController), nameof(Upload), ex);\n\t\t\t}\n\n\t\t\tif (!string.IsNullOrEmpty(imagePath))\n\t\t\t{\n\t\t\t\tCMS.IO.FileInfo fileInfo = null;\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfileInfo = GetFileInfo(file, imagePath);\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\treturn ErrorHelper.HandleException(\n\t\t\t\t\t\tnameof(MediaLibraryUploaderController), \n\t\t\t\t\t\tnameof(Upload),\n\t\t\t\t\t\tex, \n\t\t\t\t\t\tErrorHelper.UnprocessableStatusCode);\n\t\t\t\t}\n\n\t\t\t\tif (fileInfo != null)\n\t\t\t\t{\n\t\t\t\t\treturn CreateMediaFile(filePathId, mediaLibraryId, imagePath, fileInfo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn new HttpStatusCodeResult(ErrorHelper.UnprocessableStatusCode);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The <em>GetFileInfo</em> method produces the <em>fileInfo</em> object mentioned earlier.</p>\n<ol>\n  <li>Initially, it takes a reference to the file stream, together with the <em>filePath</em> parameter.</li>\n  <li>Then, it saves the stream to the file system.</li>\n  <li>Finally, it returns the <em>CMS.IO.FileInfo</em> object with all the metadata.</li>\n</ol>","code":{"src":"protected CMS.IO.FileInfo GetFileInfo(HttpPostedFileWrapper file, string filePath)\n{\n\tbyte[] data = new byte[file.ContentLength];\n\tfile.InputStream.Seek(0, SeekOrigin.Begin);\n\tfile.InputStream.Read(data, 0, file.ContentLength);\n\tCMS.IO.File.WriteAllBytes(filePath, data);\n\tCMS.IO.FileInfo fileInfo = CMS.IO.FileInfo.New(filePath);\n\n\treturn fileInfo;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, you’ll add a <em>CreateMediafileInfo</em> method that returns a <em>CMS.MediaLibrary.MediaFileInfo</em> object.</p>\n<ol>\n  <li>This method inspects the metadata in the <em>FileInfo</em> object and populates properties of the <em>MediaFileInfo</em> object with them.</li>\n  <li>Then, it sets the properties into the database and returns the object to its client code.</li>\n</ol>","code":{"src":"protected MediaFileInfo CreateMediafileInfo(\n\tint mediaLibraryId, CMS.IO.FileInfo fileInfo)\n{\n\tMediaFileInfo mediaFile = new MediaFileInfo(fileInfo?.FullName, mediaLibraryId);\n\tmediaFile.FileName = fileInfo.Name.Substring(0, fileInfo.Name.Length - fileInfo.Extension.Length);\n\tmediaFile.FileExtension = fileInfo.Extension;\n\tmediaFile.FileMimeType = MimeTypeHelper.GetMimetype(fileInfo.Extension);\n\tmediaFile.FileSiteID = SiteContext.CurrentSiteID;\n\tmediaFile.FileLibraryID = mediaLibraryId;\n\tmediaFile.FileSize = fileInfo.Length;\n\tMediaFileInfoProvider.SetMediaFileInfo(mediaFile);\n\n\treturn mediaFile;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The last kid on the block—the <em>CreateMediaFile</em> method—can be considered a continuation of the <em>Upload</em> action method. It is literally code extracted from the final part of the <em>Upload</em> method that keeps the parent method concise and easier to understand.</p>\n<ol>\n  <li>First, it calls the <em>CreateMediafileInfo</em> method to save the file into a media library of choice.</li>\n  <li>Then it does the necessary housekeeping and deletes the temporary file created in the beginning.</li>\n  <li>Finally, it crafts a JSON response with an ID of the current hidden HTML element, and a GUID of the newly created media file.&nbsp;</li>\n</ol>","code":{"src":"protected ActionResult CreateMediaFile(string filePathId, int mediaLibraryId, string imagePath, CMS.IO.FileInfo fileInfo)\n{\n\tMediaFileInfo mediaFileInfo = null;\n\n\ttry\n\t{\n\t\tmediaFileInfo = CreateMediafileInfo(mediaLibraryId, fileInfo);\n\t}\n\tcatch (Exception ex)\n\t{\n\t\treturn ErrorHelper.HandleException(\n\t\t\tnameof(MediaLibraryUploaderController),\n\t\t\tnameof(CreateMediaFile),\n\t\t\tex,\n\t\t\tErrorHelper.UnprocessableStatusCode);\n\t}\n\n\ttry\n\t{\n\t\tCMS.IO.File.Delete(imagePath);\n\t}\n\tcatch (Exception ex)\n\t{\n\t\tErrorHelper.LogException(nameof(MediaLibraryUploaderController.Upload), ex);\n\t}\n\n\treturn Json(new\n\t{\n\t\tfilePathId,\n\t\tfileGuid = mediaFileInfo.FileGUID.ToString()\n\t});\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"38249748-c791-4f10-949b-dd979bdd6cdd","_parentId":"0d2464ba-8705-4d76-9b67-dd6b8cf77379","_type":"component","title":"Implementing the backend controller","displayTitle":"Implementing the backend controller"},{"body":"<p>Congratulations! You’ve just completed the process of creating an advanced form component. You can give it a try on the <em>Form builder</em> tab now.</p>\n<p>Once you create an image dimension validation rule (below), you’ll give your content editors a way to further configure your media library uploader form component. It will refuse images with dimensions that exceed a certain range.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"5fa32ba4-71d4-4cb9-ae24-df63dcb49e0c","_parentId":"c1d79251-6eb0-4757-b18e-f7a32e5a719a","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this short demo chapter, you’ll finalize the user story of the media library uploader form component with its accompanying validation rule.</p>\n<p>Although the rule is designed to work primarily with the media library uploader form component, it can very well complement any other form component that works with media library images. For instance, if you ever create a selector form component that allows picking of a media file, this validation rule may let the site visitor know that they picked a file that’s too small or too large.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The validation rule sort of exploits one of the nice features in Kentico: the ability to retrieve a media file in any media library, just by its GUID.</p>\n<p>The nature of a validation rule class is twofold: both static and dynamic. The class defines the configuration model of the validation rules. At the same time, it contains the <em>Validate</em> method that’s spun up every time a site visitor updates the respective form field.</p>\n<p>In the first step, give the class an assembly-level registration attribute, as seen in the code snippet.</p>\n<p>In the attribute, define the ordinary metadata (name, description) through localization macro expressions.</p>\n<p>Add resource strings in the <em>Localization</em> application.</p>\n<p>As a basic (non-comparing) validation rule, this class should inherit from <em>Kentico.Forms.Web.Mvc.ValidationRule&lt;TValue&gt;</em>. In our case, <em>TValue</em> should be constructed into <em>string</em>.</p>\n<p>As requested by the documentation, mark the class with <em>System.SerializableAttribute</em>.</p>\n<p>Override the <em>GetTitle</em> method. This method produces a short summary of how the validation rule is configured in a given form component instance. This helps in maintaining an overview of all the validation rules applied to the form component instance.</p>\n<p>Override the <em>Validate</em> method.</p>\n<p>In the method’s body, try to parse the textual representation of the file GUID (received through the <em>value</em> parameter).</p>\n<p>Then, retrieve the file from any of the media libraries in the current site, by calling <em>MediaFileInfoProvider.GetMediaFileInfo()</em>.</p>\n<p>Finally, leverage the semantics of the <em>&amp;&amp;</em> logical C# operator to simultaneously do a null check and a series of subsequent validation checks.&nbsp;</p>\n<p>In each check, configuration property values are matched against the actual values of the media library file.</p>\n<p>Should anything go wrong in the body of the <em>Validate</em> method, return <em>false</em>.</p>","code":{"src":"using System;\n\nusing CMS.Helpers;\nusing CMS.MediaLibrary;\nusing CMS.SiteProvider;\nusing Kentico.Forms.Web.Mvc;\nusing MedioClinic.Models.FormValidationRules;\n\n[assembly: RegisterFormValidationRule(\n    \"MedioClinic.ValidationRule.MediaLibraryImageDimension\", \n    typeof(MediaLibraryImageDimensionValidationRule), \n    \"{$ValidationRule.MediaLibraryImageDimension.Name$}\", \n    Description = \"{$ValidationRule.MediaLibraryImageDimension.Description$}\")]\n\nnamespace MedioClinic.Models.FormValidationRules\n{\n    [Serializable]\n    public class MediaLibraryImageDimensionValidationRule : ValidationRule<string>\n    {\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MinimumWidth$}\", Order = 0)]\n        public int MinimumWidth { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MaximumWidth$}\", Order = 1)]\n        public int MaximumWidth { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MinimumHeight$}\", Order = 2)]\n        public int MinimumHeight { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MaximumHeight$}\", Order = 3)]\n        public int MaximumHeight { get; set; }\n\n        public override string GetTitle()\n        {\n            return $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MinimumWidth\")}: {MinimumWidth}. \" +\n                $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MaximumWidth\")}: {MaximumWidth}. \" +\n                $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MinimumHeight\")}: {MinimumHeight}. \" +\n                $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MaximumHeight\")}: {MaximumHeight}.\";\n        }\n\n        protected override bool Validate(string value)\n        {\n            Guid guid;\n            guid = Guid.TryParse(value, out guid) ? guid : Guid.Empty;\n\n            if (guid != Guid.Empty)\n            {\n                var mediaFileInfo = MediaFileInfoProvider.GetMediaFileInfo(guid, SiteContext.CurrentSiteName);\n\n                return mediaFileInfo != null\n                    && MinimumWidth <= mediaFileInfo.FileImageWidth\n                    && mediaFileInfo.FileImageWidth <= MaximumWidth\n                    && MinimumHeight <= mediaFileInfo.FileImageHeight\n                    && mediaFileInfo.FileImageHeight <= MaximumHeight;\n            }\n\n            return false;\n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"aac1fc04-7b62-4c4e-9479-0018e844d703","_parentId":"3399cf28-b430-4ed5-ae0e-755c305f9f3f","_type":"component","title":"Demo: Creating a form validation rule","displayTitle":"Demo: Creating a form validation rule"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Suppose a form component that gets the first name and the last name in two separate form fields. It should then store them into a string database field. What is the better way of implementing such component?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"public class FullNameUploaderComponent : FormComponent<FullNameUploaderProperties, string>\n{\n\t[BindableProperty]\n\tpublic string FirstName { get; set; } = string.Empty;\n\t\n\t[BindableProperty]\n\tpublic string LastName { get; set; } = string.Empty;\n\n\tpublic override string GetValue() => $\"{FirstName} {LastName}\";\n\n\tpublic override void SetValue(string value)\n\t{\n\t\tvar matches = System.Text.RegularExpressions.Regex.Matches(value, @\"\\w+\\s\\w+\");\n\t\t\n\t\tif (matches != null && matches.Count > 1)\n\t\t{\n\t\t\tFirstName = matches[0];\n\t\t\tLastName = matches[1];\n\t\t}\n\t}\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"public class FullNameUploaderComponent : FormComponent<FullNameUploaderProperties, string>\n{\n\t[BindableProperty]\n\tpublic string FirstName { get; set; } = string.Empty;\n\t\n\t[BindableProperty]\n\tpublic string LastName { get; set; } = string.Empty;\n\n\tpublic override string SetValue() => $\"{FirstName} {LastName}\";\n\n\tpublic override void GetValue(string value)\n\t{\n\t\tvar matches = System.Text.RegularExpressions.Regex.Matches(value, @\"\\w+\\s\\w+\");\n\t\t\n\t\tif (matches != null && matches.Count > 1)\n\t\t{\n\t\t\tFirstName = matches[0];\n\t\t\tLastName = matches[1];\n\t\t}\n\t}\n}","lang":"csharp"},"feedback":"<p>There's only one difference of this code sample from the other: The usage of \"GetName\" and \"SetName\" names of the overriden methods. In this case, the naming is wrong because these methods were named from the database perspective.</p>","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"<p>Well spotted! The naming of the methods was chosen from the database perspective. Therefore, the second code sample is not only worse than the first one. It is also completely wrong.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"d620da6a-7fcc-496c-afc6-54c4e212ba96","_parentId":"f92402ca-29fa-4c1f-8ebc-fe1d4f717dd7","_type":"component","title":"Form component","displayTitle":"Form component"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Suppose a form for submitting newspaper articles. The form takes the text of the article in its first field and a perex in another. You need to make sure the article itself is significantly larger than the perex. What would such validation rule look like?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"[Serializable]\npublic class ArticleVsPerexValidationRule : ValidationRule<string>\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Article text/perex size ratio\")]\n\tpublic int ArticleTextRatio { get; set; }\n\n\tpublic override string GetTitle()\n\t{\n\t\treturn $\"The text of the article must be {ArticleTextRatio} times larger than the perex.\";\n\t}\n\n\tprotected override bool Validate(string value)\n\t{\n\t\treturn !string.IsNullOrEmpty(value) && value.Length > Form.Fields.DependeeFieldValue.Length * ArticleTextRatio;\n\t}\n}","lang":"csharp"},"feedback":"<p>The significant fault of this code sample lies in the inheritance from <em>ValidationRule&lt;&gt;</em>. Also, no <em>Form.Fields</em> collection is accessible in the scope of the <em>Validate </em>method. The class must inherit from <em>CompareToFieldValidationRule&lt;&gt; </em>instead. Then, the <em>DependeeFieldValue </em>property may be compared to the value argument in the <em>Validate </em>method.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"[Serializable]\npublic class ArticleVsPerexValidationRule : CompareToFieldValidationRule<string>\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Article text/perex size ratio\")]\n\tpublic int ArticleTextRatio { get; set; }\n\n\tpublic override string GetTitle()\n\t{\n\t\treturn $\"The text of the article must be {ArticleTextRatio} times larger than the perex.\";\n\t}\n\n\tprotected override bool Validate(string value)\n\t{\n\t\treturn !string.IsNullOrEmpty(value) && value.Length > DependeeFieldValue.Length * ArticleTextRatio;\n\t}\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Correct. The class must inherit from&nbsp;<em>CompareToFieldValidationRule&lt;&gt;&nbsp;</em>instead. Then, the&nbsp;<em>DependeeFieldValue&nbsp;</em>property may be compared to the value argument in the&nbsp;<em>Validate&nbsp;</em>method.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"e04d9b7d-92f1-42fd-9d03-f9f0a61c67fb","_parentId":"f92402ca-29fa-4c1f-8ebc-fe1d4f717dd7","_type":"component","title":"Validation rule","displayTitle":"Validation rule"},{"body":"<p>Shout out to you! You’ve completed the whole user story of the media library uploader form component.</p>\n<p>Why not give the validation rule a try on the <em>Form builder</em> tab? You can assign the validation rule to an instance of the uploader component, set the minimum and maximum image dimensions, and try it all out on the live site.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9248c77d-184f-4bd1-878c-c10fed00d6b3","_parentId":"3b28bf4f-a60c-453f-b9a5-1b37e9d5b9a3","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will:</p>\n<ol>\n  <li>Learn how to render basic Kentico forms in non-builder pages</li>\n  <li>Learn the basics of ASP.NET MVC display/editor templates</li>\n  <li>Find out the limitations of the presented approach</li>\n</ol>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b371ac33-b12d-47bb-863d-d32f9f7609d6","_parentId":"8540d296-3b32-454b-a1fd-df085ba1f190","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Although enabling page builder is as easy as doing a couple of clicks in the administration interface and writing a few additional lines of code, there may be cases when page builder is not desirable in a page. For instance, if you wish to render a form in a series of structured pages with a consistent look, like blog posts, where each post’s body is wrapped in just a single page field.</p>\n<p>Let’s do a quick coding exercise to test what it takes to render a <strong>basic</strong> Kentico form in the traditional MVC way.</p>\n<div class=\"infobox warning\"><p>We strongly recommend rendering Kentico forms through the <em>Form</em> widget (in builder-enabled pages), not in the traditional ASP.NET MVC fashion. Combining Kentico forms with traditional MVC rendering has significant limitations, including (but not limited to):</p>\n<ul>\n  <li>Only form components with a simple bindable property can be used in the form.</li>\n  <li>Configuration of form components set by content contributors in the <em>Form builder</em> tab is ignored.</li>\n  <li>Validation rules and visibility conditions set in the <em>Form builder</em> tab are ignored.</li>\n  <li>Kentico Smart fields cannot be used.</li>\n  <li>Form field configuration, validation, field visibility, and other form behavior must be set in view models, controllers, and views.</li>\n</ul>\n<p>Currently, the combination of Kentico forms with traditional MVC rendering is not officially supported. In this page, we only aim to provide an alternative approach in case either business or technical requirements dictate to avoid using a builder-enabled page. Additionally, an improved API for rendering form builder forms manually may be provided in future versions of Kentico.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"ef47a94f-abf0-4bd7-822f-81d94baa2f71","_parentId":"f5959db4-6366-46ee-88cb-4014c4c1b80c","_type":"component","title":"Rendering forms without the use of page builder","displayTitle":"Rendering forms without the use of page builder"},{"body":"<p>In the detail page of each form in the <em>Forms</em> application, Kentico allows for generating a model class of the form. Such a model gives developers a great head-start to add the form to the project in the traditional MVC fashion.</p>\n<p>The best way to do forms in traditional ASP.NET MVC is with annotated view models, and an MVC feature called display/editor templates.</p>\n<p>With MVC editor templates in play, the developer just gives the MVC runtime a view model and a very simple view. In the Razor view, developers only write the surrounding HTML markup, and put the references to properties of the model into it, without caring about their types. The MVC runtime then automatically renders proper HTML controls (with proper validation behavior), based on the model.</p>\n<p>A very basic example of editor templates can be demonstrated with the following view model:</p>\n<pre><code class=\"language-csharp\">public class Contact\n{\n\tpublic string FirstName { get; set; }\n\tpublic string LastName { get; set; }\n\tpublic int Age { get; set; }\n}</code></pre>\n<p>With such a model, the form’s view can be as simple as the following:</p>\n<pre><code class=\"language-csharp\">@model Contact\n@Html.EditorFor(model =&gt; model.FirstName)\n@Html.EditorFor(model =&gt; model.LastName)\n@Html.EditorFor(model =&gt; model.Age)</code></pre>\n<p>In fact, the view can be even simpler. Like so:</p>\n<pre><code class=\"language-csharp\">@model Contact\n@Html.DisplayForModel()</code></pre>\n<p>This is pretty much everything the MVC framework needs. It uses built-in editor templates and produces the complete HTML markup of the form:</p>\n<figure data-asset-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\" data-image-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b691a9ab-0120-406b-b80a-28750fce8514/036.png\" data-asset-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\" data-image-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\" alt=\"\"></figure>\n<p><br></p>\n<p>Developers can of course override the default templates by writing simple Razor files, named after CLR types they operate on (again, it can be either a framework type, or a custom class or struct). When placed into a conventional file system location, these Razor files are then picked automatically by the MVC runtime every time it comes across data of such a type anywhere deep in the whole view model.</p>\n<p>The above code snippet uses a model in which the CLR types of the <em>FirstName</em>, <em>LastName</em>, and <em>Age</em> properties provide complete information about their nature. However, in cases like email address form fields, URL fields, password fields, or hidden fields, developers may want to tell the MVC framework to take additional measures in respect to formatting and validating the values in the form.</p>\n<p>To instruct MVC in such ways, one needs to annotate the model with <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations\">System.ComponentModel.DataAnnotations</a> attributes.</p>\n<p>The following code snippet demonstrates some of the capabilities of data annotations.</p>\n<pre><code class=\"language-csharp\">public bool Boolean { get; set; }\n\n[DataType(DataType.EmailAddress)]\npublic string EmailAddress { get; set; }\n\npublic decimal Decimal { get; set; }\n\n[HiddenInput]\npublic string Hidden { get; set; }\n\n[HiddenInput(DisplayValue = false)]\npublic string HiddenAndInvisible { get; set; }\n\n[DataType(DataType.Html)]\npublic string Html { get; set; }\n\n[Required]\n[Range(10, 100)]\npublic int Integer { get; set; }\n\n[DataType(DataType.MultilineText)]\npublic string MultilineText { get; set; }\n\npublic bool? NullableBoolean { get; set; }\n\n[DataType(DataType.Password)]\npublic string Password { get; set; }\n\npublic string String { get; set; }\n\n[DataType(DataType.Url)]\npublic string Url { get; set; }</code></pre>\n<p>These annotations, together with built-in editor templates, would produce a form like this:</p>\n<pre><code class=\"language-csharp\">//--------------------------------------------------------------------------------------------------\n// &lt;auto-generated&gt;\n//\n//     This code was generated by code generator tool.\n//\n//     To customize the code use your own partial class. For more info about how to use and customize\n//     the generated code see the documentation at http://docs.kentico.com.\n//\n// &lt;/auto-generated&gt;\n//--------------------------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\n\nusing CMS;\nusing CMS.Base;\nusing CMS.Helpers;\nusing CMS.DataEngine;\nusing CMS.OnlineForms.Types;\nusing CMS.OnlineForms;\n\n[assembly: RegisterBizForm(FloridaEventRegistrationItem.CLASS_NAME, typeof(FloridaEventRegistrationItem))]\n\nnamespace CMS.OnlineForms.Types\n{\n\t/// &lt;summary&gt;\n\t/// Represents a content item of type FloridaEventRegistrationItem.\n\t/// &lt;/summary&gt;\n\tpublic partial class FloridaEventRegistrationItem : BizFormItem\n\t{\n\t\t#region \"Constants and variables\"\n\n\t\t/// &lt;summary&gt;\n\t\t/// The name of the data class.\n\t\t/// &lt;/summary&gt;\n\t\tpublic const string CLASS_NAME = \"BizForm.FloridaEventRegistration\";\n\n\t\t...\n\t}\n}</code></pre>\n<p>All the developer needs to do in the top-level MVC view, is to either call <em>“Html.EditorForModel()”</em>, or call several <em>“Html.EditorFor(model =&gt; model.SomeProperty)”</em> for every property.</p>\n<p>With the first option in play, the MVC framework will inspect the model, and it will automatically render each inner part of the model with editor templates. It will search for Razor files named after the types of the properties, and it will render them. Otherwise, it will fall back to the built-in templates.</p>\n<p>It will search in the following locations in the project:</p>\n<ul>\n  <li>Areas &gt; [AreaName] &gt; Views &gt; [ControllerName] &gt; DisplayTemplates</li>\n  <li>Areas &gt; [AreaName] &gt; Views &gt; Shared &gt; DisplayTemplates</li>\n  <li>Views &gt; [ControllerName] &gt; DisplayTemplates</li>\n  <li>Views &gt; Shared &gt; DisplayTemplates</li>\n</ul>\n<p>With the second option, it will do the same for each particular property in the model.</p>\n<p>Calling <em>Html.EditorFor()</em> per each property makes sense in cases where more control over the HTML markup is required. For instance, the developer may want to add horizontal rules between form fields. Such markup can be enclosed in either a partial view, so that the partial view can be explicitly invoked by the developer, or it can be put into an editor template of its own, to be invoked by MVC automatically, whenever it sees data of a corresponding CLR type anywhere in the view model.</p>\n<p>This theory chapter was an excerpt of a bigger topic of MVC display/editor templates and data annotations in MVC. To take all the benefits, we highly recommend reading a <a href=\"https://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html\">short blogpost series</a> (about an hour of reading) of the original author of this feature, Brad Wilson. The series was written in the days of MVC 2, however, nearly all of the concepts are the same in MVC 5 (except for Razor being a preferred view engine in MVC 5). For a detailed explanation of these concepts in Kentico MVC projects, we recommend reading a two-part blogpost series published on <a href=\"https://devnet.kentico.com/articles/render-online-forms-with-asp-net-mvc-display-templates-and-the-code-generator—part-1\">DevNet</a>. Some of the concepts presented in the article remain valid for the current version of Kentico.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"63ee83c5-5cb0-47ce-9b6d-db307feadf0d","_parentId":"24c0228d-ab2c-4e47-a03a-85de5bf504f9","_type":"component","title":"Traditional ASP.NET MVC forms","displayTitle":"Traditional ASP.NET MVC forms"},{"body":"<p>In this task, your goal is to do a quick proof of the built-in capabilities in ASP.NET MVC, not a full-blown page with all the elements and styling.</p>\n<p>You’re supposed to:</p>\n<ul>\n  <li>Generate the model of a form&nbsp;</li>\n  <li>Create a form repository and a view model</li>\n  <li>Annotate the view model to leverage the built-in formatting and validation capabilities of ASP.NET MVC</li>\n  <li>Create a controller, to form a temporary test bench of the future form</li>\n  <li>Let Visual Studio scaffold a simple view</li>\n</ul>\n<p>As usual, if you don’t feel like exploring things yourself, you can follow along in the next demo chapter.</p>\n<div class=\"infobox warning\"><p>We strongly recommend rendering Kentico forms through the <em>Form</em> widget (in builder-enabled pages), not in the traditional ASP.NET MVC fashion. Combining Kentico forms with traditional MVC rendering has significant limitations, including (but not limited to):</p>\n<ul>\n  <li>Only form components with a simple bindable property can be used in the form.</li>\n  <li>Configuration of form components set by content contributors in the <em>Form builder</em> tab is ignored.</li>\n  <li>Validation rules and visibility conditions set in the <em>Form builder</em> tab are ignored.</li>\n  <li>Kentico Smart fields cannot be used.</li>\n  <li>Form field configuration, validation, field visibility, and other form behavior must be set in view models, controllers, and views.</li>\n</ul>\n<p>Currently, the combination of Kentico forms with traditional MVC rendering is not officially supported. In this page, we only aim to provide an alternative approach in case either business or technical requirements dictate to avoid using a builder-enabled page. Additionally, an improved API for rendering form builder forms manually may be provided in future versions of Kentico.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"0e08ee55-c26f-4a91-8893-5fd5e9596f6b","_parentId":"61e97942-d06c-439f-a12a-bc4e7fa153e3","_type":"component","title":"Task: Rendering forms with MVC editor templates","displayTitle":"Task: Rendering forms with MVC editor templates"},{"body":"<p>This demo chapter presents a basic way of adding Kentico forms into an MVC project. We aim to keep it simple to prove the concept. The demo deliberately avoids using any composite models, any CSS styling, any creation of custom partial views, and editor templates alike.</p>\n<p>As advertised in the previous task chapter, you’ll use the generated Kentico model, you’ll abstract from it using a view model, and you’ll create a form repository to be used for various forms in the site. Once you create a testbed controller, you’ll then let Visual Studio scaffold a view.</p>\n<p>As a result, you’ll create a simple page that only contains the form (with no Kentico page data, to keep things simple).</p>\n<figure data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4294fe3e-8566-4ad4-b895-072f25338853/038.png\" data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" alt=\"\"></figure>\n<p><br></p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start by saving the generated Kentico model.</p>\n<ol>\n  <li>In the <em>Forms</em> application, create a form.</li>\n  <li>Once created, go to the <em>Form builder</em> tab.</li>\n  <li>Put two <em>Text input</em> form components into the form.</li>\n  <li>First one should have <em>“First name”</em> as a label, and <em>“FirstName”</em> as its name. Once set, the properties should be saved by pressing <em>Apply</em>.</li>\n  <li>The second one should be called <em>“Last name”</em>, with <em>“LastName”</em> as its name.</li>\n  <li>Place an <em>Email</em> form component onto the form. Call it <em>“Email”</em>, with <em>“EmailInput”</em> as the (code) name.</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3c2bb060-0fda-4c82-ba17-b392f3513b4d/039.png","alt":"039.png"},"strapline":""},{"title":"","body":"<p>Generate the model class.</p>\n<ol>\n  <li>Navigate to the <em>Code</em> tab.</li>\n  <li>Select a destination path and save the code file.</li>\n  <li>If you encounter an error along the way, check your file system permissions.</li>\n  <li>The identity (the user account) of your application pool needs to have permissions to modify the folder of your <em>CMS</em> project.</li>\n  <li>Alternatively, you can copy and paste the code into a new file in Visual Studio (next step).</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9ffb6470-edcd-4b79-9609-74d71318017c/040.png","alt":"040.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"1c229a4d-08a3-4cfe-a609-4ac853b88aa2","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Demo: Rendering forms with MVC editor templates","displayTitle":"Demo: Rendering forms with MVC editor templates"},{"body":"<p>In the next series of steps, do the actual coding.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Put the model into the solution.</p>\n<ol>\n  <li>In the <em>Business</em> project, in the <em>Generated</em> folder, create a new <em>“Forms”</em> subfolder.</li>\n  <li>Copy the generated code into a new code file in this subfolder (e.g., <em>“FloridaEventRegistration.generated.cs”</em>).</li>\n  <li>Please note that the generated class is partial, and it inherits from <em>CMS.OnlineForms.BizFormItem</em>. This will soon play an important role in finding a way to put data of various forms into Kentico in a unified manner.</li>\n</ol>","code":{"src":"//--------------------------------------------------------------------------------------------------\n// <auto-generated>\n//\n//     This code was generated by code generator tool.\n//\n//     To customize the code use your own partial class. For more info about how to use and customize\n//     the generated code see the documentation at http://docs.kentico.com.\n//\n// </auto-generated>\n//--------------------------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\n\nusing CMS;\nusing CMS.Base;\nusing CMS.Helpers;\nusing CMS.DataEngine;\nusing CMS.OnlineForms.Types;\nusing CMS.OnlineForms;\n\n[assembly: RegisterBizForm(FloridaEventRegistrationItem.CLASS_NAME, typeof(FloridaEventRegistrationItem))]\n\nnamespace CMS.OnlineForms.Types\n{\n\t/// <summary>\n\t/// Represents a content item of type FloridaEventRegistrationItem.\n\t/// </summary>\n\tpublic partial class FloridaEventRegistrationItem : BizFormItem\n\t{\n\t\t#region \"Constants and variables\"\n\n\t\t/// <summary>\n\t\t/// The name of the data class.\n\t\t/// </summary>\n\t\tpublic const string CLASS_NAME = \"BizForm.FloridaEventRegistration\";\n\n\t\t...\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Design the basic architecture.</p>\n<ol>\n  <li>In the <a href=\"https://docs.kentico.com/api12/\">API examples</a> section of the Kentico documentation, find a page dedicated to <a href=\"https://docs.kentico.com/api12/content-management/form-data\">form data</a>.</li>\n  <li>In the first code sample, you’ll find that one of the ways to add data records to a form is by calling a <em>CMS.OnlineForms.BizFormItem.New</em> static method.</li>\n  <li>Once created a form record can be set up with the <em>SetValue</em> method and saved through the Insert method.</li>\n  <li>You want to base the saving mechanism in your future form repository on this pattern.</li>\n</ol>","code":{"src":"// Gets the form object representing the 'ContactUs' form on the current site\nBizFormInfo formObject = BizFormInfoProvider.GetBizFormInfo(\"ContactUs\", SiteContext.CurrentSiteID);\n\nif (formObject != null)\n{\n    // Gets the class name of the 'ContactUs' form\n    DataClassInfo formClass = DataClassInfoProvider.GetDataClassInfo(formObject.FormClassID);\n    string formClassName = formClass.ClassName;\n\n    // Creates a new data record for the form\n    BizFormItem newFormItem = BizFormItem.New(formClassName);\n\n    // Sets the values for the form's fields (UserMessage in this case)\n    newFormItem.SetValue(\"UserMessage\", \"This is a message submitted through the API.\");\n\n    // Saves the new form record into the database\n    // Set values for all 'Required' fields in the form before calling the Insert method, otherwise an exception will occur\n    newFormItem.Insert();\n\n    // Obtains a factory object used to create a form notification sender service for the given form\n    IBizFormMailSenderFactory senderFactory = Service.Resolve<IBizFormMailSenderFactory>();\n\n    // Creates an instance of the form notification sender for the inserted form item\n    IBizFormMailSender sender = senderFactory.GetFormMailSender(formObject, newFormItem);\n\n    // Sends a notification email to users (as specified on the form's 'Email notification' tab)\n    sender.SendNotificationEmail();\n\n    // Sends a confirmation email to the submitter (based on the form's autoresponder settings)\n    sender.SendConfirmationEmail();\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the testbed controller.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, create a new <em>“FormTestController.cs”</em> class file.</li>\n  <li>In order to utilize the common logic, inherit from <em>BaseController</em>.</li>\n  <li>In the controller, you’ll want to have two <em>ActionResult</em> methods called the same way: <em>“Index”</em>. While the first will handle the rendering of the page with the form through a GET request, the other will consume the site visitor’s data through a POST request.</li>\n  <li>For now, just create stubs of the two action methods.</li>\n  <li>Leave your file open for further edits.</li>\n</ol>","code":{"src":"public class FormTestController : BaseController\n{\n\t// GET: FormTest\n\t[HttpGet]\n\tpublic ActionResult Index()\n\t{\n\t\t...\n\t}\n\n\t// POST: FormTest\n\t[HttpPost]\n\tpublic ActionResult Index(\n\t\t[System.Web.Http.FromBody] PageViewModel<FloridaEventRegistrationViewModel> uploadModel)\n\t{\n\t\t...\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a view model.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“Forms”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“FloridaEventRegistrationViewModel.cs”</em> class file.</li>\n  <li>Add code according to this code sample.</li>\n  <li>Make sure the property members have the same names as the field names you’ve specified on the Form builder tab in Kentico.</li>\n  <li>Note that you use the data annotations to further specify the nature of the properties in the model (beyond the information carried by the CLR type).</li>\n  <li>Leave this file open for further edits.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nusing Business.Repository.Forms;\n\nnamespace MedioClinic.Models.Forms\n{\n    public class FloridaEventRegistrationViewModel : IViewModel\n    {\n        protected const string RequiredFieldErrorMessage = \"This field is required.\";\n        protected const string TextFieldLengthErrorMessage = \"The first name mustn't exceed 200 characters.\";\n\n        [Display(Name = \"First name\", Prompt = \"Enter your given name here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string FirstName { get; set; }\n\n        [Display(Name = \"Last name\", Prompt = \"Enter your surname here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string LastName { get; set; }\n\n        [Display(Name = \"Email\", Prompt = \"Enter your email address here\")]\n        [EmailAddress(ErrorMessage = \"The value isn't a valid email address.\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string EmailInput { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create code files that support the future form repository.</p>\n<ol>\n  <li>In <em>Business &gt; Repository</em>, create a new <em>“Forms”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“IFormViewModel.cs”</em> interface file.</li>\n  <li>Add code according to the top part of this code snippet.</li>\n  <li>This interface fosters the idea of a reusable form repository. View models will supply their data through a single dictionary, which the repository will consume.&nbsp;</li>\n  <li>Next, in the same subfolder, create an <em>“IFormItemRepository.cs”</em> interface file.</li>\n  <li>Inherit from <em>IRepository</em>.</li>\n  <li>Add the method signature definition according to the bottom part of the code snippet.</li>\n</ol>","code":{"src":"// IFormViewModel.cs\n\nusing System.Collections.Generic;\n\nnamespace Business.Repository.Forms\n{\n    public interface IFormViewModel\n    {\n        IDictionary<string, object> Fields { get; }\n    }\n}\n\n// IFormItemRepository.cs\n\nnamespace Business.Repository.Forms\n{\n    public interface IFormItemRepository : IRepository\n    {\n        void InsertFormItem(string className, IFormViewModel viewModel);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the repository.</p>\n<ol>\n  <li>In <em>Business &gt; Repository &gt; Forms</em>, create a new <em>“FormItemRepository.cs”</em> class file.</li>\n  <li>Add code according to this code snippet.</li>\n  <li>Note that the repository calls the <em>BizFormItem.New</em> static method mentioned above.</li>\n  <li>Then, it iterates over the dictionary to set values of the form fields.</li>\n  <li>Please note that this implementation is basic, and it cannot be used with any composite view models.</li>\n  <li>Finally, the repository saves the form via <em>Insert()</em>.&nbsp;</li>\n</ol>","code":{"src":"using CMS.OnlineForms;\n\nnamespace Business.Repository.Forms\n{\n    class FormItemRepository : IFormItemRepository\n    {\n        public void InsertFormItem(string className, IFormViewModel viewModel)\n        {\n            var formItem = BizFormItem.New(className);\n\n            foreach (var field in viewModel.Fields)\n            {\n                formItem.SetValue(field.Key, field.Value);\n            }\n\n            formItem.Insert();\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Make the view model supply the dictionary.</p>\n<ol>\n  <li>&nbsp;Back in <em>MedioClinic &gt; Models &gt; Forms</em>, create a new <em>“BaseFormViewModel.cs”</em> class file.</li>\n  <li>Mark the class as abstract as it is not meant to be used as it is.</li>\n  <li>Add the <em>GetFields</em> method that takes pairs of field names and values and builds a dictionary out of them.&nbsp;</li>\n</ol>","code":{"src":"using System.Collections.Generic;\n\nnamespace MedioClinic.Models.Forms\n{\n    public abstract class BaseFormViewModel\n    {\n        protected IDictionary<string, object> GetFields(params KeyValuePair<string, object>[] fields)\n        {\n            var dictionary = new Dictionary<string, object>();\n            \n            foreach (var field in fields)\n            {\n                dictionary.Add(field.Key, field.Value);\n            }\n\n            return dictionary;\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Use this method in the view model.</p>\n<ol>\n  <li>Back in the <em>MedioClinic &gt; Models &gt; Forms &gt; FloridaEventRegistrationViewModel.cs</em> file, inherit from <em>BaseFormViewModel</em> and implement <em>IFormViewModel</em>.</li>\n  <li>To satisfy the contract defined in <em>IFormViewModel</em>, add the Fields property according to the code snippet.</li>\n  <li>In the getter, call the <em>GetFields</em> method of the base class, and supply <em>KeyValuePair</em> structures comprising of <em>nameof</em> expressions and the fields themselves.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nusing Business.Repository.Forms;\n\nnamespace MedioClinic.Models.Forms\n{\n    public class FloridaEventRegistrationViewModel : BaseFormViewModel, IFormViewModel, IViewModel\n    {\n        protected const string RequiredFieldErrorMessage = \"This field is required.\";\n        protected const string TextFieldLengthErrorMessage = \"The first name mustn't exceed 200 characters.\";\n\n        public IDictionary<string, object> Fields =>\n            GetFields(\n                new KeyValuePair<string, object>(nameof(FirstName), FirstName),\n                new KeyValuePair<string, object>(nameof(LastName), LastName),\n                new KeyValuePair<string, object>(nameof(EmailInput), EmailInput)\n                );\n\n        [Display(Name = \"First name\", Prompt = \"Enter your given name here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string FirstName { get; set; }\n\n        [Display(Name = \"Last name\", Prompt = \"Enter your surname here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string LastName { get; set; }\n\n        [Display(Name = \"Email\", Prompt = \"Enter your email address here\")]\n        [EmailAddress(ErrorMessage = \"The value isn't a valid email address.\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string EmailInput { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now you can call your repository from the controller.</p>\n<ol>\n  <li>Back in the <em>MedioClinic &gt; Controllers &gt; FormTestController.cs</em> file, add the <em>PageName</em> string constant. It will be used in both action methods to specify the title of the page.</li>\n  <li>Next, add the property member to hold the instance of <em>IFormItemRepository</em>.</li>\n  <li>Also, add a constructor that takes the <em>IBusinessDependencies</em> and <em>IFormItemRepository</em> instances.</li>\n  <li>Assign the form repository object to the property member and pass the business dependencies object to the parent class’ constructor.</li>\n  <li>Leave the file open for the following two steps.</li>\n</ol>","code":{"src":"protected const string PageName = \"Form test\";\n\nIFormItemRepository FormItemRepository { get; }\n\npublic FormTestController(\n\tIBusinessDependencies businessDependencies,\n\tIFormItemRepository formItemRepository)\n\t: base(businessDependencies)\n{\n\tFormItemRepository = formItemRepository \n\t\t?? throw new ArgumentNullException(nameof(formItemRepository));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the GET action method.</p>\n<ol>\n  <li>Construct an empty <em>FloridaEventRegistrationViewModel</em> object.</li>\n  <li>Pass that object around, together with the <em>PageName</em> constant, to the <em>GetPageViewModel</em> method of the base class.</li>\n  <li>Then, forward the resulting <em>PageViewModel&lt;&gt;</em> object to the default (conventional) view.</li>\n</ol>","code":{"src":"// GET: FormTest\n[HttpGet]\npublic ActionResult Index()\n{\n\tvar model = GetPageViewModel(new FloridaEventRegistrationViewModel(), \n\t\tPageName);\n\n\treturn View(model);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the POST action method.</p>\n<p>1. First, examine the validity of the upload model by calling <em>ModelState.IsValid</em></p>\n<p>2. Call the <em>InsertFormItem</em> method of your repository. Supply the codename of the Kentico form (the same as in the generated model class), and the uploaded data itself.</p>\n<p>3. Enclose the call in a try-catch block.</p>\n<p>4. As this controller is just a proof of concept, for both the successful and erroneous results, return just <em>Content()</em>.</p>\n<p>5. In cases of invalid model state, construct the <em>PageViewModel&lt;&gt;</em> object again, using the same data that was obtained earlier. This will make sure the user doesn’t have to fill all form fields again.</p>\n<p>Return a conventional view.</p>","code":{"src":"// POST: FormTest\n[HttpPost]\npublic ActionResult Index(\n\t[System.Web.Http.FromBody] PageViewModel<FloridaEventRegistrationViewModel> uploadModel)\n{\n\tif (ModelState.IsValid)\n\t{\n\t\ttry\n\t\t{\n\t\t\tFormItemRepository.InsertFormItem(\"BizForm.FloridaEventRegistration\",\n\t\t\t\t\t\tuploadModel.Data);\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\treturn Content(\"There was an error when submitting your form.\");\n\t\t}\n\n\t\treturn Content(\"Your form has been submitted.\");\n\t}\n\n\tvar model = GetPageViewModel(uploadModel.Data, PageName);\n\n\treturn View(model);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d73cc42f-a904-4c3a-a2df-c67f82c898df","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Coding part","displayTitle":"Coding part"},{"body":"<p>Scaffold a view.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let Visual Studio automatically scaffold a basic view.</p>\n<ol>\n  <li>Right-click the <em>Index</em> action method that handles GET requests.</li>\n  <li>In the context menu, select <em>Add view</em>.</li>\n  <li>In the <em>Template</em> dropdown field, select <em>Create</em>.</li>\n  <li>In the <em>Model class</em> dropdown field, select <em>FloridaEventRegistrationViewModel (MedioClinic.Models.Forms)</em>.</li>\n  <li>Leave the last text field empty, as depicted in the screenshot.</li>\n  <li>Click Add.&nbsp;</li>\n</ol>","_graphic":{"src":"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/74158b3a-4f80-41e3-91d5-3e5b8c73c714/035.png","alt":"035.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"50762ced-1310-41f5-b229-ff6b34b2e083","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Scaffolding","displayTitle":"Scaffolding"},{"body":"<p>Do the final steps.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Inspect the scaffolded view. It contains a few parts that won’t be required. It also needs a few other adjustments to work correctly.&nbsp;</p>\n<ol>\n  <li>The <em>@model</em> directive only states the <em>FloridaEventRegistrationViewModel</em> type. However, we use <em>PageViewModel&lt;&gt;</em> in the content pages. Replace it with <em>“PageViewModel&lt;FloridaEventRegistrationViewModel&gt;”</em> (either in this shorter form, together with a preceding <em>@using </em>directive, or in a fully-qualified form).</li>\n  <li>In the first code block, it sets the <em>ViewBag.Title</em> property. We don’t need that as our <em>PageViewModel&lt;&gt;</em> object already has the title value. The MVC layout already took care of the title. Remove that code block.</li>\n  <li>Then, it has the <em>FloridaEventRegistrationViewModel</em> value in the <em>&lt;h4 /&gt;</em> header element. You may want to put a user-friendly text into it instead.</li>\n  <li>In alignment with the change of the <em>@model</em> directive, replace all calls to the model with calls to the inner <em>Data</em> property of the model.</li>\n  <li>Remove the element with the call to <em>Html.ActionLink</em> in the bottom of the view.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.Forms.FloridaEventRegistrationViewModel\n\n@{\n    ViewBag.Title = \"Index\";\n}\n\n<h2>Index</h2>\n\n@using (Html.BeginForm()) \n{\n    @Html.AntiForgeryToken()\n    \n    <div class=\"form-horizontal\">\n        <h4>FloridaEventRegistrationViewModel</h4>\n        <hr />\n        @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n        <div class=\"form-group\">\n            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n            <div class=\"col-md-10\">\n                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = \"form-control\" } })\n                @Html.ValidationMessageFor(model => model.FirstName, \"\", new { @class = \"text-danger\" })\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n            <div class=\"col-md-10\">\n                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = \"form-control\" } })\n                @Html.ValidationMessageFor(model => model.LastName, \"\", new { @class = \"text-danger\" })\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            @Html.LabelFor(model => model.EmailInput, htmlAttributes: new { @class = \"control-label col-md-2\" })\n            <div class=\"col-md-10\">\n                @Html.EditorFor(model => model.EmailInput, new { htmlAttributes = new { @class = \"form-control\" } })\n                @Html.ValidationMessageFor(model => model.EmailInput, \"\", new { @class = \"text-danger\" })\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <div class=\"col-md-offset-2 col-md-10\">\n                <input type=\"submit\" value=\"Create\" class=\"btn btn-default\" />\n            </div>\n        </div>\n    </div>\n}\n\n<div>\n    @Html.ActionLink(\"Back to List\", \"Index\")\n</div>","lang":"csharp"},"strapline":""},{"title":"","body":"<p>This code snippet gives you a glimpse of what the view would look like with all the edits in place.</p>","code":{"src":"@using MedioClinic.Models.Forms\n@model MedioClinic.Models.PageViewModel<FloridaEventRegistrationViewModel>\n\n<div class=\"section kn-section-top\">\n    <div class=\"container\">\n        <div class=\"row\">\n            @using (Html.BeginForm())\n            {\n                @Html.AntiForgeryToken()\n\n                <div class=\"form-horizontal\">\n                    <h4>Florida event registration form</h4>\n                    @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n                    <div class=\"form-group\">\n                        @Html.LabelFor(model => model.Data.FirstName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                        <div class=\"col-md-10\">\n                            @Html.EditorFor(model => model.Data.FirstName, new { htmlAttributes = new { @class = \"form-control\" } })\n                            @Html.ValidationMessageFor(model => model.Data.FirstName, \"\", new { @class = \"text-danger\" })\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        @Html.LabelFor(model => model.Data.LastName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                        <div class=\"col-md-10\">\n                            @Html.EditorFor(model => model.Data.LastName, new { htmlAttributes = new { @class = \"form-control\" } })\n                            @Html.ValidationMessageFor(model => model.Data.LastName, \"\", new { @class = \"text-danger\" })\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        @Html.LabelFor(model => model.Data.EmailInput, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                        <div class=\"col-md-10\">\n                            @Html.EditorFor(model => model.Data.EmailInput, new { htmlAttributes = new { @class = \"form-control\" } })\n                            @Html.ValidationMessageFor(model => model.Data.EmailInput, \"\", new { @class = \"text-danger\" })\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <div class=\"col-md-offset-2 col-md-10\">\n                            <input type=\"submit\" value=\"Submit\" class=\"btn btn-default\" />\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    </div>\n</div>","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"356750fe-0536-4824-bdf3-52ad86830f81","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Finish the process","displayTitle":"Finish the process"},{"body":"<p>All right. Now that you have everything set and done, why not giving the traditional MVC form a try? Navigate to <em>“/FormTest”</em> to see the form in action.</p>\n<figure data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\"><img src=\"https://preview-assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4294fe3e-8566-4ad4-b895-072f25338853/038.png\" data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" alt=\"\"></figure>\n<p><br></p>\n<p>First, you can test the validation capabilities by an invalid email address. Thanks to the presence of the <em>System.ComponentModel.DataAnnotations.EmailAddressAttribute</em> attribute in the view model, the MVC framework gives you a warning.</p>\n<p>Then, with a valid address, you can test adding of the form entry. It will be visible in the <em>Forms</em> application, on the <em>Recorded data</em> tab of your form.</p>\n<div class=\"infobox warning\"><p>We strongly recommend rendering Kentico forms through the <em>Form</em> widget (in builder-enabled pages), not in the traditional ASP.NET MVC fashion. Combining Kentico forms with traditional MVC rendering has significant limitations, including (but not limited to):</p>\n<ul>\n  <li>Only form components with a simple bindable property can be used in the form.</li>\n  <li>Configuration of form components set by content contributors in the <em>Form builder</em> tab is ignored.</li>\n  <li>Validation rules and visibility conditions set in the <em>Form builder</em> tab are ignored.</li>\n  <li>Kentico Smart fields cannot be used.</li>\n  <li>Form field configuration, validation, field visibility, and other form behavior must be set in view models, controllers, and views.</li>\n</ul>\n<p>Currently, the combination of Kentico forms with traditional MVC rendering is not officially supported. In this page, we only aim to provide an alternative approach in case either business or technical requirements dictate to avoid using a builder-enabled page. Additionally, an improved API for rendering form builder forms manually may be provided in future versions of Kentico.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"af974b9c-e7ec-4651-adea-91b034965865","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Testing time","displayTitle":"Testing time"},{"body":"<p>To significantly ease the development process, we haven’t employed any performance-optimization techniques common to Kentico. Namely, we haven’t used caching.</p>\n<p>Not that it would be hard to employ caching. The main impediment of having caching during development would rather be the necessity to clear the cache after each build.</p>\n<p>Therefore, we’ll quickly take care of caching now.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1e2ca2d7-b287-443d-bda4-2ee0a6b2be95","_parentId":"2cfd5a47-d66b-4613-abdf-f0aeaf5da6e9","_type":"component","title":"General note on performance","displayTitle":"General note on performance"},{"body":"<p>In this short chapter, we’ll give you guidance to add basic output caching support to your builder-enabled page in the Medio Clinic website.<br>\n&nbsp;</p>\n<div class=\"infobox note\"><p>This demo presumes that personalization is not used in the project. In personalized builder-enabled pages, additional cache dependencies need to be specified.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In this series of steps, you’ll add a method to the cache service, and then, you’ll make use of it in the landing page controller.&nbsp;</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Cache</em>, open the <em>ICacheService.cs</em> interface file.</li>\n  <li>Add an overloaded signature of the <em>SetOutputCacheDependency</em> method that takes the node alias path.</li>\n</ol>","code":{"src":"void SetOutputCacheDependency(string nodeAliasPath);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let the cache service implement the new method.&nbsp;</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Cache</em>, open the <em>CacheService.cs</em> class file.</li>\n  <li>Let Visual Studio add a stub of the new method overload by pressing Ctrl+. on the keyboard.</li>\n  <li>In the method body, call GetNodeCacheDependencyKey to build the dependency key.</li>\n  <li>Ensure the dummy key.</li>\n  <li>Add a new dependency into the HTTP context object, so that it can be used by the output caching mechanism in the controller.</li>\n</ol>","code":{"src":"public void SetOutputCacheDependency(string nodeAliasPath)\n{\n    var dependencyCacheKey = GetNodeCacheDependencyKey(nodeAliasPath);\n\n    // Ensures that the dummy key cache item exists\n    CacheHelper.EnsureDummyKey(dependencyCacheKey);\n\n    // Sets cache dependency to clear the cache when there is any change to node with given GUID in Kentico\n    HttpContext.Current.Response.AddCacheItemDependency(dependencyCacheKey);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Tune the controller to use output caching.&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, open the <em>LandingPageController.cs</em> class file.</li>\n  <li>Decorate the Index action method with <em>System.Web.Mvc.OutputCacheAttribute</em>.</li>\n  <li>For the <em>VaryByParam</em> parameter, use <em>“nodeAlias”</em>, as seen in the code snippet.</li>\n  <li>In the body of the action method, add a statement that calls the new <em>SetOutputCacheDependency</em> overload you’ve just implemented in the cache service. Use the value of the <em>nodeAlias</em> route data parameter as an argument.</li>\n</ol>","code":{"src":"using System;\nusing System.Web.Mvc;\nusing System.Web.UI;\n\nusing Business.DependencyInjection;\nusing Business.Repository.LandingPage;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Web.Mvc;\n\nnamespace MedioClinic.Controllers\n{\n    public class LandingPageController : BaseController\n    {\n        protected ILandingPageRepository LandingPageRepository { get; }\n\n        public LandingPageController(\n            IBusinessDependencies dependencies, ILandingPageRepository landingPageRepository) : base(dependencies)\n        {\n            LandingPageRepository = landingPageRepository ?? throw new ArgumentNullException(nameof(landingPageRepository));\n        }\n\n        // GET: LandingPage/[nodeAlias]\n        [OutputCache(Duration = 3600, VaryByParam = \"nodeAlias\", Location = OutputCacheLocation.Server)]\n        public ActionResult Index(string nodeAlias)\n        {\n            var landingPageDto = LandingPageRepository.GetLandingPage(nodeAlias);\n\n            if (landingPageDto == null)\n            {\n                return HttpNotFound();\n            }\n\n            Dependencies.CacheService.SetOutputCacheDependency(nodeAlias);\n            var model = GetPageViewModel(landingPageDto.Title);\n            HttpContext.Kentico().PageBuilder().Initialize(landingPageDto.DocumentId);\n\n            return View(model);\n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8f7ab787-28f1-41aa-a946-0c81f671ee9a","_parentId":"2a987c2a-6f77-4c7a-9080-fcc280fbffc5","_type":"component","title":"Demo: Introducing caching","displayTitle":"Demo: Introducing caching"},{"body":"<p>Congratulations on passing the second module of the Kentico MVC for Developers course!</p>\n<p>You will automatically receive a Certificate of Course Completion after you submit the course feedback. Thank you for letting us know what you think about the training course!</p>\n<h2>What are the next steps?</h2>\n<p>There are many resources you can turn to if you need help with your Kentico MVC implementation.</p>\n<ol>\n  <li>Read the&nbsp;<a href=\"https://docs.kentico.com/k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>&nbsp;first.</li>\n  <li>Install and investigate the K12 Dancing Goat MVC sample site (or check the&nbsp;<a href=\"https://github.com/Kentico/Mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">K11 Dancing Goat MVC sample site</a>&nbsp;on GitHub) to find out how to implement online marketing or e-commerce functionality to your website.</li>\n  <li>Search&nbsp;<a href=\"https://devnet.kentico.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico DevNet community</a>&nbsp;or&nbsp;<a href=\"https://stackoverflow.com/questions/tagged/kentico\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico StackOverflow</a>&nbsp;if you haven't found what you needed.</li>\n  <li>Contact&nbsp;<a href=\"https://www.kentico.com/support/technical-support\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico support</a>. (Kentico support will help you answer general questions or resolve problems regarding the core platform.)</li>\n  <li>Work with&nbsp;<a href=\"https://www.kentico.com/services/consulting/overview\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico consulting</a>&nbsp;if you have questions or problems regarding your customization.</li>\n</ol>\n<h2>Boost you Kentico developer skills</h2>\n<p>You can continue learning in the&nbsp;<a href=\"http://www.kentico.com/services/training/overview/developer/advanced-developer\">Kentico Customization for Developers</a>&nbsp;course where you can get more experience with extending Kentico administration platform.</p>\n<p>You will learn about development methods and processes such as creating a custom module, creating custom scheduled tasks or implement custom global events. After completing the&nbsp;<em>Kentico Customization for Developers</em>&nbsp;course, you will be entitled to one free shot at the&nbsp;<a href=\"http://www.kentico.com/services/training/developer-certification\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Certified Developer Exam</a>.</p>\n<h2>Learn how to deliver projects with Kentico</h2>\n<p>The&nbsp;<a href=\"https://advantage.kentico.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Advantage</a>&nbsp;walks you through all phases of delivering a successful web project. This resource leverages the collective experience of Kentico solution architects who identified best practices as well as difficulties for every stage of the project.</p>\n<h2>Get certified</h2>\n<p><a href=\"https://www.kentico.com/services/training/developer-certification\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Certified Developer Exam</a>&nbsp;is designed to validate your ability to work with the Kentico platform. Please note that our developer training courses do not fully prepare you for the exam. Passing the exam requires not only knowing product’s features and functionality in theory, but it also requires practical experience and a high-level familiarity with the product itself. Therefore we recommend completing a project on Kentico before taking the exam.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"e084200c-39ef-46e1-add3-1dcbf0a15937","_parentId":"aa5b7216-6439-4ada-8c71-ee5cf3a3211a","_type":"component","title":"Closing words","displayTitle":"Closing words"}]