[{"body":"<p>The <strong>Kentico MVC for Developers</strong> course is divided into modules, each of which covers different topics.</p>\n<p>The second <strong>Builders </strong>module teaches the basics of the Kentico page builder and form builder feature ecosystem.</p>\n<p>In this course module, you will:</p>\n<ul>\n  <li>Learn what page builder and form builder (builders, for short) are capable of</li>\n  <li>See what content editors can do with the builders</li>\n  <li>Get the picture of what all you can develop for the builders ecosystem</li>\n  <li>Develop a basic page builder widget with minimum complexity</li>\n  <li>Develop two advanced widgets for the Medio Clinic website</li>\n  <li>Develop two form components and a form validation rule</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"5b7b1212-7589-4fbd-b6f1-d59494ef26c3","_parentId":"dfc66105-49ce-45b1-9539-bfd28bb5c1fb","_type":"component","title":"Introduction to the course","displayTitle":"Introduction to the course"},{"body":"<h2>About the module</h2>\n<p>Each topic in the module is discussed on a separate page, which is split into different parts. You can use&nbsp;<strong>the menu on the right&nbsp;</strong>to navigate on the page.</p>\n<h3>Theory</h3>\n<p>The&nbsp;<strong>top section of the page explains the theory</strong>&nbsp;and&nbsp;<strong>recommends the approach you should take</strong>&nbsp;and&nbsp;<strong>the best practices to follow&nbsp;</strong>when developing your Kentico website. The most important implementation details of the Medio Clinic site are often explained with code snippets or hyperlinks to the <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">sample implementation in GitHub</a>.</p>\n<div class=\"infobox note\"><p>Note that the repository contains code for all modules of this course, i.e. Essentials, Builders, and Identity.</p></div>\n<h3>Tasks</h3>\n<p>You can get your hands dirty and build your version of the Medio Clinic website using the MVC development pattern by completing&nbsp;<strong>tasks specified in the midsection.</strong></p>\n<h3><strong>Demos</strong></h3>\n<p>If you need to get some guidance,<strong>&nbsp;you can follow the demos&nbsp;</strong>which break Medio Clinic sample code into more manageable chunks and show you&nbsp;<strong>how the feature was implemented.</strong>&nbsp;However, in most cases, you won't be able to just copy-paste the sample snippets into your solution, and you'll have to do some thinking and coding by yourself.</p>\n<h3>Progress-checks</h3>\n<p>The bottom part of the page gives you a chance to<strong>&nbsp;check your understanding of the topics in a few quick quiz questions</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c2301f4d-b208-43ac-83a6-c507fcffec80","_parentId":"e0b71ff4-de41-4aaa-8cf4-dcfff0cfaf16","_type":"component","title":"About the module","displayTitle":"About the module"},{"body":"<p>In the first module of this course, you’ve developed a Kentico MVC website of a made-up Medio Clinic medical institution.</p>\n<p>In this module, you’ll enable this site to use Kentico page builder and form builder. Then, you’ll develop an infrastructure to create landing pages, together with one such page.</p>\n<p>You can find the photos for the landing page in the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinicStaticAssets.zip\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">MedioClinicStaticAssets.zip</a>&nbsp;archive. Specifically, in the&nbsp;<em>assets</em>&nbsp;&gt;&nbsp;<em>Landing page photos</em>&nbsp;subfolder of the archive.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e742cd49-c466-4a48-b653-bfafc94554e3","_parentId":"dbb5e220-9c29-47a6-8300-9d2bcedba653","_type":"component","title":"Medio Clinic website assets","displayTitle":"Medio Clinic website assets"},{"body":"<p>To get the final result of this course module, you can clone or fork <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">our Medio Clinic sample site in GitHub</a>.</p>\n<div class=\"infobox note\"><p>Note that the repository contains code for all modules of this course, i.e. Essentials, Builders, and Identity.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9fd8fa95-2ad7-4a5c-8a67-7944cecf6d1c","_parentId":"bb285a59-6281-4292-8535-2b053dfdc40d","_type":"component","title":"Get the code","displayTitle":"Get the code"},{"body":"<h2>Course navigation</h2>\n<p>The course module opens in a separate browser window. To:</p>\n<ul>\n  <li>get to <strong>another part of the page</strong>, use the navigation menu in the top-right corner of each page.</li>\n  <li>return to the&nbsp;<strong>module's home page</strong>, use the&nbsp;<strong>&lt;</strong><em>&nbsp;(back)</em>&nbsp;chevron in the top-left corner of each page.</li>\n  <li>navigate <strong>back to the course material in the browser window</strong>, use keyboard shortcut to go back.</li>\n</ul>\n<p>The module <strong>tracks your progress</strong>, so feel free to close the separate window and come back whenever you have time. You will be able to <strong>continue where you left off</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"730de684-a838-4248-9324-3fc42453f30b","_parentId":"0659d896-e874-487f-b36f-6a5d0174c332","_type":"component","title":"Navigation","displayTitle":"Navigation"},{"body":"<h2>Certification of completion</h2>\n<p>Unlike the Kentico MVC – Essentials module, this course module is optional.</p>\n<h2>Questions</h2>\n<p>If you have any questions about the course or its contents, contact us at <a href=\"mailto:elearning@kentico.com\">elearning@kentico.com</a>.</p>\n<p>Should you have concerns about specific parts of the source code, feel free to <a href=\"https://github.com/Kentico/training-kentico-k12/issues/new\">file an issue</a> in our GitHub repository.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a725e44a-b33d-4cf6-9297-53d323d10447","_parentId":"90305623-282f-4960-946c-c03ffd45db57","_type":"component","title":"Additional information","displayTitle":"Additional information"},{"body":"<p>What you will learn in this page:</p>\n<ul>\n  <li>What are the features and properties of page builder and form builder</li>\n  <li>How page builder pages differ from traditional structured pages</li>\n  <li>How to enable page builder in a Kentico MVC project</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"76e06b83-e172-4618-8560-320d3aa2c0b7","_parentId":"4b2484f0-26f8-48f3-9f99-023ffb06b9c7","_type":"component","title":"Scope","displayTitle":"Scope"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/57a20875-f09a-47b6-a253-d8e7b4c0efb6/m2_pagebuilderIntro1_fix.mp4","poster":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/cc1f0b02-b4e5-4abf-a80d-ca1ac3867f50/Introduction%20to%20Kentico%20MVC%20page%20builder%20and%20form%20builder.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<h2>Introduction to &nbsp;page builder and form builder</h2>\n<p>Kentico page builder and Kentico form builder are features on Kentico websites that are built with the MVC development pattern. Their sole purpose is to make lives of content editors easier, and Kentico went to great lengths in designing these features to make them maximally friendly to both editors and MVC developers.</p>\n<p>What are the page builder and form builder for?</p>\n<p>In short, the page builder allows content editors composing pages out of several reusable parts called editable areas, page sections, and widgets. With the form builder, editors can add forms to their MVC website and collect different visitors' data.</p>\n<p>The default interface for editors is user-friendly and adding widgets is super-easy.&nbsp;Content editors don't need any technical knowledge to use the features that the developers prepared. They just add&nbsp;instances of page sections and widgets&nbsp;to&nbsp;their website's pages or move them around as they need.</p>\n<p>With form builder, editors can now drag and drop fields to forms. To add a form to a page, they just use a built-in Form widget that comes installed with each Kentico MVC site.</p>\n<p>As a developer, you don't need to learn any new approach to .NET MVC or twist-and-turn what you already know into something Kentico-specific. To create page builder enabled page types, reusable page sections, and the MVC widgets, you can use standard&nbsp;APS.NET MVC techniques.&nbsp;</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"303c0930-3c6d-4e7d-aef4-946c80b0fba1","_parentId":"222c8949-55a7-4d5b-b7c6-c3237b6460cc","_type":"component","title":" Introduction to  page builder and form builder","displayTitle":" Introduction to  page builder and form builder"},{"body":"<div class=\"infobox idea\"><p>Starting from Kentico 12 Service Pack, you can also develop predefined page templates. You can define the overall layout as well as your custom functionality of templates. Once a template is created, content editors may custom-tailor your templates by adding predefined sets of sections and widgets, even with content inside.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bb413068-b90f-4908-9326-682eb17a6bb0","_parentId":"222c8949-55a7-4d5b-b7c6-c3237b6460cc","_type":"component","title":"Page templates","displayTitle":"Page templates"},{"body":"<p>Let’s call all pages configured to contain widgets as builder-enabled pages.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"02ea774b-bbb7-4e62-b809-def7dc01bead","_parentId":"09332169-c210-4730-85e1-44f086e56248","_type":"component","title":"Terminology","displayTitle":"Terminology"},{"body":"","_items":[{"body":"<p>Content editors may create culture versions of builder-enabled pages in the ordinary way (in the Languages tab in the page). Texts and other properties of widgets are then stored separately for each culture.</p>\n<p>Texts in the source code of all artifacts of the page builder and form builder can also be translated.</p>","title":"Localization","_graphic":null},{"body":"<p>The contents of page builder widgets and form builder forms can be personalized for site visitors.</p>\n<p>Personalization capabilities will be covered in a separate module of this course.</p>","title":"Personalization","_graphic":null},{"body":"<p>Page builder pages can be subject to workflow. Therefore, page publishing can be restricted, and versions of widget state can be preserved via page versioning.</p>","title":"Workflow","_graphic":null},{"body":"<p>Although page builder and form builder may look like separate features of Kentico, they work together. Page builder allows content editors to create pages with arbitrary structures of widgets. They do it in the Pages application. On the other hand, form builder allows editors to freely create forms in the Forms application, in the Form builder tab of a given form. However, when an editor wants to publish a form in the live site, they do it through one built-in widget—Form widget.</p>\n<p>Rendering forms via the Form widget is officially supported by Kentico. However, in rare cases where either business or technical project requirements dictate to avoid having builder-enabled pages, we’ll provide you with guidance on how to publish <strong>basic</strong> forms in the traditional ASP.NET MVC ways.</p>","title":"Page builder versus form builder","_graphic":null}],"instruction":"","_layout":"full","_component":"accordion","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3416eb90-61cd-4d41-a8fc-adfac043a2a9","_parentId":"31623b98-d081-4885-ae06-05c1610c69b9","_type":"component","title":"Integration with Kentico features","displayTitle":"Integration with Kentico features"},{"body":"<p>Kentico MVC development model is based on content-only page types. Unlike Portal Engine pages (utilizing the older ASP.NET Web Forms technology), content-only pages offer a much cleaner architecture. The content is separated from its presentation. Texts and page assets are held in a structured form in the content-only pages so that they could be worked on in a uniform way and presented in more than just one form. The way the texts and assets are presented (organized) in the web pages, is the responsibility of the MVC app.</p>\n<p>Page builder brings an addition to this architecture model. Unlike the textual, numerical and other data in page fields, which the content contributors aren’t supposed to visually arrange, builder-enabled pages allow that to a very high degree.</p>\n<div class=\"infobox note\"><p>Please note that builder-enabled pages also can hold data in their page fields. They are also content-only pages, with just the page builder being enabled on top of the standard functionality.</p></div>\n<p>The most important takeaway is that widget content is stored separately from page fields. As a result, each piece of content of your website will either be stored in a page field, or in a widget state. Depending on the business requirements of your project, you can decide which parts of the overall website data should be stored in the stricter form of page fields, and which parts is better to be held in widgets.</p>\n<div class=\"infobox warning\"><h3>Performance</h3>\n<p>There are also performance considerations that you should take into account when planning the use of page builder. Page builder was primarily designed for average-sized web pages like landing pages. Technically speaking, Kentico does not put any hard limits on the total amount of text, numerical data and assets put into a single widget by content contributors. Hence, they may be tempted to utilize page builder for large-scale pages with tens of thousands of words. We haven’t designed page builder for such use cases.</p>\n<p>However, you as a developer, can take appropriate measures to limit the extent of use of widgets when designing editable areas and widgets themselves.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f0d4f883-edf7-4bd5-88d2-e7ba3909b28d","_parentId":"41cbbbfc-875d-4a14-9459-d458ab3e5102","_type":"component","title":"Structured content versus builder-enabled pages","displayTitle":"Structured content versus builder-enabled pages"},{"body":"<p>Before we explain the development principles of page builder and form builder, you should learn how to <strong>enable page builder</strong> in a Kentico MVC project.</p>\n<p>The process can be split into three groups of tasks: steps in the admin UI, steps in the MVC app’s source code, and steps related to both the admin UI and the source code.</p>\n<p>In the following text, we’ll use generic examples as well as real examples taken from the Medio Clinic website. You can consult the final result by cloning a <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a> of our MVC course.</p>\n<div class=\"infobox note\"><p>Note that the repository contains code for all modules of this course, i.e. Essentials, Builders, and Identity.</p></div>\n<h3>Administration interface steps</h3>\n<p>Pages that you intend to have widgets (so called builder-enabled pages), need to be displayed via the <strong>Page tab</strong> in the <em>Pages</em> application.</p>\n<p>The tab can be enabled for a given page type by navigating to <em>Page types &gt; Edit &gt; General &gt; Advanced settings</em> and selecting the <em>Use Page tab</em> checkbox.</p>\n<h3>MVC app’s source code steps</h3>\n<p>In the ASP.NET MVC 5 app, page builder (together with form builder being represented by one built-in widget) should be <strong>enabled</strong> as <a href=\"https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/owin-middleware-in-the-iis-integrated-pipeline\">OWIN middleware</a>.</p>\n<p>The page builder middleware can be employed by calling an extension method on the <em>IApplicationBuilder</em> instance:</p>\n<pre><code class=\"language-csharp\">protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePageBuilder(new PageBuilderOptions()\n\t{\n\t\tDefaultSectionIdentifier = \"SomeIdentifier\",\n\t\tRegisterDefaultSection = true\n\t});\n}</code></pre>\n<p>The options allow for registering a default page section at a global level.</p>\n<p>Then, in order to use Kentico page builder extension methods in MVC views, their namespace needs to be imported in the <em>~/Views/web.config </em>file.</p>\n<pre><code class=\"language-html\">&lt;configuration&gt;\n    &lt;system.web.webPages.razor&gt;\n        &lt;pages pageBaseType=\"System.Web.Mvc.WebViewPage\"&gt;\n            &lt;add namespace=\"Kentico.PageBuilder.Web.Mvc\"/&gt;\n        &lt;/pages&gt;\n    &lt;/system.web.webPages.razor&gt;\n&lt;/configuration&gt;</code></pre>\n<p>Next, each controller that is supposed to serve builder-enabled pages, should call an extension method to <strong>add page builder features to its HTTP context</strong> (to its <em>System.Web.HttpContextBase</em> instance):</p>\n<pre><code class=\"language-csharp\">HttpContext.Kentico().PageBuilder().Initialize(landingPage.DocumentId);</code></pre>\n<p>&nbsp;Lastly, each such controller’s view should call a set of HTML helper methods to <strong>initialize page builder styles and scripts</strong>:</p>\n<pre><code class=\"language-csharp\">@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n// Razor code &amp; markup\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}</code></pre>\n<div class=\"infobox note\"><p>It is important to render the styles in the <em>&lt;head /&gt;</em> element of the page. The scripts, however, need to be rendered immediately before the closing tag of the <em>&lt;body /&gt;</em> element. The page builder scripts require the DOM to be fully rendered.</p></div>\n<h3>Common configuration steps</h3>\n<p>To use page builder, <strong>preview mode</strong> must be enabled, either for the site, or globally.</p>\n<p>This can be done in <em>Settings &gt; Content &gt; Content management &gt; General</em>, and check <em>Allow preview mode on the live site</em>.</p>\n<p>In the MVC app, preview gets enabled by calling an OWIN extension method on the <em>IApplicationBuilder</em> instance:</p>\n<pre><code class=\"language-csharp\">protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePreview();\n}</code></pre>\n<p>There is one last prerequisite to be configured in both the admin UI and the source code: <strong>the URL patterns and routes</strong>. Each builder-enabled page type should have its URL pattern specified. The pattern should be covered by MVC routes appropriately.</p>\n<p>It can be done in the admin UI in <em>Page types &gt; Edit &gt; General &gt; URL pattern</em>. To specify variable segments of the URL, <a href=\"https://docs.kentico.com/k12sp/macro-expressions/macro-syntax\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">macro expressions</a> must be used.</p>\n<p>For instance, a pattern for translated landing pages that can be accessed through a node alias in the URL, could be specified like this:</p>\n<pre><code class=\"language-csharp\">/{%DocumentCulture%}/LandingPage/{%NodeAlias%}</code></pre>\n<p>The route counterpart of the URL pattern could be set in the <em>RouteConfig.cs</em> file in the following way:</p>\n<pre><code class=\"language-csharp\">// Maps route to langind pages\nroute = routes.MapRoute(\n\tname: \"LandingPage\",\n\turl: \"{culture}/LandingPage/{nodeAlias}\",\n\tdefaults: new { culture = defaultCulture.Name, controller = \"LandingPage\", action = \"Index\" },\n\tconstraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), nodeAlias = new OptionalRouteConstraint(new RegexRouteConstraint(@\"[\\w\\d_-]*\")) }\n);\n\n// A route value determines the culture of the current thread\nroute.RouteHandler = new MultiCultureMvcRouteHandler();</code></pre>\n<p>Both the above URL pattern of the landing page and its route counterpart are used in the <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Medio Clinic website</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"155d107e-5e42-455d-9009-f06f8893a9bd","_parentId":"73610315-d22d-4e41-9ad0-9bb11c32368b","_type":"component","title":"Theory: Page builder prerequisites","displayTitle":"Theory: Page builder prerequisites"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How do builder-enabled pages store and utilize their content?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>They have both the traditional page fields and widget state stored separately. The contents of page fields cannot influence how widgets are rendered.</p>","_shouldBeSelected":false,"feedback":"<p>Pages have both fields and widget state. However the contents of page fields can be utilized to render widgets (although it is not a recommended practice).</p>"},{"text":"<p>They only have widget state.</p>","_shouldBeSelected":false,"feedback":"<p>The content of a builder-enabled page consists of both the traditional page fields and the widget state.</p>"},{"text":"<p>They have both the traditional page fields and widget state. All configuration and content of widgets in a page is stored in the widget state. Additionally, structured information can be stored in the page fields. Both fields and widget state can be combined together to render the widgets, however, it is not recommended unless necessary.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"Feedback","correct":"<p>Great! You've learned well that in general, content in page fields shouldn't interfere with widgets.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"4f34b630-eb08-4d2b-9860-f49d37260e71","_parentId":"4f229932-eb0d-4d80-94e1-f3b8b6348e97","_type":"component","title":"Content in builder-enabled pages","displayTitle":"Content in builder-enabled pages"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What does it take to run a builder-enabled page in a Kentico MVC site?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Enabling the <em>Page </em>tab and defining a URL pattern in the content type, adding OWIN middleware, adding features to the HTTP context, initialize styles and scripts</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Enabling the&nbsp;<em>Page&nbsp;</em>tab and defining a URL pattern in the content type, adding OWIN middleware, adding controllers to a dedicated MVC area, adding features to the HTTP context, initialize styles and scripts</p>","_shouldBeSelected":false,"feedback":"<p>Adding controllers to a dedicated MVC area is not required. It is even not possible, as page builder artifacts need to stay accessible throughout the whole app.</p>"},{"text":"<p>Enabling the&nbsp;<em>Page&nbsp;</em>tab, adding OWIN middleware, adding controllers to a dedicated MVC area, adding features to the HTTP context, initialize styles and scripts</p>","_shouldBeSelected":false,"feedback":"<p>In this list, one required step is missing. It is the definition of URL patterns. These must match to the MVC routes.</p>"}],"_feedback":{"title":"Feedback","correct":"<p>Well spotted! You've learned the prerequisites of page builder well.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"b42abd33-2567-4433-96b3-702422efc28f","_parentId":"4f229932-eb0d-4d80-94e1-f3b8b6348e97","_type":"component","title":"Page builder prerequisites","displayTitle":"Page builder prerequisites"},{"body":"<p>In this page, you’ll get an overview of page builder. You'll learn:</p>\n<ul>\n  <li>What the building blocks of page builder are</li>\n  <li>What they look like from the website visitor’s perspective</li>\n  <li>What they’re represented by in the admin UI</li>\n  <li>What they’re composed of in Visual Studio</li>\n  <li>What are the responsibilities of all the building blocks</li>\n  <li>How they connect to each other</li>\n  <li>Where in the Kentico database the page builder data is stored</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b6e72700-bdd5-4ece-bc17-ae63ff47673a","_parentId":"87f33c8c-957a-47fb-b0fb-84653a31b8d1","_type":"component","title":"Scope","displayTitle":"Scope"},{"_setCompletionOn":"play","_useClosedCaptions":true,"_allowFullScreen":true,"_media":{"mp4":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/24e07240-70e0-442a-8e27-f353948614e0/m2_developing_page_form_builder.mp4","poster":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4374d557-438c-4f90-935f-26888fc813f8/Developing%20the%20page%20builder%20and%20form%20builder.png","cc":{"srclang":"en","src":null}},"_transcript":{"_setCompletionOnView":true,"_inlineTranscript":true,"_externalTranscript":false,"inlineTranscriptButton":"Transcript","InlineTranscriptCloseButton":"Close Transcript","inlineTranscriptBody":"<p>Developing for page builder and form builder requires only standard ASP.NET MVC skills and just a little bit of JavaScript knowledge.</p>\n<p>A typical page builder enabled page type is just an ordinary MVC controller, model, and a simple view that only contains one or more predefined editable areas. Areas may contain page sections of any shape or size.</p>\n<p>Page sections are basically rows that typically contain one or more columns. To you, MVC developers, a page section is nothing but a dead simple MVC controller with a view. In that view, you typically tell how many widget zones a page section contains and what their column width is. Of course, you're not limited to stacking widget zones into columns. You're free to compose page sections in other ways.</p>\n<p>Once editors add page sections to editable areas, they can start adding widgets to the sections. A widget is, again, a set of a controller, a view model, and a basic model which we call widget properties. Widget properties contain data used to configure (parametrize) each particular widget instance by content editors.</p>\n<p>You can allow editors to configure a widget in two ways, whichever suits you better:&nbsp;They can use either&nbsp;a configuration form, or use so-called inline editors.</p>\n<p>A configuration form is easier to implement, however, inline editors provide a better WYSIWYG experience to the user. You can of course mix and match so that one part of a widget’s configuration is done through form components and the rest with inline editors. Inline editors require a bit of JavaScript coding but not much. You can write good old plain JavaScript or you’re free to use any of your favorite frameworks.</p>\n<p>Well, that’s the whole story of Kentico page builder.</p>\n<p>As far as form builder is concerned, you can also customize it. You can develop custom form layouts through form sections, custom form components, form validation rules and field visibility conditions. Form sections are basically the same thing as page builder page sections. Form components are simply types of form fields.</p>\n<p>When developing your custom form components, you can make them collect any number of information inputs from users, as long as they recalculate them down to a single database value.</p>\n<p>A great thing about form components is that if required, they can be used not only in the forms of the form builder, but also to configure the properties of other form components. If you wish, you can use form components in the property configuration forms of page builder widgets. Validation rules also provide a great level of reusability. Once developed, a validation rule is usable with multiple form components, as long as a given component operates on a certain data type in the database.</p>\n<p>The development of form builder artifacts is often simpler than with page builder. A form section comprises of just a simple controller and a view. A form component involves two classes: component view model and form properties. A validation rule typically requires just one class. The same applies to visibility conditions.</p>\n<p>As you can see, there’s lots of power in page builder and form builder. In the next page you'll learn what you’ll implement throughout this course. We’ll show which piece of the solution is responsible for which piece of the final result.</p>"},"_playerOptions":{"features":["playpause","progress","current","duration","speed","volume","fullscreen"]},"instruction":"","_layout":"full","_component":"media","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"60b304fc-fa03-451e-97f3-4292da8c7449","_parentId":"bad95897-e8ef-486d-81ac-0ede8abc46ae","_type":"component","title":"Page builder and form builder overview","displayTitle":"Page builder and form builder overview"},{"body":"<p>In the video, you’ve seen the building blocks in an abstract way. Let’s now dig a bit deeper into that topic.</p>\n<p>We’ll go through the building blocks, in the natural order of execution in the page life cycle. Here, we’ll cover all artifacts in the page builder ecosystem, not just those used in the Medio Clinic website.</p>\n<p>In each phase, we’ll list the artifacts to pinpoint:</p>\n<ul>\n  <li>What they’re responsible for</li>\n  <li>How they communicate with other artifacts in the whole ecosystem</li>\n</ul>\n<div class=\"infobox note\"><p>Please note that code examples in the following chapters are simplified, to emphasize the main principles of page builder and form builder. They cannot be considered production-ready by any means.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f20fe22f-5c18-4ffb-a566-8f98317387da","_parentId":"0661b322-d8b2-463b-887c-0f961f1b6fa1","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>In general, the page type infrastructure comprises the controller for a given Kentico page type, the model that carries the Kentico page data, either served by a generated provider or a repository object, and a view.</p>\n<p>With page builder, the page type acts as a blueprint of all builder-enabled pages of a certain kind. Pages of such type are containers of all instances of editable areas, page sections and widgets (including the&nbsp;<em>Form</em>&nbsp;widget).</p>\n<p>The pages have to be rendered by an&nbsp;<strong>MVC controller, which is responsible&nbsp;</strong>for:</p>\n<ul>\n  <li>Retrieving the model of the page (from the database; preferably through repository and DTO objects)&nbsp;</li>\n  <li>Adding the feature set of page builder features into the HTTP context (as detailed in the previous page)</li>\n  <li>Invoking a view</li>\n</ul>\n<pre><code class=\"language-csharp\">public class MyController : Controller\n{\n\t// GET: my/[nodeAlias]\n\tpublic ActionResult Index(string nodeAlias)\n\t{\n\t\tvar page = MyPageProvider.GetMyPages(nodeAlias)\n\t\t\t.TopN(1)\n\t\t\t.FirstOrDefault();\n\t\t\t\n\t\tHttpContext.Kentico().PageBuilder().Initialize(page.DocumentId);\n\t\t\n\t\treturn View(page);\n\t}\n}</code></pre>\n<p>The controller is not directly responsible for retrieving the widget configuration data (widget state) from the database. This is done automatically in the background, thanks to the statement that added page builder features to the HTTP context. The page doesn’t have to have any fields that influence the process of rendering of widgets.</p>\n<div class=\"infobox warning\"><p>We also advise against having such fields, unless there’s a valid reason for that. Bear in mind that there can be a multitude of pages based on the type, and there can also be a multitude of widgets in each of these pages. It is often better to follow the general principle of object-oriented programming—encapsulation. Therefore, configuration of widgets should be done either via widget configuration forms or through widget inline editors (explained in detail later in this course).</p></div>\n<p>The&nbsp;<strong>view,</strong>&nbsp;invoked by the controller, has two basic responsibilities:</p>\n<ul>\n  <li>To render page builder styles and scripts</li>\n  <li>To define editable areas</li>\n  <li>Optionally, select a default section that will be added to a given area automatically</li>\n  <li>Optionally, define a set of allowed widgets that can be added to a given area</li>\n</ul>\n<pre><code class=\"language-csharp\">@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n&lt;div class=\"my-editable-area\"&gt;\n\t@Html.Kentico().EditableArea(\"top\")\n&lt;/div&gt;\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}</code></pre>\n<div class=\"infobox note\"><p>Please note that although widgets are added by users into widget zones of page sections, the allowed widgets can only be defined at the higher level—in an editable area definition.</p></div>\n<div class=\"infobox idea\"><p>The set of allowed widgets doesn’t necessarily have to be hard-coded in the source code of the view. Theoretically, you could create <a href=\"https://docs.kentico.com/k12sp/custom-development/creating-custom-modules/adding-custom-website-settings\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom settings</a> for your Kentico installation, and develop functionality that retrieves identifiers of allowed widgets from these settings.</p></div>\n<p>The view and its editable areas are the last static (or semi-static) elements in the whole page builder ecosystem. From now on, down the hierarchy, there will be entirely dynamic artifacts that are not bound to any particular Kentico page type, or any controller in the solution. It therefore means that, there are&nbsp;<strong>no touch points</strong>&nbsp;between editable areas and their child artifacts that you would have to care about. Sections and widgets will be added by users in the Pages application. You don’t have to make any provisions to pass data from the view to the page sections or widgets.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a706c750-1e12-4c23-8d0d-43239a16bcc4","_parentId":"db4714f7-ee2d-433f-9dae-86c16314e696","_type":"component","title":" Page type infrastructure","displayTitle":" Page type infrastructure"},{"body":"<p>With editable areas being the top-level containers that are hard-coded, the page sections represent the inner (smaller) chunks of the overall page layout. While widget areas are defined by developers in code, it is content editors who add page sections into pages.</p>\n<div class=\"infobox note\"><p>From a visual standpoint, there is one significant difference between how areas and sections look. While areas will work as rather invisible main regions of the pages, sections will split these areas vertically into rows (smaller or greater, depending on your preference).</p>\n<p>Conversely, on the inside, sections do not necessarily have to be split just into columns. You are free to visually arrange widget zones in any way you desire.</p></div>\n<p>What are page sections made of? Since Kentico 12 Service Pack, sections can be made out of just a <strong>simple MVC partial view</strong>. If for any reason you haven't applied the service pack or, if you want your section have advanced functionality, the section can <strong>also have its own controller class</strong>. Since Kentico 12 Service Pack, you can also add a properties class into the mix. The class conveys the configuration made by content editors.</p>\n<div class=\"infobox idea\"><p>Thanks to the properties class, sections can be made configurable by users:</p>\n<figure data-asset-id=\"23500107-47ef-440e-adb5-e0d8913061d4\" data-image-id=\"23500107-47ef-440e-adb5-e0d8913061d4\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9348fd08-4823-40a6-a1a6-a141db96fbb3/section-properties-dialog.png\" data-asset-id=\"23500107-47ef-440e-adb5-e0d8913061d4\" data-image-id=\"23500107-47ef-440e-adb5-e0d8913061d4\" alt=\"\"></figure></div>\n<div class=\"infobox idea\"><p>When are a custom controller and view model required? In plain English, it is every time you need to either:</p>\n<ul>\n  <li>Transform properties before the view is invoked</li>\n  <li>Compose a view model out of multiple sources of data</li>\n  <li>Access data that's available only in controllers (e.g., the controller context)</li>\n</ul>\n<p>If your intended component falls outside of this category, it can live without its own controller and view model.</p></div>\n<p>Let's now take the artifacts one by one.</p>\n<p>The page section’s <strong>partial view</strong> has just two responsibilities:</p>\n<ul>\n  <li>To specify markup that surrounds widget zones</li>\n  <li>To put placeholders of the widget zones into such markup</li>\n</ul>\n<pre><code class=\"language-html\">&lt;div class=\"my-page-section\"&gt;\n    &lt;div class=\"my-section-column\"&gt;\n        @Html.Kentico().WidgetZone()\n    &lt;/div&gt;\n    &lt;div class=\"my-section-column\"&gt;\n        @Html.Kentico().WidgetZone()\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>Should a page section be configurable by users, you can make the view strongly typed against <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-builder-sections#Developingpagebuildersections-Basicsections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">ComponentViewModel&lt;TProperties&gt;</a> or your own model class of choice.</p>\n<pre><code class=\"language-html\">@model ComponentViewModel&lt;MedioClinic.Models.Sections.TwoColumnSectionProperties&gt;\n\n&lt;div class=\"my-page-section\"&gt;\n    &lt;div class=\"my-section-column\" class=\"@Model.Properties.LeftZoneClass\"&gt;\n        @Html.Kentico().WidgetZone()\n    &lt;/div&gt;\n    &lt;div class=\"my-section-column\" class=\"@Model.Properties.RightZoneClass\"&gt;\n        @Html.Kentico().WidgetZone()\n    &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<p>As for the <strong>properties class</strong>, it simply carries the configuration data set by content editors in a configuration dialog.</p>\n<pre><code class=\"language-csharp\">public class TwoColumnSectionProperties : ISectionProperties\n{\n    [EditingComponent(TextInputComponent.IDENTIFIER, Label = \"Left zone class\"]\n    public string LeftZoneClass { get; set; }\n\n    [EditingComponent(TextInputComponent.IDENTIFIER, Label = \"Right zone class\"]\n    public string RightZoneClass { get; set; }\n}</code></pre>\n<p>As far as <strong>controllers</strong> are concerned, no dark magic happens in them. At its basics, a controller might look like that:</p>\n<pre><code class=\"language-csharp\">[assembly: RegisterSection(\n\t\"My section\", typeof(MySectionController),\n\t\"My section\", \n\tDescription = \"My custom page section.\", IconClass=\"icon-box\")]\n\npublic class MySectionController : SectionController\n{\n\tpublic ActionResult Index()\n\t{\n\t\treturn PartialView(\"Sections/_MySection\");\n\t}\n}</code></pre>\n<p>It is customary that a section controller uses its own model class. However, it may use the stock <em>ComponentViewModel&lt;TProperties&gt;</em> model class as well.</p>\n<p>Page sections don't have any direct <strong>touch points </strong>to the widgets they contain. As both sections and widgets are added at run time by users, code files of sections neither take any Kentico page data nor do they provide data to widget zones and widget instances alike.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"adee5754-ca24-4c0a-abac-2e01aebffd71","_parentId":"2a6abe68-0472-400c-87e7-cddd2c24c106","_type":"component","title":"Page sections","displayTitle":"Page sections"},{"body":"<p>If editable areas and page sections are responsible for the overall layout of the page, then widgets do the heavy lifting of taking input from content editors and displaying the resulting content to the website visitors’ eyes.</p>\n<div class=\"infobox idea\"><p>Widgets don’t necessarily need to take input from content contributors. They also can be rather static. However, you’ll typically want them to be configurable and to take input data.</p></div>\n<h4>Widget partial view</h4>\n<p>Each widget needs to have its partial view. The responsibility of the view is twofold since it always operates in two modes—in the <em>edit mode </em>(in the Pages application of the admin UI) and in the <em>display mode </em>(in the live site).</p>\n<pre><code class=\"language-csharp\">@using MyProject.Models.InlineEditors\n@using MyProject.Models.Widgets\n@model MyProject.Models.Widgets.MyWidgetViewModel\n\n@if (Context.Kentico().PageBuilder().EditMode)\n{\n    Html.RenderPartial(\"InlineEditors/_MyTextEditor\", new MyTextEditorViewModel\n    {\n        PropertyName = nameof(MyWidgetProperties.Text),\n        Text = Model.Text\n    });\n}\nelse\n{\n    @Html.Raw(Model.Text);\n}</code></pre>\n<p>When in the live site, the view’s responsible just for rendering the Razor markup with whatever widget state came from Kentico.</p>\n<p>When in the admin UI, the widget view has to allow the content editors to edit the widget state somehow. It therefore has to employ <em>inline editors</em>, a widget <em>configuration form</em>, or both. In the case of inline editors, the code of the view needs to render them through nested partial views of inline editors, with data passed to them via view models.</p>\n<h4>Widget controller</h4>\n<p>The Kentico 12 Service Pack brought an optional simplified component development model. Since then, the <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Basicwidgets\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">bare minimum</a> needed for a widget has been <strong>its partial view</strong>. With this bare-bones setup, the widget takes some configuration from content editors and displays its output. However, smarter widgets will most certainly need other code artifacts, like a <strong>controller</strong>. So will widgets running on Kentico 12 without service pack applied.</p>\n<p>The responsibility of a <strong>widget controller</strong> is always to invoke a view. To process widget state (input and configuration tweaks made by content editors), the controller needs to get this data as <em>widget properties</em>.</p>\n<pre><code class=\"language-csharp\">public class MyWidgetController : WidgetController&lt;MyWidgetProperties&gt;\n{\n\tpublic ActionResult Index()\n\t{\n\t\tvar properties = GetProperties();\n\n\t\treturn PartialView(\"Widgets/_MyWidget\", new MyWidgetViewModel { Text = properties.Text });\n\t}\n}</code></pre>\n<p>In order to get the properties, the controller has to inherit from <em>Kentico.PageBuilder.Web.Mvc.WidgetController&lt;TProperties&gt;</em>. (The <em>TProperties</em> generic parameter denotes the type of the properties data.) Internally, the <em>WidgetController</em> base class works with a <em>widget properties retriever</em> object. The <em>WidgetController</em> base class then provides a <em>GetProperties</em> method that is capable of pulling the properties data out of the database.</p>\n<p>Sometimes you may want to work with page data (stored in page fields) in your widgets. To achieve that, you can call the <em>GetPage</em> method of the <em>WidgetController</em> base class. It will provide you with all field data.</p>\n<h4>Widget properties model</h4>\n<p>Before we get any further in the rendering pipeline, let’s stop by the <strong>widget properties model</strong>. The class (the <em>TProperties</em> mentioned above) is designed to carry the widget’s state from the admin UI back into the Kentico database, when the content editor hits the <em>Save</em> button. In the background, the data is sent from the browser to the server as JSON. Therefore, the properties model class should reflect this structure and it therefore shouldn’t have any other kinds of properties than those supported by JSON: strings, numbers, booleans, arrays, and objects.</p>\n<pre><code class=\"language-csharp\">public class TextWidgetProperties : Kentico.PageBuilder.Web.Mvc.IWidgetProperties\n{\n\tpublic string Text { get; set; }\n\t\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Font size (pt)\" )]\n\tpublic int FontSizePt { get; set; }\n}</code></pre>\n<p>Remember the mention of using the widget configuration form in the previous paragraphs? Allowing users to configure a widget through a form is one of the responsibilities of the properties model class. It can be accomplished by just decorating the property members of this class with <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em> attributes. In that attribute, the type of an editing component can be specified, together with some other details. That’s all you need to render a text box, or any other form component in the configuration form, and to have its value saved to the database upon hitting <em>Save</em>.</p>\n<h4>Widget view model</h4>\n<p>Unlike the properties class, this one does not represent data flowing from the database into the controller, but the <strong>data that flows out of the controller to the views</strong>.</p>\n<p>If you don't plan on doing anything but passing around the properties (without reformatting), you don't have to introduce your view model to the project. You can use the <em>ComponentViewModel&lt;TProperties&gt;</em> class instead.</p>\n<p>If your widget state needs to be transformed on its way out of the controller or, if you need to mix it with other data (like page type fields), you need you own view model.</p>\n<pre><code class=\"language-csharp\">public class MyWidgetViewModel\n{\n\tpublic string Text { get; set; }\n}</code></pre>\n<p>The custom view model is neither supposed to have any special behavior, nor any special purpose. It is always a plain old C# class. It is not Kentico-specific by any means.</p>\n<h4>Inline editor partial view</h4>\n<p>An inline editor’s responsibility is to allow content contributors to edit the widget state in the WYSIWYG manner, with as little technical skills required as possible.</p>\n<pre><code class=\"language-csharp\">@model MedioClinic.Models.InlineEditors.MyTextEditorViewModel\n\n@using (Html.Kentico().BeginInlineEditor(\"my-text-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"my-text-editor\",\n        data_font_size_pt = Model.FontSizePt.ToString()\n    }))\n{\n    @Html.Raw(Model.Text)\n}</code></pre>\n<p>First, the inline editor needs to render itself. That’s why it needs a partial view and its accompanying view model class.</p>\n<h4>Inline editor view model</h4>\n<p>Everything we said about the widget view model also applies to the inline editor view model. It is just an ordinary view model that pumps data to the inline editor at render time.</p>\n<pre><code class=\"language-csharp\">public class MyTextEditorViewModel\n{\n\tpublic string PropertyName { get; set; }\n\tpublic string Text { get; set; }\n\tpublic int FontSizePt { get; set; } = 12;\n}</code></pre>\n<h4>Inline editor JavaScript file</h4>\n<p>The inline editor needs to capture the edits done by content contributors in the page (in the admin UI) and send the changed widget state to the central browser store. From there, it is then sent back to the server (to the database) upon hitting <em>Save</em>.</p>\n<pre><code class=\"language-javascript\">(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"text-editor\", {\n        init: function (options) {\n\t\t\tvar editorHtmlElement = options.editor;\n\t\t\tvar fontSizePt = editor.getAttribute(\"data-font-size-pt\");\n\t\t\tvar acmeTextEditor = new AcmeTextEditor(editorHtmlElement, fontSizePt);\n\t\t\t\n\t\t\tacmeTextEditor.subscribe(\"textChangedByUser\", function () {\n\t\t\t\tvar event = new CustomEvent(\"updateProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: acmeTextEditor.getAllText(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n\t\t\n\t\tdestroy: function (options) {\n\t\t\t// Destroy the AcmeTextEditor instance.\n\t\t}\n    });\n})();</code></pre>\n<p>Until <a href=\"https://blazor.net\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Blazor</a> supports emitting of custom events, there’s only one way of achieving such a goal in the browser—through JavaScript.</p>\n<p>For that purpose, each inline editor ought to have at least one such code file. From within that code file, you should call the <em>window.kentico.pageBuilder.registerInlineEditor</em> function that’s available in the global object thanks to the initialization of page builder scripts in the builder-enabled page’s view mentioned earlier in this page. In that <em>registerInlineEditor</em> function call, an argument needs to be passed that handles both the initialization of the inline editor and sending of the edited widget state to the central browser’s store. The argument has to have a form of an anonymous object with at least one property function called <em>init</em>. Apart from initializing some JavaScript rich editor component, this property function should also hook into the events emitted by the rich editor component, and make them forwarded to the browser’s central store appropriately. The forwarding is done via a new <em>CustomEvent</em> object with a well-known <em>updateProperty</em> codename. In the detail of the custom event, you can use a <em>refreshMarkup</em> boolean property to control whether a page will be refreshed upon firing such an event.</p>\n<p>When in the <em>registerInlineEditor</em> function call, you have access to an <em>options</em> JavaScript object provided by Kentico. With it, you can retrieve the name of the widget property being edited (as <em>options.propertyName</em>), the editor’s HTML element object, and the Kentico localization service (as <em>options.localizationService</em>).</p>\n<p>On top of these three things, you may also want to pass additional configuration data to the JavaScript code. The best way to do this is pass such data from the widget controller, through the widget view model and the inline editor view model, into the inline editor’s partial view, and render such data in the form of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*\">data-* HTML attributes</a> into the inline editor’s markup. Then it can be read by the JavaScript code easily.</p>\n<p>Initialization aside, the JavaScript file may also handle the process of destroying the inline editor, and the process of dragging and dropping it within the web page.</p>\n<p>To sum the JavaScript file up, its responsibility is to forward events emitted by JavaScript components and rich editors to the browser’s central store. As for touch points, there are basically two of them: taking the data from Kentico (with the <em>options</em> object and possibly with the <em>data-* </em>attributes in hand), and providing updated data back to Kentico (through the <em>updateProperty</em> custom event).</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0ad8fe8e-4137-4ed3-bd77-0525fee8d19e","_parentId":"c2369530-8fd1-4935-b2d4-e7340799e140","_type":"component","title":"Widgets","displayTitle":"Widgets"},{"body":"<p>As we’ve explained earlier, the content contributors may configure a builder-enabled page in the following ways:</p>\n<ul>\n  <li>Add page sections to editable areas.</li>\n  <li>If required, switch from the default section layout to another.</li>\n  <li>Add widgets to each section’s widget zones.</li>\n  <li>Configure widgets and put content in them.</li>\n</ul>\n<p>All of that is captured in one single place in the database: the&nbsp;<em>CMS_Document</em>&nbsp;table. The&nbsp;<em>DocumentPageBuilderWidgets</em>&nbsp;column contains all the state of all editable areas, sections and widgets alike. The column contains all of that as a single JSON string.</p>\n<p>In the&nbsp;<em>CMS_Document</em>&nbsp;table, the rows represent culture versions. As a result, the state is held separately for these versions. The widget state can also be versioned.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fea42429-782a-4c9a-ae06-9edd27d5e944","_parentId":"1d5f7752-2091-4c08-afb9-2242b7c6f6b3","_type":"component","title":"Data persistence","displayTitle":"Data persistence"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What kind of constraints can developers put for widgets?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Developers can limit what kinds of widgets and what number of instances can be put into page sections. The limit can be set on the page section level.</p>","_shouldBeSelected":false,"feedback":"<p>Developers can only limit kinds of widgets, not the number of instances thereof.</p>"},{"text":"<p>Both developers and content contributors may set constraints on the number of widgets placed into page sections.</p>","_shouldBeSelected":false,"feedback":"<p>Constraints can only be specified in the source code (in partial views), by developers.</p>"},{"text":"<p>Developers can specify what kinds of widgets can be placed into page sections belonging to a certain editable area.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>You've got it right. Developers can define what kinds of widgets can be put to page sections in a given editable area.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"302de633-e27d-4bda-a9ba-3c6952e2c649","_parentId":"cbf4700b-9455-4a63-989c-f2fc2dacd9ac","_type":"component","title":"Widget constraints","displayTitle":"Widget constraints"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How is widget state (configuration &amp; content) stored and handled in code?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Developers need to designate a dedicated page type field to hold the widget state. Then, they must retrieve and save the state manually in widget controllers.</p>","_shouldBeSelected":false,"feedback":"<p>Widget state is saved separately from page type fields.</p>"},{"text":"<p>In the database, widget state is saved separately from page type fields. Developers use the <em>GetProperties </em>method of the <em>WidgetController&lt;&gt;</em> base class to get it. Once the state is changed in the edit mode by content contributors, it must be submitted to Kentico via custom JavaScript events of inline editors or form components.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Widget state is saved separately from page type fields. To retrieve it from the database, developers must first get a reference to a current Kentico page via a <em>GetPage </em>method. Then, they need to call the <em>GetProperties </em>method of the <em>WidgetController&lt;&gt; </em>base class.</p>","_shouldBeSelected":false,"feedback":"<p>To retrieve widget state, developers only need to call the <em>GetProperties </em>method.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! Widget state is saved and operated with independently from page type fields. Developers retrieve it through the <em>GetProperties </em>method and save it via the events of inline editors.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"9e4ceaa3-9d1f-40b0-8be2-26cad2806995","_parentId":"cbf4700b-9455-4a63-989c-f2fc2dacd9ac","_type":"component","title":"Widget state","displayTitle":"Widget state"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How can inline editors be initialized?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Developers always initialize inline editors in custom JavaScript code, by calling <em>window.kentico.pageBuilder.registerInlineEditor().</em> In the scope of the method call, they have access to the <em>options </em>object that provides reference to the editor's parent HTML element, the name of the current widget property, and the Kentico localization service. Developers can also pass additional primitive configuration values to the inline editors via data-* attributes.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Inline editors are initialized automatically by Kentico, in the background. The only thing that developers must do is to specify configuration properties in form of data-* attributes.</p>","_shouldBeSelected":false,"feedback":"<p>To keep freedom in the hands of developers, inline editors need to be initialized by custom JavaScript code.</p>"},{"text":"<p>The inline editors are initialized through their MVC partial views, together with view models. All frontend functionality is handled automatically by Kentico.</p>","_shouldBeSelected":false,"feedback":"<p>Inline editors need MVC partial views to render their default HTML markup. However, they also need JavaScript code to bootstrap and register events that update widget state upon each edit by content contributors.</p>"}],"_feedback":{"title":"","correct":"<p>Correct! Inline editors can be made of arbitrary JavaScript functionality. Repetitive and mandatory parts of the functionality is handled by calling Kentico built-in methods in partial views and JavaScript files. However, during the initialization, developers are free to instantiate whatever JavaScript components and libraries they desire.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"8c796f29-a391-4af9-a13a-c71c762bddca","_parentId":"cbf4700b-9455-4a63-989c-f2fc2dacd9ac","_type":"component","title":"Initialization of inline editors","displayTitle":"Initialization of inline editors"},{"body":"<p>In this page, you've learned what page builder looks like on the inside. Most importantly, you've been told how the internal parts communicate with each other and what role they play in the bigger picture of page builder.</p>\n<p>In the next page, you'll get the same kind of overview, this time around about form builder.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"a148ddcf-b71f-4ef0-a586-3ae6605c9d92","_parentId":"b1c4e75c-fa25-486d-b569-daa0845d5ae4","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you’ll get an overview of form builder. In a fashion that's similar to the previous page, you'll learn about:</p>\n<ul>\n  <li>What the building blocks of form builder are</li>\n  <li>What they look like from the website visitor’s perspective</li>\n  <li>What they’re represented by in the admin UI</li>\n  <li>What they’re composed of in Visual Studio</li>\n  <li>What are the responsibilities of all the building blocks</li>\n  <li>How they connect to each other</li>\n  <li>Where in the Kentico database the form builder data is stored</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2bc1ca4e-1d14-4b1f-bc0f-0d3acac5be56","_parentId":"8928d69d-fb57-48f7-a32d-5f7562232d2a","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>Like in the previous page, we'll now go through the building blocks, with attention to:</p>\n<ul>\n  <li>What they're responsible for</li>\n  <li>How they communicate with each other</li>\n</ul>\n<p>The page builder is undoubtedly a powerful feature, therefore the artifacts involved in page builder made up quite a large list. Form builder is no less worth its salt and it is even easier to implement.</p>\n<p>As a developer, you can build the following artifacts in form builder:</p>\n<ul>\n  <li>Layouts of <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-custom-form-layouts\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">form sections</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-validation-rules\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">validation rules</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-visibility-conditions\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">visibility conditions</a></li>\n  <li><a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Form components</a> (custom form fields)</li>\n</ul>\n<div class=\"infobox note\"><p>Please note that code examples in the following chapters are simplified, to emphasize the main principles of page builder and form builder. They cannot be considered production-ready by any means.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fdfd1908-8793-47d4-94c5-77d16d69515a","_parentId":"e8ce7c17-d582-42a0-8f08-720da64d7860","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Form sections are like page sections in page builder. Both share the same purpose—to help in shaping up the overall layout of their parent region. While page sections manage the layout of editable areas in pages, form sections do the same in forms.</p>\n<p>They don't even differ that much in technical terms.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormSection(\n\t\"MySection\", \n\ttypeof(MyFormSectionController), \n\t\"My section\", \n\tDescription = \"My custom form section layout.\", \n\tIconClass = \"icon-l-cols-2\")]\n\n...\n\npublic class MyFormSectionController : Controller\n{\n\tpublic ActionResult Index()\n\t{\n\t\treturn PartialView(\"FormSectionLayouts/_MySectionLayout\");\n\t}\n}</code></pre>\n<p>Identically to page sections, form sections also have their controllers and partial views. The controller’s only responsibility is just to invoke its view, nothing else.</p>\n<pre><code class=\"language-html\">&lt;div class=\"my-form-section\"&gt;\n\t@Html.Kentico().FormZone()\n&lt;/div&gt;</code></pre>\n<p>Similarly to page sections, the view of a form section only needs to define Razor markup that surrounds the placeholders of form sections, and of course, to have these placeholders in them.</p>\n<p>However, you'd find a few technical differences:</p>\n<ul>\n  <li>Page sections support the simplified development model that omits the usage of controllers.</li>\n  <li>Page sections are configurable through properties.</li>\n  <li>Form section controllers don't inherit from SectionController.</li>\n</ul>\n<p>As far as the inner interaction is concerned, neither the controller nor the view work with persisted data. Hence, there are <strong>no touch points</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6b83f8ee-9605-4367-b2fa-4d91361095f0","_parentId":"05da5d81-fd98-4e2e-9a21-19b94bc62f44","_type":"component","title":"Layout of a form section","displayTitle":"Layout of a form section"},{"body":"<p>Validation rules check whether values entered by website visitors into form fields conform to specified requirements. During the process of validation, the rules may also take values of other form fields into account.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormValidationRule(\n\t\"MyValidationRule\", \n\ttypeof(MyValidationRule), \n\t\"My validation rule\", \n\tDescription = \"My custom validation rule.\")]\n\n// ...\n\n[Serializable]\npublic class MyValidationRule : ValidationRule&lt;string&gt;\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Minimum text length\")]\n\tpublic int MinimumTextLength { get; set; }\n\n\tprotected override bool Validate(string value)\n\t{\n\t\treturn value.Length &gt;= MinimumTextLength;\n\t}\n}</code></pre>\n<p>A validation rule has only one code artifact—the validation rule class. This class has its primary responsibility: to override a <em>Validate</em> method that:</p>\n<ul>\n  <li>Does the comparison of the entered form value, either against hard-coded rules, or against another field’s value.</li>\n  <li>Return <em>true </em>(if the validation passed), otherwise <em>false</em>.</li>\n</ul>\n<p>To override that method, the class has to inherit from <em>Kentico.Forms.Web.Mvc.ValidationRule&lt;TValue&gt;</em> (or <em>CompareToFieldValidationRule&lt;TValue&gt;</em>, should you wish to compare against another field).&nbsp;</p>\n<p>As the validation rule often needs to receive some fine-tuning configuration from content editors (on top of the configuration done in the code), the class also has its secondary responsibility: to define configuration form fields. This is done in the very same way as in the widget properties class. Developers simply define property members and decorate them with attributes so that Kentico knows what kind of form field to render in the validation configuration form.</p>\n<p>As for the <strong>touch points</strong> of validation rules, we should emphasize that validation rules communicate only with form fields (form components) of a compatible data type. Validation rules are strongly typed.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"423fa940-f2d9-40c8-a9ee-d0aa734a0a01","_parentId":"e70b14bf-766a-4cf5-bf1e-6dc9e49fd9a6","_type":"component","title":"Field validation rule","displayTitle":"Field validation rule"},{"body":"<p>Visibility conditions can make a form field hidden, based on any logic that you implement. These conditions can also depend on other fields’ values.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormVisibilityCondition(\n\t\"MyVisibilityCondition\", \n\ttypeof(MyVisibilityCondition), \n\t\"My custom visibility condition.\")]\n\n...\n\n[Serializable]\npublic class MyVisibilityCondition : VisibilityCondition\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Happy hours - start\")]\n\tpublic int HappyHoursStart { get; set; }\n\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Happy hours - end\")]\n\tpublic int HappyHoursEnd { get; set; }\n\n\tpublic override bool IsVisible()\n\t{\n\t\treturn DateTime.Now.Hour &gt;= HappyHoursStart &amp;&amp; DateTime.Now.Hour &lt; HappyHoursEnd;\n\t}\n}</code></pre>\n<p>The design pattern of visibility conditions highly resembles that of validation rules. Visibility condition is also defined in just one class. The class also must inherit from either <em>Kentico.Forms.Web.Mvc.VisibilityCondition</em> (or <em>AnotherFieldVisibilityCondition&lt;TValue&gt;</em>). It also has one primary responsibility as well as a secondary one.</p>\n<p>Only this time around, the class is responsible for overriding an <em>IsVisible</em> method. The method also returns <em>bool</em>.</p>\n<p>Also, as in the previous case, you can define configuration form fields by adding property members to the class, and decorate them with attributes, in exactly the same way.</p>\n<p>The conditions based on the <em>AnotherFieldVisibilityCondition&lt;TValue&gt;</em> are also strongly typed.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d2547501-d624-4646-808e-f649d7204a36","_parentId":"ffea902e-9059-4656-a0dd-5fbca5bce2c8","_type":"component","title":"Visibility conditions","displayTitle":"Visibility conditions"},{"body":"<p>Form components basically define types of form fields. Kentico ships with a host of <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/reference-system-form-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">out-of-box form components</a>. If your business requirements go beyond what the built-in form components can handle, then you can develop your custom one.</p>\n<div class=\"infobox idea\"><p>Kentico 12 Service Pack added another <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/page-and-media-selectors-for-page-builder-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">three more built-in form components</a>: media files selector, page selector, and path selector.</p></div>\n<p>However unlikely it may seem, you won’t face any bulky complexity when developing components. In the source code, the component may be represented by only two classes and one view. One of the classes being the component view model (the core of the component) and the second being its accompanying properties class.</p>\n<h4>Component view model class</h4>\n<p>In the view model class, you just define one or more property members. By stating “one or more”, we mean that in the live site, a component does not necessarily have to show up as only one form input HTML element. It can be several input elements that your class in turn transforms to a single primitive database value.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormComponent(\n\t\"MyFormComponent\", \n\ttypeof(MyFormComponent), \n\t\"My form component\", \n\tDescription = \"My custom form component.\", \n\tIconClass = \"icon-picture\")]\n\n...\n\npublic class MyFormComponent : FormComponent&lt;MyFormComponentProperties, string&gt;\n{\n\t[BindableProperty]\n\tpublic string Text { get; set; } = string.Empty;\n\n\tpublic override string GetValue() =&gt; Text;\n\n\tpublic override void SetValue(string value)\n\t{\n\t\tText = value;\n\t}\n}</code></pre>\n<p>The main <strong>responsibility of the model class</strong> is to carry the value(s) from and into the database. In order to do that, you should:</p>\n<ul>\n  <li>Base your class on <em>Kentico.Forms.Web.Mvc.FormComponent&lt;TProperties, TValue&gt;</em></li>\n  <li>Create one or more property members with the <em>Kentico.Forms.Web.Mvc.BindablePropertyAttribute</em> attached</li>\n  <li>Override the <em>SetValue</em> method that is responsible for transferring the database value to the form field value(s)</li>\n  <li>Override the <em>GetValue</em> method that does the opposite</li>\n</ul>\n<div class=\"infobox note\"><p>The methods were named from the database’s perspective. Therefore, the <em>GetValue</em> method gets the value(s) from the <em>bindable properties</em> into the database.</p></div>\n<p>The <em>GetValue </em>and <em>SetValue</em> methods also form the main <strong>touch points</strong> of this class. There is also another touch point: the reference to the component properties class specified as the generic parameter of the <em>FormComponent</em> base class (<em>TProperties</em>).</p>\n<p>So much for the view model class. Let’s now get onto the properties class.</p>\n<h4>Component properties class</h4>\n<p>The naming of the class may resemble widget properties classes. But you shouldn’t get misled by the naming. In this case, the <strong>purpose and responsibility</strong> of the properties class is to allow content editors to configure your form component in a specific form instance in the <em>Forms</em> application.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\npublic class MyFormComponentProperties : FormComponentProperties&lt;string&gt;\n{\n\tpublic MyFormComponentProperties() : base(FieldDataType.Text, 200)\n\t{\n\t}\n\n\t[DefaultValueEditingComponent(TextAreaComponent.IDENTIFIER)]\n\tpublic override string DefaultValue { get; set; } = string.Empty;\n\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of rows of the text area\")]\n\t[Required]\n\tpublic int TextAreaRows { get; set; }\n\t\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of columns of the text area\")]\n\t[Required]\n\tpublic int TextAreaColumns { get; set; }\n}</code></pre>\n<p>It comes as no surprise that you can do that by adding property members to your class and decorating them with attributes. In the same way as before. On top of the configuration properties, you can also override the <em>DefaultValue</em> property of the <em>Kentico.Forms.Web.Mvc.FormComponentProperties&lt;TValue&gt; </em>base class. The <em>DefaultValue</em> property has to be of type <em>TValue</em>.</p>\n<p>However, an equally important part is the class constructor. In it, the nature of the TValue needs to be further specified, so that Kentico can create proper database schemas. You’ll learn all details in a later page of this course.</p>\n<h4>Component partial view</h4>\n<p>The view does the plumbing of the HTML input element(s).</p>\n<pre><code class=\"language-csharp\">@using MyProject.Models.FormComponents\n@model MyFormComponent\n\n@{\n    var htmlAttributes = ViewData.GetEditorHtmlAttributes();\n}\n\n@Html.TextAreaFor(model =&gt; model.Text, Model.Properties.TextAreaRows, Model.Properties.TextAreaColumns, htmlAttributes)</code></pre>\n<p>Its purpose is to render appropriate markup, and alter its contents based on the specific form field’s configuration.</p>\n<p>The configuration data, which was set by content editors in the Forms application, can be reached at runtime, via the <em>Properties</em> property of the form component’s model object.</p>\n<h4>Optional component’s JavaScript file</h4>\n<p>For the most part, you’ll be fine with just the backend code files we’ve just enumerated. However, you may want to add client-side functionality at times. You’re absolutely free to do so and there aren’t any hard requirements or constraints that you have to obey to complement your component with frontend functionality.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d06a3af6-8a4d-457e-8165-efc636ae4ed1","_parentId":"4453bb58-f296-40e2-a297-ea7971ab84f5","_type":"component","title":"Form component","displayTitle":"Form component"},{"body":"<p>If you’re interested in getting an alternative explanation of the architecture of builders, the following two links will give a good head start:</p>\n<ul>\n  <li><a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Page builder development</a></li>\n  <li><a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Form builder development</a>&nbsp;</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ad528d77-3386-4682-88e3-0260f42ec2ca","_parentId":"6c8037d4-f369-4776-825e-64dfe42cbafa","_type":"component","title":"Builders in the Kentico documentation","displayTitle":"Builders in the Kentico documentation"},{"body":"<p>As you can see, form builder provides lot of features that free you from tedious tasks, while giving content editors power to build forms themselves. You now know that apart from form fields represented by form components, Kentico offers you to create field visibility conditions and validation rules. You now also know that form components can act as editing components in widget configuration dialogs.</p>\n<p>If you're eager to get your hands on code, we've got good news. In the next page, you'll create your first builder-enabled page with a widget.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"70fd0421-dae4-4618-a31b-cf31f4d7835e","_parentId":"c76befdd-d259-4b63-afd6-15438c975784","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which of the statements is true?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The purpose of the form component properties class is to provide the form submission data to your app.</p>","_shouldBeSelected":false,"feedback":"<p>Sadly not. This is the job of the model class.</p>"},{"text":"<p>The form component properties class (derived from <em>FormComponentProperties</em>) defines the available configuration options for a given form component.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>The form component model class defines the component's configuration options.</p>","_shouldBeSelected":false,"feedback":"<p>Actually no. That's what the properties class is responsible for.</p>"}],"_feedback":{"title":"","correct":"<p>Right. Form component properties are here to allow configuration in the Forms application. The model class transfers the form submission data.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"eba0cb5f-d071-4bae-854c-5285377ed448","_parentId":"01509717-36cf-432c-b195-d73bf637c386","_type":"component","title":"Properties class versus model class","displayTitle":"Properties class versus model class"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What can a validation rule do?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>It validates the visitor's input against either a hard-coded value or a database one.</p>","_shouldBeSelected":false,"feedback":"<p>Actually not. It can also compare the submitted value against another form field's value.</p>"},{"text":"<p>It validates the visitor's input against either a hard-coded value, database data or, another form field's value.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Well spotted!</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ff494e74-a389-48e5-a962-71be263dff11","_parentId":"01509717-36cf-432c-b195-d73bf637c386","_type":"component","title":"Validation rule","displayTitle":"Validation rule"},{"body":"<p>This page forms a first half of a larger task of creating a minimalist builder-enabled page.</p>\n<p>In this page, you will learn:</p>\n<ul>\n  <li>How to enable page builder features in the Medio Clinic site</li>\n  <li>How to create the basic infrastructure that supports creating of landing pages</li>\n  <li>How to implement this infrastructure in the source code</li>\n</ul>\n<p>In the very next page, you will then learn:</p>\n<ul>\n  <li>What is the minimum set of artifacts for a rich text widget</li>\n  <li>How to implement such widget in the Medio Clinic site</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a846cae8-a6d4-4187-82fd-d1944d8a12da","_parentId":"11e70049-c562-4138-ac2c-a38466fff346","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Let's see what you’ll implement in this course.</p>\n<p>The final result of development will be a landing page that announces a new branch office—a new clinic and a research facility of Medio Clinic, which is focused on tropical disease medicine.</p>\n<p>The page will consist of several columns of static text, an image, a few image slideshows, and finally, a form to register for the opening ceremony of the new clinic.</p>\n<p>In the background, this page will be supported by the following artifacts:</p>\n<ul>\n  <li>Two new <a href=\"https://docs.kentico.com/k12sp/developing-websites/defining-website-content-structure/creating-and-configuring-page-types\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">page types</a></li>\n  <li>One controller, view, repository, and a DTO class, all related to one of the page types</li>\n  <li>Two <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-builder-sections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">page sections</a></li>\n  <li>A text <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">widget</a> with its <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc/creating-inline-editors-for-widget-properties\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">inline editor</a></li>\n  <li>A static image widget with its inline editor</li>\n  <li>An image slideshow widget, also, with its inline editor</li>\n  <li>A <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/customizing-the-form-widget\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">form widget</a> (shipped with Kentico)</li>\n  <li>A media library uploader <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">form component</a></li>\n  <li>A media library selection form component</li>\n  <li>An image dimension <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-validation-rules\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">validation rule</a></li>\n</ul>\n<p>In this page, you'll pass through the first two bullet points: The page types and the basic infrastructure consisting of the controller, view, repository and other foundation classes.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8b4decb6-0feb-44a9-9835-e51ce53edc5a","_parentId":"10747b0a-848d-4e69-9f0c-a394d1cb6524","_type":"component","title":"Scope of delivery","displayTitle":"Scope of delivery"},{"body":"<p>For the rest of this course, all the demo sections will utilize Kentico 12 Service Pack features. If you haven't adopted the service pack yet in your clone of the Medio Clinic solution, you can do so through the standard ways of applying hotfixes. Kentico 12 Service Pack is distributed as the <a href=\"https://www.kentico.com/Downloads/HotFix/12_0/Hotfix_12_0_29.exe\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">12.0.29 hotfix</a>. You can apply it with the <a href=\"https://docs.kentico.com/k12sp/external-utilities/kentico-installation-manager\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Installation Manager</a> utility.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"67495b71-61f8-480e-8d90-f6781d467216","_parentId":"53492605-28c1-42d0-adc3-0cafbe8a8ce7","_type":"component","title":"Kentico 12 Service Pack","displayTitle":"Kentico 12 Service Pack"},{"body":"<p>As we’ve already gone through the theory of enabling builder prerequisites in the <strong>Page builder overview </strong>page of this course, let’s jump right into enabling them in the MedioClinic project!</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ecd52d8b-7dc6-4a50-9b56-a7a542a5a906","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Task: Creating the basic builder infrastructure","displayTitle":"Task: Creating the basic builder infrastructure"},{"body":"<p>If you haven’t enabled preview during the first module of this course (Essentials), you should do so now. Also, make sure preview is enabled in the source code.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5ac87a96-a548-442a-872f-d9ff722bd5b0","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Enabling preview","displayTitle":"Enabling preview"},{"body":"<p>You should call the <em>Kentico.PageBuilder.Web.Mvc.UsePageBuilder</em> extension method on your <em>IApplicationBuilder</em> instance during the startup phase of the <em>MedioClinic</em> project.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c0852d56-5963-44c2-872a-9542333fe14c","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Enabling page builder as OWIN middleware","displayTitle":"Enabling page builder as OWIN middleware"},{"body":"<p>Then, you need to create the page types. One of them will serve as just a section container in the content tree. The other will act as a base of the landing page.</p>\n<p>In order for the landing page to be viewed and worked on in the <em>Pages</em> application, Kentico needs to have means of routing into the page. Hence, the page type needs an URL pattern. The pattern should have two variable segments in it: document culture and the node alias path.</p>\n<p>The landing page type requires just one text field: <em>LandingPageName</em>.</p>\n<p>Optionally, you can configure the section page type to be allowed in just the content tree root, with the landing page type being the only allowed child page type.</p>\n<p>Don’t forget that the page type needs to have the <em>Page</em> tab enabled.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"abb65dd5-09c7-4ce6-a51c-3fdf23a61d5a","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Creating page types","displayTitle":"Creating page types"},{"body":"<p>Create a new MVC route in the source code of the app. The route will handle requests to all landing pages.</p>\n<p>According to MVC best practices, the route should be placed in the lower part of the <em>RegisterRoute</em> method body so that it does not interfere with more specific routes.</p>\n<p>The route pattern should reflect the URL pattern set in the page type.</p>\n<p>For the URL segment of the document culture, specify the same constraint as in the other routes.</p>\n<p>For the URL segment of the node alias path, specify a regular expression constraint that allows only alphabetical characters, digits, dashes and underscores in that segment. To make the routing less error-prone, make the node alias path segment optional.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a8393535-e37e-4b96-b817-2970968d7e91","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Adding a route for landing pages","displayTitle":"Adding a route for landing pages"},{"body":"<p>You can create the landing page controller in very much the same way as you created the others.</p>\n<p>Once you save your generated page type class from the admin UI to the <em>Business</em> project &gt; <em>Generated</em> &gt; <em>Pages</em>, you will be able to prepare the repository and the DTO classes.</p>\n<p>In this phase, you should decide which of the landing page data to pass through the controller to the view. It is certainly the <em>DocumentName</em> field (which mirrors the <em>LandingPageName</em> field value). As each builder-enabled controller has to add a page builder feature set to its HTTP context (explained previously), it needs to do that with the <em>DocumentID</em> in hand. Therefore, <em>DocumentID</em> and <em>DocumentName</em> should be present in your DTO objects.</p>\n<p>Once you have the document ID, you can add the features through the extension method call in the controller.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"608b6a94-4936-456a-a3bc-93c6ee0fc9a6","_parentId":"526e63d9-92f9-4333-9098-cb2e5e90cf30","_type":"component","title":"Creating a landing page controller, DTO, and view","displayTitle":"Creating a landing page controller, DTO, and view"},{"body":"<p>In the fist step, enable preview.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"Enabling preview","body":"<ol>\n  <li>In Visual Studio, go to <em>MedioClinic &gt; App_Start &gt; ApplicationConfig.cs</em>.</li>\n  <li>Make sure that the <em>builder.UsePreview();</em> statement is present in the body of the <em>RegisterFeatures</em> method.</li>\n  <li>You can leave the file open for further changes.</li>\n</ol>","code":{"src":"using Kentico.Content.Web.Mvc;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Web.Mvc;\n\nnamespace MedioClinic\n{\n    public class ApplicationConfig\n    {\n        public static void RegisterFeatures(IApplicationBuilder builder)\n        {\n            // Enable required Kentico features\n\n            builder.UsePreview();\n        }\n    }\n}","lang":"csharp"},"strapline":"Enabling preview"}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"41fcae4c-1964-4b1d-b09c-2536f9a2bd87","_parentId":"f76fa876-6950-408e-b803-52f67f8fb37a","_type":"component","title":"Enabling preview","displayTitle":"Enabling preview"},{"body":"<p>Next, enable the OWN middleware.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the <em>ApplicationConfig.cs</em> file, make sure that the <em>UsePageBuilder</em> method is called in the body of the <em>RegisterFeatures</em> method.</li>\n  <li>As an argument, supply a <em>PageBuilderOptions</em> object with an identifier of a default page section (implemented later).</li>\n</ol>","code":{"src":"public static void RegisterFeatures(IApplicationBuilder builder)\n{\n\t// Enable required Kentico features\n\n\tbuilder.UsePreview();\n\n\tbuilder.UsePageBuilder(new PageBuilderOptions()\n\t{\n\t\tDefaultSectionIdentifier = \"MedioClinic.Section.SingleColumn\",\n\t\tRegisterDefaultSection = true\n\t});\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9b835181-3b97-449a-a0ca-ca3ab9508274","_parentId":"ae933c34-f4b5-4d3f-8b62-9e7d0985dfa6","_type":"component","title":"Enabling page builder as OWN middleware","displayTitle":"Enabling page builder as OWN middleware"},{"body":"<p>Allow repositories query by page aliases.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In <em>Business &gt; Serivces &gt; Query &gt; IDocumentQueryService.cs</em>, define a new overloaded signature of the <em>GetDocument&lt;&gt;</em> method that takes a page alias.</p>","code":{"src":"DocumentQuery<TDocument> GetDocument<TDocument>(string pageAlias) where TDocument : TreeNode, new();","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In <em>Business &gt; Serivces &gt; Query &gt; DocumentQueryService.cs</em>, implement the new overload of the method.</p>","code":{"src":"public DocumentQuery<TDocument> GetDocument<TDocument>(string pageAlias) where TDocument : TreeNode, new()\n{\n\treturn GetDocuments<TDocument>()\n\t\t.TopN(1)\n\t\t.WhereEquals(\"NodeAlias\", pageAlias);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0213aa69-fd1e-4750-89bd-26bbc35b4d1b","_parentId":"358ca161-e58e-4957-843b-dcf41ef1ca55","_type":"component","title":"Enhancing the query service","displayTitle":"Enhancing the query service"},{"body":"<p>In this step, create page types.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the admin UI, navigate to <em>Page types</em>.</li>\n  <li>Create a new page type. The wizard will appear.</li>\n  <li>Set <em>“Landing page section”</em> as the display name.</li>\n  <li>Set the namespace to <em>“MedioClinic”</em> (same as other page types).</li>\n  <li>Set the name to <em>“LandingPageSection”</em>.</li>\n  <li>Click <em>Next</em>.</li>\n  <li>Leave the values of the second step of the wizard at its defaults.</li>\n  <li>Click <em>Next</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b1276692-ecc4-411b-8ae0-484363d154ee/001.png","alt":"001.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the third step, click the <em>New field</em> button.</li>\n  <li>Set the new field’s name to <em>“LandingPageSectionName”</em>.</li>\n  <li>Set the field caption to <em>“Landing page section name”</em>.</li>\n  <li>Click <em>Save</em>.</li>\n  <li>Click <em>Next</em> twice.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/98bec18c-f1e5-4abf-97c3-277b4ae5eabb/002.png","alt":"002.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the step no. 5, remove all page types except <em>CMS.Root</em>.</li>\n  <li>Click <em>Next</em> repeatedly, until you finish the wizard.</li>\n  <li>When in the <em>General</em> tab of your new page type, you can optionally set the page type icon to <em>“icon-l-header-cols-2-footer”</em>.</li>\n  <li>Click Save.</li>\n  <li>Navigate up one level, to the <em>Page types</em> application.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6dd17d5d-6077-4c8c-b212-ba7460970b9b/003.png","alt":"003.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>Create another page type.</li>\n  <li>Set <em>“Landing page”</em> as the display name.</li>\n  <li>Set the namespace to <em>“MedioClinic”</em> (same as other page types).</li>\n  <li>Set the name to <em>“LandingPage”</em>.</li>\n  <li>Click Next.</li>\n  <li>Leave the values of the second step of the wizard at its defaults.</li>\n  <li>Click Next.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/42e3e5fe-c0af-452b-94ea-6d4976768ffc/004.png","alt":"004.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the third step, hit the <em>New field</em> button.</li>\n  <li>Set the new field’s name to <em>“LandingPageName”</em>.</li>\n  <li>Check <em>Required</em>.</li>\n  <li>Set the field caption to <em>“Landing page name”</em>.</li>\n  <li>Click <em>Save</em>.</li>\n  <li>Click <em>Next</em> twice.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6feec8f6-2ec6-44a0-be62-7f172b7be42d/005.png","alt":"005.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the step no. 5, remove all page types except <em>MedioClinic.LandingPageSection</em>.</li>\n  <li>Click <em>Next</em> repeatedly, until you finish the wizard.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/92536fcb-eb99-4ff5-86dc-e2d86e2a288d/006.png","alt":"006.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>When in the <em>General</em> tab of your new page type, specify the URL pattern to <em>“/{%DocumentCulture%}/LandingPage/{%NodeAlias%}”</em>.</li>\n  <li>Optionally, set the page type icon to <em>“icon-l-img-2-cols-3”</em>.</li>\n  <li>Below, in the <em>Advanced settings</em> section of the <em>General</em> tab, check <em>Use Page tab</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/bf8e3501-fb41-454a-acb5-b9a5229c2bfb/007.png","alt":"007.png"},"strapline":""},{"title":"","body":"<p>Generate model classes for page types.</p>\n<ol>\n  <li>In the <em>Page types</em> application, edit the <em>Landing page</em> page type.</li>\n  <li>Navigate to the <em>Code</em> tab.</li>\n  <li>Below the <em>Save path</em> selector, click <em>Save code</em>.</li>\n  <li>If you encounter errors when saving, check your file system permissions. The application pool’s identity must have <em>Modify</em> permissions to the <em>CMS</em> folder. (Alternatively, you can copy the code and paste it into a new file.)</li>\n  <li>Copy the saved code files into <em>Business &gt; Generated &gt; Pages</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5003bace-2e25-4c34-8975-fc7dbc3a43c4/042.png","alt":"042.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"37cdbecc-7cdc-4fee-a43a-e57fc5de3cd0","_parentId":"fa2e91f2-251f-497a-a82d-266d3bf4e7ac","_type":"component","title":"Creating page types","displayTitle":"Creating page types"},{"body":"<p>In this step, define a route.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In Visual Studio, go to <em>MedioClinic &gt; App_Start &gt; RouteConfig.cs</em>.</li>\n  <li>Locate the very last route called <em>DefaultWithCulture</em>.</li>\n  <li>Right above this route, create a new route called <em>“LandingPage”</em>.</li>\n  <li>Compose the URL so that the variable route segments match the macro expressions specified in the URL pattern that you’ve just configured in the page type.</li>\n  <li>Set the default controller name to <em>“LandingPage”</em>.</li>\n  <li>For the <em>culture</em> variable segment of the route, specify the <em>SiteCultureConstraint</em>, in the same way as with the other routes.</li>\n  <li>For the <em>nodeAlias</em> variable segment of the route, add a regular expression constraint. Set the regular expression to <em>\"[\\w\\d_-]*\"</em> (with the @ sign preceeding the literal).</li>\n  <li>Wrap the <em>RegexRouteConstraint</em> constructor call into the <em>OptionalRouteConstraint</em> constructor call.</li>\n  <li>Save the file.</li>\n</ol>","code":{"src":"// Maps route to langind pages\nroute = routes.MapRoute(\n\tname: \"LandingPage\",\n\turl: \"{culture}/LandingPage/{nodeAlias}\",\n\tdefaults: new { culture = defaultCulture.Name, controller = \"LandingPage\", action = \"Index\" },\n\tconstraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), nodeAlias = new OptionalRouteConstraint(new RegexRouteConstraint(@\"[\\w\\d_-]*\")) }\n);\n\n// A route value determines the culture of the current thread\nroute.RouteHandler = new MultiCultureMvcRouteHandler();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4083255a-4a6a-492b-922e-9781c4484a38","_parentId":"ed12dbff-b7b7-405c-a54c-63b71b5b168b","_type":"component","title":"Adding a route for landing pages","displayTitle":"Adding a route for landing pages"},{"body":"<p>In this series of steps, create the various code files for landing pages.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In Visual Studio, go to <em>Business &gt; Dto</em>, and create a new <em>“LandingPage”</em> subfolder.</li>\n  <li>In that folder, create a new <em>“LandingPageDto.cs”</em> class file.</li>\n  <li>Make the new class implement <em>IDto</em>.</li>\n  <li>Put an integer property called <em>DocumentId</em> into the class.</li>\n  <li>Add a string property called <em>Title</em>.</li>\n  <li>Save the file and close it afterwards.</li>\n</ol>","code":{"src":"public class LandingPageDto : IDto\n{\n\tpublic int DocumentId { get; set; }\n\tpublic string Title { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, you'll define the interface for your landing page repository.</p>\n<p>If you just needed the repository to cater landing pages, the interface would have been quite simpler. Therefore, it may seem overwhelming a bit at this point. However, the robustness of this repository will make sense once you add support for page templates to your landing page infrastructure.</p>\n<ol>\n  <li>Go to <em>Business &gt; Repository</em>, and create a new <em>“LandingPage”</em> subfolder.</li>\n  <li>In that folder, create a new <em>“ILandingPageRepository.cs”</em> interface file.</li>\n  <li>Make the new interface implement <em>IRepository</em>.</li>\n  <li>Define a signature of a method—<em>GetLandingPage</em>.</li>\n  <li>For the time being, just notice that the method takes the page alias and returns <em>LandingPageDto</em>.</li>\n  <li>You don't have to fully understand the two Func&lt;&gt; parameters right now.</li>\n  <li>Save the file and close it afterwards.</li>\n</ol>","code":{"src":"/// <summary>\n/// Represents a contract for a landing page.\n/// </summary>\npublic interface ILandingPageRepository : IRepository\n{\n    /// <summary>\n    /// Retrieves a landing page DTO object.\n    /// </summary>\n    /// <typeparam name=\"TKenticoLandingPage\">The generated Kentico landing page type.</typeparam>\n    /// <typeparam name=\"TLandingPageDto\">The landing page DTO class.</typeparam>\n    /// <param name=\"pageAlias\">Page alias.</param>\n    /// <param name=\"queryModifier\">Delegate that modifies the base query (e.g. adds columns).</param>\n    /// <param name=\"selector\">Delegate that maps additional properties from <typeparamref name=\"TKenticoLandingPage\"/> onto \n    /// <typeparamref name=\"TLandingPageDto\"/>, on top those present in <see cref=\"Business.Dto.LandingPage.LandingPageDto\"/>.</param>\n    /// <returns></returns>\n    TLandingPageDto GetLandingPage<TKenticoLandingPage, TLandingPageDto>\n        (string pageAlias, \n        Func<DocumentQuery<TKenticoLandingPage>, DocumentQuery<TKenticoLandingPage>> queryModifier = null, \n        Func<TKenticoLandingPage, TLandingPageDto, TLandingPageDto> selector = null)\n        where TKenticoLandingPage : TreeNode, new()\n        where TLandingPageDto : LandingPageDto, new();\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, implement your interface.</p>\n<ol>\n  <li>While staying in the same folder, create a new <em>“LandingPageRepository.cs”</em> class file.</li>\n  <li>Make the new class inherit from <em>BaseRepository</em>, and make it implement <em>ILandingPageRepository</em>.</li>\n  <li>In order to make use of the base class’ methods, create a constructor that takes <em>IDocumentQueryService</em> implementations and in turn passes them onto the base class’ constructor.</li>\n  <li>Implement the <em>GetLandingPage</em> method you’ve defined previously. Make use of the <em>DocumentQueryService</em> member of the base class.</li>\n  <li>Get a single document by calling <em>DocumentQueryService.GetDocument()</em>.</li>\n  <li>For now, constrain the retrieval to just the <em>“DocumentID”</em> and <em>“DocumentName”</em> columns.</li>\n  <li>Now that you see the code snippet, notice that <em>queryModifier </em>is supposed to rework the default <em>DocumentQuery </em>object. This way, you'll be able to include additional column requests to the query, for instance.</li>\n  <li>Let's also explain the construct of <em>selector </em>and <em>completeSelector</em>. They allow you to supply logic that maps the additional columns onto your DTO properties, on top of the <em>DocumentId </em>and <em>Title</em> ones.</li>\n  <li>When getting the single-item query results, project it to new <em>LandingPageDto</em> objects.</li>\n  <li>Transform the sequence into a <em>LandingPageDto</em> object by caling <em>.Select(completeSelector)</em>.</li>\n  <li>Save the file and close it afterwards.</li>\n</ol>","code":{"src":"public class LandingPageRepository : BaseRepository, ILandingPageRepository\n{\n\n    public LandingPageRepository(IDocumentQueryService documentQueryService) : base(documentQueryService)\n    {\n    }\n\n    public TLandingPageDto GetLandingPage<TKenticoLandingPage, TLandingPageDto>\n        (string pageAlias, \n        Func<DocumentQuery<TKenticoLandingPage>, DocumentQuery<TKenticoLandingPage>> queryModifier = null, \n        Func<TKenticoLandingPage, TLandingPageDto, TLandingPageDto> selector = null)\n        where TKenticoLandingPage : TreeNode, new()\n        where TLandingPageDto : LandingPageDto, new()\n    {\n        var query = DocumentQueryService.GetDocument<TKenticoLandingPage>(pageAlias)\n            .AddColumns(\"DocumentID\", \"DocumentName\");\n\n        if (queryModifier != null)\n        {\n            query = queryModifier(query);\n        }\n\n        Func<TKenticoLandingPage, TLandingPageDto> completeSelector = (landingPage) =>\n        {\n            var dto = new TLandingPageDto\n            {\n                DocumentId = landingPage.DocumentID,\n                Title = landingPage.DocumentName\n            };\n\n            return selector != null ? selector(query, dto) : dto;\n        };\n\n        return query\n            .Select(completeSelector)\n            .FirstOrDefault();\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>When you’re done with the DTO and repository implementation, you’re ready to build the controller.</p>\n<ol>\n  <li>Go to <em>MedioClinic &gt; Controllers</em>, and create a new <em>“LandingPageController.cs”</em> class file.</li>\n  <li>Make your new controller inherit from <em>BaseController</em>.</li>\n  <li>To be able to use your previously created repository, add an <em>ILandingPageRepository</em> getter-only property.</li>\n  <li>Fill that property’s value in a constructor.</li>\n  <li>In the same constructor, pass the <em>IBusinessDependencies</em> implementation to the base class.</li>\n  <li>Make your Index action method accept the node alias you’ve specified in the route.</li>\n  <li>In the body of the Index method, take the DTO object, secure the retrieval with a null check that returns <em>HttpNotFound()</em> if it fails.</li>\n  <li>Make use of the base class’ <em>GetPageViewModel</em> method (the non-generic overload) to build a view model with the page title in hand.</li>\n  <li>Add the page builder features to the current HTTP context through a statement found in this code snippet.&nbsp;</li>\n  <li>You can close the file now.</li>\n</ol>","code":{"src":"public class LandingPageController : BaseController\n{\n    protected ILandingPageRepository LandingPageRepository { get; }\n\n    public LandingPageController(\n        IBusinessDependencies dependencies, ILandingPageRepository landingPageRepository) : base(dependencies)\n    {\n        LandingPageRepository = landingPageRepository ?? throw new ArgumentNullException(nameof(landingPageRepository));\n    }\n\n    // GET: LandingPage/[nodeAlias]\n    //[OutputCache(Duration = 3600, VaryByParam = \"nodeAlias\", Location = OutputCacheLocation.Server)]\n    public ActionResult Index(string nodeAlias)\n    {\n        var landingPageDto = LandingPageRepository\n                .GetLandingPage<CMS.DocumentEngine.Types.MedioClinic.LandingPage, LandingPageDto>(nodeAlias);\n\n        if (landingPageDto == null)\n        {\n            return HttpNotFound();\n        }\n\n        Dependencies.CacheService.SetOutputCacheDependency(nodeAlias);\n\n        // Implementation without page templates (begin)\n        /*var model = GetPageViewModel(landingPageDto.Title);\n        HttpContext.Kentico().PageBuilder().Initialize(landingPageDto.DocumentId);\n\n        return View(model);*/\n        // Implementation without page templates (end)\n\n        // Page template implementation (begin)\n        return new TemplateResult(landingPageDto.DocumentId);\n        // Page template implementation (end)\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>For the time being, the controller is ready. Now, let’s create the view. Before you do that, we strongly recommend adding a namespace reference to your views’ web.config file.</p>\n<ol>\n  <li>Go to the <em>Views</em> folder, and open the web.config file.</li>\n  <li>In that file, locate the <em>system.web.webPages.razor &gt; pages &gt; namespaces</em> XML element.</li>\n  <li>Add a new line according to this code snippet.</li>\n  <li>You can now save and close the file.</li>\n</ol>","code":{"src":"<add namespace=\"Kentico.PageBuilder.Web.Mvc\"/>","lang":"html"},"strapline":""},{"title":"","body":"<p>Let’s create the view itself.</p>\n<ol>\n  <li>While staying in the <em>Views</em> folder, create a new <em>“LandingPage”</em> subfolder.</li>\n  <li>In that folder, create a new <em>“Index.cshtml”</em> view file.</li>\n  <li>Add the <em>@section</em> directives to render page builder styles and scripts.</li>\n  <li>Render the scripts at the end of the file.</li>\n  <li>Add markup, together with one editable area, as depicted in this code snippet.</li>\n</ol>","code":{"src":"@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n<div class=\"section\">\n    <div class=\"container\">\n        <div class=\"kn-system-messages\"></div>\n        @Html.Kentico().EditableArea(\"top\")\n    </div>\n</div>\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}","lang":"html"},"strapline":""},{"title":"","body":"<p>For both of the <em>@section</em> directives to work, add a <em>@RenderSection</em> directive to the layout file.</p>\n<ol>\n  <li>In <em>Views</em> &gt; <em>Shared</em> &gt; <em>_Layout.cshtml</em>, locate the closing tag of the <em>&lt;head /&gt;</em> element.</li>\n  <li>Put the directive right above the closing tag.</li>\n</ol>","code":{"src":"@RenderSection(\"Styles\", required: false)","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finally, create a CSS style for the landing pages.</p>\n<ol>\n  <li>In the <em>Content &gt; Css &gt; Master</em> folder, open the <em>style.css</em> file.</li>\n  <li>Put the style snippet into the file.</li>\n  <li>Save and close the file.</li>\n</ol>","code":{"src":"/* LANDING PAGE STYLES */\n.kn-system-messages p {\n    padding: 0.5rem;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ab4c40ae-ec72-4725-972b-6323df889ce0","_parentId":"e6284bdc-db57-4246-b1bb-f9a381ea55e9","_type":"component","title":"Creating a controller, repository, DTO, and view","displayTitle":"Creating a controller, repository, DTO, and view"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How to define a URL pattern for a multi-language landing page?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"“/{%DocumentCulture%}/LandingPage/{%NodeAlias%}”","lang":"csharp"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"“/LandingPage/{%NodeAlias%}”.","lang":"csharp"},"feedback":"<p>The patterns lacks a macro expression that denotes the document culture.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"“/{%PageCulture%}/LandingPage/{%NodeAlias%}”.","lang":"csharp"},"feedback":"<p>Kentico pages are called \"documents\" in the API, for backwards compatibility reasons. Therefore, the correct wording of the first macro expression is <em>{%DocumentCulture%}.</em></p>","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"<p>Good! The %DocumentCulture% macro expression needs to be included in the URL pattern.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"e459cbf8-d327-4f21-a3a6-d60eed9f1df8","_parentId":"ee1ec0e8-d2d0-4823-b4f8-de6568f55c71","_type":"component","title":"URL pattern","displayTitle":"URL pattern"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How to properly register page builder features on a global (application-wide) level?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePreview();\n}","lang":"csharp"},"feedback":"<p>During the application start phase, not only preview needs to be enabled but also page builder itself.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"protected void Application_Start()\n{\n\tApplicationBuilder.Current.UsePreview();\n\t\n\tApplicationBuilder.Current.UsePageBuilder(new PageBuilderOptions()\n\t{\n\t\tDefaultSectionIdentifier = \"MedioClinic.Section.SingleColumn\",\n\t\tRegisterDefaultSection = true\n\t});\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Correct. To register page builder features on a global level, one needs to add two pieces of OWIN middleware: for both preview and page builder.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"e3166230-8ad8-49b0-a7fe-caa6dbdcaeb9","_parentId":"ee1ec0e8-d2d0-4823-b4f8-de6568f55c71","_type":"component","title":"Global page builder features","displayTitle":"Global page builder features"},{"body":"<p>In this page, you've made provisions to run builder-enabled pages in the Medio Clinic website. You've added prerequisites like preview and OWIN middleware. Then you've created page types for a landing page section and the landing pages themselves. Hand in hand with the URL pattern in the page type, you've defined your route and enhanced the query service. Lastly, you've created a landing page controller, repository, DTO, and view.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"f0a8605f-93dc-484b-8f27-a85fe5541445","_parentId":"ec6d4f8a-b229-4ea1-871b-534996be2a54","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>This page rounds up the second half of the task of creating a minimalist builder-enabled page.</p>\n<p>In this page, you will carry on by implementing:</p>\n<ul>\n  <li>Basic page sections</li>\n  <li>A simple text editor widget</li>\n</ul>\n<p>The code artifacts will allow you (and your content editors) to create landing pages, and write rich texts into them.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"911eafc7-a3d6-40ad-bd71-6bddac4dff76","_parentId":"659f69d0-1502-403c-87c6-4ed046c93ea7","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>The theory in the previous page said that creating sections was trivial. You’ll most probably agree. In this task, your job is to create two sections, each having a different layout:</p>\n<ul>\n  <li>A single-column layout</li>\n  <li>A double-column layouts that has a configurable column ratio</li>\n</ul>\n<p>Sections need to be registered in the system, via an assembly-level attribute. Namely, you want to use the <em>Kentico.PageBuilder.Web.Mvc.RegisterSectionAttribute</em>, in which you can specify the unique identifier of the section, its type, name, and other details.</p>\n<p>Such rudimentary sections will work fine without having their own controllers and view models. The single-column section can live with just a view, nothing else. In case of the configurable double-column one, you'll just add a properties class. However, without their own controllers, these sections will still need to be <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-builder-sections#Developingpagebuildersections-Registeringsections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">registered</a> in the system somehow.</p>\n<p>As far as the views are concerned, their job is mainly to render the widget zones by calling <em>@Html.Kentico().WidgetZone()</em>, together with surrounding markup. The configurable section's view will need to reflect the ratio (the left column width) set by content editors.</p>\n<p>Remember that in order for a partial view to be usable across the whole project, it should be placed into <em>MedioClinic &gt; Views &gt; Shared &gt; Sections</em>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"22809dc7-1ad0-473a-9273-0fcc269fba37","_parentId":"0c5c2380-b22c-48a8-b551-66ead2f16e04","_type":"component","title":"Task: Creating sections","displayTitle":"Task: Creating sections"},{"body":"<p>Let's jump into Visual Studio to create the sections.</p>\n<p>From now on, all the implementation happens in just the&nbsp;<em>MedioClinic</em>&nbsp;project. We’ll no longer give instructions to “go to&nbsp;<em>MedioClinic &gt; Folder</em>”, just “<em>Folder</em>”.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In this step, create the view of the single-column section.</p>\n<ol>\n  <li>Go to <em>Views &gt; Shared</em>.</li>\n  <li>In that folder, create a new <em>“Sections”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>_SingleColumnSection.cshtml</em> view file.</li>\n  <li>Add Razor code according to this code snippet, which contains the desired widget zone placeholder.</li>\n</ol>","code":{"src":"<div class=\"row section\">\n    <div class=\"col s12\">\n        @Html.Kentico().WidgetZone()\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>Now, register the section.</p>\n<ol>\n  <li>In Solution explorer, head on to <em>App_Start</em>.</li>\n  <li>Create a <em>\"PageBuilderComponentRegister\" </em>class file.</li>\n  <li>Remove the class stub and add an assembly-level attribute according to the snippet.</li>\n</ol>","code":{"src":"[assembly: RegisterSection(\n    \"MedioClinic.Section.SingleColumn\", \n    \"Single column\", \n    customViewName: \"Sections/_SingleColumnSection\", \n    Description = \"Single-column section with one zone.\", \n    IconClass = \"icon-square\")]","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The two-column section will be similar. Start with the properties class.</p>\n<p>Before you start, we should explain the philosophy of the Materialize CSS framework. In Materialize, the width of columns is not expressed by percentage of the overall width of the page. The layout (the <a href=\"https://materializecss.com/grid.html\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">grid</a>) is split into twelve virtual slots, which your elements can occupy. Apart from that, Materialize is responsive by default, letting you state how many of those virtual slots will be used in each main viewport (S, M, L, XL).</p>\n<ol>\n  <li>In <em>Models</em>, create a new \"Sections\" subfolder.</li>\n  <li>In that subfolder, create a <em>\"TwoColumnSectionProperties\"</em> class file.</li>\n  <li>Make the class implement <em>ISectionProperties</em>.</li>\n  <li>Add an integer property for the left column width. The width of the right column will be automatically computed later in the view.</li>\n  <li>Give the property the <em>EditingComponent </em>attribute according to the snippet.</li>\n</ol>","code":{"src":"public class TwoColumnSectionProperties : ISectionProperties\n{\n    [EditingComponent(\n        IntInputComponent.IDENTIFIER, \n        DefaultValue = 6, \n        Label = \"{$Section.TwoColumn.Label$}\", \n        ExplanationText = \"{$Section.TwoColumn.ExplanationText$}\",\n        Order = 0)]\n    public int LeftColumnWidth { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now continue with the view.&nbsp;You'll want to make the columns configurable only for large screens, leaving the columns equally-wide for tablets, vertically-stacked for smartphones, and undefined for extra large screens (for simplicity).</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; Sections</em>, create a new <em>_TwoColumnSection.cshtml</em> file.</li>\n  <li>Use the <em>ComponentViewModel&lt;TwoColumnSectionProperties&gt;</em> model.</li>\n  <li>Compute the class name as seen in the upper part of the snippet.</li>\n  <li>Use it for the elements holding the widget zones.</li>\n</ol>","code":{"src":"@model ComponentViewModel<MedioClinic.Models.Sections.TwoColumnSectionProperties>\n\n@{ \n    var leftColumnStyle = $\"l{Model.Properties.LeftColumnWidth}\";\n    var rightColumWidth = 12 - Model.Properties.LeftColumnWidth;\n    var rightColumnStyle = $\"l{rightColumWidth}\";\n}\n\n<div class=\"row section\">\n    <div class=\"col @leftColumnStyle m6 s12 kn-section-left\">\n        @Html.Kentico().WidgetZone()\n    </div>\n    <div class=\"col @rightColumnStyle m6 s12 kn-section-right\">\n        @Html.Kentico().WidgetZone()\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>Finally, register the two-column section in the system.</p>\n<ol>\n  <li>Open <em>App_Start &gt; PageBuilderComponentRegister.cs.</em></li>\n  <li>Register the section in the same fashion as before.</li>\n</ol>","code":{"src":"[assembly: RegisterSection(\n    \"MedioClinic.Section.TwoColumn\", \n    \"Two columns\", \n    propertiesType: typeof(MedioClinic.Models.Sections.TwoColumnSectionProperties),\n    customViewName: \"Sections/_TwoColumnSection\",\n    Description = \"Two-column section with configurable column widths.\", \n    IconClass = \"icon-l-cols-2\")]","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b55e57ed-eecc-4339-a0c5-c938221d28e0","_parentId":"42385e2b-02f9-41da-9eb3-a6a6590f761e","_type":"component","title":"Demo: Creating sections","displayTitle":"Demo: Creating sections"},{"body":"<p>This theory chapter should act as a short refresher of the principles you’ve learned in the previous pages.</p>\n<p>Widgets can be made of just a few code artifacts. As a minimum, each widget needs a <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Basicwidgets\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">partial view</a>. You'll also often want a <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Widgetswithacustomcontroller\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">controller</a>,&nbsp;bound to the view by a view model. Should a widget allow content contributors to produce content (yes, widgets were designed for that), then it also needs a <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc/defining-widget-properties-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">properties class</a>, and:</p>\n<ul>\n  <li>One or more <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc/creating-inline-editors-for-widget-properties\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">inline editors</a></li>\n  <li>A <a href=\"https://docs.kentico.com/k12sp/managing-website-content/using-widgets-in-mvc#UsingwidgetsinMVC-Workingwithwidgets\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configuration form</a></li>\n  <li>A combination of the two</li>\n</ul>\n<div class=\"infobox idea\"><p>When are a custom controller and view model required? In plain English, it is every time you need to either:</p>\n<ul>\n  <li>Transform properties before the view is invoked</li>\n  <li>Compose a view model out of multiple sources of data</li>\n  <li>Access data that's available only in controllers (e.g., the controller context)</li>\n</ul>\n<p>If your intended component falls outside of this category, it can live without its own controller and view model.</p></div>\n<p>In this phase of the course, you’ll create the least-complex widget that allows content contributors to create content—a text widget.</p>\n<p>The widget will intentionally be kept as simple as possible. It will be almost identical to that of our <em>Dancing Goat</em> MVC sample site that can be deployed to IIS with the Kentico installer. The simplicity of the widget will help you put your hands on the real coding on one side, while also allowing you to clearly understand the underpinnings of page builder on the other.</p>\n<p>Once you familiarize yourself with the implementation details, you’ll then implement the two remaining custom widgets used in the landing page: the static image widget and the image slideshow widget.</p>\n<div class=\"infobox idea\"><p>In production scenarios, we recommend you use the <a href=\"https://github.com/Kentico/ems-mvc-components/tree/master/Kentico.Widget.RichText#rich-text-widget\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Rich Text widget</a> created by Kentico or, look around for community-made editors in the <a href=\"https://devnet.kentico.com/marketplace\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Marketplace</a>.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bb442f66-589c-4eda-91b5-36c08092a55c","_parentId":"b0d1dfac-b3cc-46ae-8bb2-0cabac76b0f8","_type":"component","title":"Theory: Creating a text widget","displayTitle":"Theory: Creating a text widget"},{"body":"<p>Let’s summarize the requirements you have for the widget. You need it to be able to:</p>\n<ul>\n  <li>Edit text</li>\n  <li>Add basic formatting</li>\n  <li>Provide the changes of the inserted text to the central browser store via events</li>\n</ul>\n<p>This requires some browser functionality implemented in JavaScript.</p>\n<p>You can certainly implement everything yourself, however, why not use an existing code base that’s available on the Internet?</p>\n<p>One of the components out there that meets the above requirements, is <a href=\"https://yabwe.github.io/medium-editor/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">MediumEditor</a>. To get it working in a widget, all you have to do is to put its .js and .css files into the same file system location of your widget’s .js (and .css) file. The Kentico NuGet packages will then add them to the ASP.NET MVC bundle that they automatically create for all widgets in the background.</p>\n<p>Before you set out to develop the widget, you may want to recall the important parts of the design:</p>\n<ul>\n  <li>The widget controller wouldn't have to do more than just pass the properties (the text) to the view. Thus, you can skip it.</li>\n  <li>The widget needs to be <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc#DevelopingwidgetsinMVC-Registeringwidgets\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">registered</a>.</li>\n  <li>A property class is required.</li>\n  <li>The property class needs to have properties of primitive values serializable to JSON.</li>\n  <li>The property class provides the widget state, originally obtained from the browser, stored in the database.</li>\n  <li>The widget partial view should work with <em>ComponentViewModel&lt;TProperties&gt;</em> as its model.</li>\n  <li>The view should be designed to operate in both modes: the display mode and the edit mode.</li>\n  <li>In edit mode, the view should invoke the inline editor partial view and pass required data onto it via its own view model.</li>\n  <li>When in edit mode, Kentico will automatically run your widget's JavaScript file.</li>\n  <li>In that file, you need to initialize the <em>MediumEditor</em> object, subscribe to its events, and pass the text content from the editor to the browser store, in the <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-widgets-in-mvc/creating-inline-editors-for-widget-properties\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">required format</a>.&nbsp;</li>\n</ul>\n<p>If you feel like implementing it all by yourself, off you go. If not, feel free to code along in the following demo chapter.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b7289c7c-764d-4841-b935-d729fc6b54d9","_parentId":"0bf9a467-12dc-427d-916e-e9ccf6dcc22f","_type":"component","title":"Task: Creating a text widget","displayTitle":"Task: Creating a text widget"},{"body":"<p>In this series of steps, create the text widget.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the properties class.</p>\n<ul>\n  <li>In the <em>Models</em> folder, create a new <em>“Widgets”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextWidget”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextWidgetProperties.cs”</em> class file.</li>\n  <li>Make the class implement <em>Kentico.PageBuilder.Web.Mvc.IWidgetProperties</em>.</li>\n  <li>Add a “<em>Text”</em> string property.</li>\n</ul>","code":{"src":"    public class TextWidgetProperties : IWidgetProperties\n    {\n        public string Text { get; set; }\n    }","lang":"csharp"},"strapline":""},{"title":"","body":"<p>At this point, you have the properties class designed to carry the widget data provided by the browser to the database. You can consume that data in your widget view.</p>\n<p>Now you should take steps to display the widget contents in both the live site as well as in the admin UI. You need your widget view.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared</em> folder, create a new <em>“Widgets”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“_TextWidget.cshtml”</em> partial view.</li>\n  <li>Make your view strongly-typed on <em>ComponentViewModel&lt;TextWidgetProperties&gt;</em>.</li>\n  <li>Add the if-statement, according to this code snippet, to split the rendering based on whether the widget runs in the admin UI or in the live site.</li>\n  <li>In case of the former, pass the text data, together with the property’s codename, to the future inline editor’s partial view. (The codename doesn’t have to be unique across the whole page, just in the scope of the widget instance.)</li>\n  <li>In case of the latter, display the text.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@using MedioClinic.Models.Widgets\n@model ComponentViewModel<MedioClinic.Models.Widgets.TextWidgetProperties>\n\n@if (Context.Kentico().PageBuilder().EditMode)\n{\n    Html.RenderPartial(\"InlineEditors/_TextEditor\", new TextEditorViewModel\n    {\n        PropertyName = nameof(TextWidgetProperties.Text),\n        Text = Model.Properties.Text\n    });\n}\nelse\n{\n    @Html.Raw(Model.Properties.Text);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The rendering of the widget contents in the live site has already been dealt with in the widget view. However, the widget still needs means of taking users’ input in the admin UI. You need an inline editor.</p>\n<p>To bootstrap your editor, create its view model first. Then you’ll create the partial view and the JavaScript file.</p>\n<p>As you may have noticed, the inline editor always needs to know the codename of the widget property it operates on. All inline editors in the project will need a way to find that out. It is not recommended to design editors in a way that they determine the name of the property all by themselves. Instead, the widget should do that, and let the inline editors know via an editor view model.</p>\n<p>Therefore, it is best to wrap that property codename into an abstract class that each inline editor’s view model inherits.&nbsp;</p>\n<ol>\n  <li>In the <em>Models</em> folder, create a new <em>“InlineEditors” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“InlineEditorViewModel.cs”</em> class file.</li>\n  <li>Make that class abstract and add a <em>“PropertyName”</em> string property.</li>\n</ol>","code":{"src":"namespace MedioClinic.Models.InlineEditors\n{\n    public abstract class InlineEditorViewModel\n    {\n        public string PropertyName { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now inherit from the abstract class in your text editor view model.</p>\n<ul>\n  <li>While in the <em>Models &gt; InlineEditors</em> folder, create a new <em>“TextEditor”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextEditorViewModel.cs”</em> class file.</li>\n  <li>Make that class inherit from the abstract class and add a <em>“Text”</em> string property.</li>\n</ul>","code":{"src":"namespace MedioClinic.Models.InlineEditors\n{\n    public class TextEditorViewModel : InlineEditorViewModel\n    {\n        public string Text { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Your inline editor now only needs the partial view to render and the JavaScript file to update the database with edits.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared</em> folder, create a new <em>“InlineEditors”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“_TextEditor.cshtml”</em> partial view file.</li>\n  <li>Make your view strongly-typed on <em>TextEditorViewModel</em>.</li>\n  <li>Add the using-statement as depicted in this code snippet. The statement makes sure all the mandatory markup for an inline editor is rendered properly.</li>\n  <li>As arguments, pass the unique codename of your editor, the codename of the widget property you’ve obtained from your view model, and an anonymous object to specify the CSS class of the editor’s HTML element.</li>\n  <li>In the body of the using-statement, simply render the text.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.InlineEditors.TextEditorViewModel\n\n@using (Html.Kentico().BeginInlineEditor(\"text-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"text-editor\"\n    }))\n{\n    @Html.Raw(Model.Text)\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>We’re getting to the grand finale. Let’s create the JavaScript file.</p>\n<ol>\n  <li>In the <em>Content</em> folder, create a new <em>“InlineEditors”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“TextEditor”</em> subfolder.</li>\n  <li><a href=\"https://github.com/yabwe/medium-editor/archive/master.zip\">Download</a> the ZIP archive of MediumEditor and copy the <em>medium-editor-master\\dist</em> folder from the archive to the folder you’ve just created. You can rename the copied <em>dist</em> folder to <em>“medium-editor”</em> for better brevity.</li>\n  <li>While in the <em>medium-editor</em> folder, delete the <em>*.min.*</em> files as Kentico will bundle and minify the files for itself.</li>\n  <li>In the parent <em>TextEditor</em> folder, create a <em>“text-editor.js”</em> file.</li>\n  <li>In order not to pollute the global object in the browser, add an immediately-invoked function expression (IIFE) and put a call to the page builder’s registration function inside, according to the code snippet.</li>\n  <li>As arguments, pass a codename of your inline editor, and an anonymous object with two function properties: <em>“init”</em> and <em>“destroy”</em>.</li>\n  <li>In the <em>init</em> function, get the editor’s HTML element, create the configuration for the <em>MediumEditor</em> instance, and create that instance with the element and the configuration as arguments.</li>\n  <li>At the same time, subscribe to the <em>“editableInput”</em> event, and run code that sends a <em>CustomEvent</em> object, with the depicted structure.</li>\n  <li>Finally, implement the destroy function.&nbsp;</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"text-editor\", {\n        init: function (options) {\n            var editor = options.editor;\n            var config = {\n                toolbar: {\n                    buttons: [\n                        \"bold\",\n                        \"italic\",\n                        \"underline\",\n                        \"orderedlist\",\n                        \"unorderedlist\",\n                        \"h1\",\n                        \"h2\",\n                        \"h3\",\n                        \"customHtml\"\n                    ]\n                },\n                imageDragging: false,\n                extensions: {\n                  imageDragging: {}\n                }\n            };\n\n            var mediumEditor = new MediumEditor(editor, config);\n\n            mediumEditor.subscribe(\"editableInput\", function () {\n                var event = new CustomEvent(\"updateProperty\", {\n                    detail: {\n                        name: options.propertyName,\n                        value: mediumEditor.getContent(),\n                        refreshMarkup: false\n                    }\n                });\n\n                editor.dispatchEvent(event);\n            });\n        },\n\n        destroy: function (options) {\n            var mediumEditor = MediumEditor.getEditorFromElement(options.editor);\n            if (mediumEditor) {\n                mediumEditor.destroy();\n            }\n        }\n    });\n})();","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Finally, add some CSS to support the text editor.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; TextEditor</em> folder, create a new <em>“TextEditor.css”</em> stylesheet file.</li>\n  <li>Add selectors and styles according to this code snippet.</li>\n</ol>","code":{"src":"div.medium-editor-anchor-preview, div.medium-editor-toolbar {\n    z-index: 100000;\n}\n\n.medium-editor-element:focus {\n    outline: 0;\n}\n\n.medium-editor-element:not([data-medium-focused]):hover {\n    background-color: rgba(155, 155, 155, 0.17);\n}\n\n.medium-editor-placeholder:after {\n    position: relative !important;\n}\n\n.medium-editor-placeholder *:only-child br:only-child {\n    display: none;\n}","lang":"css"},"strapline":""},{"title":"","body":"<p>Register your widget in the system.</p>\n<ol>\n  <li>Open <em>App_Start &gt; PageBuilderComponentRegister.cs</em>.</li>\n  <li>Add the assembly-level attribute according to the code snippet.</li>\n</ol>","code":{"src":"[assembly: RegisterWidget(\n    \"MedioClinic.Widget.Text\",\n    \"Text\",\n    propertiesType: typeof(MedioClinic.Models.Widgets.TextWidgetProperties),\n    customViewName: \"Widgets/_TextWidget\",\n    Description = \"Text area supporting basic formatting.\",\n    IconClass = \"icon-l-text\")]","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0214ff1d-16a8-4cd7-a207-55d681d2f1c8","_parentId":"dbb97ce1-9c0e-45f0-ac12-c4305ec81f6e","_type":"component","title":"Demo: Creating a text widget","displayTitle":"Demo: Creating a text widget"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the proper way of initializing an inline editor?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"my-inline-editor\", {\n        init: function (options) {\n\t\t\t// ...\n\t\t\tacmeTextEditor.subscribe(\"someEvent\", function () {\n\t\t\t\tvar event = new CustomEvent(\"editProperty\", {\n                    // ...\n                    }\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n    });\n})();","lang":"javascript"},"feedback":"<p>The initialization code is correctly placed into an IIFE (self-invoking function), which helps in keeping the code collision-free. However, one important details is wrong in this sample: the codename of the <em>CustomEvent </em>instance. The correct wording is <em>\"updateProperty\"</em>, not <em>\"editProperty\"</em>.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"<script>\n    window.kentico.pageBuilder.registerInlineEditor(\"my-inline-editor\", {\n        init: function (options) {\n\t\t\t// ...\n\t\t\tacmeTextEditor.subscribe(\"someEvent\", function () {\n\t\t\t\tvar event = new CustomEvent(\"updateProperty\", {\n                    // ...\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n    });\n</script>","lang":"javascript"},"feedback":"<p>The code is generally correct, however, the presence of the <em>&lt;script /&gt;</em> tag means that it was placed directly into the partial view of the inline editor. Such approach goes directly against JavaScript best practices, hence is not supported.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"my-inline-editor\", {\n        init: function (options) {\n\t\t\t// ...\n\t\t\tacmeTextEditor.subscribe(\"someEvent\", function () {\n\t\t\t\tvar event = new CustomEvent(\"updateProperty\", {\n                    // ...\n                });\n\n                editor.dispatchEvent(event);\n\t\t\t});\n\t\t},\n    });\n})();","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Awesome! You've proved to be aware of all the important details. The correct code sample was enclosed into an IIFE (self-invoking function) and it also uses the correct <em>\"updateProperty\"</em> codename of the <em>CustomEvent </em>instance that's sent to Kentico.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"ae6816cc-9254-47ea-8233-4b49556fdb39","_parentId":"6ed1c4b8-a6d2-438b-abb8-7aba17d5529a","_type":"component","title":"Initializing inline editors","displayTitle":"Initializing inline editors"},{"body":"<p>Congratulations! You’ve just implemented your first Kentico MVC widget.</p>\n<p>You can give it a quick test by:</p>\n<ul>\n  <li>Navigating to the <em>Pages</em> application</li>\n  <li>Creating a landing page section page</li>\n  <li>Creating a test landing page underneath</li>\n  <li>Adding your widget to the page</li>\n  <li>Writing some text</li>\n  <li>Saving it to the database&nbsp;</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"b7b1b74e-79f9-4587-85fe-795cb6f29f61","_parentId":"a66b8c77-bd9b-463f-b946-30eb51444264","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will implement a static image widget. It will allow content editors to upload an image to a designated media library. It will then display the image on the live site.</p>\n<p>Along the way, you'll learn how to:</p>\n<ul>\n  <li>Make use of a custom JavaScript library to work with images</li>\n  <li>Make an inline editor take arbitrary configuration data</li>\n  <li>Manage cross-cutting concerns in JavaScript properly</li>\n  <li>Support inline editors with backend code</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a3a09f72-bb68-426f-a8c7-2ffde3e33e87","_parentId":"66b39790-a589-44f7-93e1-052fc244de7c","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Now that you’ve had an A-to-Z hands-on experience with creating a widget and an inline editor, why not accept the challenge of creating an advanced widget?</p>\n<p>The static image widget will not only serve as a testbed of the knowledge you gained earlier. It will also act as a springboard that will allow you to take your knowledge to another level.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7ead64f6-1e11-457e-b74c-b378a96036e0","_parentId":"9447a510-3690-47e0-9620-841ba1a7c8e5","_type":"component","title":"Theory: Creating a static image widget","displayTitle":"Theory: Creating a static image widget"},{"body":"<p>Let’s elaborate a bit about the user story of that image widget. It should:</p>\n<ul>\n  <li>Allow the user to select an image file</li>\n  <li>Preferably in the drag-n-drop fashion</li>\n  <li>Upload it to a preconfigured Kentico media library</li>\n  <li>Render it on the live site</li>\n  <li>If needed, upload a different image (without deleting the current one)</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"454468c7-d9a3-4fe4-8414-5f17e1b51776","_parentId":"ff9855d6-915d-4bf9-99a1-f229c5c64898","_type":"component","title":"Design goals","displayTitle":"Design goals"},{"body":"<p>When building the image widget, you’ll get your hands on some more advanced JavaScript development. Fear not; we won’t force you to do any rocket science at all. If you are an avid JavaScript practitioner, you’ll rather find the added knowledge to be \"basics of safe JavaScript development\".</p>\n<p>The static image widget will utilize a 3rd party JavaScript component to facilitate the upload process of images. The files will then be stored in a media library of choice. The JavaScript component will not save the binary data of images into the widget properties. Instead, there will be a dedicated MVC controller listening in the background. Once the controller saves the file into the media library, it will return the GUID of the file. Only the GUID will then become part of the widget properties. The below diagram illustrates the data flow.</p>\n<figure data-asset-id=\"1934bdbc-0b2e-464d-a52b-52dcdcc7ebe6\" data-image-id=\"1934bdbc-0b2e-464d-a52b-52dcdcc7ebe6\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f89520f3-fb1b-449a-8434-06b4f79fd4d5/backend-controller-schema.png\" data-asset-id=\"1934bdbc-0b2e-464d-a52b-52dcdcc7ebe6\" data-image-id=\"1934bdbc-0b2e-464d-a52b-52dcdcc7ebe6\" alt=\"\"></figure>\n<p>We've covered the high-level architecture. Let's now elaborate on the design principles a bit more.</p>\n<h4>Frontend functionality</h4>\n<p>The most notable UI difference from the text widget is obviously the usage of a file uploader, instead of the text editor. Therefore, you need different JavaScript functionality to support that. A great deal of such functionality can be found in the <a href=\"https://www.dropzonejs.com/\">Dropzone.js</a> component available on the Internet. It works in the way that for a given HTML element, you just create its corresponding JavaScript object, together with some configuration.</p>\n<pre><code class=\"language-javascript\">var dropzoneElement = document.getElementById(\"myId\");\n\nvar dropzone = new Dropzone(dropzoneElement, {\n\tacceptedFiles: \".jpg, .gif\",\n\turl: \"https://my-url/upload\"\n});</code></pre>\n<p>It supports both drag-n-drop and <a href=\"https://www.dropzonejs.com/#config-clickable\">picking files</a> via a native modal dialog.</p>\n<pre><code class=\"language-javascript\">var dropzoneElement = document.getElementById(\"myId\");\nvar clickableAnchor = dropzoneElement.querySelector(\"a.dz-clickable\");\n\nvar dropzone = new Dropzone(dropzoneElement, {\n\tacceptedFiles: \".jpg, .gif\",\n\turl: \"https://my-url/upload\",\n\tclickable: clickableAnchor\n});</code></pre>\n<p>It also emits events of both <a href=\"https://www.dropzonejs.com/#event-success\">successful</a> and <a href=\"https://www.dropzonejs.com/#event-error\">erroneous</a> uploads.</p>\n<pre><code class=\"language-javascript\">dropzone.on(\"success\", function (event) {\n\tvar responseContent = JSON.parse(event.xhr.response);\n});</code></pre>\n<h4>Backend functionality</h4>\n<p>As far as backend code is concerned, you'll encounter two significant differences.</p>\n<p>First and foremost, this widget will—unlike its predecessor—need to have its own controller and view model. That's because the structure of the data going out of the controller will differ from what it gets from the properties (from the browser). The view model will of course contain the image GUID, however, it will also signal whether the image is present via a boolean flag. Finally, it will tell the views (and the inline editor) the affinity of the media library to a certain Kentico site.</p>\n<pre><code class=\"language-csharp\">public ActionResult Index()\n{\n    var properties = GetProperties();\n\n    // ...\n\n    return PartialView(\"Widgets/_ImageWidget\", new ImageWidgetViewModel\n    {\n        HasImage = true,\n        ImageUrl = imageUrlInMediaLibrary,\n\n        MediaLibraryViewModel = new Models.MediaLibraryViewModel\n        {\n            LibraryName = MediaLibraryRepository.MediaLibraryName,\n            LibrarySiteName = MediaLibraryRepository.MediaLibrarySiteName,\n            AllowedImageExtensions = AppConfig.AllowedImageExtensions\n        }\n    });\n}</code></pre>\n<p>The other significant difference lies in the way the input data is transferred to Kentico. While the text widget can cope with just the properties class to carry the text from the browser to the database, the image widget will have to have a dedicated controller listening in the background for the image uploads.</p>\n<p>The Dropzone component will have to upload the image files to the controller, and trade it for an identifier of the uploaded file in Kentico. As the files will be stored in media libraries, the controller will simply return the GUID identifier of the file. This identifier will then become the only information passed through the properties class to the widget’s state in the database.</p>\n<pre><code class=\"language-csharp\">// POST: ImageUploader/Upload/[mediaLibraryName, mediaLibrarySiteName]\n[HttpPost]\npublic ActionResult Upload(string mediaLibraryName, string mediaLibrarySiteName)\n{\n    // ...\n    var imageGuid = FileManagementHelper.AddMediaLibraryFile(file, TempPath, mediaLibraryName, mediaLibrarySiteName);\n    // ...\n    return Json(new { guid = imageGuid });\n}</code></pre>\n<p>When implementing the inline editor, you’ll face one important issue: how to protect your image uploader controller against malicious requests. It might seem as a hard problem, but it is not. As the inline editor will only run in the edit mode in the admin UI, you get around that easily by using the <a href=\"https://docs.kentico.com/k12sp/developing-websites/retrieving-content-in-mvc-applications/adding-preview-mode-support#Addingpreviewmodesupport-Loadingthelatestversionsofpages\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico.Content.Web.Mvc.UrlHelperPreviewExtensions.AuthenticateUrl</a> helper method. This method can decorate your upload URL with additional security information so that the preview tab in the <em>Pages</em> application stays the one and only valid source of the requests.</p>\n<pre><code class=\"language-csharp\">string url = Url.Kentico().AuthenticateUrl(Url.Action(\"Upload\", \"ImageUploader\", new\n\t{\n\t\tpageId = Context.Kentico().PageBuilder().PageIdentifier\n\t}), false);</code></pre>\n<p>Apart from the authentication of the upload URL itself via server-side code (typically in the partial view of your inline editor), there need to be means of using the URL in the inline editor’s JavaScript code. To transfer such configuration data, you can put it into the editor’s markup as a <em>data-*</em> HTML attribute, and retrieve its value later in the JavaScript file.</p>\n<pre><code class=\"language-csharp\">@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName, new\n    {\n        data_upload_url = url\n    }))\n{\n\t&lt;div class=\"uploader\" /&gt;\n}</code></pre>\n<p>All right. If you’re up for the challenge, feel free to develop the widget yourself. If not, don’t worry. You can of course code along in the following demo chapters.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0ba62428-d4cb-43ed-a6c9-40056aa820b8","_parentId":"6af8bb96-74c5-4214-a817-ceddb08df04f","_type":"component","title":"Design guidelines","displayTitle":"Design guidelines"},{"body":"<p>Unlike in the text widget, this widget shall consist of its controller, properties class, a widget partial view, an inline editor partial view (together with their accompanying view models), and a JavaScript file responsible for client-side functionality. On top of that, you’ll need your image uploader controller that accepts binary data of images.</p>\n<p>You’ll be surprised that the code files won’t drastically differ from those of the text widget. There’s nothing to worry about.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let's start with the properties class. This class truly reflects the business requirements by having two properties:</p>\n<ul>\n  <li>The image GUID identifier</li>\n  <li>The media library name, as configured by content editors via a configuration dialog</li>\n</ul>\n<p>Follow the steps below.</p>\n<ol>\n  <li>In <em>Models &gt; Widgets</em>, create a new <em>\"ImageWidget\" </em>subfolder.</li>\n  <li>In that subfolder, create an <em>\"ImageWidgetProperties\" </em>class file.</li>\n  <li>Allow the system to recognize the class by implementing <em>IWidgetProperties</em>.</li>\n  <li>Add the two properties mentioned above, one of them being decorated with an <em>EditingComponent </em>attribute.</li>\n</ol>","code":{"src":"public class ImageWidgetProperties : IWidgetProperties\n{\n    [EditingComponent(TextInputComponent.IDENTIFIER, Label = \"{$Widget.MediaLibraryName$}\", Order = 0)]\n    public string MediaLibraryName { get; set; }\n\n    public Guid ImageGuid { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the second step you'll implement code that retrieves media library images. You'll just enrich the existing repository that you already know from the Essentials course module.</p>\n<ol>\n  <li>In <em>Business &gt; Repository &gt; MediaLibrary</em>, open the <em>IMediaLibraryRepository</em> iterface file.</li>\n  <li>Add the signature of the <em>\"GetMediaLibraryDto\"</em> method.</li>\n</ol>\n<p>Now, implement that method in the class.</p>\n<ol>\n  <li>Open the sibling <em>MediaLibraryRepository </em>class file.</li>\n  <li>In the implementing method, use the existing <em>Selector </em>delegate.</li>\n</ol>","code":{"src":"// IMediaLibraryRepository\n\nMediaLibraryFileDto GetMediaLibraryDto(Guid fileGuid);\n\n\n// MediaLibraryRepository\n\npublic MediaLibraryFileDto GetMediaLibraryDto(Guid fileGuid)\n{\n    var mediaFileInfo = MediaFileInfoProvider.GetMediaFileInfo(fileGuid, MediaLibrarySiteName);\n\n    return mediaFileInfo != null ? Selector(mediaFileInfo) : null;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Before we move onto the widget controller, you'll want to implement a view model that captures the controller's output.</p>\n<p>Since both the widget view model and the future inline editor view model will have to carry configuration related to the media library, you'll wrap these two pieces of information into a dedicated class.</p>\n<ol>\n  <li>Back in the <em>MedioClinic </em>project, in the <em>Models </em>folder, create a new <em>\"MediaLibraryViewModel\" </em>class file.</li>\n  <li>Add the library name, site affinity and allowed image extensions as properties.</li>\n</ol>","code":{"src":"public class MediaLibraryViewModel\n{\n    public string LibraryName { get; set; }\n\n    public string LibrarySiteName { get; set; }\n\n    public HashSet<string> AllowedImageExtensions { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now include your media library view model in a widget view model.</p>\n<ol>\n  <li>In <em>Models &gt; Widgets &gt; ImageWidget</em>, create a new <em>\"ImageWidgetViewModel\" </em>class file.</li>\n  <li>Add the boolean flag that signals the existence of an image. It serves as a convenience, to avoid <em>IsNullOrEmpty </em>checks.</li>\n  <li>Add the URL and the model created in the previous step.</li>\n</ol>","code":{"src":"public class ImageWidgetViewModel\n{\n    public bool HasImage { get; set; }\n\n    public string ImageUrl { get; set; }\n\n    public MediaLibraryViewModel MediaLibraryViewModel { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>For those waiting for the widget controller, it now has its prime time. As said before, you'll want to have it in place since the view model differs from the properties class.</p>\n<ol>\n  <li>In<em> Controllers</em>, create a new <em>\"Widgets\" </em>folder.</li>\n  <li>In that subfolder, create a new <em>\"ImageWidgetController\" </em>class file.</li>\n  <li>Inherit from <em>WidgetController&lt;TProperties&gt;</em>, namely <em>ImageWidgetProperties</em>.</li>\n  <li>Register the widget in a similar way as you did with the text widget. However, this time around, you can put your <em>RegisterWidget </em>attribute into the controller itself.</li>\n  <li>Capture the ubiquitous business dependencies, together with the media library repository, in properties.</li>\n</ol>\n<p>Leave the file open for edits in the next step.</p>","code":{"src":"[assembly: RegisterWidget(\n    \"MedioClinic.Widget.Image\",\n    typeof(ImageWidgetController),\n    \"Image\",\n    Description = \"Image widget\",\n    IconClass = \"icon-picture\")]\n\nnamespace MedioClinic.Controllers.Widgets\n{\n    public class ImageWidgetController : WidgetController<ImageWidgetProperties>\n    {\n        public IMediaLibraryRepository MediaLibraryRepository { get; }\n\n        public IBusinessDependencies Dependencies { get; }\n\n        public ImageWidgetController(IMediaLibraryRepository mediaLibraryRepository, IBusinessDependencies dependencies)\n        {\n            MediaLibraryRepository = mediaLibraryRepository ?? throw new ArgumentNullException(nameof(mediaLibraryRepository));\n            Dependencies = dependencies ?? throw new ArgumentNullException(nameof(dependencies));\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Having the grassroots of the controller already planted, you can now add its main part—the action method.</p>\n<ol>\n  <li>First off, get the properties.</li>\n  <li>Declare the <em>\"hasImage\"</em> and <em>\"imageUrl\"</em> locals for future use in the view model.</li>\n  <li>Configure your media library repository with library name and site name.</li>\n  <li>Get the image URL from the DTO object.</li>\n  <li>Eventually, return the view model populated with both the configuration data and the URL.</li>\n</ol>","code":{"src":"public ActionResult Index()\n{\n    var properties = GetProperties();\n    bool hasImage = false;\n    string imageUrl = null;\n    MediaLibraryRepository.MediaLibraryName = properties.MediaLibraryName;\n    MediaLibraryRepository.MediaLibrarySiteName = Dependencies.SiteContextService.SiteName;\n\n    if (properties.ImageGuid != Guid.Empty && !string.IsNullOrEmpty(properties.MediaLibraryName))\n    {\n        hasImage = true;\n        imageUrl = MediaLibraryRepository.GetMediaLibraryDto(properties.ImageGuid)?.DirectUrl;\n    }\n\n    return PartialView(\"Widgets/_ImageWidget\", new ImageWidgetViewModel\n    {\n        HasImage = hasImage,\n        ImageUrl = imageUrl,\n\n        MediaLibraryViewModel = new Models.MediaLibraryViewModel\n        {\n            LibraryName = MediaLibraryRepository.MediaLibraryName,\n            LibrarySiteName = MediaLibraryRepository.MediaLibrarySiteName,\n            AllowedImageExtensions = AppConfig.AllowedImageExtensions\n        }\n    });\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, the widget view.</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; Widgets</em>, create a new <em>\"_ImageWidget\" </em>Razor file.</li>\n  <li>In the code, first check the <em>HasImage </em>model property.</li>\n  <li>Based on the value, either render the image itself or, an error message.</li>\n  <li>Similarly to the text widget, add a condition to render the future inline editor. However, unlike with the text widget, the inline editor (the Dropzone component) will be displayed atop the existing markup.</li>\n  <li>Reassign the properties into a future <em>ImageUploaderEditorViewModel</em>, as seen in the code snippet. You'll find the editor-related code in the next walkthrough section.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@using MedioClinic.Models.Widgets\n@model MedioClinic.Models.Widgets.ImageWidgetViewModel\n\n@{\n    if (Model.HasImage)\n    {\n        if (!string.IsNullOrEmpty(Model.ImageUrl))\n        {\n            var imageUrl = Url.KenticoImageUrl(Model.ImageUrl);\n            <img src=\"@Html.Raw(imageUrl)\" class=\"responsive-img\" />\n        }\n        else\n        {\n            <div class=\"dz-message\">The image no longer exists.</div>\n        }\n    }\n\n    if (Context.Kentico().PageBuilder().EditMode)\n    {\n        Html.RenderPartial(\"InlineEditors/_ImageUploaderEditor\", new ImageUploaderEditorViewModel\n        {\n            PropertyName = nameof(ImageWidgetProperties.ImageGuid),\n            HasImage = !string.IsNullOrEmpty(Model.ImageUrl),\n            MediaLibraryViewModel = Model.MediaLibraryViewModel\n        });\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e781fd45-bb85-443b-be36-432f4c836472","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Demo: Creating a static image widget","displayTitle":"Demo: Creating a static image widget"},{"body":"<div class=\"infobox idea\"><p>As you may have noticed, this widget uses a text box to identify the media library with images used in the widget. The editors are supposed to insert a code name of the media library. We chose this approach since it does not require you to implement a media library selection form component. You will implement such form component at a later phase of this course. Then, you may want to refactor the widget and the related code base to use the media library selection form component.</p>\n<p><br></p>\n<figure data-asset-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\" data-image-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b23f9b0a-39e7-4781-b15a-fef8827259ad/media-library-identification.png\" data-asset-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\" data-image-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\" alt=\"\"></figure></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"70256825-5e96-41db-ac2c-d7ac095325f3","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Media library identification","displayTitle":"Media library identification"},{"body":"<p>What remains to do in the frontend is the inline editor's view model, view, JavaScript logic, and CSS styling.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Start with the view model.</p>\n<ol>\n  <li>In <em>Models &gt; InlineEditors</em>, create a new <em>\"ImageUploaderEditor\" </em>folder.</li>\n  <li>In that subfolder, create an <em>\"ImageUploaderEditorViewModel\"</em> class file.</li>\n  <li>Derive your class off of <em>InlineEditorViewModel</em>. This way it will obtain the <em>PropertyName </em>property.</li>\n  <li>Add properties that you already know from the widget's view model.</li>\n</ol>","code":{"src":"public class ImageUploaderEditorViewModel : InlineEditorViewModel\n{\n    public bool HasImage { get; set; }\n\n    public MediaLibraryViewModel MediaLibraryViewModel { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Here comes an interesting part—the view. Above all, it shall invoke the Kentico <em>BeginInlineEditor </em>function. However, it needs to furnish the editor with configuration data. This data will be mostly passed onto the backend controller, so that it knows where to save the images.</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; InlineEditors</em>, create a new <em>\"_ImageUploaderEditor\"</em> Razor file.</li>\n  <li>Before you spin up the inline editor with <em>BeginInlineEditor</em>, you need to prepare an authenticated URL. Also, your markup will have to distinguish between an empty image versus the populated one.</li>\n  <li>Thus, add a code block with two methods: <em>GetContainerClass </em>and <em>GetActionUrl</em>.</li>\n  <li>In the <em>GetActionUrl </em>method, concatenate the media library name and site name with <em>Url.Action()</em>. Then, secure it with <em>AuthenticateUrl()</em>.</li>\n  <li>Finally, add <em>&lt;div /&gt; </em>elements with CSS classes required by Dropzone.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@model ImageUploaderEditorViewModel\n\n@{\n    string GetContainerClass() =>\n        Model.HasImage == true ? \"kn-image-uploader-container\" : \"kn-image-uploader-empty-container\";\n\n    // Gets the URL to the ImageUploaderController's action.\n    HtmlString GetActionUrl()\n    {\n        var url = Url.Kentico().AuthenticateUrl(Url.Action(\"Upload\", \"ImageUploader\", new\n        {\n            mediaLibraryName = Model.MediaLibraryViewModel.LibraryName,\n            mediaLibrarySiteName = Model.MediaLibraryViewModel.LibrarySiteName\n        }), false);\n\n        return url;\n    }\n}\n\n@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"kn-image-uploader-editor\",\n        data_upload_url = GetActionUrl().ToString(),\n        data_allowed_image_extensions = string.Join(\",\", Model.MediaLibraryViewModel.AllowedImageExtensions)\n    }))\n{\n    <div class=\"@GetContainerClass()\">\n        <div class=\"dz-uploader\">\n            <div class=\"dz-message top\">\n                Drop image here or <a class=\"dz-clickable\">click</a> to browse\n            </div>\n        </div>\n    </div>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>JavaScript time! All right, we know it might not be the most interesting part a programmer's job. However, the Kentico product teams went to great lengths to make that part as friction-less as possible. Although you will write a bit more code than with the text editor, you'll never get lost in it.</p>\n<ol>\n  <li>In <em>Content &gt; InlineEditors</em>, create a new <em>\"ImageUploaderEditor\" </em>folder.</li>\n  <li>In that subfolder, create an \"image-uploader-editor\" JavaScript file.</li>\n  <li>Add the mandatory self-invoking function (IIFE) and supply an anonymous object with the <em>init </em>and <em>destroy </em>property functions.</li>\n  <li>The high-level goal of the <em>init </em>function still remains the same: To get a reference of either a DOM object (the HTML element), or some lightweight representation of it, watch for one of its events, and hook a <em>CustomEvent </em>called <em>\"updateProperty\" </em>onto it.</li>\n  <li>In pursuit of that goal, you first need to capture the references of the editor DOM object (<em>\"editor\"</em>), the Dropzone DOM object (<em>\"zone\"</em>), and the clickable part of it (<em>\"clickable\"</em>).</li>\n  <li>Then, you ought to create a dedicated Dropzone object out of the DOM object you just captured in a variable.</li>\n  <li>To configure the Dropzone object with the upload URL and to the set of allowed file extensions, simply call <em>getAttribute()</em>.</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"image-uploader-editor\", {\n        init: function (options) {\n            var editor = options.editor;\n            var zone = editor.querySelector(\".dz-uploader\");\n            var clickable = editor.querySelector(\".dz-clickable\");\n\n            var dropzone = new Dropzone(zone, {\n                acceptedFiles: editor.getAttribute(\"data-allowed-image-extensions\"),\n                    maxFiles: 1,\n                    url: editor.getAttribute(\"data-upload-url\"),\n                    createImageThumbnails: false,\n                    clickable: clickable,\n                    dictInvalidFileType: \"Unsupported file type.\"\n            });\n\n        },\n\n        destroy: function (options) {\n\n        }\n    });\n})();","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You now have a Dropzone object in hand. It's time to hook the events.</p>\n<ol>\n  <li>Use the Dropzone's <em>\"on\" </em>function to do that.</li>\n  <li>First, attach to the <em>\"success\" </em>event. Supply it with your callback function that accepts <em>\"event\"</em>.</li>\n  <li>The <em>\"success\"</em> event represents a successful submission of the image binary to the upload URL.</li>\n  <li>One of the properties of the <em>\"event\" </em>object is the <em>XMLHttpRequest </em>object, which provides access to the response of your future backend controller.</li>\n  <li>You may now have recalled that the controller is supposed to return just the GUID identifier of the image in the media library.</li>\n  <li>Suppose the GUID will appear just as a <em>\"guid\"</em> property of the returned JSON object.</li>\n  <li>The <em>\"guid\" </em>property will therefore have to be passed into the body (the detail) of the conventional <em>updateProperty</em> event that you dispatch.</li>\n</ol>\n<p>As for the errorneous responses from the controller, you should take some measures to format the Dropzone instance properly.</p>\n<ol>\n  <li>When attaching to the <em>\"error\"</em> event, first hide the Dropzone's built-in preview layer.</li>\n  <li>Spin up a custom <em>processErrors </em>function (implemented in the next step).</li>\n</ol>","code":{"src":"dropzone.on(\"success\",\n    function (event) {\n        var content = JSON.parse(event.xhr.response);\n\n        var customEvent = new CustomEvent(\"updateProperty\",\n            {\n                detail: {\n                    value: content.guid,\n                    name: options.propertyName\n                }\n            });\n\n        editor.dispatchEvent(customEvent);\n    });\n\ndropzone.on(\"error\",\n    function (event) {\n        document.querySelector(\".dz-preview\").style.display = \"none\";\n        processErrors(event.xhr.status, event.xhr.statusText);\n    });","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Now, create a new <em>\"processErrors\"</em> function as a variable that sits at the same level as the <em>editor, zone, clickable </em>and <em>dropzone </em>ones.</p>\n<p>In the body of the <em>processErrors </em>function, you basically prepare user-friendly messages.</p>\n<ol>\n  <li>First, decide by the status code.</li>\n  <li>Prepare the localized wording for a certain status code.</li>\n  <li>Append the specific status text of the error.</li>\n  <li>Invoke a common function that you'll implement in the next step.</li>\n</ol>\n<p>(Leave the file open. You'll get back to it soon.)</p>","code":{"src":"var processErrors = function (statusCode, statusText) {\n    var errorFlag = \"error\";\n    var errorMessage = \"\";\n\n    if (statusCode >= 500) {\n        errorMessage = \"The upload of the image failed. Please contact the system administrator.\";\n    } else if (statusCode === 422) {\n        errorMessage = \"The uploaded image could not be processed. Please contact the system administrator.\";\n    } else {\n        errorMessage = \"An unknown error happened. Please contact the system administrator.\";\n    }\n\n    errorMessage += options.localizationService.getString(\"ImageUploader.Drozone.Details\") + statusText;\n    window.medioClinic.showMessage(errorMessage, errorFlag, true);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, your job is to manage a cross-cutting concern of displaying error messages originating from JavaScript sources. It is certainly much better to implement such functionality on a global level, rather than per-editor.</p>\n<p>However, you don't want to make your functionality cause more harm than good. As you may know, in EcmaScript 5, the <em>var </em>keyword produces an effect called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">variable hoisting</a>. On these circumstances, your code shall be broadly accessible on one side, but it should not pollute the global lexical scope on the other. This can be mitigated by enclosing your code into a <em>var </em>scope—a function.</p>\n<p>You need an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">immediately-invoked function expression (IIFE)</a>.</p>\n<ol>\n  <li>In <em>Scripts &gt; Master</em>, open <em>main.js</em></li>\n  <li>Create an IIFE that accepts a parameter named <em>\"medioClinic\"</em>. This parameter denotes the global scope for all your custom code.</li>\n  <li>In the receiving part of the IIFE, add an expression that tries to retrieve the existing <em>window.medioClinic </em>object and, it creates that object in case it doesn't exist yet.</li>\n  <li>This way, all your code will be accessible under <em>window.medioClinic</em>.</li>\n  <li>At the same time, not a single variable will pollute the shape of the global object (the <em>window </em>object).</li>\n</ol>","code":{"src":"(function (medioClinic) {\n    /**\n     * Shows a system message to the user via the \".kn-system-messages\" element.\n     * @param {string} message The system message.\n     * @param {string} type Either \"info\", \"warning\", or \"error\".\n     * @param {bool} logToConsole Instructs to also log to console.\n     */\n    medioClinic.showMessage = function (message, type, logToConsole) {\n        var messageElement = document.querySelector(\".kn-system-messages\");\n\n        if (message && type) {\n            if (type === \"info\") {\n                messageElement.appendChild(medioClinic.buildMessageMarkup(message, \"light-blue lighten-5\"));\n\n                if (logToConsole) {\n                    console.info(message);\n                }\n            } else if (type === \"warning\") {\n                messageElement.appendChild(medioClinic.buildMessageMarkup(message, \"yellow lighten-3\"));\n\n                if (logToConsole) {\n                    console.warn(message);\n                }\n            } else if (type === \"error\") {\n                messageElement.appendChild(medioClinic.buildMessageMarkup(message, \"red lighten-3\"));\n\n                if (logToConsole) {\n                    console.error(message);\n                }\n            }\n        }\n    };\n\n    /**\n     * Builds an HTML element of a system message.\n     * @param {string} message The system message.\n     * @param {string} cssClasses The CSS class selectors.\n     * @returns {HTMLElement} The <p> element.\n     */\n    medioClinic.buildMessageMarkup = function (message, cssClasses) {\n        var paragraph = document.createElement(\"p\");\n        paragraph.classList = cssClasses;\n        paragraph.innerText = message;\n\n        return paragraph;\n    };\n}(window.medioClinic = window.medioClinic || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Since you now have your cross-cutting function implemented, you can now finish your inline editor's code.</p>\n<ol>\n  <li>Back in <em>Content &gt; InlineEditors &gt; ImageUploaderEditor &gt; image-uploader-editor.js</em>, locate the mandatory <em>\"destroy\" </em>property.</li>\n  <li>Enrich the stub with code that first gets reference to the Dropzone DOM object.</li>\n  <li>Get a custom <em>\"dropzone\" </em>property of that object.</li>\n  <li>Destroy that object eventually.</li>\n</ol>\n<p>Now that you have all your client code ready, you should download and save the <a href=\"https://gitlab.com/meno/dropzone/builds/artifacts/master/file/dist/dropzone.js?job=release\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">dropzone.js</a> file into the same folder (<em>Content &gt; InlineEditors &gt; ImageUploaderEditor</em>). It will be picked up by&nbsp;</p>","code":{"src":"destroy: function (options) {\n    var dropzone = options.editor.querySelector(\".dz-uploader\").dropzone;\n\n    if (dropzone) {\n        dropzone.destroy();\n    }\n}","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Before we get to creating the backend support for your widget, you might want to finalize the frontend part with CSS styling.</p>\n<ol>\n  <li>In the <em>Content &gt; InlineEditors &gt; ImageUploaderEditor</em> folder, create a new <em>“ImageUploaderEditor.css”</em> file.</li>\n  <li>Add styling according to this snippet.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":".kn-image-uploader-editor .kn-image-uploader-empty-container, .kn-image-uploader-editor .kn-image-uploader-container {\n    width: 100%;\n    height: 100%;\n    min-height: 20rem;\n    min-width: 20rem;\n    text-align: center;\n}\n\n.kn-image-uploader-editor .kn-image-uploader-container {\n    position: absolute;\n    top: 0px;\n}\n\n.dz-message {\n    font-size: 14px;\n    margin: 2rem auto 0 auto;\n    padding: 10px;\n    text-align: center;\n    width: 50%;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6e8ceaac-494b-449b-88a7-86301db3e21f","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Implementing the image inline editor","displayTitle":"Implementing the image inline editor"},{"body":"<p>As you already know, the only information that is sent through the widget properties class is the GUID of an image. We’ve designed the inline editor in a way that it obtains that GUID from a future backend controller. Users won’t approach that controller directly (by typing its URL in the address bar), it will only listen to file uploads.</p>\n<p>The best practices in ASP.NET MVC tell us to keep our controllers at their core functionality. This means that it should only be responsible for:</p>\n<ul>\n  <li>Taking the input from the route data</li>\n  <li>Getting the model from the storage</li>\n  <li>Building a view model</li>\n  <li>Selecting a proper view</li>\n</ul>\n<p>All ancillary methods should be kept away from controllers. Therefore, as part of this demo, you’ll also create three additional helper classes:</p>\n<ul>\n  <li><em>FileManagementHelper</em></li>\n  <li><em>ErrorHelperService</em></li>\n  <li><em>ErrorHelper</em></li>\n</ul>\n<p>Apart from that, you'll add code to the existing media library service.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The controller will take a file found in the <em>Request</em> property of its base class, save it in a temporary file system location, then save it as a media library file, and return its GUID in a JSON response.</p>\n<ol>\n  <li>In the <em>Controllers</em> folder, create a new <em>“InlineEditors” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“ImageUploaderController.cs”</em> class file.</li>\n  <li>As usual, base the class on <em>System.Mvc.Web.Controller</em>.</li>\n  <li>Set a path to a temporary upload directory throu a property.</li>\n  <li>Add the property members that capture the FileManager and ErrorHelper objects. Classify them as interface implementations so that the objects can be polled from <em>Autofac</em>.</li>\n  <li>Add one <em>“Upload”</em> action method, decorated with <em>[HttpPost]</em>.</li>\n  <li>In the method’s body, check for the edit mode via the future <em>ErrorHelper</em> class first.</li>\n  <li>Then, try to take the first file in the request collection, add it to the media library through a future <em>FileManager</em> class, and return either the GUID, or an error status code (via <em>ErrorHelper</em>).</li>\n</ol>","code":{"src":"public class ImageUploaderController : Controller\n{\n    protected string TempPath => $\"{Server.MapPath(@\"~\\\")}App_Data\\\\Temp\\\\ImageUploaderEditor\";\n\n    protected IFileManager FileManager { get; }\n\n    protected IErrorHelper ErrorHelper { get; }\n\n    public ImageUploaderController(IFileManager fileManagementHelper, IErrorHelper errorHandler)\n    {\n        FileManager = fileManagementHelper ?? throw new ArgumentNullException(nameof(fileManagementHelper));\n        ErrorHelper = errorHandler ?? throw new ArgumentNullException(nameof(errorHandler));\n    }\n\n    // POST: ImageUploader/Upload/[mediaLibraryName, mediaLibrarySiteName]\n    [HttpPost]\n    public ActionResult Upload(string mediaLibraryName, string mediaLibrarySiteName)\n    {\n        ErrorHelper.CheckEditMode(HttpContext, nameof(ImageUploaderController.Upload));\n        var imageGuid = Guid.Empty;\n\n        if (Request.Files[0] is HttpPostedFileWrapper file)\n        {\n            try\n            {\n                imageGuid = FileManager.AddMediaLibraryFile(file, TempPath, libraryName: mediaLibraryName, librarySiteName: mediaLibrarySiteName, checkPermisions: true);\n            }\n            catch (Exception ex)\n            {\n                var result = ErrorHelper.HandleException(\n                    nameof(ImageUploaderController), \n                    nameof(Upload), \n                    ex, \n                    ErrorHelper.UnprocessableStatusCode);\n\n                return result;\n            }\n\n            return Json(new { guid = imageGuid }); \n        }\n\n        return new HttpStatusCodeResult(ErrorHelper.UnprocessableStatusCode);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, create the underlying interfaces of the two helpers.</p>\n<ol>\n  <li>In the <em>Utils</em> folder, create a new <em>“IErrorHelper.cs”</em> interface file.</li>\n  <li>Add the member definitions according to the top part code snippet.</li>\n  <li>In the same folder, create a new <em>“IFileManager”</em> interface file.</li>\n  <li>Add the member definitions according to the bottom part of the snippet.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"// ~\\Utils\\IErrorHelper.cs\n\npublic interface IErrorHelper\n{\n    int UnprocessableStatusCode { get; }\n\n    void CheckEditMode(HttpContextBase httpContext, string source);\n    \n    HttpStatusCodeResult HandleException(string source, string eventCode, Exception exception, int statusCode = 500);\n\n    void LogException(string source, string eventCode, Exception exception);\n}\n\n// ~\\Utils\\IFileManager.cs\n\npublic interface IFileManager\n{\n    string EnsureUploadDirectory(string directoryPath);\n\n    string GetFilePath(string directoryPath, string fileName);\n\n    Guid AddMediaLibraryFile(HttpPostedFileWrapper file, string uploadDirectory, string libraryName, string librarySiteName, string libraryFolderPath = null);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, create an interface of an error helper service. If you're wondering why a helper and a service is created, well, this is just to satisfy the pattern of splitting code into Kentico-related (in the Business project) and web-related (the MedioClinic project).</p>\n<ol>\n  <li>In <em>Busines &gt; Services</em>, create a new <em>“Errors”</em> subfolder.</li>\n  <li>In that subfolder, create an “<em>IErrorHelperService</em>” interface file.</li>\n  <li>Add the member definitions according to the code snippet.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"    /// <summary>\n    /// A common error helper for controller actions\n    /// </summary>\n    public interface IErrorHelperService : IService\n    {\n        /// <summary>\n        /// Logs an exception to the Kentico event log.\n        /// </summary>\n        /// <param name=\"source\">The source of the exception to be logged in the Kentico event log.</param>\n        /// <param name=\"exception\">The exception to log.</param>\n        void LogException(string source, string eventCode, Exception exception);\n    }","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the error helper service.</p>\n<ol>\n  <li>In <em>Busines &gt; Services &gt; Errors</em>, create a new <em>“ErrorHelperService”</em> class file.</li>\n  <li>Wrap the <em>EventLogProvider</em> call in an expression-bodied <em>LogException</em> method.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"public class ErrorHelperService : BaseService, IErrorHelperService\n{\n    public void LogException(string source, string eventCode, Exception exception) =>\n        EventLogProvider.LogException(source, eventCode, exception, SiteContext.CurrentSiteID);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the <em>ErrorHelper</em> class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Utils</em>, create a new <em>\"ErrorHelper\"</em> class file.</li>\n  <li>Add the <em>\"CheckEditMode\", \"HandleException\"</em>, and <em>\"LogException\"</em> methods.</li>\n  <li>Note that the check for the edit mode is the same as the one you’ve used previously in the views.</li>\n  <li>In the <em>LogException</em> method, make use of the future <em>ErrorHelperService</em> class to let the admins know about possible exceptions.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"public class ErrorHelper : IErrorHelper\n{\n    public int UnprocessableStatusCode => 422;\n\n    protected IErrorHelperService ErrorHelperService { get; }\n\n    public ErrorHelper(IErrorHelperService errorHelperService)\n    {\n        ErrorHelperService = errorHelperService ?? throw new ArgumentNullException(nameof(errorHelperService));\n    }\n\n    public void CheckEditMode(HttpContextBase httpContext, string source)\n    {\n        if (!httpContext.Kentico().PageBuilder().EditMode)\n        {\n            throw new HttpException(403, \"The operation is only available when the page builder is in the edit mode.\");\n        }\n    }\n\n    public HttpStatusCodeResult HandleException(string source, string eventCode, Exception exception, int statusCode = 500)\n    {\n        ErrorHelperService.LogException(source, eventCode, exception);\n        var flattenedMessage = Regex.Replace(exception.Message, @\"\\t|\\n|\\r\", \" \");\n\n        return new HttpStatusCodeResult(statusCode, flattenedMessage);\n    }\n\n    public void LogException(string source, string eventCode, Exception exception) =>\n        ErrorHelperService.LogException(source, eventCode, exception);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let's start implementing the <em>FileManager</em> class.</p>\n<ol>\n  <li>In the <em>Utils</em> folder, create a new <em>\"FileManager\"</em> class file.</li>\n  <li>Make the class implement the <em>IFileManager</em> interface, and let Visual Studio add the members through <em>Ctrl+.</em></li>\n  <li>Add the error helper and media library repository as properties.</li>\n  <li>Add the static <em>GetSuffixedFileName </em>helper that you'll use soon.</li>\n  <li>In the <em>EnsureDirectory </em>method, simply create the directory if it doesn't exist yet.</li>\n  <li>In the <em>GetFilePath </em>method, just combine the directory with the filename.</li>\n</ol>\n<p>Leave the file open for further edits.</p>","code":{"src":"public class FileManager : IFileManager\n{\n    protected IMediaLibraryRepository MediaLibraryRepository { get; }\n\n    public FileManager(IMediaLibraryRepository mediaLibraryRepository)\n    {\n        MediaLibraryRepository = mediaLibraryRepository ?? throw new ArgumentNullException(nameof(mediaLibraryRepository));\n    }\n\n    protected static string GetSuffixedFileName(string fileName, string fileExtension, int currentSuffix) =>\n        currentSuffix == 0 ? fileName : $\"{fileName} ({currentSuffix}).{fileExtension}\";\n\n    public void EnsureDirectory(string directoryPath)\n    {\n        if (string.IsNullOrEmpty(directoryPath))\n        {\n            throw new ArgumentException(\"Directory path was not specified.\", nameof(directoryPath));\n        }\n\n        if (!Directory.Exists(directoryPath))\n        {\n            Directory.CreateDirectory(directoryPath);\n        }\n    }\n\n    public string GetFilePath(string directoryPath, string fileName)\n    {\n        if (string.IsNullOrEmpty(directoryPath))\n        {\n            throw new ArgumentException(\"Directory path was not specified.\", nameof(directoryPath));\n        }\n\n        if (string.IsNullOrEmpty(fileName))\n        {\n            throw new InvalidOperationException(\"Cannot upload file without file name.\");\n        }\n\n        return Path.Combine(directoryPath, fileName);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Continue with the file manager.</p>\n<ol>\n  <li>Add two protected methods that will participate in the proces of adding files to media libraries.</li>\n  <li>The <em>GetNameAndExtension </em>method will be responsible for dissecting the two parts of a file name.</li>\n  <li>The <em>GetNonCollidingFilePath </em>method is designed to save files with numbered suffixes, should a file with a certain name (and suffix) already exist.</li>\n</ol>","code":{"src":"protected (string Name, string Extension) GetNameAndExtension(string completeFileName)\n{\n    if (string.IsNullOrEmpty(completeFileName))\n    {\n        throw new ArgumentException(\"File name is null or an empty string.\", nameof(completeFileName));\n    }\n\n    var separator = '.';\n    var segments = completeFileName.Split(separator);\n\n    if (segments?.Length > 1)\n    {\n        var subtractedLength = segments.Length - 1;\n        string[] segmentsExceptLast = new string[subtractedLength];\n        Array.Copy(segments, segmentsExceptLast, subtractedLength);\n        var name = segmentsExceptLast.Length == 1 ? segmentsExceptLast[0] : string.Join(separator.ToString(), segmentsExceptLast);\n\n        return (name, segments[subtractedLength]);\n    }\n    else\n    {\n        return (completeFileName, null);\n    }\n}\n\nprotected string GetNonCollidingFilePath(string directoryPath, string fileName, string fileExtension, int currentSuffix = 0)\n{\n    string newFileName = GetSuffixedFileName(fileName, fileExtension, currentSuffix);\n    var filePath = GetFilePath(directoryPath, $\"{newFileName}.{fileExtension}\");\n\n    return File.Exists(filePath)\n        ? GetNonCollidingFilePath(directoryPath, fileName, fileExtension, currentSuffix + 1)\n        : filePath;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finalize the <em>FileManager</em> class.</p>\n<ol>\n  <li>Create the <em>AddMediaLibraryFile </em>method.</li>\n  <li>This method is not just a wrapper around the media library repository. It orchestrates everything that preceeds the addition to the library.</li>\n  <li>Additionally, create the <em>AddMediaLibraryFileInternal </em>method. This one helps in separating concerns, so that it is later possible to add the file with another set of arguments.</li>\n  <li>Notice that the method is designed to always delete the temporary file, even when things go wrong down the line.</li>\n</ol>","code":{"src":"public Guid AddMediaLibraryFile(\n    HttpPostedFileWrapper file, \n    string uploadDirectory, \n    string libraryName, \n    string librarySiteName, \n    string libraryFolderPath = null, \n    bool checkPermisions = false)\n{\n    if (string.IsNullOrEmpty(libraryName))\n    {\n        throw new ArgumentException(\"Media library name is not specified.\", nameof(libraryName));\n    }\n\n    if (string.IsNullOrEmpty(librarySiteName))\n    {\n        throw new ArgumentException(\"Media library site name is not specified.\", nameof(librarySiteName));\n    }\n\n    MediaLibraryRepository.MediaLibraryName = libraryName;\n    MediaLibraryRepository.MediaLibrarySiteName = librarySiteName;\n\n    return AddMediaLibraryFileInternal(file, uploadDirectory, libraryFolderPath, checkPermisions);\n}\n\nprotected Guid AddMediaLibraryFileInternal(HttpPostedFileWrapper file, string uploadDirectory, string libraryFolderPath = null)\n{\n    if (file is null)\n    {\n        throw new ArgumentNullException(nameof(file));\n    }\n\n    if (!AppConfig.AllowedImageExtensions.Contains(Path.GetExtension(file.FileName)))\n    {\n        throw new InvalidOperationException(\"The app is not configured to allow this type of image.\");\n    }\n\n    EnsureDirectory(uploadDirectory);\n    var (name, extension) = GetNameAndExtension(file.FileName);\n    var uploadFilePath = GetNonCollidingFilePath(uploadDirectory, name, extension);\n    file.SaveAs(uploadFilePath);\n\n    try\n    {\n        return MediaLibraryRepository.AddMediaLibraryFile(uploadFilePath, libraryFolderPath);\n    }\n    finally\n    {\n        CMS.IO.File.Delete(uploadFilePath);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You certainly noticed the call from the helper to the media library repository. In this step, you'll add the eponymous <em>AddMediaLibraryFile </em>method to the repository and its interface.</p>\n<ol>\n  <li>In <em>Business &gt; Repository &gt; MediaLibrary</em>, open the <em>IMediaLibraryRepository.cs </em>file.</li>\n  <li>Add the signature as per the upper part of the code snippet.</li>\n  <li>When that's done, open the <em>MediaLibraryRepository.cs</em> file.</li>\n  <li>In the body of the <em>AddMediaLibraryFile </em>method, check the existence of input arguments and the media library.</li>\n  <li>Build the <em>MediaFileInfo </em>object with the help of the <em>FileInfo </em>one.</li>\n  <li>Set the properties of the file object and call the stock provider to set it in the database.</li>\n</ol>","code":{"src":"// IMediaLibraryRepository.cs\n\nGuid AddMediaLibraryFile(string filePath, string libraryFolderPath = null, bool checkPermisions = false);\n\n// MediaLibraryRepository.cs\n\npublic Guid AddMediaLibraryFile(string filePath, string libraryFolderPath = null, bool checkPermissions = false)\n{\n    if (string.IsNullOrEmpty(filePath))\n    {\n        throw new ArgumentException(\"File path was not specified.\", nameof(filePath));\n    }\n\n    var mediaLibraryInfo = MediaLibraryInfoProvider.GetMediaLibraryInfo(MediaLibraryName, MediaLibrarySiteName)\n        ?? MediaLibraryInfoProvider.GetMediaLibraryInfo(MediaLibraryId.Value);\n\n    if (mediaLibraryInfo == null)\n    {\n        throw new Exception($\"The {MediaLibraryName} library was not found on the {MediaLibrarySiteName} site.\");\n    }\n\n    if (checkPermissions && !mediaLibraryInfo.CheckPermissions(PermissionsEnum.Create, MediaLibrarySiteName, MembershipContext.AuthenticatedUser))\n    {\n        throw new PermissionException(\n            $\"The user {MembershipContext.AuthenticatedUser.FullName} lacks permissions to the {MediaLibraryName} library.\");\n    }\n\n    MediaFileInfo mediaFile = !string.IsNullOrEmpty(libraryFolderPath)\n        ? new MediaFileInfo(filePath, mediaLibraryInfo.LibraryID, libraryFolderPath)\n        : new MediaFileInfo(filePath, mediaLibraryInfo.LibraryID);\n\n    var fileInfo = FileInfo.New(filePath);\n    mediaFile.FileName = fileInfo.Name.Substring(0, fileInfo.Name.Length - fileInfo.Extension.Length);\n    mediaFile.FileExtension = fileInfo.Extension;\n    mediaFile.FileMimeType = MimeTypeHelper.GetMimetype(fileInfo.Extension);\n\n    mediaFile.FileSiteID = MediaLibrarySiteId.HasValue\n        ? MediaLibrarySiteId.Value\n        : SiteContext.CurrentSiteID;\n\n    mediaFile.FileLibraryID = mediaLibraryInfo.LibraryID;\n    mediaFile.FileSize = fileInfo.Length;\n    MediaFileInfoProvider.SetMediaFileInfo(mediaFile);\n\n    return mediaFile.FileGUID;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>As a final step in the process of implementing the static image widget, you should register your two interfaces, together with their implementations, in <em>Autofac</em>.</p>\n<ol>\n  <li>In the <em>App_Start</em> folder, open the <em>AutofacConfig.cs</em> file.</li>\n  <li>Locate the <em>DependencyResolver.SetResolver()</em> method call in the bottom of the file.</li>\n  <li>Place this code snippet above that method call.&nbsp;</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"// Registers the common file management helper\nbuilder.RegisterType<FileManager>().As<IFileManager>()\n\t.InstancePerRequest();\n\n// Registers the common error handler\nbuilder.RegisterType<ErrorHelper>().As<IErrorHelper>()\n\t.InstancePerRequest();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"40500527-3d82-451c-b5a5-4f065b2adf97","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Creating the backend support for the image widget","displayTitle":"Creating the backend support for the image widget"},{"body":"<p>If you’ve followed the instructions, you should be good to go with testing.</p>\n<p>Go to the <em>Pages</em> application, create a landing page section in the root of the content tree. Then, create a test landing page. Now you can give your new widget a try.</p>\n<figure data-asset-id=\"519848c0-c890-418b-8f8d-1f392c50c1bc\" data-image-id=\"519848c0-c890-418b-8f8d-1f392c50c1bc\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/0b0adaa1-f0cc-4237-9641-869541513242/static-image-widget.png\" data-asset-id=\"519848c0-c890-418b-8f8d-1f392c50c1bc\" data-image-id=\"519848c0-c890-418b-8f8d-1f392c50c1bc\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b54b92ae-90ba-42c9-ad2d-3ce8e03eaff3","_parentId":"443c263e-a363-4929-8feb-2860b0160efc","_type":"component","title":"Testing the image widget","displayTitle":"Testing the image widget"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the proper way of authenticating JavaScript calls of inline editors to MVC actions?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        data_upload_url = Html.Action(\"Upload\", \"ImageUploader\", new { ... })\n    }))\n{","lang":"csharp"},"feedback":"<p>The URL is correctly authenticated in the inline editor's partial view. However, calling Html.Action is not enough. The URL also needs to be decorated with additional security information.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        data_upload_url = Url.Kentico().AuthenticateUrl(Url.Action(\"Upload\", \"ImageUploader\", new { ... })).ToString()\n    }))\n{","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Perfect! You've spotted the difference well. The URLs used to call from inline editors to MVC actions need to be pre-processed in partial views using the <em>Url.Kentico().AuthenticateUrl()</em> calls.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"cbaa1bcf-3bf4-4367-92be-02d9f672c768","_parentId":"e90ffe96-b92d-4272-b4b6-e0453a259308","_type":"component","title":"Calling controllers from inline editors","displayTitle":"Calling controllers from inline editors"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the purpose of the properties class in the context of Kentico page builder?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The class represents the section or widget state. The class always represents the state throughout the whole life cycle of all page builder artifacts (widget controller, widget view, inline editor view).</p>","_shouldBeSelected":false,"feedback":"<p>The first sentence is completely true. And, Kentico allows you to use the properties for both inception of widget state and emission to the widget view. However, there might be cases when using the properties class in both direction is not desirable. In these cases, dedicated view models should be used instead.</p>"},{"text":"<p>The properties class represents widget state coming from the browser to the database. It is used in the widget controller to retrieve the widget state. In the basic widget development model, the properties class is used in both data flow directions—inwards and outwards.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. Page builder sends state of all widgets from the browser to the database in form of JSON data. To retrieve the state in a widget controller, a properties class must be defined. In the basic development model, it is used in both data flow directions.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"64b2d2b7-bf5e-43c8-abd9-28a883331e5d","_parentId":"e90ffe96-b92d-4272-b4b6-e0453a259308","_type":"component","title":"The properties class","displayTitle":"The properties class"},{"body":"<p>You've come a long way by now. You not only mastered the basics of widgets and inline editors. You also got your feet wet with some of the more advanced techniques like sending additional configuration to your inline editors via <em>data-* </em>attributes or, integrating a 3rd party Dropzone.js library into your editor. Finally, you've added a backend management controller that listens in the background for images sent by Dropzone.js.</p>\n<p>You're now fully trained to take on a challenge of the page builder part of this course: the slideshow widget.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"492262c5-9246-4432-9c72-e336507190f8","_parentId":"356e5221-a964-471f-b73f-a6506db09137","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to create and manage JavaScript objects for universal usage in both the display mode and edit mode</li>\n  <li>Serialize collections in widget properties</li>\n  <li>Serialize collections of objects into widget properties</li>\n  <li>Make use of Kentico's built-in media library selector in an MVC project</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"eedb50a2-ed14-4910-b969-3d10d443e031","_parentId":"3f8051bd-7a1b-448f-b695-4acb50c845bf","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>After using the two previous widgets—the text widget and the static image widget—as a way to ramp up your knowledge, nothing should stop you from accepting the greatest challenge in this module of the MVC course: the image slideshow widget.</p>\n<p>It will allow users to:</p>\n<ul>\n  <li>Add and remove slides</li>\n  <li>Pick media library images</li>\n  <li>Upload new images</li>\n  <li>Set the transition delay and speed</li>\n  <li>Show/hide arrow signs that manually switch between slides</li>\n  <li>Set the dimension ceiling of images (max. width &amp; height)</li>\n  <li>Toggle between the dimension ceiling and responsive sizing on the live site</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5ba076b1-74bf-44b0-8e41-ee28f3269a73","_parentId":"641cc700-0100-48dd-af30-ee56d3f4605d","_type":"component","title":"User stories","displayTitle":"User stories"},{"body":"<p>At the first glance, the slideshow widget will resemble the static image one. However, it will build on some different principles.</p>","_items":[{"body":"<p>First and foremost, it will employ a different JavaScript component—<a href=\"http://idangero.us/swiper/\">Swiper.js</a>. This component is primarily designed to display sequences of block HTML elements in a slideshow fashion. In our case, it will also be used to produce these sequences (in the edit mode).</p>","title":"Slideshow","_graphic":null},{"body":"<p>Second, the Dropzone.js component will be swapped with another one that's shipped by Kentico. Namely, the <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/page-and-media-selectors-for-page-builder-components#Pageandmediaselectorsforpagebuildercomponents-Mediafilesselector\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">media library selector</a> released with Kentico 12 Service Pack. Not only will it allow us to pick existing images in the libraries, it also supports uploading new ones right off the bat.</p>","title":"Selector","_graphic":null},{"body":"<p>When creating a slideshow, the users will first add a slide and then, they will use the media selector to either upload or pick an image.</p>\n<p>Users will be free to add and remove slides at will. Adding and removing of slides won't incur a roundtrip to the server. To pick/upload an image for a certain slide, users won't have to save the page state beforehand.</p>","title":"Slide management","_graphic":null},{"body":"<p>Once an image is added to a slide, the user won't be allowed to place another image on the same slide again. Instead, they will be able to remove the slide and add a new blank one.</p>\n<p>Multiple slides can share one single image. Even multiple widget instances will be able to reuse the same image.</p>\n<p>Thus, when a slide is removed, its respective image in the library will not be automatically removed (as it would break the other slides/widgets).</p>\n<p>When in the display mode, the widget will either draw the images as fully responsive or, with a dimension ceiling set by content editors. In case of the latter, Kentico will automatically resize the images so that they fit the maximum dimensions.</p>","title":"Image management","_graphic":null}],"instruction":"","_layout":"full","_component":"accordion","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f23f2cf6-6de3-41e4-bb96-afeca1daf11b","_parentId":"641cc700-0100-48dd-af30-ee56d3f4605d","_type":"component","title":"High-level architecture","displayTitle":"High-level architecture"},{"body":"<h3>Fundamentals</h3>\n<p>The slideshow widget will definitely have to be a full-fledged one; it will require its own widget controller and a view model. What it will easily cope without is the background controller that the static image widget had. You no longer need that since the transfer of image binary data will be handled by the media library selector for you.</p>\n<p>The widget controller will have to retrieve a collection of image GUIDs from the properties class. This will in turn be translated into a sequence of media library image DTOs. Hence a new method will have to be added into the media library repository.</p>\n<pre><code class=\"language-csharp\">var images = MediaLibraryRepository.GetMediaLibraryDtos(properties.ImageGuids);</code></pre>\n<p>Since the widget is supposed to support usage of an image across multiple slides, and, since the <em>WhereIn </em>retrieval method in the Kentico API returns a distinct sequence of images without repetition, you'll need a method that restores the duplicities.</p>\n<pre><code class=\"language-csharp\">protected IEnumerable&lt;MediaLibraryFileDto&gt; MirrorOriginalSequence(\n    IEnumerable&lt;Guid&gt; originalSequence, IEnumerable&lt;MediaLibraryFileDto&gt; distinctSequence)</code></pre>\n<h3>Views</h3>\n<p>When rendering the images in the display mode, the widget will have to produce a set of HTML elements with images. The Swiper component will take care of making them visible one by one. In a similar way as in the static image widget, the controls (for navigation across slides, for adding and removing slides) will be placed as an overlay.</p>\n<figure data-asset-id=\"1d8bbdba-fd94-4ae4-93a5-01f354da5a10\" data-image-id=\"1d8bbdba-fd94-4ae4-93a5-01f354da5a10\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/18bbdbbe-1b62-4619-97fd-7cc87a88ce37/slideshow-widget.png\" data-asset-id=\"1d8bbdba-fd94-4ae4-93a5-01f354da5a10\" data-image-id=\"1d8bbdba-fd94-4ae4-93a5-01f354da5a10\" alt=\"\"></figure>\n<p>To support the fixed dimensions mode, the widget view will have to utilize the IImageSizeConstraint interface and the KenticoImageUrl method implemented in the Essentials course module. This way, the view will intelligently compare dimensions of each image to its surrounding frame and, resize the image accordingly.</p>\n<pre><code class=\"language-csharp\">IImageSizeConstraint GetImageSizeConstraint(double imageAspectRatio)</code></pre>\n<p>Due to Swiper being used in both display mode and edit mode, you'll need different means of creating Swiper objects than within the call to the <em>window.kentico.pageBuilder.registerInlineEditor</em> function. You'll want another custom JavaScript namespace for that.</p>\n<pre><code class=\"language-javascript\">window.medioClinic.slideshowWidget</code></pre>\n<h3>Editor</h3>\n<p>As previously mentioned, the inline editor will not save just one GUID as the widget properties, it will save an array of them.</p>\n<p>The custom JavaScript namespace will not only make the Swiper object available in both display and edit mode. You'll also need it to have more than one Swiper objects in one page. Each instance should be retrieved by an identifier assigned by the widget view.</p>\n<pre><code class=\"language-csharp\">var swiperId = \"swiper-\" + Guid.NewGuid().ToString().ToLower();</code></pre>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4db2e788-72bd-4051-a835-6be9aa9ea377","_parentId":"641cc700-0100-48dd-af30-ee56d3f4605d","_type":"component","title":"Design guidelines","displayTitle":"Design guidelines"},{"body":"<p>In this walkthrough, you'll implement the foundation classes of your widget—the properties, view model and controller classes.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To satisfy the requirements we've imposed earlier, you'll want to capture an array of GUIDs coming from your future inline editor, together with additional properties handled by a configuration dialog.</p>\n<ol>\n  <li>In <em>Models &gt; Widgets</em>, create a <em>\"SlideshowWidget\" </em>folder.</li>\n  <li>In that subfolder, create a new <em>\"SlideshowWidgetProperties\"</em> class file.</li>\n  <li>As usual, implement <em>IWidgetProperties</em>.</li>\n  <li>Add the array of <em>System.Guid </em>values.</li>\n  <li>Add the additional properties that allow configuration of transitions, navigation, and dimensions of the widget in display mode.</li>\n  <li>Decorate these properties with proper <em>[EditingComponent] </em>attributes.</li>\n  <li>Optionally, you can specify ordering of these editing components in the configuration dialog, as seen in the code snippet.</li>\n</ol>","code":{"src":"public class SlideshowWidgetProperties : IWidgetProperties\n{\n    public Guid[] ImageGuids { get; set; }\n\n    [EditingComponent(TextInputComponent.IDENTIFIER, Label = \"{$Widget.MediaLibraryName$}\", Order = 0)]\n    public string MediaLibraryName { get; set; }\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.TransitionDelay$}\", Order = 1)]\n    public int TransitionDelay { get; set; } = 5000;\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.TransitionSpeed$}\", Order = 2)]\n    public int TransitionSpeed { get; set; } = 300;\n\n    [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.DisplayArrowSigns$}\", Order = 3)]\n    public bool DisplayArrowSigns { get; set; } = true;\n\n    [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.EnforceDimensions$}\", Order = 4)]\n    public bool EnforceDimensions { get; set; }\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.Width$}\", Order = 5)]\n    public int Width { get; set; }\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.Height$}\", Order = 6)]\n    public int Height { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let's now turn to the output of your future controller: the view model. It will almost entirely cover all that you found in the properties class, with some exceptions.</p>\n<ol>\n  <li>In the same folder, create a <em>\"SlideshowWidgetViewModel\" </em>class file.</li>\n  <li>Instead of an array of GUIDs, add a sequence of <em>MediaLibraryFileDto </em>objects.</li>\n  <li>Instead of the textual identification of a media library, reuse the MediaLibraryViewModel class that you implemented earlier.</li>\n</ol>","code":{"src":"public class SlideshowWidgetViewModel\n{\n    public MediaLibraryViewModel MediaLibraryViewModel { get; set; }\n    public IEnumerable<MediaLibraryFileDto> ImageDtos { get; set; }\n    public int Width { get; set; }\n    public int Height { get; set; }\n    public bool EnforceDimensions { get; set; }\n    public int TransitionDelay { get; set; }\n    public int TransitionSpeed { get; set; }\n    public bool DisplayArrowSigns { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let's start with the controller. As you know, it will transform the array of GUIDs into a sequence of DTO objects. Therefore it needs to work with your media library repository. Also, to locate the media library properly, it needs to know what the current site name is.</p>\n<ol>\n  <li>In <em>Controllers &gt; Widgets</em>, create a new <em>\"SlideshowWidgetController\" </em>class file.</li>\n  <li>Register the widget as per the code snippet.</li>\n  <li>As usual, derive your class from <em>WidgetController&lt;TProperties&gt;</em>, namely <em>SlideshowWidgetProperties</em>.</li>\n  <li>Capture the dependencies in properties and configure the site name on the media library repository in the constructor.</li>\n</ol>","code":{"src":"[assembly: RegisterWidget(\n    \"MedioClinic.Widget.Slideshow\", \n    typeof(SlideshowWidgetController), \n    \"Slideshow\", \n    Description = \"Slideshow widget\", \n    IconClass = \"icon-carousel\")]\n\npublic class SlideshowWidgetController : WidgetController<SlideshowWidgetProperties>\n{\n    public IBusinessDependencies Dependencies { get; }\n\n    public IMediaLibraryRepository MediaLibraryRepository { get; }\n\n    public SlideshowWidgetController(IBusinessDependencies dependencies, IMediaLibraryRepository mediaLibraryRepository)\n    {\n        Dependencies = dependencies ?? throw new ArgumentNullException(nameof(dependencies));\n        MediaLibraryRepository = mediaLibraryRepository ?? throw new ArgumentNullException(nameof(mediaLibraryRepository));\n        MediaLibraryRepository.MediaLibrarySiteName = Dependencies.SiteContextService.SiteName;\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Continue with the controller by adding your <em>ActionResult </em>method.</p>\n<ol>\n  <li>First, get the properties.</li>\n  <li>Then, finalize the configuration of the repository with the library name obtained from the widget properties object.</li>\n  <li>In the <em>return </em>statement, build the view model. Use the global configuration of allowed image file extensions.</li>\n  <li>If we didn't want to support repetition of images within a single widget, you could just populate the view model right away.</li>\n  <li>However, to support that, you'll need to populate the <em>ImageDtos </em>view model property by calling an additional method implemented in the next step.</li>\n</ol>","code":{"src":"public ActionResult Index()\n{\n    var properties = GetProperties();\n    MediaLibraryRepository.MediaLibraryName = properties.MediaLibraryName;\n    var images = MediaLibraryRepository.GetMediaLibraryDtos(properties.ImageGuids);\n\n    return PartialView(\"Widgets/_SlideshowWidget\", new SlideshowWidgetViewModel\n    {\n        MediaLibraryViewModel = new Models.MediaLibraryViewModel\n        {\n            LibraryName = properties.MediaLibraryName,\n            AllowedImageExtensions = AppConfig.AllowedImageExtensions\n        },\n        ImageDtos = MirrorOriginalSequence(properties.ImageGuids, images),\n        Width = properties.Width,\n        Height = properties.Height,\n        EnforceDimensions = properties.EnforceDimensions,\n        TransitionDelay = properties.TransitionDelay,\n        TransitionSpeed = properties.TransitionSpeed,\n        DisplayArrowSigns = properties.DisplayArrowSigns\n    });\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finalize the controller by implementing a method that builds a mirrored sequence of DTOs from the original sequence of GUIDs. This is because the repository always returns a distinct sequence. In other words, it never returns any of the images twice, even when it was called with arguments containing duplicate GUIDs.</p>\n<ol>\n  <li>First, do a null check. In a method that returns the <em>IEnumerable </em>sequence, you can simply <em>yield break</em>.</li>\n  <li>Traversing over the original sequence of GUIDs, always try to find a matching DTO in the distinct sequence.</li>\n  <li>Return the matching DTO in another <em>yield </em>statement.</li>\n</ol>","code":{"src":"protected IEnumerable<MediaLibraryFileDto> MirrorOriginalSequence(\n    IEnumerable<Guid> originalSequence, IEnumerable<MediaLibraryFileDto> distinctSequence)\n{\n    if (originalSequence == null)\n    {\n        yield break;\n    }\n\n    foreach (var guid in originalSequence)\n    {\n        var match = distinctSequence.FirstOrDefault(dto => dto.Guid.Equals(guid));\n\n        if (match != null)\n        {\n            yield return match;\n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"57003787-796e-4ae2-831b-ca6be2a93ff4","_parentId":"47f131ef-0340-4ac2-aa38-0267604baadb","_type":"component","title":"Demo: Implementing the widget foundation classes","displayTitle":"Demo: Implementing the widget foundation classes"},{"body":"<div class=\"infobox idea\"><p>As you may have noticed, this widget uses a text box to identify the media library with images used in the widget. The editors are supposed to insert a code name of the media library. We chose this approach since it does not require you to implement a media library selection form component. You will implement such form component at a later phase of this course. Then, you may want to refactor the widget and the related code base to use the media library selection form component.</p>\n<p><br></p>\n<figure data-asset-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\" data-image-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b23f9b0a-39e7-4781-b15a-fef8827259ad/media-library-identification.png\" data-asset-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\" data-image-id=\"1fe1f23a-f6ad-4c8a-a51a-ab5906218e39\" alt=\"\"></figure></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"00f2101a-7043-4ec3-9d70-61548aeadbd7","_parentId":"47f131ef-0340-4ac2-aa38-0267604baadb","_type":"component","title":"Media library identification","displayTitle":"Media library identification"},{"body":"<p>Moving forward in the request processing pipeline, you're now about to implement the view of the widget.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The view of the widget has to support lots of features, thus it will take a few moments to make it work.&nbsp;Let's start with the heart of it: the markup.</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; Widgets</em>, create a new <em>\"_SlideshowWidget\" </em>Razor file.</li>\n  <li>Add a root &lt;div /&gt; element that carries the identifier. The identifier will be produced by this view and, it will then be used to locate the Swiper JavaScript object in your future custom namespace.</li>\n  <li>As required by the Swiper.js component, add the <em>swiper-wrapper</em> element underneath.</li>\n  <li>Along with the wrapper, add markup for navigation arrow signs and your future inline editor.</li>\n  <li>Inside the wrapper, traverse through the <em>ImageDtos </em>sequence.</li>\n  <li>While doing so, you'll need to make sure your widget respects the dimension ceiling that might have been imposed by content editors.</li>\n  <li>To achieve that goal, you'll need two things: the proper width and height styling attributes and, an URL that makes use of Kentico's responsive image API.</li>\n  <li>To get a proper set of styling attributes, you'll first need to calculate the image aspect ratio.</li>\n  <li>To get the URL, you'll need to produce an object implementing <em>IImageSizeConstraint</em>.</li>\n</ol>","code":{"src":"@using Business.Dto.MediaLibrary;\n@using MedioClinic.Models\n@using MedioClinic.Models.Widgets\n@using MedioClinic.Models.InlineEditors\n@model SlideshowWidgetViewModel\n\n<div class=\"swiper-container\" id=\"@swiperId\" @GetContainerStylingAttribute()>\n    <div class=\"swiper-wrapper\">\n        @if (Model.ImageDtos != null && Model.ImageDtos.Any())\n        {\n            // Loop through all images.\n            foreach (var image in Model.ImageDtos)\n            {\n                if (image != null)\n                {\n                    var imageAspectRatio = GetImageAspectRatio(image);\n                    var imageSizeConstraint = GetImageSizeConstraint(imageAspectRatio);\n                    var stylingAttribute = GetImageStylingAttribute(imageAspectRatio);\n                    var imageUrl = GetImageUrl(image, imageSizeConstraint);\n\n                    <div class=\"swiper-slide\" id=\"slide-@image.Guid\">\n                        <img src=\"@Html.Raw(imageUrl)\" @Html.Raw(stylingAttribute) id=\"image-@image.Guid\" />\n                    </div>\n                }\n            }\n        }\n    </div>\n\n    @if (editMode || Model.DisplayArrowSigns)\n    {\n        <div class=\"swiper-button-prev\"></div>\n        <div class=\"swiper-button-next\"></div>\n    }\n\n    @if (editMode)\n    {\n        Html.RenderPartial(\"InlineEditors/_SlideshowEditor\", new SlideshowEditorViewModel\n        {\n            PropertyName = nameof(SlideshowWidgetProperties.ImageGuids),\n            MediaLibraryViewModel = Model.MediaLibraryViewModel,\n            Images = Model.ImageDtos,\n            SwiperId = swiperId\n        });\n    }\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>Let's now add a few basic variables and implement the methods you've called within the markup.</p>\n<ol>\n  <li>As advertised earlier, your view will assign an identifier to the Swiper instance. You can simply greate a prefixed GUID.</li>\n  <li>Your code will often need to know whether both width and height were set by content editors in the configuration dialog. Hence the <em>dimensionsAreSet </em>variable.</li>\n  <li>Next, some of the methods will need to know the aspect ratio of the configured dimensions. An ideal way is to divide the dimensions into a <em>double </em>variable.</li>\n  <li>Your code required a comparison of the container aspect ratio against the aspect ratio of individual images in the slideshow. This is what the <em>GetImageAspectRatio </em>expression-bodied method takes care of.</li>\n</ol>","code":{"src":"@{\n    var editMode = Context.Kentico().PageBuilder().EditMode;\n    var swiperId = \"swiper-\" + Guid.NewGuid().ToString().ToLower();\n    var dimensionsAreSet = Model.Width > 0 && Model.Height > 0;\n    var containerAspectRatio = (double)Model.Width / (double)Model.Height;\n\n    double GetImageAspectRatio(MediaLibraryFileDto image) =>\n        (double)image.Width / (double)image.Height;\n\n    // Gets the image constraint in case \"Enforce dimensions\" is checked.\n    IImageSizeConstraint GetImageSizeConstraint(double imageAspectRatio)\n    {\n        if (containerAspectRatio >= imageAspectRatio)\n        {\n            return new Width(Model.Width);\n        }\n        else\n        {\n            return new Height(Model.Height);\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Should users configure certain dimensions of the slideshow, two dinstinct things must be calculated: styling attribute of the container and attributes of particular images in it.</p>\n<ol>\n  <li>The <em>GetContainerStylingAttribute </em>method does the first thing. It will be invoked per-widget.</li>\n  <li>The <em>GetImageStylingAttribute </em>does the second. It will be run per-image.</li>\n  <li>The method first determines in which dimension its aspect ratio exceeds the container.&nbsp;</li>\n  <li>If the image is taller than the container, its height will always match the container height. Its width will be computed thanks to the aspect ratio.</li>\n  <li>If the image is a wide one, the computation goes in the opposite direction.</li>\n</ol>","code":{"src":"// Builds the widget container size attribute.\nIHtmlString GetContainerStylingAttribute() =>\n    dimensionsAreSet && Model.EnforceDimensions\n        ? Html.Raw($\"style=\\\"width:{Model.Width}px; height:{Model.Height}px\\\"\")\n        : null;\n\n// Calculates whether images are responsive or with fixed dimensions.\nstring GetImageStylingAttribute(double imageAspectRatio)\n{\n    int width = Model.Width;\n    int height = Model.Height;\n\n    if (imageAspectRatio > containerAspectRatio)\n    {\n        width = Model.Width;\n        height = (int)Math.Round(Model.Width * imageAspectRatio);\n    }\n    else if (imageAspectRatio < containerAspectRatio)\n    {\n        width = (int)Math.Round(Model.Height * imageAspectRatio);\n        height = Model.Height;\n    }\n\n    return dimensionsAreSet && Model.EnforceDimensions\n        ? $\"width=\\\"{width}\\\" height=\\\"{height}\\\"\"\n        : $\"class=\\\"responsive-img\\\"\";\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The last method—<em>GetImageUrl</em>—will utilize the Kentico responsive image API by calling the KenticoImageUrl extension method you've implemented in the Essentials course module.</p>","code":{"src":"string GetImageUrl(MediaLibraryFileDto image, IImageSizeConstraint imageSizeConstraint)\n{\n    if (dimensionsAreSet && Model.EnforceDimensions)\n    {\n        // In edit mode and with \"Enforce dimensions (on the live site)\", we can leverage the Kentico responsive images feature to get images resized to fixed dimensions.\n        return Url.KenticoImageUrl(image.DirectUrl, imageSizeConstraint);\n    }\n    else\n    {\n        // Otherwise, we can get the full sized images and let Materialize CSS resize them via browser-side code.\n        return Url.KenticoImageUrl(image.DirectUrl);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Allright, we have the view almost complete. However, since the Swiper objects need to be instantiated in both display mode and edit mode, we need to take care of it with our own JavaScript code.</p>\n<p>The best practice says to run the code through a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">DOMContentLoaded </a>event handler, if required.</p>\n<p>Therefore, all you have to do is to add a <em>&lt;script /&gt;</em> tag, as seen in the snippet, at the very end of the widget view. It may have just sparked to your mind that with multiple widget instances in one page, the HTML source might become scattered with several <em>&lt;script /&gt; </em>tags. Sadly, MVC 5 partial views don't support the <em>@section</em> directives, hence a plain old <em>&lt;script /&gt;</em> tag.</p>\n<p>The <em>window.medioClinic.slideshowWidget.initSwiper</em> function will be implemented in the next chapters.</p>","code":{"src":"@* Partial views don't support @section directives. *@\n<script>\n    @{\n        var editModeLiteral = editMode.ToString().ToLower();\n        var initSwiperLiteral = $\"window.medioClinic.slideshowWidget.initSwiper(\\\"{swiperId}\\\", {editModeLiteral}, {Model.TransitionDelay}, {Model.TransitionSpeed});\";\n    }\n\n    // Initialize the current Swiper object.\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", function () {\n                @Html.Raw(initSwiperLiteral)\n            });\n    } else {\n        @Html.Raw(initSwiperLiteral)\n    }\n</script>","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"36492879-9de2-4a02-908a-005de38351f9","_parentId":"47f131ef-0340-4ac2-aa38-0267604baadb","_type":"component","title":"Designing the widget view","displayTitle":"Designing the widget view"},{"body":"<p>With all the contours of the Swiper component already set in the widget view's markup, you can now set off for another JavaScript trip—the Swiper management namespace.</p>\n<p>The ultimate point of the namespace is to properly instantiate and keep track of all Swiper instances in a given page. Most of the functions will be responsible for just that.</p>\n<p>With this namespace in place, you'll be able to handle both display mode and edit mode with one piece of code.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let's put the namespace into a dedicated file in a conventional filesystem location, together with the Swiper component system files.</p>\n<ol>\n  <li>In the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinicStaticAssets.zip\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">MedioClinicStaticAssets.zip</a> file, navigate to <em>MedioClinicStaticAssets</em>. You'll see a <em>swiper </em>subfolder sitting in there.</li>\n  <li>In Solution Explorer, in the <em>Content </em>folder, create a new <em>\"Widgets\"</em> folder, with another <em>\"SlideshowWidget\" </em>subfolder underneath.</li>\n  <li>Copy the <em>swiper </em>folder from the ZIP archive into the <em>SlideshowWidget </em>folder.</li>\n  <li>Next to the <em>swiper </em>folder, create a new <em>\"slideshow-widget\" </em>JavaScript file.</li>\n  <li>To manage the Swiper objects intelligently, your namespace will not only need to plainly keep track of them. It will also need to make sure that one object is not tracked twice or more. Thus, a bare array of Swiper objects will not suffice. To guarantee that no external code adds one Swiper twice, you need a JavaScript closure.</li>\n  <li>As you can see in the snippet, you can implement it by having the array not exposed to the client code.</li>\n  <li>Only the public methods will provide access to that array.</li>\n</ol>","code":{"src":"window.medioClinic = window.medioClinic || {};\n\n(function (slideshowWidget) {\n    var swipers = [];\n\n    /**\n     * Adds a Swiper object to an internal dictionary.\n     * @param {string} id The ID of the Swiper object.\n     * @param {object} swiper The Swiper object to add.\n     */\n    slideshowWidget.addSwiper = function (id, swiper) {\n        var found = window.medioClinic.slideshowWidget.getSwiper(id);\n\n        if (!found) {\n            var swiperToAdd = {\n                id: id,\n                swiper: swiper\n            };\n\n            swipers.push(swiperToAdd);\n        }\n    };\n\n    /**\n     * Retrieves a Swiper object from an internal dictionary by its ID.\n     * @param {string} id The ID to search by.\n     * @returns {object} Either the found Swiper object, or null.\n     */\n    slideshowWidget.getSwiper = function (id) {\n        var found = swipers.filter(function (currentSwiper) {\n            return currentSwiper.id === id;\n        });\n\n        if (found.length > 0) {\n            return found[0];\n        } else {\n            return null;\n        }\n    };\n}(window.medioClinic.slideshowWidget = window.medioClinic.slideshowWidget || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Apart from the <em>addSwiper </em>and <em>getSwiper </em>functions, a few others will also act as proxies for the array.</p>\n<p>In this step, you'll implement the <em>removeSwiper </em>and <em>getCurrentSwiper </em>functions.</p>\n<p>The <em>removeSwiper </em>function wraps up the list of functions that directly operate on the swipers array. It looks complex at the fist glance, however, it just reverses through the array to <em>splice </em>it eventually.</p>\n<p>The <em>getCurrentSwiper&nbsp;</em>function serves as a convenience in preparing the <em>id </em>argument for the existing <em>getSwiper </em>function. Notice the commented-out line of code in the function body. This line reveals that the Swiper component luckily provides access to each Swiper object from within its DOM object (through a newly created \"swiper\" property of the DOM object). However, this is not always the case. Some JavaScript components do not care that much. Then, you're only choice would be to utilize the <em>getSwiper </em>method as shown in the last line in the function's body.</p>\n<p>By the way, the <em>swiperGuidAttribute&nbsp;</em>constant has been made public since you'll want to use it from within the <em>window.kentico.pageBuilder.registerInlineEditor()</em> call later.</p>","code":{"src":"/**\n * Removes a Swiper object form an internal dictionary.\n * @param {string} id The ID to search by.\n */\nslideshowWidget.removeSwiper = function (id) {\n    for (var i = swipers.length - 1; i >= 0; i--) {\n        if (swipers[i].id === id) {\n            swipers.splice(i, 1);\n        }\n    }\n};\n\n/** The name of the data- HTML attribute that holds the Swiper GUID. */\nslideshowWidget.swiperGuidAttribute = \"data-swiper-guid\";\n\n/**\n * Gets a Swiper object for a given slideshow inline editor instance.\n * @param {HTMLElement} editor The HTML element of the inline editor.\n * @param {string} swiperGuidAttribute The name of the data- HTML attribute containing the Swiper ID.\n * @returns {object} The Swiper object.\n */\nslideshowWidget.getCurrentSwiper = function (editor, swiperGuidAttribute) {\n    // Retrieving via the \"swiper\" property of the respective HTML element\n    //return editor.parentElement.swiper;\n\n    // Retrieving off of the global namespace container\n    return window.medioClinic.slideshowWidget.getSwiper(editor.getAttribute(swiperGuidAttribute)).swiper;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Now comes the part when the biggest star of the show comes to the stage. The <em>initSwiper </em>function that you've already invoked in the widget view.</p>\n<p>The function configures Swiper objects according to the <a href=\"https://swiperjs.com/api/#initialize\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>. Then, it adds the reference to the global <em>swipers</em> array through <em>addSwiper()</em>.</p>\n<p>The configuration largely depends on one's preference. For instance, you may want to make more properties/behavior be available in the widget's edit mode or just in display mode.</p>","code":{"src":"/**\n * Initializes a new Swiper object in the page.\n * @param {string} swiperId The ID of the future Swiper object.\n * @param {bool} editMode Indication of whether the Kentico page builder is in edit mode.\n * @param {number} transitionDelay An interval of the transition to another slide (milliseconds).\n * @param {any} transitionSpeed The duration of each transition (milliseconds).\n */\nslideshowWidget.initSwiper = function (swiperId, editMode, transitionDelay, transitionSpeed) {\n    var swiperSelector = \"#\" + swiperId;\n\n    var configuration = {\n        loop: !editMode,\n        speed: transitionSpeed,\n        navigation: {\n            nextEl: \"#\" + swiperId + \" .swiper-button-next\",\n            prevEl: \"#\" + swiperId + \" .swiper-button-prev\"\n        },\n        effect: \"fade\",\n        fadeEffect: {\n            crossFade: true\n        },\n        autoHeight: true\n    };\n\n    if (!editMode) {\n        configuration[\"autoplay\"] = {\n            delay: transitionDelay,\n            disableOnInteraction: true\n        };\n    }\n\n    var swiper = new Swiper(swiperSelector, configuration);\n    window.medioClinic.slideshowWidget.addSwiper(swiperId, swiper);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In the last step, you'll add two ancillary functions that will find their use later in the editor initialization logic.</p>\n<p>The <em>getGuidFromId </em>function, as its name suggests, strips down all sorts of prefixes that might have been added to a GUID value.</p>\n<p>The <em>collectImageIds </em>function iterates over all images in a given Swiper object and, returns a set of its IDs.</p>","code":{"src":"/**\n * Removes any prefixes that had been previously concatedated in front of a GUID.\n * @param {string} id The GUID with the prefix.\n * @returns {string} The bare GUID value.\n */\nslideshowWidget.getGuidFromId = function (id) {\n    return id.slice(-36);\n};\n\n/**\n * Gets an array of Dropzone HTML element IDs of a given Swiper object.\n * @param {object} swiper The parent Swiper object.\n * @returns {string[]} The array of Dropzone IDs.\n */\nslideshowWidget.collectImageIds = function (swiper) {\n    var output = [];\n\n    for (var s = 0; s <= swiper.slides.length - 1; s++) {\n        var childElement = swiper.slides[s].children[0];\n        output.push(childElement.id);\n    }\n\n    return output;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, you'll tweak CSS styling, mostly for the widget display mode. The current step in fact belongs to the previous walkthrough since it doesn't operate on the same merits as the JavaScript namespace. What it has in common with that namespace is the filesystem location for static content assets.</p>\n<ol>\n  <li>In the <em>Content</em> folder, create a <em>\"Widgets\"</em> folder, with a <em>\"SlideshowWidget\" </em>subfolder in it.</li>\n  <li>In that subfolder, create a new <em>\"SlideshowWidget\" </em>CSS file.</li>\n  <li>Add the styling according to this snippet.</li>\n</ol>","code":{"src":".swiper-container, .swiper-wrapper {\n    z-index: initial !important;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"91409356-661f-4403-8579-4903e729fc17","_parentId":"47f131ef-0340-4ac2-aa38-0267604baadb","_type":"component","title":"Implementing the Swiper management namespace","displayTitle":"Implementing the Swiper management namespace"},{"body":"<p>In this walkthrough, we'll get back to .NET coding. But not for long. Once you'll finish the inline editor's view model and view, you'll get back to JavaScript with the editor initialization logic.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Start with the view model.</p>\n<ol>\n  <li>In <em>Models &gt; InlineEditors</em>, create a new <em>\"SlideshowEditor\" </em>folder.</li>\n  <li>In that subfolder, create a new <em>\"SlideshowEditorViewModel\" </em>class file.</li>\n  <li>Earlier, when you wrote code of the widget view, you may have noticed that there is nothing more to this view model than just passing a subset of the <em>SlideshowWidgetViewModel </em>data further, onto the inline editor.</li>\n</ol>","code":{"src":"public class SlideshowEditorViewModel : InlineEditorViewModel\n{\n    public string SwiperId { get; set; }\n    public MediaLibraryViewModel MediaLibraryViewModel { get; set; }\n    public IEnumerable<MediaLibraryFileDto> Images { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the view of the inline editor, two important things happen: markup of plus (+) and minus (-) buttons is declared and, the <em>data-*</em> HTML attributes get populated.</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; InlineEditors</em>, create a new <em>\"_SlideshowEditor\" </em>Razor file.</li>\n  <li>Let the inline editor be invoked through Html.Kentico().BeginInlineEditor().</li>\n  <li>Pass an anonymous object with all the <em>data-* </em>attributes in it, as one of the method call arguments.</li>\n  <li>Offload the concatenation of GUID values onto an expression-bodied <em>SerializeGuids</em> helper method.</li>\n  <li>In the body of the using statement, declare the markup of the plus and minus buttons.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.InlineEditors\n@model SlideshowEditorViewModel\n\n@{ \n    string SerializeGuids(IEnumerable<Guid> guids) =>\n        string.Concat(guids.Select(guid => guid.ToString() + \";\"));\n}\n\n@using (Html.Kentico().BeginInlineEditor(\"slideshow-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"kn-slideshow-editor\",\n        data_swiper_guid = Model.SwiperId,\n        data_media_library_name = Model.MediaLibraryViewModel.LibraryName,\n        data_image_guids = SerializeGuids(Model.Images.Select(image => image.Guid)),\n        data_allowed_image_extensions = string.Join(\";\", Model.MediaLibraryViewModel.AllowedImageExtensions)\n    }))\n{\n    <ul class=\"kn-slideshow-buttons\">\n        <li>\n            <button class=\"kn-swiper-plus\">+</button>\n        </li>\n        <li>\n            <button class=\"kn-swiper-minus\">-</button>\n        </li>\n    </ul>\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"79a2d3ea-75a8-451f-bc8f-92274b1dbdcd","_parentId":"47f131ef-0340-4ac2-aa38-0267604baadb","_type":"component","title":"Implementing the inline editor's view model, view","displayTitle":"Implementing the inline editor's view model, view"},{"body":"<p>We're slowly approaching the final part of the slideshow widget development process. In this phase, you'll handle the client-side logic that initializes the inline editor and hooks proper handlers to various UI events.</p>\n<p>Over the course of time, we've sometimes offered you two alternative ways of achieving the same goal. We'll do this again here, in two cases.</p>\n<ul>\n  <li>First, we'll show two ways of constructing the image sequence. One that is convenient to implement and another that is more efficient.</li>\n  <li>There will be two alternative ways of drawing the newly picked/added image to the slideshow: server-side and client-side.</li>\n</ul>\n<p>The implementation won't differ that much in any of the two cases, yet it will give you valuable options, therefore we'll offer you those variants.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the first step, you'll create the bare backbone of the JavaScript code file. The code written in this step will call additional helper functions that you'll create in the subsequent steps.</p>\n<ol>\n  <li>In <em>Content &gt; InlineEditors</em>, create a new <em>\"SlideshowEditor\"</em> folder.</li>\n  <li>In that subfolder, create a new <em>\"slideshow-editor\" </em>JavaScript file.</li>\n  <li>Add the obligatory call to the <em>registerInlineEditor </em>function.</li>\n  <li>As you can see in the snippet, the first lines of the <em>init </em>property function just declare string constants, retrieve the <em>data-* </em>HTML attributes, and capture references to the plus and minus buttons.</li>\n  <li>Then, the code calls into the previously implemented <em>getCurrentSwiper </em>global function to get the Swiper object of a given widget instance.</li>\n  <li>Now, here comes the first moment when the code forks into two short alternative ways. Let's start with the background. Every time the editor is redrawn by Kentico, it needs to initialize itself with the GUIDs of all images that have been added to the widget so far.</li>\n  <li>In the first alternative way (described as <em>\"Image GUID retrieval: Alternative 1\"</em>), you'll make use of the <em>collectImageIds </em>and <em>getGuidFromId </em>functions that you've prepared a while ago. This method is less convenient to implement, but it can save some bandwidth by extracting the GUIDs from existing markup that has been already rendered by your widget view.</li>\n  <li>With the second way (<em>\"Image GUID retrieval: Alternative 2\"</em>), you use a dedicated data flow channel—the <em>data-image-guids</em> HTML attribute.</li>\n  <li>As the final step in the <em>init </em>property function—at least for now—attach the event listeners for plus and minus buttons.</li>\n</ol>","code":{"src":"(function () {\n    window.kentico.pageBuilder.registerInlineEditor(\"slideshow-editor\", {\n        init: function (options) {\n            var imageGuidPrefix = \"image-\";\n            var slideGuidPrefix = \"slide-\";\n            var messageGuidPrefix = \"message-\";\n            var editor = options.editor;\n            var mediaLibraryName = editor.getAttribute(\"data-media-library-name\");\n            var allowedImageExtensions = editor.getAttribute(\"data-allowed-image-extensions\");\n            var plusButton = editor.parentElement.querySelector(\"ul.kn-slideshow-buttons .kn-swiper-plus\");\n            var minusButton = editor.parentElement.querySelector(\"ul.kn-slideshow-buttons .kn-swiper-minus\");\n\n            var swiper = window.medioClinic\n                .slideshowWidget\n                .getCurrentSwiper(editor, window.medioClinic.slideshowWidget.swiperGuidAttribute);\n\n            // Image GUID retrieval: Alternative 1 (begin)\n            /*var slideIds = window.medioClinic.slideshowWidget.collectImageIds(swiper);\n\n            var imageGuids = slideIds.map(function (slideId) {\n                return window.medioClinic.slideshowWidget.getGuidFromId(slideId);\n            });*/\n            // Image GUID retrieval: Alternative 1 (end)\n\n            // Image GUID retrieval: Alternative 2 (begin)\n            var imageGuids = editor.getAttribute(\"data-image-guids\").split(\";\");\n            imageGuids.splice(-1, 1);\n            // Image GUID retrieval: Alternative 2 (end)\n\n\n            // All helper functions will be added here.\n\n\n            plusButton.addEventListener(\"click\", addSlide);\n            minusButton.addEventListener(\"click\", removeSlide);\n        },\n\n    });\n})();","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You've added just the init property function. Now, add the <em>destroy </em>one.</p>\n<p>As with the <em>init </em>function, first seek the related Swiper object. Then, make sure it is destroyed and its representation in your management namespace is removed.</p>","code":{"src":"destroy: function (options) {\n    var swiper = window.medioClinic\n        .slideshowWidget\n        .getCurrentSwiper(options.editor, window.medioClinic.slideshowWidget.swiperGuidAttribute);\n\n    if (swiper) {\n        window.medioClinic.slideshowWidget.removeSwiper(swiper.el.id);\n        swiper.destroy();\n    }\n}","lang":"javascript"},"strapline":""},{"title":"","body":"<p>From now on, you'll be implementing the inner functions that reside in the lexical scope of the <em>init </em>property function.</p>\n<ol>\n  <li>In the <em>slideshow-editor.js </em>file, locate the comment <em>\"// All helper functions will be added here.\"</em></li>\n  <li>Add the first function in the whole future call stack: <em>addSlide</em>.</li>\n  <li>The first thing you want to do is to generate a temporary GUID for the slide. As adding of Swiper slides (those that are still empty) will always happen entirely on the client side, there won't be any image GUID to construct the slide ID from. However, you still need some means of identifying and locating the new slide. Bear in mind that content editors will add slides anywhere in the middle of the whole slide sequence, not just to the very end thereof. That's why a temporary GUID will have to be generated.</li>\n  <li>With the temporary GUID generated, you can also generate the slide HTML markup.</li>\n  <li>Then, let another helper function construct the HTML element of the slide.</li>\n  <li>Next, locate the clickable anchor used to invoke the Kentico media library selector.</li>\n  <li>Hook up an event listener to it. In the listener function, first check whether a media library code was specified by the user. If not, display an error message.</li>\n  <li>Finally, configure the <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/page-and-media-selectors-for-page-builder-components#Pageandmediaselectorsforpagebuildercomponents-MediafilesselectorJavaScriptAPI\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">media selector dialog options</a> and open it.</li>\n</ol>","code":{"src":"/** Adds a new slide to the Swiper object. */\nvar addSlide = function () {\n    var tempGuid = generateUuid();\n\n    var markup =\n        buildSlideMarkup(\n            tempGuid,\n            \"Pick a media library image\");\n\n    var slide = createNewSlide(swiper, imageGuids, tempGuid, markup);\n    var pickingLink = slide.querySelector(\"div.kn-slideshow-message\");\n\n    pickingLink.addEventListener(\"click\", function () {\n        if (!mediaLibraryName) {\n            showErrorMessage(slide, tempGuid, \n                 \"You must first specify a media library name in the widget properties.\");\n        } else {\n            var dialogOptions = createDialogOptions(slide, pickingLink);\n            window.kentico.modalDialog.mediaFilesSelector.open(dialogOptions);\n        }\n    });\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Let's dig deeper into the call stack. You'll now implement the <em>generateUuid </em>and <em>buildSlideMarkup </em>functions.</p>\n<ol>\n  <li>In the <em>generateUuid </em>function, simply use the <a href=\"https://www.ietf.org/rfc/rfc4122.txt\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">RFC4122-compliant</a> code that was <a href=\"https://stackoverflow.com/a/2117523/4074527\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">most voted for on StackOverflow</a>.</li>\n  <li>In the <em>buildSlideMarkup </em>function, plainly concatenate strings together. Although this approach is less structured than using <em>document.createElement()</em>, it is simpler as the ultimate consumer of this function—Swiper.js—explicitly wants markup, not a DOM object.</li>\n</ol>","code":{"src":"/** \n *  Generates an UUID (GUID).\n *  @returns {string} The UUID.\n * */\nvar generateUuid = function () {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 0x3 | 0x8;\n\n        return v.toString(16);\n    });\n};\n\n/**\n * Crafts an HTML markup of a new Swiper slide.\n * @param {string} id The ID of the future HTML element of the slide.\n * @param {string} text The instructional text for the new slide.\n * @returns {string} The complete HTML markup of the Swiper slide.\n */\nvar buildSlideMarkup = function (id, text) {\n    return \"<div class=\\\"swiper-slide\\\" id=\\\"\"\n        + slideGuidPrefix + id\n        + \"\\\"><div class=\\\"kn-slideshow-message kn-slideshow-message-first\\\"><a>\"\n        + text + \"</a></div></div>\";\n};\n\n","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Here come other functions you've called.&nbsp;</p>\n<ol>\n  <li>In the <em>createNewSlide </em>function, make sure that the slide markup is added to the Swiper object and, that you update the <em>imageGuids </em>array from the parent lexical scope. Also, don't forget to flip the newly created slide with <em>swiper.slideNext()</em>.</li>\n  <li>In the body of the <em>showErrorMessage</em> function, leverage the power of <em>document.createElement() </em>to build the error message in a structured way.</li>\n</ol>","code":{"src":"/**\n * Creates a new Swiper slide.\n * @param {object} swiper The Swiper object.\n * @param {string[]} imageGuids GUIDs of images in slides.\n * @param {string} tempGuid Temporary GUID assigned to a new image.\n * @param {string} markup HTML markup of the new slide.\n * @returns {HTMLElement} The new slide.\n */\nvar createNewSlide = function (swiper, imageGuids, tempGuid, markup) {\n    var activeIndexWhenAdded = swiper.slides.length > 0 ? swiper.activeIndex + 1 : 0;\n    imageGuids.splice(activeIndexWhenAdded, 0, tempGuid);\n    swiper.addSlide(activeIndexWhenAdded, markup);\n    swiper.slideNext();\n    var slide = editor.parentElement.querySelector(\"#\" + slideGuidPrefix + tempGuid);\n\n    return slide;\n};\n\n/**\n * Displays an error message\n * @param {HTMLElement} slide The slide to insert the message into.\n * @param {string} tempGuid Temporary GUID assigned to a new image.\n * @param {string} message Resource string key.\n */\nvar showErrorMessage = function (slide, tempGuid, message) {\n    var messageElement = document.createElement(\"div\");\n    messageElement.classList.add(\"kn-slideshow-message\", \"kn-slideshow-message-other\");\n    messageElement.id = messageGuidPrefix + tempGuid;\n    messageElement.innerText = message;\n    slide.appendChild(messageElement);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>This time around, you'll add the <em>createDialogOptions </em>function that the event listener of the image picker link (<em>pickingLink</em>) needed.</p>\n<ol>\n  <li>The function has two main goals: First, to configure the Kentico media selector before it is opened. Second, specify what happens when the user confirms their image selection in the dialog through the <em>\"Select\"</em> button.</li>\n  <li>The second goal can be achieved through the <em>applyCallback </em>property of the options object. In this case, it is defined as an anonymous function, not as a pointer to a standalone function. The pointer would keep the function short and simple, however, you will have to work with the exact <em>slide </em>and <em>pickingLink </em>variables that you could not safely dereference otherwise.</li>\n  <li>If you look closely at the callback body, you'll find the two aforementioned variants of image rendering: client-side and server-side.</li>\n  <li>In the server-side way, you'll just let the page builder <em>updateProperty </em>event dispatch with <em>refreshMarkup </em>set to <em>true</em>. This will force Kentico to invoke your controller action method, having the new image GUID in the widget properties.</li>\n  <li>In the client-side way, you'll still dispatch the event, however, with <em>refreshMarkup </em>as <em>false</em>. Then, you'll use pure JavaScript to dynamically create the new slide with its image without accessing server resources whatsoever. The client-side way is naturally faster, however, due to a small glitch in its codebase, the Swiper.js component fails to properly adjust the size of a slide to that of the image. The <em>swiper.updateSize() </em>call has no effect, despite its description in the <a href=\"https://swiperjs.com/api/#methods\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Swiper.js documentation</a>.&nbsp;</li>\n</ol>","code":{"src":"/** Creates dialog options for the Kentico media library selector\n * @param {HTMLElement} slide The slide to inser the new image into.\n * @param {HTMLElement} pickingLink The link anchor to pick an image.\n * @returns {object} The dialog options object. */\nvar createDialogOptions = function (slide, pickingLink) {\n    var outputOptions = {\n        libraryName: mediaLibraryName,\n        maxFilesLimit: 1,\n        allowedExtensions: allowedImageExtensions,\n        selectedValues: options.propertyValue,\n        applyCallback: function (files) {\n            var newFile = files[0];\n            var childElementIndex = getChildElementIndex(pickingLink.parentElement);\n            imageGuids.splice(childElementIndex, 1, newFile.fileGuid);\n\n            // Image drawing: Client side (begin)\n            dispatchBuilderEvent(imageGuids, false);\n            // Image drawing: Client side (end)\n\n            // Image drawing: Server side (begin)\n            /* dispatchBuilderEvent(imageGuids, true); */\n            // Image drawing: Server side (end)\n\n            // Image drawing: Client side (begin)\n            var imgElement = document.createElement(\"img\");\n            imgElement.classList.add(\"responsive-img\");\n            imgElement.src = newFile.url;\n            imgElement.id = imageGuidPrefix + newFile.fileGuid;\n            slide.appendChild(imgElement);\n            swiper.updateSize();\n            replaceId(slide, slideGuidPrefix + newFile.fileGuid);\n            pickingLink.remove();\n            // Image drawing: Client side (end)\n\n            return {\n                closeDialog: true\n            };\n        }\n    };\n\n    return outputOptions;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You'll now create the last three helper functions in the call stack of the <em>addSlide </em>function.</p>\n<ol>\n  <li>In the <em>getChildElementIndex </em>function, you'll use the JavaScript <em>call </em>function to circumvent the inability to find the index of a specific child HTML element.</li>\n  <li>The <em>dispatchBuilderEvent </em>function saves GUIDs of images into the in-memory store of page builder.</li>\n  <li>Lastly, the <em>replaceId </em>function swaps the ID of a given HTML element. In our case, it has been used to replace the temporary ID generated by <em>generateUuid </em>with the GUID of an existing media library file.</li>\n</ol>","code":{"src":"/**\n * Gets the position (index) of a given HTML element in the parent Swiper element.\n * @param {HTMLElement} childElement The HTML element of the child object.\n * @returns {number} The position in the parent Swiper.\n */\nvar getChildElementIndex = function (childElement) {\n    return Array.prototype.slice.call(childElement.parentElement.children)\n        .indexOf(childElement);\n};\n\n/**\n * Dispatches the Kentico page builder event that updates state of the widget in the browser store.\n * @param {string[]} imageGuids The GUIDs of the images in the Swiper object.\n * @param {boolean} refreshMarkup Indicates whether widget markup should be redrawn by the server upon event dispatch.\n */\nvar dispatchBuilderEvent = function (imageGuids, refreshMarkup) {\n    var customEvent = new CustomEvent(\"updateProperty\",\n        {\n            detail: {\n                name: options.propertyName,\n                value: imageGuids,\n                refreshMarkup: refreshMarkup\n            }\n        });\n\n    editor.dispatchEvent(customEvent);\n};\n\n/**\n * Replaces an ID of a given HTML element.\n * @param {HTMLElement} htmlElement The HTML element, which ID should be swapped.\n * @param {string} newId The new ID.\n */\nvar replaceId = function (htmlElement, newId) {\n    htmlElement.id = newId;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>You're now about to implement the last piece of the puzzle: the <em>removeSlide </em>function.</p>\n<ol>\n  <li>It will reside in the same lexical scope as all the previous helper functions.</li>\n  <li>In its body, it first tries to get an index of the currently active slide.</li>\n  <li>It first gets it via <em>swiper.activeSlide</em>. Since Swiper.js generates rich and not quite transparent DOM structures, the function then calls into <em>getChildElementIndex </em>to be sure that it removes the right item in <em>imageGuids</em>.</li>\n  <li>As with the function in the previous step, this one also can redraw the widget either on the server side or entirely client-side.</li>\n</ol>","code":{"src":"/** Removes a slide from the current Swiper object. */\nvar removeSlide = function () {\n    var slideChildElement = swiper.slides[swiper.activeIndex];\n\n    if (slideChildElement) {\n        var childElementIndex = getChildElementIndex(slideChildElement);\n        imageGuids.splice(childElementIndex, 1);\n        swiper.removeSlide(swiper.activeIndex);\n\n        // Image drawing: Client side (begin)\n        dispatchBuilderEvent(imageGuids, false);\n        // Image drawing: Client side (end)\n\n        // Image drawing: Server side (begin)\n        /* dispatchBuilderEvent(imageGuids, true); */\n        // Image drawing: Client side (end)\n    }\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>All that remains to do is to complement the entire code with some CSS styling.</p>\n<ol>\n  <li>In Content &gt; InlineEditors &gt; SlideshowEditor, create a new \"SlideshowEditor\" CSS file.</li>\n  <li>Add the styling according to the snippet.</li>\n</ol>","code":{"src":".kn-slideshow-editor {\n    position: absolute;\n    left: 0;\n    top: 0;\n    z-index: 10000;\n}\n\nul.kn-slideshow-buttons {\n    margin: 2rem;\n}\n\n    ul.kn-slideshow-buttons li {\n        float: left;\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n        ul.kn-slideshow-buttons li button {\n            box-sizing: border-box;\n            cursor: pointer;\n            display: block;\n            font-size: 14px;\n            line-height: 1.33;\n            margin: 0;\n            padding: 15px;\n            text-decoration: none;\n            background-color: #262524;\n            border: 0;\n            color: #fff;\n            height: 50px;\n            min-width: 50px;\n            -webkit-transition: background-color .2s ease-in;\n            transition: background-color .2s ease-in\n        }\n\n.swiper-container {\n    min-height: 20rem;\n    min-width: 20rem;\n}\n\n.kn-slideshow-message-first {\n    margin-top: 8em;\n}\n\n.kn-slideshow-message-other {\n    margin-top: 2em;\n}\n\n.kn-slideshow-message {\n    font-size: 14px;\n    margin-left: auto;\n    margin-right: auto;\n    padding: 10px;\n    text-align: center;\n    width: 50%;\n}","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7415994d-448c-4ee3-8362-16b400297168","_parentId":"47f131ef-0340-4ac2-aa38-0267604baadb","_type":"component","title":"Implementing the inline editor initializer","displayTitle":"Implementing the inline editor initializer"},{"body":"<p>You can now finally test your slideshow widget! If you haven't done that before, you can now create a media library and give your widget a go.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the administrative UI, navigate to <em>Media libraries</em>.</p>\n<ol>\n  <li>Create a new library for your <em>Medio Clinic</em> site.</li>\n  <li>If necessary, assign it proper permissions.</li>\n  <li>Upload all images from <em>MedioClinicStaticAssets.zip &gt; MedioClinicStaticAssets &gt; assets &gt; Landing page photos</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1ecd493c-d5f5-49b1-86a3-a2bb453f7b07/slideshow-testing-1.png","alt":"slideshow-testing-1.png"},"strapline":""},{"title":"","body":"<p>Create a testing page.</p>\n<ol>\n  <li>Back in the <em>Pages </em>application, create a new testing page under <em>Landing pages</em>.</li>\n  <li>Add a new <em>Slideshow </em>widget.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/49c2aa44-a731-46c8-a456-72e7d6bf7a3c/slideshow-testing-2.png","alt":"slideshow-testing-2.png"},"strapline":""},{"title":"","body":"<p>Once that's done, press the plus (+) button to add the first slide.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/2b81d526-75e0-4ea1-ac29-0ddd63c25c96/slideshow-testing-3.png","alt":"slideshow-testing-3.png"},"strapline":""},{"title":"","body":"<p>Test the fail safe mechanism that checks the configuration.</p>\n<p>Without further ado, click <em>Pick a media library image</em>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4b1c686f-3d01-46d3-9a06-e7afd67f1905/slideshow-testing-4.png","alt":"slideshow-testing-4.png"},"strapline":""},{"title":"","body":"<p>You should be presented with a warning message that instructs you to first configure the media library name.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e3c9874d-8dec-4e96-8efd-7a616777d015/slideshow-testing-5.png","alt":"slideshow-testing-5.png"},"strapline":""},{"title":"","body":"<p>You can now add the media library code name in the configuration dialog.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3da44691-ad23-4e7c-837c-8b28c3d942bb/slideshow-testing-6.png","alt":"slideshow-testing-6.png"},"strapline":""},{"title":"","body":"<p>Once that's done, clicking the <em>Pick a media library image</em> again invokes the Kentico media selector.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/99d9f16b-8574-4814-82ff-e23a7d3613d3/slideshow-testing-7.png","alt":"slideshow-testing-7.png"},"strapline":""},{"title":"","body":"<p>Finally, you have your first slide with a media library image in it.</p>\n<p>Now you can play around with other configuration settings.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9e3d7bcb-8e3b-47c4-ba85-e5ba925da4ed/slideshow-testing-8.png","alt":"slideshow-testing-8.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3c9cbe84-b16c-4dbf-9b41-ddcb13d7ab69","_parentId":"34607c36-49dc-45b2-a58b-495820f7cb1b","_type":"component","title":"Testing the slideshow widget","displayTitle":"Testing the slideshow widget"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the proper way of invoking JavaScript scripts from within widget views?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"<script>\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", function () {\n                invokeJavaScriptCode();\n            });\n    } else {\n        invokeJavaScriptCode();\n    }\n</script>","lang":"javascript"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"<script>\n        invokeJavaScriptCode();\n</script>","lang":"javascript"},"feedback":"<p>Scripts invoked from within widgets are not guaranteed to be run at the very end of the page loading process. Thus, a fail safe mechanism with the <em>DOMContentLoaded </em>event needs to be in place.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"<script>\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"Loaded\", function () {\n                invokeJavaScriptCode();\n            });\n    } else {\n        invokeJavaScriptCode();\n    }\n</script>","lang":"javascript"},"feedback":"<p>Scripts invoked from within widgets are not guaranteed to be run at the very end of the page loading process. Thus, a fail safe mechanism with the <em>DOMContentLoaded </em>event needs to be in place.</p>","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"<p>Correct. Scripts invoked from within widgets are not guaranteed to be run at the very end of the page loading process. Thus, a fail safe mechanism with the <em>DOMContentLoaded </em>event needs to be in place.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"750a026c-8358-43bf-9b21-3f0899fb3cc6","_parentId":"c2262104-a037-47d3-84ff-c855a32537a3","_type":"component","title":"Invoking JavaScript in widgets","displayTitle":"Invoking JavaScript in widgets"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the proper way of re-drawing the widget purely on the client side?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"editor.dispatchEvent(new CustomEvent(\"updateProperty\", {\n    detail: {\n        name: options.propertyName,\n        value: newPropertyValue\n    }\n}","lang":"javascript"},"feedback":"<p>The detail property needs to explicitly specify the <em>refreshMarkup </em>boolean value to <em>false</em>, since it is optional and <em>true </em>by default.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"editor.dispatchEvent(new CustomEvent(\"updateProperty\", {\n    detail: {\n        name: options.propertyName,\n        value: newPropertyValue,\n        refreshMarkup: false\n    }\n}","lang":"javascript"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Good! The detail property needs to explicitly specify the <em>refreshMarkup </em>boolean value to <em>false</em>, since it is optional and <em>true </em>by default.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"874f88f7-1db3-4bce-b794-29a9136df74b","_parentId":"c2262104-a037-47d3-84ff-c855a32537a3","_type":"component","title":"Re-drawing of widgets","displayTitle":"Re-drawing of widgets"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Is there a Kentico API that provides a unified way to create JavaScript objects for both display mode and edit mode?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Yes, there is a window.kentico.createUbiquitousObject function that accepts an arbitrary anonymous factory function. Then, in the scope of the window.kentico.pageBuilder.registerInlineEditor() call, developers may access the objects via options.ubiquitousObjectCollection.</p>","_shouldBeSelected":false,"feedback":"<p>There is no such feature in Kentico yet. However, having such built-in feature would not add much value as there's a quick and easy way of doing this with just a small amount of code. The code comprises of a simple JavaScript namespace that registers references to objects produced during the life cycle of the inline editor's partial view, and provides them to the initialization code that runs in the scope of window.kentico.pageBuilder.registerInlineEditor().</p>"},{"text":"<p>There is no such feature in Kentico yet. However, having such built-in feature would not add much value as there's quick and easy way of doing this with just a small amount of code. The code comprises of a simple JavaScript namespace that registers references to objects produced during the life cycle of the inline editor's partial view, and provides them to the initialization code that runs in the scope of window.kentico.pageBuilder.registerInlineEditor().</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Great! You've learned the best practice well. Although there is no built-in feature to create JavaScript objects for both display mode and edit mode, developers don't have to factor them twice.</p>\n<p>The solution is a simple JavaScript namespace that registers references to objects produced during the life cycle of the inline editor's partial view, and provides them to the initialization code that runs in the scope of window.kentico.pageBuilder.registerInlineEditor().</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"f8e73f70-f4bd-4416-8962-d07b18c3415e","_parentId":"c2262104-a037-47d3-84ff-c855a32537a3","_type":"component","title":"JavaScript objects in display mode and edit mode","displayTitle":"JavaScript objects in display mode and edit mode"},{"body":"<p>In this page, you've completed your third and last widget. Above all, you've learned how to supply additional configuration on top of what the <em>options </em>object in the <em>registerInlineEditor </em>call provides. Also, you've tried saving not only a solitary object into the widget properties but an array of them. Then, you've learned how to support both the display mode and edit mode of a widget with a custom JavaScript namespace. Last but not least, to save you from humongous coding, you've incorporated the stock Kentico media library selector into your widget.</p>\n<p>If your hands need some rest, you'll enjoy the next page. It will be slightly more theoretical. It will also conclude the first half of this course module.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"c1dc463d-2bbf-4435-be0f-89d0df45624b","_parentId":"60360b9d-5aac-42b6-9bc8-6a7177ca06fa","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to localize the builder-enabled pages</li>\n  <li>How to localize artifacts of page builder</li>\n  <li>How these pages behave in workflows</li>\n  <li>How to personalize builder-enabled pages</li>\n</ul>\n<p>You will work with:</p>\n<ul>\n  <li>The various parts of the source code that support translations</li>\n  <li>The Localization application in Kentico</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"87a50e21-dbb9-48df-ab45-6de6714f764e","_parentId":"90dd2dee-3cad-494a-8278-2062bc902046","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>The first part of this page will be dedicated to localization. First, you’ll make provisions to localize the content, then, you’ll localize the UI of page builder artifacts that you’ve created.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"efbd8afa-cddf-4548-9bea-e30c15512df7","_parentId":"c26fc50c-4389-43e1-bbab-fb46cdb52c20","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>When it comes to <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">localization</a>, the contents of the pages can be divided into page field data, and page builder data.</p>\n<p>You may recall what we’ve stated before: Builder-enabled pages are ordinary Kentico pages, enriched with page builder features. Their standard properties were not hurt by the introduction of page builder.</p>\n<p>Therefore, the page field data can be translated in exactly the same way as before. The technical underpinnings of localization haven’t been changed either.</p>\n<figure data-asset-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\" data-image-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/15f15132-08e0-4a81-9d66-639d887487a3/011.png\" data-asset-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\" data-image-id=\"c45778d4-cd59-4002-b82b-c6c5b7018bd0\" alt=\"\"></figure>\n<figure data-asset-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\" data-image-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/bbdb042e-d373-4130-97d5-821470b09107/012.png\" data-asset-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\" data-image-id=\"65fe6f48-7773-4cb7-a97c-4402d38d5848\" alt=\"\"></figure>\n<p><br></p>\n<p>You also may recall that the whole state of a widget instance is stored in the <em>CMS_Document</em> table. The placement in the <em>CMS_Document</em> table also means that content editors may localize the texts and configuration of widgets in the same way.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"165d198a-ac60-4f11-93e7-464ff88d4e32","_parentId":"39cba046-f642-49cc-8f54-95d3a7dc7b23","_type":"component","title":"Theory: Localization of builder-enabled pages","displayTitle":"Theory: Localization of builder-enabled pages"},{"body":"<p>In this short task:</p>\n<ul>\n  <li>If you haven’t created any landing pages yet, create one now.</li>\n  <li>Translate the contents of the <em>“Landing page name”</em> page field.</li>\n  <li>Add a text widget and translate its contents too.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"07eccdbc-c64d-4874-b0c9-37c07ab65b4d","_parentId":"7a856e80-2e52-414b-9c7f-96696a829ce9","_type":"component","title":"Task: Localization of builder-enabled pages","displayTitle":"Task: Localization of builder-enabled pages"},{"body":"<p>In this demo, you'll translate the landing page.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create a landing page.</p>\n<ol>\n  <li>In the <em>Pages</em> application of the administration interface, create a new page of type <em>Landing page section</em>.</li>\n  <li>In the section, create a page of type <em>Landing page</em>.</li>\n  <li>Fill the <em>Landing page name</em> field with text in the English language.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ba71f5b5-2fc6-41c4-8f15-c2ef40f1f709/015.png","alt":"015.png"},"strapline":""},{"title":"","body":"<p>Add a text widget.</p>\n<ol>\n  <li>Add a text widget into the default section of the page.</li>\n  <li>Type in a caption for the page.</li>\n  <li>Select the whole text and format it as <em>H1</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/2453e76f-8665-4bf2-a8f6-dede27fbce65/014.png","alt":"014.png"},"strapline":""},{"title":"","body":"<p>Add a Spanish culture version.</p>\n<ol>\n  <li>Go to the <em>Languages</em> tab and create the Spanish version with the little <em>plus</em> sign in the left end of the row.</li>\n  <li>Let Kentico copy the English contents into the Spanish culture version.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/af5cb091-e822-42ba-a462-411563bbbab6/011.png","alt":"011.png"},"strapline":""},{"title":"","body":"<p>Translate the page field.</p>\n<ol>\n  <li>In the <em>Content</em> tab, translate the <em>Landing page name</em> field.</li>\n  <li>Save the page.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6a66caf8-8b4c-4b98-a282-40fec3b9eb86/012.png","alt":"012.png"},"strapline":""},{"title":"","body":"<p>Translate the widget text.</p>\n<ol>\n  <li>In the <em>Page</em> tab, replace the text of the text widget with a Spanish translation.</li>\n  <li>Save the page.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/15da8ab1-522b-4dd0-9aa5-65f6926a3805/013.png","alt":"013.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5e8f1f14-2b64-4c4c-88e6-a8b33bc8e791","_parentId":"d491fd90-807f-4f21-883d-6c7196f9caa2","_type":"component","title":"Demo: Localization of builder-enabled pages","displayTitle":"Demo: Localization of builder-enabled pages"},{"body":"<div class=\"infobox idea\"><p>The whole state of all the widgets is saved separately for English and Spanish culture versions. Therefore, we recommend creating the page structure with page sections first, and then creating the culture versions of the page. This will save you time spent by re-creating the structure multiple times.</p></div>\n<div class=\"infobox warning\"><p>The GUIDs of page attachments have different values in the contexts of different culture versions of the page. If you happen to be utilizing attachments in your widgets, you won't be able to reuse them across culture versions.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"84aa78c6-4b93-472a-92e1-f43fe5446b9b","_parentId":"a418e03a-a98a-468e-9d71-ba51d46628c9","_type":"component","title":"Side notes","displayTitle":"Side notes"},{"body":"<p>In the previous pages of the course, we instructed you to register page sections and widgets. In these registration attributes, you’ve hard-coded the section or widget names and descriptions.</p>\n<p>You also added string literals into various places in the source code.</p>\n<p>These literals can also be localized.</p>\n<h4>Data location</h4>\n<p>The first question that comes to mind when thinking of localization is <strong>where</strong> the localized data comes from.</p>\n<p>As a quick refresher, the localized texts can be <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/working-with-resource-strings\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">stored</a> in two following ways in Kentico:</p>\n<ul>\n  <li>In .resx files in your MVC app’s source code</li>\n  <li>In the Kentico database, accessible via the <em>Localization</em> application</li>\n</ul>\n<p>The way the texts are identified is the same in both the .resx files and the <em>Localization</em> application. Each piece of reusable text has its key and several values (one value per culture).</p>\n<div class=\"infobox note\"><p>Both ways have their pros and cons.</p>\n<p>While the texts in the database can be easily managed in the <em>Localization</em> application, they fall short when it comes to portability of the data. For instance, if you plan on distributing your widgets in the company (or publicly), your best bet is to place the UI texts into .resx files, not into the database.</p></div>\n<h4>Implementation</h4>\n<p>Another arising question is <strong>how</strong> you go about translating the texts in the source code.</p>\n<p>When page builder and form builder artifacts are <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components#LocalizingMVCbuildercomponents-Localizingbuildercomponentmetadata\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">registered in the system</a>, their metadata (e.g., names and descriptions) can be translated by replacing the original string literals with <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-text-fields\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">macro expressions</a>. The format consists of curly braces and a dollar sign. Like so:</p>\n<pre><code class=\"language-csharp\">\"{$KeyOfTranslatedText$}\"</code></pre>\n<p>In the case of widget registration, the result might look like the following:</p>\n<pre><code class=\"language-csharp\">[assembly: RegisterWidget(\n\t\"MyWidget\", \n\ttypeof(MyWidget), \n\t\"{$Widget.MyWidget.Name$}\", \n\tDescription = \"{$Widget.MyWidget.Description$}\", \n\tIconClass = \"icon-carousel\")]</code></pre>\n<p>In <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">other cases in your server-side code</a>, you can easily call methods in the <em>CMS.Helpers.ResHelper</em> static class. The class is capable of retrieving the localized texts from <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/working-with-resource-strings\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">both the .resx files and the database</a>.</p>\n<p>The <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components#LocalizingMVCbuildercomponents-Localizinginlineeditorscripts\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript files of inline editors</a> can also leverage the localization capabilities of Kentico.</p>\n<p>Translation can be done via the <em>options</em> object in the <em>Init</em>, <em>destroy</em>, <em>dragStart</em>, and <em>drop</em> functions. The <em>options</em> object exposes the <em>localizationService</em> property with its <em>getString</em> method. The method takes just the key of the translated text as a parameter and returns the version of the current culture.</p>\n<p>In rare cases where the <em>options</em> object is not available, you may reach the data of the localization service by calling into a <em>window.localization.strings[]</em> array. You can use the resource key of the resource string as the array entry accessor.</p>\n<div class=\"infobox note\"><p>When localizing builder artifact metadata and partial views, both .resx files and the database can serve as the source of data.</p>\n<p>However, in inline editor JavaScript files, the only option is .resx files.</p></div>\n<div class=\"infobox idea\"><p>Putting string literals into .resx files (or the database) also reduces the need to compile the app after each text revision.</p></div>\n<p>As far as file storage is concerned, you can place your .resx files into either the <em>App_Data &gt; Global &gt; Resources </em>folder or, into <em>App_Data &gt; [site name] &gt; Resources</em>. The name of the file is not significant, however, we recommend having a naming convention.</p>\n<div class=\"infobox note\"><p>Translation from the default language into other languages is done simply by creating subfolders in the <em>App_Data &gt; Global &gt; Resources</em> folder (or <em>App_Data &gt; [site name] &gt; Resources</em>, respectively). Subfolders, named after language codes, may contain .resx files in the same way as the parent folder.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a837c2f1-abe8-49a6-9f19-260ee2d1751e","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Theory: Localizing the UI of page builder","displayTitle":"Theory: Localizing the UI of page builder"},{"body":"<p>In this task, your goal is to:</p>\n<ul>\n  <li>Choose the source of data for translated texts</li>\n  <li>Localize the page section and widget metadata</li>\n  <li>Localize the texts used in partial views of page sections, widgets and inline editors</li>\n  <li>Localize the texts used in the inline editor JavaScript files</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"afb02802-cd9f-44af-8c7b-86987af83486","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Task: Localizing the UI of page builder artifacts","displayTitle":"Task: Localizing the UI of page builder artifacts"},{"body":"<p>In the <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Medio Clinic website</a>, we’ve decided to take full advantage of the database storage. The content editors can therefore freely alter the UI texts via the Localization application. Only a small part of the texts is stored in .resx files, due to the front-end nature of inline editors.</p>\n<p>In the following series of steps, you’ll go through the existing code base, and you’ll replace the hard-coded texts with expressions that retrieve the localized strings from the database (and .resx files, respectively).</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let's start with the metadata of registered sections and the text widget.</p>\n<ol>\n  <li>Open <em>App_Start &gt; PageBuilderComponentRegister.cs</em>.</li>\n  <li>In each of the assembly-level attributes, replace the user-friendly text in the <em>name </em>parameter with a localization macro.</li>\n  <li>We recommend you settle with a structured approach when assigning keys to resource strings.</li>\n  <li>In our GitHub repository, we use the <em>\"{$ArtifactType.Codename.ResourceType$}\"</em> convention, e.g., <em>\"{$Section.SingleColumn.Name$}\"</em>.</li>\n  <li>Copy the user-friendly texts into resource strings in the <em>Localization </em>application.</li>\n  <li>Do the same with the <em>Description </em>property.</li>\n</ol>","code":{"src":"[assembly: RegisterSection(\n    \"MedioClinic.Section.SingleColumn\", \n    \"{$Section.SingleColumn.Name$}\", \n    customViewName: \"Sections/_SingleColumnSection\", \n    Description = \"{$Section.SingleColumn.Description$}\", \n    IconClass = \"icon-square\")]\n\n[assembly: RegisterSection(\n    \"MedioClinic.Section.TwoColumn\", \n    \"{$Section.TwoColumn.Name$}\", \n    propertiesType: typeof(MedioClinic.Models.Sections.TwoColumnSectionProperties),\n    customViewName: \"Sections/_TwoColumnSection\",\n    Description = \"{$Section.TwoColumn.Description$}\", \n    IconClass = \"icon-l-cols-2\")]\n\n[assembly: RegisterWidget(\n    \"MedioClinic.Widget.Text\",\n    \"{$Widget.Text.Name$}\",\n    propertiesType: typeof(MedioClinic.Models.Widgets.TextWidgetProperties),\n    customViewName: \"Widgets/_TextWidget\",\n    Description = \"{$Widget.Text.Description$}\",\n    IconClass = \"icon-l-text\")]","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Since your two-column section uses a configuration dialog, you can localize it too.</p>\n<ol>\n  <li>In <em>Models &gt; Sections</em>, open <em>TwoColumnSectionProperties.cs</em>.</li>\n  <li>Transfer the <em>Label </em>and <em>ExplanationText </em>texts into the Localization application, whereby replacing them with localization macros.</li>\n  <li>Create the resource keys according to the same naming convention as before.</li>\n</ol>","code":{"src":"        [EditingComponent(\n            IntInputComponent.IDENTIFIER, \n            DefaultValue = 6, \n            Label = \"{$Section.TwoColumn.Label$}\", \n            ExplanationText = \"{$Section.TwoColumn.ExplanationText$}\")]\n        public int LeftColumnWidth { get; set; }","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Repeat the process with widget controllers.</p>\n<ol>\n  <li>In the <em>Controllers &gt; Widgets &gt; ImageWidgetController.cs</em> file, locate the assembly-level attribute expression in the top part.</li>\n  <li>Copy the name text into a new resource string in the <em>Localization </em>application.</li>\n  <li>Replace the texts in the code file with resource keys.</li>\n  <li>Do the same sequence of steps for the <em>Description </em>property.</li>\n</ol>\n<p>Do the same kind of change in <em>SlideshowWidgetController.cs</em>.</p>","code":{"src":"[assembly: RegisterWidget(\n    \"MedioClinic.Widget.Image\",\n    typeof(ImageWidgetController),\n    \"{$Widget.Image.Name$}\",\n    Description = \"{$Widget.Image.Description$}\",\n    IconClass = \"icon-picture\")]","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Speaking of the image widget, you can also localize its configuration dialog.</p>\n<ol>\n  <li>In <em>Models &gt; Widgets &gt; ImageWidget</em>, open <em>ImageWidgetProperties.cs</em>.</li>\n  <li>Localize the <em>Label </em>property of the <em>EditingComponent </em>attribute.</li>\n</ol>","code":{"src":"[EditingComponent(TextInputComponent.IDENTIFIER, Label = \"{$Widget.MediaLibraryName$}\")]\npublic string MediaLibraryName { get; set; }","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this turn, localize the error message in the widget's view file.</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; Widgets</em>, open <em>_ImageWidget.cshtml</em>.</li>\n  <li>Locate the code block that evaluates the <em>HasImage </em>model property.</li>\n  <li>Use the Html.Localize method to pull the translated error message from the database.</li>\n</ol>","code":{"src":"if (!string.IsNullOrEmpty(Model.ImageUrl))\n{\n    var imageUrl = Url.KenticoImageUrl(Model.ImageUrl);\n    <img src=\"@Html.Raw(imageUrl)\" class=\"responsive-img\" />\n}\nelse\n{\n    <div class=\"dz-message\">@Html.Localize(\"Widget.ImageNoLongerExists\")</div>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Previously, you also used a string literal in the image widget's inline editor. Let’s localize it too.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; InlineEditors &gt; _ImageUploaderEditor.cshtml</em> file, locate the using-statement that draws mandatory pieces of the editor's markup.</li>\n  <li>Localize the <em>\"Drop image here ...\"</em> text. However, this time around, you’ll want to put the string into a .resx file. The text is related to the Dropzone JavaScript component. As such, its resources (at least most of them) will be operated on from JavaScript code. This tells us to keep them all in a place where JavaScript can reach for localization: in .resx files.</li>\n  <li>Go to <em>App_Data &gt; Global &gt; Resources</em>, and create a new <em>\"MedioClinic.resx\"</em> file.</li>\n  <li>Open the file using the standard Visual Studio resource editor and make sure <em>No code generation</em> is selected in the <em>Access Modifier</em> dropdown list.</li>\n  <li>In the file, create a new record with an <em>“ImageUploader.Dropzone.DropText”</em> key, as seen in the code snippet.</li>\n  <li>Replace the using-statement with the <em>Html.Localize()</em> helper method call.</li>\n  <li>You can now save and close the view file.</li>\n  <li>Leave the <em>MedioClinic.resx</em> file open for future edits.</li>\n</ol>","code":{"src":"@using (Html.Kentico().BeginInlineEditor(\"image-uploader-editor\", Model.PropertyName,\n    new\n    {\n        @class = \"kn-image-uploader-editor\",\n        data_upload_url = GetActionUrl().ToString(),\n        data_allowed_image_extensions = string.Join(\",\", Model.MediaLibraryViewModel.AllowedImageExtensions)\n    }))\n{\n    <div class=\"@GetContainerClass()\">\n        <div class=\"dz-uploader\">\n            <div class=\"dz-message top\">\n                @Html.Raw(Html.Localize(\"ImageUploader.Dropzone.DropText\"))\n            </div>\n        </div>\n    </div>\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>To finish work on the static image widget, localize its JavaScript code.</p>\n<ol>\n  <li>Open the <em>Content &gt; InlineEditors &gt; ImageUploaderEditor &gt; image-uploader-editor.js</em> file.</li>\n  <li>Locate the <em>dictInvalidFileType</em> property in the statement that factors a new <em>Dropzone</em> object.</li>\n  <li>Copy the message into a new <em>“InlineEditors.Dropzone.InvalidFileType”</em> record in the <em>MedioClinic.resx</em> file that you left a while ago.</li>\n  <li>Back in the <em>image-uploader-editor.js</em> file, replace the message literal with a call to <em>“options.localizationService.getString()”</em>, as seen in the code snippet.</li>\n</ol>","code":{"src":"var dropzone = new Dropzone(zone, {\n    acceptedFiles: editor.getAttribute(\"data-allowed-image-extensions\"),\n        maxFiles: 1,\n        url: editor.getAttribute(\"data-upload-url\"),\n        createImageThumbnails: false,\n        clickable: clickable,\n        dictInvalidFileType: options.localizationService.getString(\n            \"ImageUploader.Dropzone.InvalidFileType\")\n});","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In the same file, localize the error handling logic.</p>\n<ol>\n  <li>Locate the <em>processErrors </em>inner function.</li>\n  <li>Populate the <em>errorMessage </em>variable with calls to the localization service, as seen in the snippet.</li>\n</ol>","code":{"src":"var processErrors = function (statusCode, statusText) {\n    var errorFlag = \"error\";\n    var errorMessage = \"\";\n\n    if (statusCode >= 500) {\n        errorMessage = options.localizationService.getString(\"ImageUploader.Dropzone.UploadFailed\");\n    } else if (statusCode === 422) {\n        errorMessage = options.localizationService.getString(\"ImageUploader.Dropzone.UploadUnprocessable\");\n    } else {\n        errorMessage = options.localizationService.getString(\"ImageUploader.Dropzone.UploadUnknownError\");\n    }\n\n    errorMessage += options.localizationService.getString(\"ImageUploader.Dropzone.Details\") + statusText;\n    window.medioClinic.showMessage(errorMessage, errorFlag);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Let's now get back to the slideshow widget. In this step, localize the labels of its configuration dialog.</p>\n<ol>\n  <li>Open the <em>Models &gt; Widgets &gt; SlideshowWidget &gt; SlideshowWidgetProperties.cs</em> file.</li>\n  <li>Copy the labels into database resource strings in the <em>Localization </em>application.</li>\n  <li>Use the keys found in the code snippet.</li>\n  <li>You can replace the whole code of the properties class with the code snippet.</li>\n</ol>","code":{"src":"public class SlideshowWidgetProperties : IWidgetProperties\n{\n    public Guid[] ImageGuids { get; set; }\n\n    [EditingComponent(TextInputComponent.IDENTIFIER, Label = \"{$Widget.MediaLibraryName$}\", Order = 1)]\n    public string MediaLibraryName { get; set; }\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.TransitionDelay$}\", Order = 2)]\n    public int TransitionDelay { get; set; } = 5000;\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.TransitionSpeed$}\", Order = 3)]\n    public int TransitionSpeed { get; set; } = 300;\n\n    [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.DisplayArrowSigns$}\", Order = 4)]\n    public bool DisplayArrowSigns { get; set; } = true;\n\n    [EditingComponent(CheckBoxComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.EnforceDimensions$}\", Order = 5)]\n    public bool EnforceDimensions { get; set; }\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.Width$}\", Order = 6)]\n    public int Width { get; set; }\n\n    [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$Widget.Slideshow.Height$}\", Order = 7)]\n    public int Height { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now finish the localization process in the slideshow inline editor’s JavaScript file.</p>\n<ol>\n  <li>Open the <em>Content &gt; InlineEditors &gt; SlideshowEditor &gt; slideshow -editor.js</em> file.</li>\n  <li>Locate the <em>buildSlideMarkup() </em>call in the statement that produces the <em>markup </em>local variable.</li>\n  <li>Replace the literal with a call to <em>options.localizationService.getString()</em>, in the same way as you did in the static image widget.</li>\n  <li>Then, localize the literal in the <em>showErrorMessage() </em>call below.</li>\n</ol>","code":{"src":"var addSlide = function () {\n    var tempGuid = generateUuid();\n\n    var markup =\n        buildSlideMarkup(\n            tempGuid,\n            options.localizationService.getString(\"SlideshowEditor.PickImage\"));\n\n    var slide = createNewSlide(swiper, imageGuids, tempGuid, markup);\n    var pickingLink = slide.querySelector(\"div.kn-slideshow-message\");\n\n    pickingLink.addEventListener(\"click\", function () {\n        if (!mediaLibraryName) {\n            showErrorMessage(slide, tempGuid,\n                options.localizationService.getString(\"SlideshowEditor.NoLibrarySpecified\"));\n        } else {\n            var dialogOptions = createDialogOptions(slide, pickingLink);\n            window.kentico.modalDialog.mediaFilesSelector.open(dialogOptions);\n        }\n    });\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"34f83bcb-6652-46fa-a251-666b754e4848","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Demo: Localizing the UI of page builder artifacts","displayTitle":"Demo: Localizing the UI of page builder artifacts"},{"body":"<p>Great! You have prepared the project to be localized to Spanish, as well as any other language that you add later.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"47c44bd1-02d0-4524-aa6d-9dbbc093bd5f","_parentId":"b04b4c9e-de2d-4864-8e14-c28dfc05e4d3","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>The content of widgets and sections is included within the scope of <a href=\"https://docs.kentico.com/k12sp/managing-website-content/working-with-pages/using-workflows\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">workflow</a>.</p>\n<p>Editing of widgets is restricted by the rules of the defined workflow steps.</p>\n<p>Content changes do not appear on the live site until the page is published (after going through the workflow approval process).</p>\n<p>The system tracks saved widget changes as part of page versioning.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bbc796ba-3185-4561-9e1f-014d763d25d9","_parentId":"dcbc0e04-4c2d-4455-8e63-870342323557","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>In this short demo, you’ll create a user account, add it into a newly-created approver role, and give this role permissions to approve publishing of pages within a workflow.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the user account.</p>\n<p>1. In the administration interface, go to the <em>Users</em> application and create a new user.</p>\n<p>Give the user a user name and a full name. That should be enough for the purposes of this demo.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8701ca44-b9d7-4d8c-b59d-390f7cdd40ee/019.png","alt":"019.png"},"strapline":""},{"title":"","body":"<p>Create the approvers role.</p>\n<p>1. Go to the <em>Roles</em> application and create a new role.</p>\n<p>2. Call the role <em>“Content approvers”</em>.</p>\n<p>Assign the new user to this role on the <em>Users</em> tab.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a75cfddf-4c04-42a4-a4a0-459f612fc4f6/020.png","alt":"020.png"},"strapline":""},{"title":"","body":"<p>Give the role appropriate permissions.</p>\n<ol>\n  <li>Switch to the <em>Permissions</em> tab.</li>\n  <li>In the top part of the page, select <em>Module</em>, and <em>Content</em>.</li>\n  <li>Select the checkboxes according to the screenshot.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/786e3b5c-3464-461f-bac7-e9c1c2dc0a6d/026.png","alt":"026.png"},"strapline":""},{"title":"","body":"<p>Create the approval workflow.</p>\n<p>1. Go to the Workflows application and create a new basic workflow.</p>\n<p>Call the workflow <em>“Landing page workflow”</em>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e584002d-bf95-47bc-889b-031448f77e7d/016.png","alt":"016.png"},"strapline":""},{"title":"","body":"<p>Add the approval step to the workflow.</p>\n<ol>\n  <li>Switch to the <em>Steps</em> tab.</li>\n  <li>Add a new workflow step.</li>\n  <li>Call it <em>“Approval”</em>.</li>\n  <li>Finish the creation of the new step.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/7d03f996-f468-4b01-b6ba-108ad1231c5d/017.png","alt":"017.png"},"strapline":""},{"title":"","body":"<p>Allow only content approvers to work with the step.</p>\n<ol>\n  <li>Switch to the <em>Security</em> tab.</li>\n  <li>In the <em>Roles which can approve, reject and make changes</em> section of the page, select <em>Only listed</em>.</li>\n  <li>Click <em>Add roles</em> to add the <em>Content approvers</em> role.</li>\n  <li>Navigate up one level, to the workflow edit page.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8cc35ae9-9195-4867-9666-9d70f3c22344/021.png","alt":"021.png"},"strapline":""},{"title":"","body":"<p>Set the scope of the workflow.</p>\n<ol>\n  <li>Switch to the <em>Scope</em> tab.</li>\n  <li>Click <em>Select</em> in the <em>This scope covers</em> section of the page.</li>\n  <li>In the modal dialog, select the section that contains the landing pages.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c09c6aff-97db-48cb-9708-f5cf7759f91c/022.png","alt":"022.png"},"strapline":""},{"title":"","body":"<p>Test the whole setup.</p>\n<ol>\n  <li>Go back to the <em>Pages</em> application.</li>\n  <li>Click into any widget and make an update.</li>\n  <li>(In the landing page in the screenshot, we’ve swapped <em>“March”</em> with <em>“April”</em>.)</li>\n  <li>Save the page.</li>\n  <li>Submit the page for approval.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f8f9a735-9ddf-4491-b337-7866f8e2696f/025.png","alt":"025.png"},"strapline":""},{"title":"","body":"<p>Impersonate the user assigned to the <em>Content approvers</em> role.</p>\n<ol>\n  <li>In the top right corner of the administration interface, click the user menu.</li>\n  <li>Click <em>Impersonate</em>.</li>\n  <li>Select the user you’ve created earlier.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a50f9f44-8484-461b-9b6c-417168cb3652/024.png","alt":"024.png"},"strapline":""},{"title":"","body":"<p>Approve the page for publishing.</p>\n<ol>\n  <li>In the <em>Pages</em> application, navigate to the page in the content tree.</li>\n  <li>In the Page tab, hit <em>Publish</em>.</li>\n  <li>From this moment on, the changes will be visible on the live site.</li>\n  <li>You can test it directly by switching to the <em>Properties &gt; General</em> tab, and clicking the <em>Live URL</em> link.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c33a563e-6660-412a-aeb5-e0202cb14124/027.png","alt":"027.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2a90caa9-4492-414d-9b8c-a3d4f49a7fb6","_parentId":"ad2642e0-d87b-4b80-bfea-091f8d2113ea","_type":"component","title":"Demo: Applying workflow to a builder-enabled page","displayTitle":"Demo: Applying workflow to a builder-enabled page"},{"body":"<p>As you can see, workflow and versioning work with builder-enabled pages just like with any other pages.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"ddf75a07-2c2a-496e-9b6b-4bb0a37f18b2","_parentId":"78ebe72f-c8cc-41db-b83a-5f78b8864bf6","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this short chapter, we’ll just touch the basics of personalization of builder-enabled pages. Personalization belongs into the large topic of online marketing in Kentico. Online marketing features will be dealt with in a standalone future module of this course.</p>\n<p>A great description of the personalization capabilities can be found in the <a href=\"https://docs.kentico.com/k12sp/on-line-marketing-features/managing-your-on-line-marketing-features/personalizing-widgets-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>. However, if you don’t need the full details, we’ve prepared an excerpt of it.</p>\n<h3>Personalization variants</h3>\n<p>The basics are that Kentico allows creation of variants of widgets. These variants are called personalization variants. Different variants are displayed to site visitors who fulfill certain criteria.</p>\n<p>The criteria are called personalization conditions and are based on condition types.</p>\n<p>When the content editor wants to create a variant, they first choose what condition type governs the rendering of the variants.</p>\n<figure data-asset-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\" data-image-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1fea87d7-2081-4582-8667-39f02a387d3f/029.png\" data-asset-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\" data-image-id=\"9c97390d-2152-4931-a844-efa1eec11fe1\" alt=\"\"></figure>\n<p><br></p>\n<p>Then, based on the data provided by the condition type, they create the widget variant itself.</p>\n<figure data-asset-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\" data-image-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e0217774-8899-4285-852c-d3327df41e41/030.png\" data-asset-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\" data-image-id=\"61b4462b-97d6-4d67-b615-3b4efb4cc3c6\" alt=\"\"></figure>\n<p><br></p>\n<p>While the creation of personalization variants can easily be done by content editors, personalization condition types are the developer’s job.</p>\n<p>If you don’t want to wait and are eager to develop personalization condition types, you’re welcome to explore the <a href=\"https://docs.kentico.com/k12sp/on-line-marketing-features/configuring-and-customizing-your-on-line-marketing-features/content-personalization-on-mvc-sites/developing-personalization-condition-types\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"bc29203c-e404-40e1-a468-7c57ae09d38f","_parentId":"c58627aa-5c2b-4a47-86ad-1f11bb8ec31e","_type":"component","title":"Theory","displayTitle":"Theory"},{"body":"<p>In this page, you’ve learned how to localize both the content of builder-enabled pages and the UI of page builder artifacts. If you’ve followed the demos, you now have everything set up for translation into Spanish in your Medio Clinic website.</p>\n<p>You also did a small mouse exercise when configuring workflows in the site.</p>\n<p>And finally, we’ve also given you a small teaser for a future module of this course dedicated to online marketing features.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"66b19fa6-a7d8-4938-bd13-184fde04ca90","_parentId":"3d198f63-763a-43c8-9d84-b97736da0809","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How are the widgets localized in Kentico?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>To localize contents of a builder-enabled page, content editors first need to agree upon certain resource keys with developers. Then, they need to localize the contents of pages via the Localization application. The UI of widgets is localized in the very same way.</p>","_shouldBeSelected":false,"feedback":"<p>The contents of builder-enabled pages is localized in the same way as it was done before. Editors simply create a culture variant of a page and write text (or submit the page for translation). The localization of widgets' UI is done in a different way.</p>"},{"text":"<p>The contents of builder-enabled pages is localized in the same way as it was done before. Editors simply create a culture variant of a page and write text (or submit the page for translation). The localization of widgets' UI is done in a different way. The metadata of page builder artifacts can be translated either using the Localization application or via .resx files. UI texts defined in JavaScript code can be translated only through .resx files.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Good! Culture variants of builder-enabled pages are created in the very same way as with traditional Kentico pages. The whole widget state is stored separately for each culture variant of a given widget.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"818cb621-6a91-4117-b3b8-a17bb862eb80","_parentId":"1192c2c1-d366-457e-996c-e52d5c750759","_type":"component","title":"Localizing MVC widgets","displayTitle":"Localizing MVC widgets"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which workflow-related features does Kentico provide in relation to builder-enabled pages?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Editing of pages can be restricted as with traditional Kentico pages. Also, publishing can be gated through workflow. Kentico also tracks versions of builder-enabled pages.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Kentico tracks versions of builder-enabled pages. To allow content editors to restrict editing of builder-enabled pages and approve them for publishing, developers can create custom action workflow steps.</p>","_shouldBeSelected":false,"feedback":"<p>To restrict editing and approve builder-enabled pages for publishing, no coding is necessary.</p>"}],"_feedback":{"title":"","correct":"<p>You've remembered it right. Editing of pages can be restricted as with traditional Kentico pages. Also, publishing can be gated through workflow. Kentico also tracks versions of builder-enabled pages.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"dc6f7cd3-b5bf-4dad-8211-b62d35201b89","_parentId":"1192c2c1-d366-457e-996c-e52d5c750759","_type":"component","title":"Workflows on builder-enabled pages","displayTitle":"Workflows on builder-enabled pages"},{"body":"<p>In this theory page, you will learn:</p>\n<ol>\n  <li>Basic principles of form builder</li>\n  <li>How page builder and form builder work together</li>\n  <li>What the main artifacts of form builder are</li>\n</ol>\n<p>In the next page, you’ll put the theory into practice by creating two form components and a validation rule for the Medio Clinic website.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d6857d2e-ba05-44ad-a804-58fdcf21022b","_parentId":"5e1e3d1e-a8f9-489d-bd8a-6a9d82b86150","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>From the previous pages of this course, you may remember the basic underpinnings of form builder. We’ll recap them here, together with additional useful information and tips.</p>\n<p>Form builder allows content editors to <a href=\"https://docs.kentico.com/k12sp/managing-website-content/forms/composing-forms\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">compose forms</a> without any technical knowledge needed. The forms can be crafted in the <em>Forms</em> application. After a new form has been created, the administration interface presents the user with a few editing tabs, one of them being the <em>Form builder</em> tab. This is where the creative process happens.</p>\n<p>When composing the form, content editors can leverage the habits acquired when working with page builder. The forms are composed of form sections and form components that get placed into them.</p>\n<figure data-asset-id=\"a76ca37c-c85c-45e5-8490-cfb312a90c55\" data-image-id=\"a76ca37c-c85c-45e5-8490-cfb312a90c55\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e79fa86c-e722-4726-8a4d-e3290e4f24fa/form-builder-tab-add-section.png\" data-asset-id=\"a76ca37c-c85c-45e5-8490-cfb312a90c55\" data-image-id=\"a76ca37c-c85c-45e5-8490-cfb312a90c55\" alt=\"\"></figure>\n<p>Form sections highly resemble page sections in page builder. Also, the way form components are placed into them is the same as with widgets in the page builder. Once placed into the form, form components can be moved around freely, exactly as widgets.</p>\n<figure data-asset-id=\"2afef5e3-b107-4d34-83bc-3af6edffc7ab\" data-image-id=\"2afef5e3-b107-4d34-83bc-3af6edffc7ab\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f11150ad-aca0-4534-80a6-06e6b95dc7c4/form-builder-tab-add-component.png\" data-asset-id=\"2afef5e3-b107-4d34-83bc-3af6edffc7ab\" data-image-id=\"2afef5e3-b107-4d34-83bc-3af6edffc7ab\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3f689646-df0f-4c31-8d73-727a1b5eb29c","_parentId":"fd87b2a3-bdb7-4f70-9923-3b71e87c530b","_type":"component","title":"Basic principles of form builder","displayTitle":"Basic principles of form builder"},{"body":"<p>How do form builder and page builder work together? Simply put, forms created in form builder are displayed in the live site through page builder. More specifically, Kentico ships with one built-in widget called <em>Form</em>.</p>\n<figure data-asset-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\" data-image-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/6d2a5caf-1d1a-48dc-8240-28f9f3d08ebc/033.png\" data-asset-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\" data-image-id=\"1ed2eb9d-8edf-4396-be28-b01d5f53011f\" alt=\"\"></figure>\n<p><br></p>\n<p>When placed onto a page in the Pages application, the widget instructs the user to select from forms in a dropdown list.</p>\n<figure data-asset-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\" data-image-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/db9c1349-a334-42b2-a6cf-04681adc82c7/034.png\" data-asset-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\" data-image-id=\"c1e91f43-7621-43f2-bf13-e1543bc3e354\" alt=\"\"></figure>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0b947407-9d92-4ef0-bf38-0201928ffa57","_parentId":"09770c14-fd07-42e6-8130-e508d58940aa","_type":"component","title":"Form builder and page builder coexistence","displayTitle":"Form builder and page builder coexistence"},{"body":"<p>Before we dive into developing with form builder in the next page, we’ll give you a refresher on:</p>\n<ol>\n  <li>What are the artifacts that form builder consists of</li>\n  <li>Which responsibilities they have</li>\n  <li>How they interact with each other</li>\n</ol>\n<p>Kentico offers the possibility of developing the following form builder artifacts:</p>\n<ol>\n  <li>Layouts of <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-custom-form-layouts\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">form sections</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-validation-rules\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">validation rules</a></li>\n  <li>Field <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-visibility-conditions\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">visibility conditions</a></li>\n  <li><a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Form components</a></li>\n</ol>\n<p>Apart from that, it is also possible to <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/customizing-the-form-widget\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">customize the form widget</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"52127c3e-a66f-4759-b9c2-cac10f27bc2c","_parentId":"baf07af8-87a9-4271-b397-a2aa8f1a7b4d","_type":"component","title":"Theory: Form builder artifacts","displayTitle":"Theory: Form builder artifacts"},{"body":"<p>Form sections work in the same way as page sections in page builder. They dictate the looks of a certain portion of the form’s overall layout.</p>\n<p>As with page sections, form sections stack up onto each other in the form. Inside the form section, developers may divide the layout in any way. Ranging from a set of columns to various composite sub-layouts.</p>\n<p>Kentico ships with a <em>Default</em> form section that consists of just a single column.</p>\n<p>A custom form section is implemented via a controller and a partial view. The <strong>controller</strong> doesn’t have to inherit or implement any Kentico functionality. However, it must have an assembly-level attribute that <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-custom-form-layouts#Developingcustomformlayouts-Registeringformsections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">registers the section into the system</a>. The metadata provided in the attribute can be localized using <a href=\"https://docs.kentico.com/k12sp/multilingual-websites/setting-up-a-multilingual-user-interface/localizing-mvc-builder-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">macro expressions</a>.</p>\n<div class=\"infobox note\"><p>At the moment, form sections don't provide the simplified development model that <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-builder-sections#Developingpagebuildersections-Basicsections\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">page sections</a> have.</p></div>\n<p>Apart from registering the section, the controller’s only remaining job is to invoke the partial view.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormSection(\n\t\"MySection\", \n\ttypeof(MyFormSectionController), \n\t\"My section\", \n\tDescription = \"My custom form section layout.\", \n\tIconClass = \"icon-l-cols-2\")]\n\n...\n\npublic class MyFormSectionController : Controller\n{\n\tpublic ActionResult Index()\n\t{\n\t\treturn PartialView(\"FormSectionLayouts/_MySectionLayout\");\n\t}\n}</code></pre>\n<p>The <strong>view</strong> is where the creative process happens. It specifies the markup that surrounds the <strong>widget zones</strong> and contains invocation statements for widget zones.</p>\n<pre><code class=\"language-html\">&lt;div class=\"my-form-section\"&gt;\n\t@Html.Kentico().FormZone()\n&lt;/div&gt;</code></pre>\n<p>The view can be accompanied by CSS and JavaScript files of its own. Kentico bundles and minifies all such files placed under <em>Content &gt; FormSections</em>. The bundle is then used for all builder-enabled pages.</p>\n<p>Form sections don’t communicate with other artifacts in the form builder ecosystem. They only handle the portions of the form layout.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"175effd9-7f0b-4925-b718-c564ec4b6f93","_parentId":"f9520fa0-a2df-469e-9307-e6458bfe0c67","_type":"component","title":"Layouts of form sections","displayTitle":"Layouts of form sections"},{"body":"<p>Validation rules can be assigned by users to any form component in the form that operates on a compatible database field.</p>\n<p><a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-validation-rules\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Validation rules</a> can operate on either just the form field that they’ve been assigned to (basic validation rules), or on a depending form field (field comparison rules).</p>\n<p>In Visual Studio, the validation rule is represented by a <strong>single class</strong>. The class needs to inherit from <em>Kentico.Forms.Web.Mvc.ValidationRule&lt;TValue&gt;</em>. The <em>TValue</em> generic denotes the type of the database field. Validation rules must also be registered in the system via an assembly-level attribute. Additionally, the class must be decorated with <em>System.SerializableAttribute</em>.</p>\n<p>The class may list several configuration properties. When decorated with <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em>, the property becomes visible in the configuration pane of the validation rule on the <em>Form builder</em> tab.</p>\n<p>Apart from the properties, the class may override a <em>GetTitle</em> method. The title constructed in this method will appear in the list of all rules applied to a given form field.</p>\n<p>Most importantly, the class needs to override the <em>Validate</em> method. In this method, configuration input (gathered from content contributors on the <em>Form builder</em> tab), together with the actual form field value (gathered from the site visitor), is evaluated to verify the validity.</p>\n<p>The <strong>field comparison rules</strong> differ in the two ways:</p>\n<ul>\n  <li>They inherit from <em>Kentico.Forms.Web.Mvc.CompareToFieldValidationRule&lt;TValue&gt;</em>.</li>\n  <li>As descendants of this base class, they have access to a <em>DependeeFieldValue</em> property. This property can be used for comparisons in the <em>Validate</em> method mentioned above.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6012727f-3f0f-4bcf-a263-1fca268867ea","_parentId":"42697f75-817a-4c34-8588-d5b820929cd4","_type":"component","title":"Field validation rules","displayTitle":"Field validation rules"},{"body":"<p>Each form field can be assigned a visibility condition that operates on a compatible type. Visibility conditions perform real-time evaluations of whether a given field should be hidden in the form.</p>\n<p><a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/defining-field-visibility-conditions\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Visibility conditions</a> also operate on either a single database field (basic visibility conditions), or on a related field (depending visibility conditions). The conditions also need just one class. They also need to be registered in the system via an assembly-level attribute. As with validation rules, the class needs a <em>System.SerializableAttribute</em> on it.</p>\n<p><strong>Basic visibility conditions</strong> are descendants of <em>Kentico.Forms.Web.Mvc.VisibilityCondition</em>. They can also have configuration properties, in the same way as validations rules can. The conditions must override the <em>IsVisible</em> method of the base class.</p>\n<p>The <em>IsVisible</em> method usually evaluates contextual information about the current site visitor to decide about the visibility of the field.</p>\n<p>The <strong>depending visibility conditions</strong> inherit from <em>Kentico.Forms.Web.Mvc.AnotherFieldVisibilityCondition&lt;TValue&gt;</em>, where <em>TValue</em> denotes the type of the compatible database field. The depending conditions share the same perks as their basic counterparts. On top of that, they have access to the <em>DependeeFieldValue</em> property that represents the form field value which is being compared.</p>\n<div class=\"infobox note\"><p>In addition to visibility conditions, Kentico provides a feature called <a href=\"https://docs.kentico.com/k12sp/managing-website-content/forms/using-smart-fields-in-forms\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Smart fields</a>. Smart fields can also conceal form fields. Hence, the difference between the two features might be blurred on first sight. In simple words, it lies in the moment in time when these features apply. While visibility conditions work in real time, smart fields apply during repeated visits of a given site visitor to the page with the form in question. Simply put, in contrast to fields with visibility conditions, smart fields are hidden or displayed in a way that progressively presents different parts of the form on subsequent visits.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f023517b-4384-4d62-80f3-011ded6204d3","_parentId":"8246d72d-3b0f-4ff2-9065-798d44cdc0d8","_type":"component","title":"Field visibility conditions","displayTitle":"Field visibility conditions"},{"body":"<p>Form components are at the core of form builder. They represent the form fields themselves. By adding instances of form components to the form in the Form builder tab, users create fields.</p>\n<p>Kentico ships with 10 built-in form components:</p>\n<ul>\n  <li><em>Checkbox</em></li>\n  <li><em>Consent agreement</em></li>\n  <li><em>Drop-down list</em></li>\n  <li><em>Email</em></li>\n  <li><em>Numeric input</em></li>\n  <li><em>Radio buttons</em></li>\n  <li><em>reCAPTCHA</em></li>\n  <li><em>Text area</em></li>\n  <li><em>Text input</em></li>\n  <li><em>U.S. phone number</em></li>\n</ul>\n<div class=\"infobox note\"><p>The Kentico 12 Service Pack brought one additional component—File uploader.</p></div>\n<p><br></p>\n<p><a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Form components</a> can be used not only on the <em>Form builder</em> tab. They convey configuration of widgets (in their configuration forms), form validation rules, and visibility conditions. Lastly, form components can be used to configure other form components. In this role, they are called <em>editing components</em>.</p>\n<p>A form component requires two classes:</p>\n<ul>\n  <li>A form component view model</li>\n  <li>A form component properties class</li>\n</ul>\n<p>The first class is the center point. It holds the data of the form field. It also plays a role of the broker between the UI and the database.</p>\n<p>The properties class provides configuration for the form component.</p>\n<p>The UI of the form component is handled with a partial view placed under <em>Views &gt; Shared &gt; FormComponents</em>.&nbsp;</p>\n<h4>Form component view model class</h4>\n<p>This <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components/defining-form-component-properties\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">class</a> must inherit from <em>Kentico.Forms.Web.Mvc.FormComponent&lt;TProperties, TValue&gt;</em>. In this contract, <em>TProperties</em> is the form component properties class, and <em>TValue</em> means the type of the underlying database field.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\n[assembly: RegisterFormComponent(\n\t\"MyFormComponent\", \n\ttypeof(MyFormComponent), \n\t\"My form component\", \n\tDescription = \"My custom form component.\", \n\tIconClass = \"icon-picture\")]\n\n...\n\npublic class MyFormComponent : FormComponent&lt;MyFormComponentProperties, string&gt;\n{\n\t[BindableProperty]\n\tpublic string Text { get; set; } = string.Empty;\n\n\tpublic override string GetValue() =&gt; Text;\n\n\tpublic override void SetValue(string value)\n\t{\n\t\tText = value;\n\t}\n}</code></pre>\n<p>It goes without much saying that this class also requires an assembly-level registration attribute.</p>\n<p>In the body of the class, there might be one or more property members, decorated with <em>Kentico.Forms.Web.Mvc.BindablePropertyAttribute</em>. They contain the data of the form field. Form components—in a close alignment to their name—can therefore be composed of multiple input data (coming from multiple HTML elements). An example of such component is the <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components/example-developing-a-custom-form-component\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">RGB input form component</a> showcased in the Kentico documentation.</p>\n<p>The role of the broker between the UI and the database is accomplished via two methods that must be overridden:</p>\n<ul>\n  <li><em>GetValue</em>, used to retrieve the values from the UI and put them into the database</li>\n  <li><em>SetValue</em>, used to do it the other way around</li>\n</ul>\n<div class=\"infobox note\"><p>These methods were named from the UI perspective, hence such semantics of the&nbsp;<em>SetValue</em>&nbsp;method.</p></div>\n<p>Kentico calls the <em>GetValue</em> method every time the user updates the form fields, not just when the Submit button is pressed. This is due to the visibility conditions that were designed to kick in in real time. The automatic posting can be switched off by overriding the <em>CustomAutoPostHandling</em> boolean property and setting it to <em>false</em>.</p>\n<h4>Form component properties class</h4>\n<p>The <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components/defining-form-component-properties\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">properties class</a> facilitates the configuration of the form component. It must inherit from <em>Kentico.Forms.Web.Mvc.FormComponentProperties&lt;TValue&gt;</em> where <em>TValue</em> means the same thing as in the view model class—the data type of the database field.</p>\n<pre><code class=\"language-csharp\">using Kentico.Forms.Web.Mvc;\n\npublic class MyFormComponentProperties : FormComponentProperties&lt;string&gt;\n{\n\tpublic MyFormComponentProperties() : base(FieldDataType.Text, 200)\n\t{\n\t}\n\n\t[DefaultValueEditingComponent(TextAreaComponent.IDENTIFIER)]\n\tpublic override string DefaultValue { get; set; } = string.Empty;\n\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of rows of the text area\")]\n\t[Required]\n\tpublic int TextAreaRows { get; set; }\n\t\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Number of columns of the text area\")]\n\t[Required]\n\tpublic int TextAreaColumns { get; set; }\n}</code></pre>\n<p>However, to further specify the nature of the <em>TValue</em> data, the class should contain an implicit constructor that in turn calls the base class’ constructor, passing around a <em>CMS.DataEngine.FieldDataType</em> enumeration value as an argument.</p>\n<p>By overriding the <em>DefaultValue</em> property, developers can set the initial value that can be re-configured later by content editors in the <em>Form builder</em> tab.</p>\n<p>Most importantly, the class may contain property members decorated with <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em> and <em>System.ComponentModel.DataAnnotations</em> attributes. This way, other form components can be utilized to configure the current form component (they play the role of an <em>editing component</em>).</p>\n<h4>Form component partial view</h4>\n<p>The partial view needs to be named after the fully-qualified type name of the form component view model class, with an underscore prefix (e.g. <em>“_MedioClinic.FormComponent.MediaLibraryUploader.cshtml”</em>). The naming convention can be <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components#Developingformcomponents-Registeringformcomponents\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">overridden</a> in the registration assembly-level attribute.</p>\n<div class=\"infobox idea\"><p>Since Kentico 12 Service Pack, it is also possible to <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components/filtering-form-components\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">filter form components</a> by adding filter classes into your solution. Filters always accept the built-in <em>Kentico.Forms.Web.Mvc.FormComponents.FormComponentFilterContext </em>object as an input parameter. This context class gives you access to the BizFormInfo object, providing you with all the necessary information to decide if a component should be offered to be added into a certain form.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"97e29eb1-d6fb-456b-b71c-98192d95af1b","_parentId":"46d0fc34-0eca-4f13-b40f-1c219b63ca32","_type":"component","title":"Form components","displayTitle":"Form components"},{"body":"<p>In this page, you’ve learned all the necessary theory. You’ll be able to put it through its paces in the next page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9aaa9830-b2e6-4958-bbd3-bacc035763dd","_parentId":"e6da40c9-61e0-4ef8-b7a5-0864675f5184","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the purpose of the <em>Kentico.Forms.Web.Mvc.EditingComponentAttribute</em> attribute?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The attribute allows the form components to be used as editing components. This way, form components can not only be used in Kentico forms, but they can convey configuration of other form components. They can also be used to configure form validation rules, field visibility conditions, and widgets.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>With the attribute, one can limit the usage of a form component to only certain forms.</p>","_shouldBeSelected":false,"feedback":"<p>The attribute does not serve as means of constraints. Configuration properties of form components, form validation rules, field visibility rules and page builder widgets can be decorated with this attribute. Then, the form component will be rendered automatically in the configuration dialogs.</p>"}],"_feedback":{"title":"","correct":"<p>Right! The attribute allows the form components to be used as editing components. This way, form components can not only be used in Kentico forms, but they can convey configuration of other form components. They can also be used to configure form validation rules, field visibility conditions, and widgets.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"13c9f630-86af-45f5-bed3-68ec68b043bf","_parentId":"008ba931-ce51-44e9-b543-089e7c523418","_type":"component","title":"Form component's attributes","displayTitle":"Form component's attributes"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the purpose of the <em>GetTitle </em>method of the <em>ValidationRule </em>base class?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The method produces a validation error message for the form in the live site.</p>","_shouldBeSelected":false,"feedback":"<p>The method does not deal with validation error messages at all. It provides a summary of the configuration of a validation rule in relation to a specific form component instance.</p>"},{"text":"<p>The method provides a configuration summary to the content editors. This is because there can be multiple validation rules applied to a single form component instance in a form. The summaries help in keeping a good overview of what can be put into a form component in the live site.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. As there can be multiple validation rules applied to a single form component instance, there must be a way of telling the user a summary of what a given validation rule enforces. The method produces such summary.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"395b4a21-42c0-4819-bfa4-5612dfa8dc7b","_parentId":"008ba931-ce51-44e9-b543-089e7c523418","_type":"component","title":"Validation rules base class","displayTitle":"Validation rules base class"},{"body":"<p>In this page, you will:</p>\n<ol>\n  <li>Implement a media library uploader form component</li>\n  <li>Create a complementary media library selector form component</li>\n  <li>Create a form validation rule that checks image dimensions</li>\n</ol>\n<p>You’ll work with:</p>\n<ol>\n  <li>All mandatory form component artifacts, including view models, properties classes, and views</li>\n  <li>Optional form component artifacts as backend controllers and JavaScript logic</li>\n  <li>Form components in the role of <em>editing components</em></li>\n</ol>\n<p>All the three components created in this page will result in the following file uploader form field:</p>\n<figure data-asset-id=\"b71b1911-c130-4888-89a1-003ff12f7512\" data-image-id=\"b71b1911-c130-4888-89a1-003ff12f7512\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/0f482eec-9b13-4157-b31b-1a4750d176cf/form-component-intro.png\" data-asset-id=\"b71b1911-c130-4888-89a1-003ff12f7512\" data-image-id=\"b71b1911-c130-4888-89a1-003ff12f7512\" alt=\"\"></figure>\n<p>The media uploader form component will upload images to a media library that content editors configure on the <em>Form builder</em> tab. They’ll use the media library selector form component to do that. Additionally, they will be able to assign the image dimension validation rule to the media library uploader form component. This rule will check that the uploaded file is an image with dimensions in a range configured on the <em>Form builder</em> tab.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3d6c80e1-05d8-4c61-8554-00534b9e19f9","_parentId":"9c19a9f7-955a-479e-9c29-42d4cd1978b9","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>The order of steps outlined in the introductory chapter was great to explain the relationship between the media library uploader form component and the media library selector form component.</p>\n<p>However, we will swap the ordering now, for two reasons:</p>\n<ol>\n  <li>The simplicity of the media library selection form component makes it great for explaining the basic principles and development techniques</li>\n  <li>It is an <em>editing component</em> of the media library uploader form component (hence, a prerequisite thereof)</li>\n</ol>\n<p>Therefore, we’ll start with the media library selection component first.</p>\n<p>The only objective of this component is to list Kentico media libraries in a dropdown list.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>To achieve that, make use of a more specific base class—the <em>SelectorFormComponent&lt;&gt;</em> class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“FormComponents”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibrarySelection”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibrarySelectionComponent.cs”</em> class file.</li>\n  <li>Insert an assembly-level attribute to register the component, as seen in this code snippet.</li>\n  <li>In the registration attribute, use macro expressions to support translation. Add the descriptions via the <em>Localization</em> application in Kentico.</li>\n  <li>Inherit from <em>Kentico.Forms.Web.Mvc.SelectorFormComponent&lt;TProperties&gt;</em>, instead of just <em>FormComponent&lt;TProperties&gt;</em>. Use <em>“MediaLibrarySelectionProperties”</em> as the constructed generic parameter (implemented in the very next step). The <em>SelectorFormComponent&lt;&gt; </em>class is a descendant of <em>FormComponent&lt;&gt;</em>.</li>\n  <li>This way, you’ll be able to override the <em>GetItems</em> method that was tailored to retrieve sequences of <em>System.Web.Mvc.SelectListItem</em> objects.</li>\n  <li>In the body of the method, call the <a href=\"https://docs.kentico.com/api12/content-management/media-libraries#Medialibraries-Updatingamedialibrary\">CMS.MediaLibrary.MediaLibraryInfoProvider.GetMediaLibraries</a> static method to get the collection of media libraries. Transform each item into the <em>SelectListItem</em> object mentioned above.</li>\n  <li>As a single-statement method, it can be made expression-bodied.</li>\n  <li>Don’t forget to specify the <em>“Identifier”</em> constant that will represent this component in the system.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\n\nusing CMS.MediaLibrary;\nusing CMS.SiteProvider;\nusing Kentico.Forms.Web.Mvc;\n\nusing MedioClinic.Models.FormComponents;\n\n[assembly: RegisterFormComponent(\n    MediaLibrarySelectionComponent.Identifier, \n    typeof(MediaLibrarySelectionComponent), \n    \"{$FormComponent.MediaLibrarySelection.Name$}\", \n    Description = \"{$FormComponent.MediaLibrarySelection.Description$}\", \n    IconClass = \"icon-menu\")]\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibrarySelectionComponent : SelectorFormComponent<MediaLibrarySelectionProperties>\n    {\n        public const string Identifier = \"MedioClinic.FormComponent.MediaLibrarySelection\";\n\n        protected override IEnumerable<SelectListItem> GetItems() => \n            MediaLibraryInfoProvider\n                .GetMediaLibraries()\n                .WhereEquals(\"LibrarySiteID\", SiteContext.CurrentSiteID)\n                .TypedResult\n                .Items\n                .Select(mediaLibraryInfo => new SelectListItem\n                {\n                    Text = mediaLibraryInfo.LibraryDisplayName,\n                    Value = mediaLibraryInfo.LibraryID.ToString()\n                });\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>As form components need their properties companions, add one now.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; FormComponents &gt; MediaLibrarySelection</em>, create a new <em>“MediaLibrarySelectionProperties.cs”</em> class file.</li>\n  <li>In alignment with the view model class, inherit from <em>Kentico.Forms.Web.Mvc.SelectorProperties</em>, not just <em>FormComponentProperties</em>.</li>\n  <li>Leave the body of the class empty.</li>\n</ol>","code":{"src":"using Kentico.Forms.Web.Mvc;\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibrarySelectionProperties : SelectorProperties\n    {\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a partial view of the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared, </em>create a new <em>“FormComponents” </em>subfolder.</li>\n  <li>In that subfolder, create a partial view named in the following way.</li>\n  <li>As a proper partial view, its name should start with an underscore character. Then, add the identifier <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components#Developingformcomponents-Registeringformcomponents\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">used during the registration</a> of the form component in the remaining part of the name.</li>\n  <li>Make the view strongly-typed against <em>MediaLibrarySelectionComponent</em>.</li>\n  <li>Continue by defining the body of the view.</li>\n  <li>To transfer the required attributes to the HTML elements in the view, first get them via the <em>Kentico.Forms.Web.Mvc. GetEditorHtmlAttributes</em> extension method, as seen in the code example.</li>\n  <li>In the standard <em>Html.DropDownListFor()</em> call, get the data from <em>“Model.Items”</em> provided by the base class of your view model.</li>\n  <li>Use the HTML attributes you’ve just retrieved. The attributes will help Kentico stay aware of changes in the form content, thus allowing the various validation rules and visibility conditions to work.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.FormComponents\n@model MediaLibrarySelectionComponent\n\n@{ \n    var htmlAttributes = ViewData.GetEditorHtmlAttributes();\n}\n\n@Html.DropDownListFor(m => m.SelectedValue, Model.Items, htmlAttributes)","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"45263d4d-d5d3-4f7b-a622-455abd69083d","_parentId":"46645c6e-ea50-45c3-900f-a3277c3d9011","_type":"component","title":"Demo: Creating a basic form component","displayTitle":"Demo: Creating a basic form component"},{"body":"<p>Good. Your <em>editing component</em> is ready. Apart from this use case, it also can be added into the bodies of forms on the <em>Form builder</em> tab to provide IDs of media libraries. However, we’ll just stick with using it as an <em>editing component</em>.</p>\n<div class=\"infobox idea\"><p>To ban the form component from being added into forms, you may simply edit the <a href=\"https://docs.kentico.com/k12sp/developing-websites/form-builder-development/developing-form-components#Developingformcomponents-Registeringformcomponents\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">assembly-level attribute</a>. Adding an optional “<em>IsAvailableInFormBuilderEditor = false”</em> argument to the attribute makes the component work only as <em>editing components</em>.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"edd7048b-42d2-4533-ba50-7131838abc74","_parentId":"46645c6e-ea50-45c3-900f-a3277c3d9011","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>The media library uploader form component will allow site visitors to:</p>\n<ul>\n  <li>Select a file through an <em>&lt;input type=”file” /&gt;</em> HTML element</li>\n  <li>Upload the file to a media library configured previously by content editors, through an <em>&lt;input type=”button” /&gt;</em> HTML element</li>\n  <li>Receive a GUID of the uploaded media library file in return (into an <em>&lt;input type=”hidden” /&gt;</em> HTML element)</li>\n  <li>Post the form with the GUID saved in a hidden <em>&lt;input /&gt;</em> element</li>\n</ul>\n<p>On top of that, the form component will allow the content editors to view uploaded images in the context of a form submission—in the <em>Recorded data</em> tab.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create a view model of the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; FormComponents,</em> create a new <em>“MediaLibraryUploader” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“MediaLibraryUploaderComponent.cs”</em> class file.</li>\n  <li>Add an assembly-level registration attribute according to the code snippet.</li>\n  <li>Add the full English texts of the name and description into the <em>Localization</em> application in Kentico.</li>\n  <li>Unlike the media library selector form component, inherit from the <em>Kentico.Forms.Web.Mvc.FormComponent&lt;TProperties, TValue&gt;</em> class. Use <em>MediaLibraryUploaderProperties</em> and <em>string</em> as the generic parameters.</li>\n  <li>Capture your <em>MediaLibraryRepository </em>as a property and make sure it is initialized in the constructor. AutoFac can't be used here since form component objects are internally being built by reflection. What you can do is to allow potential descendants of your class populate the <em>MediaLibraryRepository </em>property with their own implementations.</li>\n  <li>Add the <em>\"FileGuid\"</em> property to capture the GUID of the uploaded media library file.</li>\n  <li>Make the property accessible also through a bindable <em>FileGuidAsString</em> property.</li>\n  <li>Add another <em>FileName </em>bindable property. This one will help in warning site visitors when a form is redrawn in between file selection and upload thereof. This may occur when a visibility condition hides or shows a form field.</li>\n  <li>You can leave the file open. You'll add members into the class in the next step.</li>\n</ol>","code":{"src":"[assembly: RegisterFormComponent(\n    \"MedioClinic.FormComponent.MediaLibraryUploader\",\n    typeof(MediaLibraryUploaderComponent),\n    \"{$FormComponent.MediaLibraryUploader.Name$}\",\n    ViewName = \"FormComponents/_MediaLibraryUploader\",\n    Description = \"{$FormComponent.MediaLibraryUploader.Description$}\",\n    IconClass = \"icon-picture\")]\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibraryUploaderComponent : FormComponent<MediaLibraryUploaderProperties, string>\n    {\n        public MediaLibraryUploaderComponent()\n        {\n            MediaLibraryRepository = new MediaLibraryRepository();\n        }\n\n        protected MediaLibraryUploaderComponent(IMediaLibraryRepository mediaLibraryRepository)\n        {\n            MediaLibraryRepository = mediaLibraryRepository ?? throw new ArgumentNullException(nameof(mediaLibraryRepository));\n        }\n\n        protected IMediaLibraryRepository MediaLibraryRepository { get; set; }\n\n        [BindableProperty]\n        public string FileGuidAsString\n        {\n            get => FileGuid?.ToString() ?? string.Empty;\n\n            set\n            {\n                var parsed = Guid.TryParse(value, out Guid guid);\n\n                if (parsed)\n                {\n                    FileGuid = guid;\n                }\n            }\n        }\n\n        [BindableProperty]\n        public string FileName { get; set; }\n\n        public Guid? FileGuid { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Add members that make the form component complete.</p>\n<ol>\n  <li>Add the ShowViewFileLink bool property that displays a <em>View file </em>hyperlink in the <em>Recoded data </em>tab.</li>\n  <li>To make such link work, you'll need the file's permanent URL. The FilePermanentUrl property retrieves such URL with the help of the repository you've just added.</li>\n  <li>Implement the <em>GetValue</em> and <em>SetValue</em> methods as simple retrievals/assignments of the <em>FileGuidAsString</em> property.</li>\n</ol>","code":{"src":"public bool ShowViewFileLink =>\n    MembershipContext.AuthenticatedUser.IsAuthorizedPerResource(ModuleName.BIZFORM, \"ReadData\");\n\npublic string FilePermanentUrl\n{\n    get\n    {\n        var parsed = int.TryParse(Properties?.MediaLibraryId, out int libraryId);\n\n        if (parsed && FileGuid != null)\n        {\n            MediaLibraryRepository.MediaLibraryId = libraryId;\n            MediaLibraryRepository.MediaLibrarySiteName = SiteContext.CurrentSiteName;\n            var dto = MediaLibraryRepository.GetMediaLibraryDto(FileGuid.Value);\n\n            return dto?.PermanentUrl;\n        }\n\n        return null;\n    }\n}\n\npublic override string GetValue() => FileGuidAsString;\n\npublic override void SetValue(string value)\n{\n    FileGuidAsString = value;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a properties class of the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; FormComponents &gt; MediaLibraryUploader,</em> create a new <em>“MediaLibraryUploaderProperties.cs”</em> class file.</li>\n  <li>Inherit from <em>Kentico.Forms.Web.Mvc.</em> <em>FormComponentProperties&lt;TValue&gt;</em> class. Use <em>string</em> as the generic parameter.</li>\n  <li>Add an empty-bodied implicit constructor, and call the base class’ constructor with the <em>CMS.DataEngine.FieldDataType</em> enumeration value as an argument. This will further specify the nature of the underlying database column.</li>\n  <li>Override the <em>DefaultValue</em> property and initialize it to <em>string.Empty</em>.</li>\n  <li>Add the MediaLibraryId property and specify the media library selection component as an <em>editing component</em>.</li>\n</ol>","code":{"src":"using System.ComponentModel.DataAnnotations;\n\nusing CMS.DataEngine;\nusing Kentico.Forms.Web.Mvc;\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class MediaLibraryUploaderProperties : FormComponentProperties<string>\n    {\n        public MediaLibraryUploaderProperties() : base(FieldDataType.Text, 400)\n        {\n        }\n\n        [DefaultValueEditingComponent(TextInputComponent.IDENTIFIER)]\n        public override string DefaultValue { get; set; } = string.Empty;\n\n        [EditingComponent(MediaLibrarySelectionComponent.Identifier, \n            Label = \"{$FormComponent.MediaLibraryUploader.MediaLibraryId.Name$}\", \n            Tooltip = \"{$FormComponent.MediaLibraryUploader.MediaLibraryId.Tooltip$}\", \n            ExplanationText = \"{$FormComponent.MediaLibraryUploader.MediaLibraryId.ExplanationText$}\",\n            Order = 0)]\n        [Required]\n        public string MediaLibraryId { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Before you set off for the view file endeavors, you'll want to make your life easier by creating some extension methods.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Extensions</em>, create a new <em>\"FormExtensions\" </em>class file.</li>\n  <li>As a proper extensions class, it needs to be static.</li>\n  <li>Add the <em>CustomInput </em>and <em>Button </em>HTML helpers, each one having two overloads.</li>\n</ol>","code":{"src":"public static class FormExtensions\n{\n    public static MvcHtmlString CustomInput(this HtmlHelper helper, string inputType, string name, object value, IDictionary<string, object> htmlAttributes)\n    {\n        TagBuilder tagBuilder = new TagBuilder(\"input\");\n        tagBuilder.MergeAttribute(\"type\", inputType);\n        tagBuilder.MergeAttribute(\"name\", name);\n        tagBuilder.MergeAttribute(\"value\", value.ToString());\n        tagBuilder.MergeAttributes(htmlAttributes);\n\n        return new MvcHtmlString(tagBuilder.ToString(TagRenderMode.StartTag));\n    }\n\n    public static MvcHtmlString CustomInput(this HtmlHelper helper, string inputType, string name, object value, object htmlAttributes) =>\n        CustomInput(helper, inputType, name, value, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));\n\n    public static MvcHtmlString Button(this HtmlHelper helper, string innerHtml, IDictionary<string, object> htmlAttributes)\n    {\n        var builder = new TagBuilder(\"button\");\n        builder.InnerHtml = innerHtml;\n        builder.MergeAttributes(htmlAttributes);\n\n        return MvcHtmlString.Create(builder.ToString());\n    }\n\n    public static MvcHtmlString Button(this HtmlHelper helper, string innerHtml, object htmlAttributes) =>\n        Button(helper, innerHtml, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a partial view. The view will be rendered not just on the <em>Form builder</em> tab, but also the <em>Recorded data</em> tab, and on the live site.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; FormComponents,</em> create a new Razor file. Use the pattern consisting of an underscore character, followed by the identifier used in the component registration attribute.</li>\n  <li>As C# code will make up a significant part of the view file, add a code block to enclose it.</li>\n  <li>First, implement the <em>GetActionUrl </em>method that secures the URL string used to upload the file binary. Apart from the obligatory mediaLibraryId parameter, also include the fileInputElementId parameter that will make sure the GUID of the uploaded file is added into the correct instance of the form (should there be multiple ones in the page).</li>\n  <li>In the name of avoiding conflicts in pages with multiple instances of the form, let MVC automatically generate unique IDs for HTML elements of <em>FileGuidAsString </em>and <em>FileName </em>bindable properties. Thanks to this, you'll be able to point to the correct ones in your future JavaScript code.</li>\n  <li>To assign various attributes to the HTML elements in your view, create separate copies of attribute sets via <em>ViewData.GetEditorHtmlAttributes()</em>.</li>\n  <li>To adjust the form once a file is picked by the site visitor, assign an <em>onchange </em>event handler in the <em>fileInputAttributes </em>copy.</li>\n  <li>To upload the selected file, assign the <em>onclick </em>event handler in the <em>buttonAttributes </em>copy, utilizing the <em>GetActionUrl </em>method, together with one of the automatically generated IDs.</li>\n  <li>Leave the file open for further edits in the following steps.</li>\n</ol>","code":{"src":"@using CMS.Helpers\n@using Kentico.Forms.Web.Mvc\n@using MedioClinic.Models.FormComponents\n@using MedioClinic.Extensions\n@model MediaLibraryUploaderComponent\n\n@{\n    // Gets the URL to the MediaLibraryUploaderController's action.\n    // Takes the fileInputElementId and passes it to the controller to know which form element to fill with the file GUID.\n    string GetActionUrl(string fileInputElementId)\n    {\n        var path = Url.Action(\"Upload\", \"MediaLibraryUploader\", new\n        {\n            fileInputElementId,\n            mediaLibraryId = Model.Properties.MediaLibraryId\n        });\n\n        var decorated = VirtualContext.GetPreviewPathFromVirtualContext(path, false, \"en-us\", true); ;\n\n        return decorated;\n    }\n\n    string currentFileGuidHiddenElementId = Html.IdFor(model => model.FileGuidAsString).ToString();\n    string currentFileNameHiddenElementId = Html.IdFor(model => model.FileName).ToString();\n    IDictionary<string, object> fileInputAttributes = ViewData.GetEditorHtmlAttributes();\n    fileInputAttributes[\"onchange\"] = Html.Raw($\"window.medioClinic.mediaLibraryUploaderComponent.onFileSelected(this);\");\n    IDictionary<string, object> fileGuidAttributes = ViewData.GetEditorHtmlAttributes();\n    fileGuidAttributes[\"class\"] = \"kn-file-guid-hidden\";\n    IDictionary<string, object> fileNameAttributes = ViewData.GetEditorHtmlAttributes();\n    fileNameAttributes[\"class\"] = \"kn-file-name-hidden\";\n    IDictionary<string, object> buttonAttributes = ViewData.GetEditorHtmlAttributes();\n    var currentUrl = GetActionUrl(currentFileGuidHiddenElementId);\n    buttonAttributes[\"onclick\"] = Html.Raw($\"window.medioClinic.mediaLibraryUploaderComponent.uploadFile(this, '{currentUrl}');\");\n    buttonAttributes[\"type\"] = \"button\";\n}\n\n// The rest will be implemented in the following step.","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now that your code block is complete, start adding markup.</p>\n<ol>\n  <li>Add the master <em>&lt;div /&gt; </em>element of the form itself, together with a <em>&lt;script /&gt; </em>element directly underneath (as partial views don't support <em>@section </em>directives).</li>\n  <li>Split the <em>&lt;div /&gt;</em> element into two halves, outlined as rows.</li>\n  <li>In the first row, add columns, one of them containing the <em>&lt;input /&gt; </em>element, another one serving as a container for file details and user messages.</li>\n  <li>Add the upload button in the second row.</li>\n  <li>When in the <em>Recorded data </em>tab, display the <em>View file </em>hyperlink in another row, utilizing the <em>KenticoImageUrl </em>method that you've implemented in the Essentials course module.</li>\n  <li>The <em>&lt;script /&gt; </em>tag will be responsible for checking whether there's a file selected, however not yet uploaded. Should a page be redrawn in the middle of the process, a warning will be displayed.</li>\n</ol>","code":{"src":"<div class=\"kn-media-library-uploader grey lighten-5\">\n    <div class=\"row\">\n        <div class=\"col s6\">\n            @Html.CustomInput(\"file\", \"mediaLibraryUploader\", string.Empty, fileInputAttributes)\n        </div>\n        <div class=\"kn-upload-file-details col s6\">\n            @Html.HiddenFor(model => model.FileGuidAsString, fileGuidAttributes)\n            @Html.HiddenFor(model => model.FileName, fileNameAttributes)\n            <div class=\"kn-file-size\"></div>\n            <div class=\"kn-file-type\"></div>\n            <div class=\"kn-form-messages\"></div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col s6 upload-button\">\n            @Html.Button(Html.Localize(\"FormComponent.MediaLibraryUploader.Upload\"), buttonAttributes)\n        </div>\n    </div>\n    @{\n        var permanentUrl = Model.FilePermanentUrl;\n\n        if (Model.ShowViewFileLink && !string.IsNullOrEmpty(permanentUrl))\n        {\n            <div class=\"row\">\n                <div class=\"col s6\">\n                    <a href=\"@Url.KenticoImageUrl(permanentUrl)\" target=\"_blank\">View file</a>\n                </div>\n            </div>\n        }\n    }\n</div>\n\n@* Partial views don't support @section directives. *@\n<script>\n    @{\n        var warnAboutFileLiteral = $\"window.medioClinic.mediaLibraryUploaderComponent.checkForUnuploadedFile(\\\"{currentFileGuidHiddenElementId}\\\", \\\"{currentFileNameHiddenElementId}\\\");\";\n    }\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            @Html.Raw(warnAboutFileLiteral)\n        });\n    } else {\n        @Html.Raw(warnAboutFileLiteral)\n    }\n</script>","lang":"html"},"strapline":""},{"title":"","body":"<p>At this point, add a few rules to the main CSS file.</p>\n<ol>\n  <li>In <em>MedioClinic</em> &gt; <em>Content </em>&gt; <em>Css </em>&gt; <em>Master </em>&gt; <em>style.css</em>, add the selectors with rules.</li>\n  <li>These rules mostly override the default styling of the checkboxes and their labels that come with the Materialize CSS library.</li>\n  <li>You can save and close the file.</li>\n</ol>","code":{"src":"[type=\"checkbox\"] {\n    padding: initial;\n}\n\n[type=\"checkbox\"]:not(:checked),\n[type=\"checkbox\"]:checked {\n    position: initial;\n    opacity: initial;\n    pointer-events: initial;\n}\n\nlabel {\n    font-size: initial;\n}\n\nspan.ktc-checkbox {\n    line-height: 3rem;\n}","lang":"css"},"strapline":""},{"title":"","body":"<p>Also, add CSS styles that apply to the form component.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Content &gt; FormComponents</em>, create a new <em>\"MediaLibraryUploader\"</em> folder.</li>\n  <li>In that subfolder, create a new <em>\"MediaLibraryUploaderComponent\"</em> stylesheet file.</li>\n  <li>Add the styling according to the snippet.</li>\n</ol>","code":{"src":"select {\n    display: initial;\n}\n\n.kn-media-library-uploader {\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    margin-bottom: 8px;\n}\n\n    .kn-media-library-uploader:active {\n        border-bottom: 2px solid #26a69a;\n    }\n\n    .kn-media-library-uploader > div.row {\n        margin-bottom: initial;\n    }\n\n        .kn-media-library-uploader > div.row:first-of-type {\n            min-height: 3rem;\n        }","lang":"css"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7d85e322-e8f8-4adb-8979-40b2650631df","_parentId":"0d2464ba-8705-4d76-9b67-dd6b8cf77379","_type":"component","title":"Demo: Creating an advanced form component","displayTitle":"Demo: Creating an advanced form component"},{"body":"<p>Add JavaScript logic to the form component. It will mainly handle the upload process before the whole form is post to the server.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the following steps, bring your component to life with its JavaScript code.</p>\n<ol>\n  <li>In the same <em>MedioClinic &gt; Content &gt; FormComponents </em>folder, create a <em>\"media-library-uploader-component\" </em>JavaScript file.</li>\n  <li>As in the previous cases, create a standalone namespace.</li>\n  <li>In the first <em>onFileSelected </em>function, render the file MIME type and size, or a warning (if the file type isn't allowed).</li>\n  <li>Also, store the file name in <em>fileNameHiddenElement</em>, just in case the form gets redrawn before the file is uploaded.</li>\n</ol>","code":{"src":"window.medioClinic = window.medioClinic || {};\n\n(function (mediaLibraryUploaderComponent) {\n    /**\n     * Displays file size and MIME type of the selected file.\n     * @param {HTMLElement} target HTML element that invoked the function.\n     */\n    mediaLibraryUploaderComponent.onFileSelected = function (target) {\n        var mbSize = 1048576;\n        var file = target.files[0];\n        var fileSizeString = \"\";\n        var fileMimeTypeString = \"\";\n        var detailsElement = target.parentElement.parentElement.querySelector(\".kn-upload-file-details\");\n        var fileNameHiddenElement = detailsElement.querySelector(\".kn-file-name-hidden\");\n\n        var uploadButton =\n            target.parentElement.parentElement.parentElement.querySelector(\".upload-button button\");\n\n        if (file) {\n            if (file.type === \"image/jpeg\" || file.type === \"image/png\") {\n                var fileSize = 0;\n                uploadButton.disabled = false;\n\n                if (file.size > mbSize) {\n                    fileSize = (Math.round(file.size * 100 / mbSize) / 100).toString() + 'MB';\n                } else {\n                    fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'kB';\n                }\n\n                fileSizeString = fileSize.toString();\n                fileMimeTypeString = file.type.toString();\n            } else {\n                fileMimeTypeString = null;\n            }\n\n            fileNameHiddenElement.value = file.name;\n        }\n\n        detailsElement.querySelector(\".kn-file-size\").innerHTML =\n            \"<strong>Size:</strong> \"\n            + fileSizeString;\n\n        var fileTypeElement = detailsElement.querySelector(\".kn-file-type\");\n\n        if (fileMimeTypeString) {\n            fileTypeElement.innerHTML =\n                \"<strong>Type:</strong> \"\n                + fileMimeTypeString;\n        } else {\n            fileTypeElement.innerHTML\n                = \"<strong>Type:</strong> Invalid file type. Please upload a .jpg or .png file.\";\n            uploadButton.disabled = true;\n        }\n    };\n\n    // Another code will be added in the following steps.\n}","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, you'll add the <em>checkForUnuploadedFile </em>function that you invoked in the <em>&lt;script /&gt; </em>tag (on page load). This method will recognize the un-uploaded file by looking up the values of <em>fileNameHiddenElement </em>and <em>fileGuidHiddenElement</em>. If the first one is present but the second is not, then it means that no media file was added.</p>\n<p>Also, add the private <em>processMessage </em>method that displays user messages in both the top of the page and the form itself.</p>","code":{"src":"/**\n * Makes sure the user is warned about the need to re-upload a file in the form.\n * @param {string} fileGuidHiddenElementId ID of the hidden element with file GUID.\n * @param {string} fileNameHiddenElementId ID of the hidden element with file name.\n */\nmediaLibraryUploaderComponent.checkForUnuploadedFile = function (fileGuidHiddenElementId, fileNameHiddenElementId) {\n    var fileGuidHiddenElement = document.getElementById(fileGuidHiddenElementId);\n    var fileNameHiddenElement = document.getElementById(fileNameHiddenElementId);\n\n    if (fileNameHiddenElement.value && !fileGuidHiddenElement.value) {\n        var message = \"The form was reloaded. Please select the file \\\"\" + fileNameHiddenElement.value + \"\\\" again and upload it.\";\n        processMessage(message, \"warning\", fileGuidHiddenElement.parentElement);\n    }\n};\n\n/**\n * Logs a console message and displays it in the page, if possible.\n * @param {string} message The message.\n * @param {string} type The type of the message.\n * @param {HTMLElement} targetElement The HTML element containing the form message element.\n */\nvar processMessage = function (message, type, targetElement) {\n    var cssClasses = \"\";\n\n    if (typeof window.medioClinic.showMessage === \"function\") {\n        window.medioClinic.showMessage(message, type, false);\n    }\n\n    if (type === \"info\") {\n        cssClasses = \"light-blue lighten-5\";\n        console.info(message);\n    } else if (type === \"warning\") {\n        cssClasses = \"yellow lighten-3\";\n        console.warn(message);\n    } else if (type === \"error\") {\n        cssClasses = \"red lighten-3\";\n        console.error(message);\n    }\n\n    if (targetElement) {\n        var messageElement = targetElement.querySelector(\".kn-form-messages\");\n        messageElement.appendChild(window.medioClinic.buildMessageMarkup(message, cssClasses));\n    }\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, add the last public function in the namespace, together with private helpers that support it.</p>\n<ol>\n  <li>The public <em>uploadFile </em>method will basically look up the parent <em>&lt;form /&gt; </em>element which it runs within. Then, it will spin off an <em>XMLHttpRequest </em>with the file binary. Finally, it will attach event handlers for various states of the request.</li>\n  <li>The <em>getParentForm </em>private function does what it says. It recursivelly calls looks for parent elements up to the point where it either hits a <em>&lt;form /&gt; </em>one or the <em>&lt;body /&gt; </em>one (as a terminating condition).</li>\n  <li>The <em>processErrors </em>function will be called from the event handlers implemented in the next step. Since this JavaScript code runs within a context of a form component (with the possibility of running in the <em>Recorded data </em>tab and the <em>Form builder </em>tab), we haven't employed the localization service.</li>\n</ol>","code":{"src":"/**\n * Uploads the selected file using XHR.\n * @param {HTMLElement} target HTML element that invoked the function.\n * @param {string} url URL to upload the file to.\n */\nmediaLibraryUploaderComponent.uploadFile = function (target, url) {\n    if (url && url.length > 0) {\n        var xhr = new XMLHttpRequest();\n        var parentForm = getParentForm(target, null);\n        var formData = new FormData(parentForm);\n        xhr.addEventListener(\"load\", onUploadCompleted, false);\n        xhr.addEventListener(\"progress\", onUploadProgressChange, false);\n        xhr.addEventListener(\"error\", onUploadFailed, false);\n        xhr.open(\"POST\", url);\n        xhr.send(formData);\n    }\n};\n\n/**\n * Searches for nearest parent form HTML element.\n * @param {HTMLElement} target HTML element that invoked the function.\n * @param {HTMLElement=} mostParentElement An optional HTML element where searching should stop.\n * @returns {HTMLElement} The parent form element, or null.\n */\nvar getParentForm = function (target, mostParentElement) {\n    if (!mostParentElement) {\n        mostParentElement = document.getElementsByTagName(\"body\")[0];\n    }\n\n    if (target !== mostParentElement) {\n        var parent = target.parentElement;\n\n        if (parent.tagName === \"FORM\") {\n            return parent;\n        } else {\n            return getParentForm(parent, mostParentElement);\n        }\n    } else {\n        return null;\n    }\n};\n\n/**\n * Handles error codes\n * @param {number} statusCode HTTP status code.\n * @param {HTMLElement} targetElement The HTML element containing the form message element.\n */\nvar processErrors = function (statusCode, targetElement) {\n    var errorFlag = \"error\";\n\n    if (statusCode >= 500) {\n        processMessage(\n            \"The upload of the image failed. Please contact the system administrator.\",\n            errorFlag,\n            targetElement);\n    } else if (statusCode === 422) {\n        processMessage(\n            \"The uploaded image could not be processed. Please contact the system administrator.\",\n            errorFlag,\n            targetElement);\n    } else {\n        processMessage(\n            \"An unknown error happened. Please contact the system administrator.\",\n            errorFlag,\n            targetElement);\n    }\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this final step, just add the advertised event handlers.</p>\n<ol>\n  <li>In the <em>onUploadCompleted </em>function, deserialize the JSON response from your future backend controller. Then, populate the hidden element with the file GUID. Depending on the status code of the response, call <em>processMessage()</em> or <em>processErrors()</em>.</li>\n  <li>In <em>onUploadProcessChange</em>, &nbsp;simply log the percentage to the console.</li>\n  <li>In <em>onUploadFailed</em>, again, call <em>processErrors()</em>.</li>\n</ol>","code":{"src":"/**\n * Gets the media library file GUID and puts its value into another form input element.\n * @param {Event} e Event invoked when an upload is complete.\n */\nvar onUploadCompleted = function (e) {\n    var responseObject = JSON.parse(e.target.response);\n    var fileInputElement = document.getElementById(responseObject.fileInputElementId);\n    fileInputElement.value = responseObject.fileGuid;\n    var detailsElement = fileInputElement.parentElement;\n\n    if (e.target.status >= 200 && e.target.status < 300) {\n        var message = \"Upload of the image is complete. File GUID: \" + responseObject.fileGuid;\n        processMessage(message, \"info\", detailsElement);\n    } else {\n        processErrors(e.target.status, detailsElement);\n    }\n};\n\n/**\n * Logs the file upload progress into the console.\n * @param {Event} e Event invoked when the upload progress changes.\n */\nvar onUploadProgressChange = function (e) {\n    var percentComplete = Math.round(e.loaded * 100 / e.total);\n    console.info(\n        \"Upload progress: \"\n        + percentComplete + \"%\");\n};\n\n/**\n * Logs the failed upload to the console.\n * @param {Event} e Event invoked when the upload fails.\n */\nvar onUploadFailed = function (e) {\n    processErrors(e.target.status);\n};","lang":"javascript"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"98533188-f221-4593-be51-eec52ad93368","_parentId":"0d2464ba-8705-4d76-9b67-dd6b8cf77379","_type":"component","title":"Adding JavaScript functionality to the component","displayTitle":"Adding JavaScript functionality to the component"},{"body":"<p>Let’s connect the last link in the whole chain—the controller. It bears a general resemblance to the backend controller that you’ve implemented for the static image widget. Specifically, the controller shares the previously created repository, helper classes, and some of the design patterns.</p>\n<div class=\"infobox warning\"><p>The controller presented in this demo chapter saves all received files into a single (root) folder of the configured media library. If the media libraries are configured to use cloud storage services in the background (like Azure Blob Storage or Amazon S3), you should bring additional measures to avoid storing more than <a href=\"https://docs.kentico.com/k12sp/configuring-kentico/configuring-the-environment-for-content-editors/configuring-media-libraries#Configuringmedialibraries-Medialibrarylimitationswhenstoringfilesinanexternalstorage\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">100 files per media library folder</a>.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Before you create the controller itself, enrich the file manager with a method overload necessary to add files.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Utils</em>, open <em>IFileManager.cs</em>.</li>\n  <li>Add the method signature you see in the upper part of the code snippet.</li>\n  <li>In the same folder, open <em>FileManager.cs</em>.</li>\n  <li>Add the overload that uses the library ID instead of the library name.</li>\n</ol>","code":{"src":"// IFileManager.cs\n\n/// <summary>\n/// Adds a new file to a given media library.\n/// </summary>\n/// <param name=\"file\">The file.</param>\n/// <param name=\"uploadDirectory\">Physical upload directory.</param>\n/// <param name=\"mediaLibraryId\">Library ID.</param>\n/// <param name=\"libraryFolderPath\">Library folder to save to.</param>\n/// <returns>The GUID of the file in the media library.</returns>\nGuid AddMediaLibraryFile(HttpPostedFileWrapper file, string uploadDirectory, int mediaLibraryId, string libraryFolderPath = null, bool checkPermisions = false);\n\n\n// FileManager.cs\n\npublic Guid AddMediaLibraryFile(\n    HttpPostedFileWrapper file, \n    string uploadDirectory, \n    int mediaLibraryId, \n    string libraryFolderPath = null, \n    bool checkPermisions = false)\n{\n    MediaLibraryRepository.MediaLibraryId = mediaLibraryId;\n\n    return AddMediaLibraryFileInternal(file, uploadDirectory, libraryFolderPath, checkPermisions);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, you'll create the controller itself. In the first phase, you’ll add the required dependencies and a string read-only property.</p>\n<ol>\n  <li>The string property wil hold a temporary file system path for all uploads.</li>\n  <li>Capture the FileManager and ErrorHelper helpers in properties.</li>\n  <li>As always, populate them in the constructor.</li>\n</ol>","code":{"src":"public class MediaLibraryUploaderController : Controller\n{\n    protected string TempPath => $\"{Server.MapPath(@\"~\\\")}App_Data\\\\Temp\\\\MediaLibraryUploader\";\n\n    protected IFileManager FileManager { get; }\n\n    protected IErrorHelper ErrorHelper { get; }\n\n    public MediaLibraryUploaderController(IFileManager fileManager, IErrorHelper errorHandler)\n    {\n        FileManager = fileManager ?? throw new ArgumentNullException(nameof(fileManager));\n        ErrorHelper = errorHandler ?? throw new ArgumentNullException(nameof(errorHandler));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add the workhorse of the controller—the <em>Upload</em> action method.</p>\n<ol>\n  <li>First, look up the binary in the request and cast it into an <em>HttpPostedFileWrapper </em>object.</li>\n  <li>Try to add the media library file via the <em>FileManager </em>class.</li>\n  <li>Should anything go wrong down the line, use the <em>ErrorHelper </em>to handle the exceptions properly.</li>\n  <li>Finally, return a new JSON response with the file GUID. Also, return the ID of the file input element, without any transformation.</li>\n</ol>","code":{"src":"// POST: MediaLibraryUploader/Upload\n[HttpPost]\npublic ActionResult Upload(string fileInputElementId, int mediaLibraryId)\n{\n    if (Request.Files[0] is HttpPostedFileWrapper file && file != null)\n    {\n        Guid fileGuid;\n\n        try\n        {\n            fileGuid = FileManager.AddMediaLibraryFile(file, TempPath, mediaLibraryId, checkPermisions: false);\n        }\n        catch (Exception ex)\n        {\n            return ErrorHelper.HandleException(nameof(MediaLibraryUploaderController), nameof(Upload), ex);\n        }\n\n        return Json(new\n        {\n            fileInputElementId,\n            fileGuid\n        });\n    }\n\n    return new HttpStatusCodeResult(ErrorHelper.UnprocessableStatusCode);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"38249748-c791-4f10-949b-dd979bdd6cdd","_parentId":"0d2464ba-8705-4d76-9b67-dd6b8cf77379","_type":"component","title":"Implementing the backend controller","displayTitle":"Implementing the backend controller"},{"body":"<p>Congratulations! You’ve just completed the process of creating an advanced form component. You can give it a try on the <em>Form builder</em> tab now.</p>\n<p>Once you create an image dimension validation rule (below), you’ll give your content editors a way to further configure your media library uploader form component. It will refuse images with dimensions that exceed a certain range.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"5fa32ba4-71d4-4cb9-ae24-df63dcb49e0c","_parentId":"c1d79251-6eb0-4757-b18e-f7a32e5a719a","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this short demo chapter, you’ll finalize the user story of the media library uploader form component with its accompanying validation rule.</p>\n<p>Although the rule is designed to work primarily with the media library uploader form component, it can very well complement any other form component that works with media library images. For instance, if you ever create a selector form component that allows picking of a media file, this validation rule may let the site visitor know that they picked a file that’s too small or too large.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The validation rule sort of exploits one of the nice features in Kentico: the ability to retrieve a media file in any media library, just by its GUID.</p>\n<p>The nature of a validation rule class is twofold: both static and dynamic. The class defines the configuration model of the validation rules. At the same time, it contains the <em>Validate</em> method that’s spun up every time a site visitor updates the respective form field.</p>\n<p>In the first step, give the class an assembly-level registration attribute, as seen in the code snippet.</p>\n<p>In the attribute, define the ordinary metadata (name, description) through localization macro expressions.</p>\n<p>Add resource strings in the <em>Localization</em> application.</p>\n<p>As a basic (non-comparing) validation rule, this class should inherit from <em>Kentico.Forms.Web.Mvc.ValidationRule&lt;TValue&gt;</em>. In our case, <em>TValue</em> should be constructed into <em>string</em>.</p>\n<p>As requested by the documentation, mark the class with <em>System.SerializableAttribute</em>.</p>\n<p>Override the <em>GetTitle</em> method. This method produces a short summary of how the validation rule is configured in a given form component instance. This helps in maintaining an overview of all the validation rules applied to the form component instance.</p>\n<p>Override the <em>Validate</em> method.</p>\n<p>In the method’s body, try to parse the textual representation of the file GUID (received through the <em>value</em> parameter).</p>\n<p>Then, retrieve the file from any of the media libraries in the current site, by calling <em>MediaFileInfoProvider.GetMediaFileInfo()</em>.</p>\n<p>Finally, leverage the semantics of the <em>&amp;&amp;</em> logical C# operator to simultaneously do a null check and a series of subsequent validation checks.&nbsp;</p>\n<p>In each check, configuration property values are matched against the actual values of the media library file.</p>\n<p>Should anything go wrong in the body of the <em>Validate</em> method, return <em>false</em>.</p>","code":{"src":"using System;\n\nusing CMS.Helpers;\nusing CMS.MediaLibrary;\nusing CMS.SiteProvider;\nusing Kentico.Forms.Web.Mvc;\nusing MedioClinic.Models.FormValidationRules;\n\n[assembly: RegisterFormValidationRule(\n    \"MedioClinic.ValidationRule.MediaLibraryImageDimension\", \n    typeof(MediaLibraryImageDimensionValidationRule), \n    \"{$ValidationRule.MediaLibraryImageDimension.Name$}\", \n    Description = \"{$ValidationRule.MediaLibraryImageDimension.Description$}\")]\n\nnamespace MedioClinic.Models.FormValidationRules\n{\n    [Serializable]\n    public class MediaLibraryImageDimensionValidationRule : ValidationRule<string>\n    {\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MinimumWidth$}\", Order = 0)]\n        public int MinimumWidth { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MaximumWidth$}\", Order = 1)]\n        public int MaximumWidth { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MinimumHeight$}\", Order = 2)]\n        public int MinimumHeight { get; set; }\n\n        [EditingComponent(IntInputComponent.IDENTIFIER, Label = \"{$ValidationRule.MediaLibraryImageDimension.MaximumHeight$}\", Order = 3)]\n        public int MaximumHeight { get; set; }\n\n        public override string GetTitle()\n        {\n            return $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MinimumWidth\")}: {MinimumWidth}. \" +\n                $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MaximumWidth\")}: {MaximumWidth}. \" +\n                $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MinimumHeight\")}: {MinimumHeight}. \" +\n                $\"{ResHelper.GetString(\"ValidationRule.MediaLibraryImageDimension.MaximumHeight\")}: {MaximumHeight}.\";\n        }\n\n        protected override bool Validate(string value)\n        {\n            Guid guid;\n            guid = Guid.TryParse(value, out guid) ? guid : Guid.Empty;\n\n            if (guid != Guid.Empty)\n            {\n                var mediaFileInfo = MediaFileInfoProvider.GetMediaFileInfo(guid, SiteContext.CurrentSiteName);\n\n                return mediaFileInfo != null\n                    && MinimumWidth <= mediaFileInfo.FileImageWidth\n                    && mediaFileInfo.FileImageWidth <= MaximumWidth\n                    && MinimumHeight <= mediaFileInfo.FileImageHeight\n                    && mediaFileInfo.FileImageHeight <= MaximumHeight;\n            }\n\n            return false;\n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"aac1fc04-7b62-4c4e-9479-0018e844d703","_parentId":"3399cf28-b430-4ed5-ae0e-755c305f9f3f","_type":"component","title":"Demo: Creating a form validation rule","displayTitle":"Demo: Creating a form validation rule"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Suppose a form component that gets the first name and the last name in two separate form fields. It should then store them into a string database field. What is the better way of implementing such component?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"public class FullNameUploaderComponent : FormComponent<FullNameUploaderProperties, string>\n{\n\t[BindableProperty]\n\tpublic string FirstName { get; set; } = string.Empty;\n\t\n\t[BindableProperty]\n\tpublic string LastName { get; set; } = string.Empty;\n\n\tpublic override string GetValue() => $\"{FirstName} {LastName}\";\n\n\tpublic override void SetValue(string value)\n\t{\n\t\tvar matches = System.Text.RegularExpressions.Regex.Matches(value, @\"\\w+\\s\\w+\");\n\t\t\n\t\tif (matches != null && matches.Count > 1)\n\t\t{\n\t\t\tFirstName = matches[0];\n\t\t\tLastName = matches[1];\n\t\t}\n\t}\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true},{"title":"","code":{"src":"public class FullNameUploaderComponent : FormComponent<FullNameUploaderProperties, string>\n{\n\t[BindableProperty]\n\tpublic string FirstName { get; set; } = string.Empty;\n\t\n\t[BindableProperty]\n\tpublic string LastName { get; set; } = string.Empty;\n\n\tpublic override string SetValue() => $\"{FirstName} {LastName}\";\n\n\tpublic override void GetValue(string value)\n\t{\n\t\tvar matches = System.Text.RegularExpressions.Regex.Matches(value, @\"\\w+\\s\\w+\");\n\t\t\n\t\tif (matches != null && matches.Count > 1)\n\t\t{\n\t\t\tFirstName = matches[0];\n\t\t\tLastName = matches[1];\n\t\t}\n\t}\n}","lang":"csharp"},"feedback":"<p>There's only one difference of this code sample from the other: The usage of \"GetName\" and \"SetName\" names of the overriden methods. In this case, the naming is wrong because these methods were named from the database perspective.</p>","_shouldBeSelected":false}],"_feedback":{"title":"","correct":"<p>Well spotted! The naming of the methods was chosen from the database perspective. Therefore, the second code sample is not only worse than the first one. It is also completely wrong.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"d620da6a-7fcc-496c-afc6-54c4e212ba96","_parentId":"f92402ca-29fa-4c1f-8ebc-fe1d4f717dd7","_type":"component","title":"Form component","displayTitle":"Form component"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Suppose a form for submitting newspaper articles. The form takes the text of the article in its first field and a perex in another. You need to make sure the article itself is significantly larger than the perex. What would such validation rule look like?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"[Serializable]\npublic class ArticleVsPerexValidationRule : ValidationRule<string>\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Article text/perex size ratio\")]\n\tpublic int ArticleTextRatio { get; set; }\n\n\tpublic override string GetTitle()\n\t{\n\t\treturn $\"The text of the article must be {ArticleTextRatio} times larger than the perex.\";\n\t}\n\n\tprotected override bool Validate(string value)\n\t{\n\t\treturn !string.IsNullOrEmpty(value) && value.Length > Form.Fields.DependeeFieldValue.Length * ArticleTextRatio;\n\t}\n}","lang":"csharp"},"feedback":"<p>The significant fault of this code sample lies in the inheritance from <em>ValidationRule&lt;&gt;</em>. Also, no <em>Form.Fields</em> collection is accessible in the scope of the <em>Validate </em>method. The class must inherit from <em>CompareToFieldValidationRule&lt;&gt; </em>instead. Then, the <em>DependeeFieldValue </em>property may be compared to the value argument in the <em>Validate </em>method.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"[Serializable]\npublic class ArticleVsPerexValidationRule : CompareToFieldValidationRule<string>\n{\n\t[EditingComponent(IntInputComponent.IDENTIFIER, Label = \"Article text/perex size ratio\")]\n\tpublic int ArticleTextRatio { get; set; }\n\n\tpublic override string GetTitle()\n\t{\n\t\treturn $\"The text of the article must be {ArticleTextRatio} times larger than the perex.\";\n\t}\n\n\tprotected override bool Validate(string value)\n\t{\n\t\treturn !string.IsNullOrEmpty(value) && value.Length > DependeeFieldValue.Length * ArticleTextRatio;\n\t}\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Correct. The class must inherit from&nbsp;<em>CompareToFieldValidationRule&lt;&gt;&nbsp;</em>instead. Then, the&nbsp;<em>DependeeFieldValue&nbsp;</em>property may be compared to the value argument in the&nbsp;<em>Validate&nbsp;</em>method.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"e04d9b7d-92f1-42fd-9d03-f9f0a61c67fb","_parentId":"f92402ca-29fa-4c1f-8ebc-fe1d4f717dd7","_type":"component","title":"Validation rule","displayTitle":"Validation rule"},{"body":"<p>Shout out to you! You’ve completed the whole user story of the media library uploader form component.</p>\n<p>Why not give the validation rule a try on the <em>Form builder</em> tab? You can assign the validation rule to an instance of the uploader component, set the minimum and maximum image dimensions, and try it all out on the live site.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9248c77d-184f-4bd1-878c-c10fed00d6b3","_parentId":"3b28bf4f-a60c-453f-b9a5-1b37e9d5b9a3","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>What MVC page templates are</li>\n  <li>How they help both developers and content editors</li>\n  <li>How to develop a basic page template</li>\n  <li>How to save pre-created page content as a user template</li>\n  <li>How to develop a real-world advanced page template using best practices</li>\n</ul>\n<p>Throughout this page, you will be working with the following artifacts:</p>\n<ul>\n  <li>A simple page template with a view and a controller</li>\n  <li>AutoFac</li>\n  <li>Kentico Import Toolkit</li>\n  <li>Custom tables</li>\n  <li>A form component</li>\n  <li>An autocomplete-enabled textbox implemented with Vue.js</li>\n  <li>A custom Web API 2 controller that powers the above textbox</li>\n  <li>A flight search UI implemented with Vue.js, powered by Kiwi.com API in the background</li>\n  <li>A page template filter</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"96b027b3-8898-4b08-b44c-8b92fbe0efa3","_parentId":"4af180c8-70b5-47f1-8a33-9efb52f2752c","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>In the first half of this course module, you've made provisions for creating landing pages by content editors. This involved creating some basic page infrastructure (landing page controller with a view), page sections, widgets, and their corresponding inline editors.</p>\n<p>The landing page view, however, has an empty generic inner structure. In fact, it contains just a single section by default.&nbsp;</p>\n<figure data-asset-id=\"3f41fe36-c691-4265-9b3b-c90a68ba3c4b\" data-image-id=\"3f41fe36-c691-4265-9b3b-c90a68ba3c4b\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b3b86e55-345e-4dd6-9bcf-2847f10786b4/empty-layout.png\" data-asset-id=\"3f41fe36-c691-4265-9b3b-c90a68ba3c4b\" data-image-id=\"3f41fe36-c691-4265-9b3b-c90a68ba3c4b\" alt=\"\"></figure>\n<p>What if content editors find the need to pre-create complex layouts upfront, possibly with some default content in it?&nbsp;</p>\n<figure data-asset-id=\"0f7e8a35-85e9-46f3-8981-1ff3333a3dc5\" data-image-id=\"0f7e8a35-85e9-46f3-8981-1ff3333a3dc5\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8c32d5f4-5dc7-427d-9391-d59e89fed0e1/complex-layout.png\" data-asset-id=\"0f7e8a35-85e9-46f3-8981-1ff3333a3dc5\" data-image-id=\"0f7e8a35-85e9-46f3-8981-1ff3333a3dc5\" alt=\"\"></figure>\n<p>Or, what if they feel like having a set of pages with some common functionality?&nbsp;That's when Kentico MVC page templates step in.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f4536918-fd44-4928-8d74-a3a0cd8b3131","_parentId":"cb85020f-227b-43f7-8c36-cc57cbf062da","_type":"component","title":"Theory: Use cases","displayTitle":"Theory: Use cases"},{"body":"<p>In this page, you will slightly refactor your setup so that instead of always returning a rigid default view, the landing pages will support templates. The default landing page layout (defined in the landing page partial view) will be converted into a basic page template.</p>\n<p>This will allow your content editors to customize the layout and save it as so called <a href=\"https://docs.kentico.com/k12sp/managing-website-content/using-page-templates-in-mvc#UsingpagetemplatesinMVC-Savingpagesascustompagetemplates\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom templates</a>.</p>\n<p>Then, you will develop a so called <a href=\"https://docs.kentico.com/k12sp/managing-website-content/using-page-templates-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">default page template</a>. Default templates differ in that it is you, the developer, who creates it, in code. Based on your default template, content editors will be able to create pages and perhaps also their custom templates. In your default template, you can not only define the layout, but you also can develop a custom functionality.</p>\n<p>That's exactly what you'll do. On top of the first default template (converted from the landing page view), you will develop another one, which will be dedicated for all pages of events. In contrast to the basic template, it will contain a search box that finds direct airline flights from a site visitor's home town to the city where the event is supposed to happen.</p>\n<figure data-asset-id=\"d1897212-abda-486a-b451-a33008d32507\" data-image-id=\"d1897212-abda-486a-b451-a33008d32507\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/84c14068-e8cc-4971-a95d-9c75aae37594/template-usage.gif\" data-asset-id=\"d1897212-abda-486a-b451-a33008d32507\" data-image-id=\"d1897212-abda-486a-b451-a33008d32507\" alt=\"\"></figure>\n<p>This means some configuration in the background will be needed. Namely, content editors should be able to set date of the event and the place of the nearest airport.</p>\n<figure data-asset-id=\"0556b55c-32ea-4825-ad7d-d4036067d4a5\" data-image-id=\"0556b55c-32ea-4825-ad7d-d4036067d4a5\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/46208a18-5220-4fae-b8e4-729852100f2a/template-configuration-1.png\" data-asset-id=\"0556b55c-32ea-4825-ad7d-d4036067d4a5\" data-image-id=\"0556b55c-32ea-4825-ad7d-d4036067d4a5\" alt=\"\"></figure>\n<p><br></p>\n<figure data-asset-id=\"66955a99-18d3-4e1c-842b-60ea8eb7d1c2\" data-image-id=\"66955a99-18d3-4e1c-842b-60ea8eb7d1c2\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/606db42d-f8d8-4903-a00b-9e15d9efafda/template-configuration-2.png\" data-asset-id=\"66955a99-18d3-4e1c-842b-60ea8eb7d1c2\" data-image-id=\"66955a99-18d3-4e1c-842b-60ea8eb7d1c2\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2b3d2da5-5b0e-49a2-9747-7125205776a6","_parentId":"cb85020f-227b-43f7-8c36-cc57cbf062da","_type":"component","title":"Scenario","displayTitle":"Scenario"},{"body":"<p>Let's dig into the implementation guidelines of both the basic page template and the event page one.</p>\n<h2>Basic page template</h2>\n<p>It can be quite easily crafted out of the existing landing page partial view. If you peek at the <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-templates-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>, you'll notice you can develop the default page templates in two ways:</p>\n<ul>\n  <li>In a simplified way, with just a view (using a stock <em>Kentico.PageBuilder.Web.Mvc.ComponentViewModel&lt;TProperties&gt;</em> model class)</li>\n  <li>With a custom controller</li>\n</ul>\n<p>The simplified development model is suited for cases where no transformation of the properties is necessary. Our basic page template would clearly fit into that, however, in the <em>MedioClinic </em>project, we use the generic <em>PageViewModel </em>exclusively (i.e. not the <em>ComponentViewModel </em>class).</p>\n<p>A few lines above, we've stated that the basic page template would be easily convertible from the landing page view. This is true. In fact, you can copy-paste the code, just with one exception. Kentico MVC page templates need to emit the full page HTML markup, thus an inclusion of a <em>Layout </em>directive will be necessary. You'll just refer to the existing <em>~/Views/Shared/_Layout.cshtml </em>file in your page template view.</p>\n<h2>Event page template</h2>\n<p>To support the configuration capabilities of the advanced template, you'll need:</p>\n<ul>\n  <li>A database of all airports captured in a custom table</li>\n  <li>A dedicated page type with a field to enter the event date</li>\n  <li>A form component that picks a destination airport from the custom table</li>\n</ul>\n<p>To support the front end functionality, you'll need:</p>\n<ul>\n  <li>JavaScript code that mandates searching across airports in a bandwidth-efficient way (i.e. is autocomplete-enabled)</li>\n  <li>A custom Web API 2 controller that continuously serves airports for the autocomplete functionality</li>\n  <li>Another JavaScript code that takes the starting point airport, the previously configured destination airport, and searches for direct flights during the event date and a day before (through the <a href=\"https://docs.kiwi.com/#flights-flights-get\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kiwi.com public API</a>)</li>\n</ul>\n<div class=\"infobox idea\"><p>The flight finder in the event page template can be either made an integral part of it, or it can be implemented as a widget (that's reusable across the whole project). In this course, we opted for the first variant (to keep things focused on page templates).</p></div>\n<h3>Creating a database of airports</h3>\n<p>The Kiwi.com (formerly Skypicker) public API searches for flights using standardized international <a href=\"https://www.iata.org/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IATA</a> airport codes. Thus, you need to supply these codes either from some another public API endpoint or from your instance of Kentico. Of <a href=\"https://docs.kentico.com/k12sp/developing-websites/defining-website-content-structure\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">all the storage options</a> in Kentico, <a href=\"https://docs.kentico.com/k12sp/developing-websites/defining-website-content-structure#Definingwebsitecontentstructure-WhenshouldIusecustomtablestostorecontent?\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom tables</a> can undoubtedly serve this scenario best.</p>\n<p>We've prepared an <a data-asset-id=\"892ebb2c-5d06-4e29-8214-817131849b40\" href=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/f87f17a7-94fe-4e6c-ada8-37acffe7e928/Airports.xlsx\">Excel file</a> with all the airport names and their corresponding IATA codes for you. You'll be able to import it into Kentico using <a href=\"https://docs.kentico.com/k12sp/external-utilities/kentico-import-toolkit\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Import Toolkit</a>.</p>\n<h3>Dedicated page type</h3>\n<p>Of all the three pieces of configuration data (the event date, event location airport, and starting point airport), the event date stands out of the line. It can considered as page data by virtue, not just configuration of the template. That's why you'll need to have a page type field for that, held in a dedicated page type. That page type will have its own MVC route and controller. The previously implemented event page repository was made more robust to support not only those bare landing pages (or landing pages with a basic template), but also the event page template.</p>\n<h3>Airport selection form component</h3>\n<p>This form component should just render a drop down input element with all airport names. The airport IATA codes will be used as background <em>values </em>of the drop down list. With the form component being one of the two future consumers of the airport custom table, it is highly desirable to consolidate the data access logic into another repository/DTO tandem, just as you've been doing it multiple times in the Essentials course module.</p>\n<h3>Autocomplete-enabled airport search box</h3>\n<p>The custom table will have thousands of records in it. In the admin UI, it will be just fine to load all of them into a form component's drop down list. The admin UI is not being accessed by thousands of public site visitors. However, loading such a huge amount of records in each page on the live site would hurt the user experience significantly. Thus, you need an autocomplete-enabled search box that can load just a subset of the airports, based on a given search phrase.</p>\n<p>As far as implementation is concerned, there's a plenty of JavaScript frameworks out there to suit such needs, like React, Angular, or Vue.js. Of all those options, <a href=\"https://vuejs.org/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js</a> offers the least complicated learning curve. There's also quite a few tutorials on <a href=\"https://bytutorial.com/blogs/vuejs/how-to-create-auto-complete-textbox-in-vuejs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">how to create an autocomplete-enabled search box</a> in Vue.js.</p>\n<h3>Web API 2 endpoint for airports</h3>\n<p>This endpoint will respond to the continuously-submitted search phrases coming from the autocomplete-enabled search box. You'll want to implement it in the MVC app (not in the administration application of Kentico) as a Web API 2 controller.</p>\n<h3>Flight search results</h3>\n<p>Finally, once both the destination airport IATA code and the event date are set in the admin UI, and once the starting point airport IATA code is picked through the autocomplete-enabled search box on the live site, there needs to be means of polling the Kiwi.com API for flights and rendering them in the bottom of the page template. This can also be easily handled with even the most <a href=\"https://vuejs.org/v2/guide/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">basic features</a> of Vue.js.</p>\n<div class=\"infobox idea\"><p>The Vue.js tutorials mentioned above assume that all logic is contained within the HTML page, in our case, in the view of the page template.</p>\n<p>However, it is generally a good idea to keep the template view simple and decluttered by encapsulating some of the code into functions living in a standalone JavaScript namespace.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e953effc-c268-430d-a6be-c4cd8096cd01","_parentId":"cb85020f-227b-43f7-8c36-cc57cbf062da","_type":"component","title":"Design guidelines","displayTitle":"Design guidelines"},{"body":"<p>In this task, your goals would be to do the following:</p>\n<ul>\n  <li>Convert the existing landing page controller so that it <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-templates-in-mvc#DevelopingpagetemplatesinMVC-Creatingpagesthatsupportpagetemplates\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">returns TemplateResult</a> (instead of the landing page view).</li>\n  <li>Create a controller for the basic page template. In the controller, you're supposed to produce the <em>PageViewModel&lt;TData&gt;</em>. That's because each page template's view is responsible for rendering the whole HTML output, i.e. with the global layout file that uses this model class.</li>\n  <li>To accommodate the basic page properties into the <em>PageViewModel </em>class as its <em>TData </em>part, you may want to make it implement <em>IViewModel</em>.</li>\n  <li>In order to get the <em>PageViewModel </em>object, you may want to call the static factory method in the generic variant of that class.</li>\n  <li>Finally, you may want to transfer the Razor code of the existing landing page view into the new basic page view. In the new view, you should point to the standard <em>_Layout.cshtml</em> file.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"58d479e1-545f-43c4-b69f-df73e7073a82","_parentId":"a39bae4d-caa2-4d8b-a850-8fbae4d9bc99","_type":"component","title":"Task: Implementing a basic page template","displayTitle":"Task: Implementing a basic page template"},{"body":"<p>In the second task, you have the following goals:</p>\n<ul>\n  <li>Create a dedicated event page type with a field that captures the event date.</li>\n  <li>To handle requests for event pages, add an appropriate MVC route in to the system.</li>\n  <li>Create an event page template controller that the route points to.</li>\n  <li>Accompany the controller with a properties class, with the destination airport in it.</li>\n  <li>To facilitate selection of airports in the admin UI, you'd want to create an airport selection form component backed by an airport repository.</li>\n  <li>To serve subsets of airports for the live site, you'll need a Web API 2 controller, using the same airport repository in the background.</li>\n  <li>To make the Web API 2 controller work in the MedioClinic project, a <a href=\"https://stackoverflow.com/a/34194801/4074527\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configuration class</a> should be registered during application startup.</li>\n  <li>For AutoFac to cater objects to Web API 2 controllers, it should be <a href=\"https://autofaccn.readthedocs.io/en/latest/integration/webapi.html#register-controllers\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configured</a> to detect them.</li>\n  <li>In the template view, you should define a simple <a href=\"https://vuejs.org/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js</a> autocomplete component that fetches airports by a search phrase.</li>\n  <li>You should also display the <a href=\"https://www.kiwi.com/us/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kiwi.com</a> search results with Vue.js, either with a simple <a href=\"https://vuejs.org/v2/guide/list.html#v-for-with-an-Object\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">v-for</a> directive or, with another component.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"75e1d36c-d20b-4a83-ba5a-d8543c426cff","_parentId":"785efb7f-659f-46d8-b1b2-08636f217ccf","_type":"component","title":"Task: Implementing an event page template","displayTitle":"Task: Implementing an event page template"},{"body":"<p>Let's convert the landing page view into a basic page template.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First off, you should slightly alter the landing page controller.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers &gt; LandingPageController.cs</em>, locate the Index action.</li>\n  <li>Remove the statement that builds the view model object.</li>\n  <li>Since the <em>TemplateResult </em>object automatically initializes the page builder feature for you, you can remove that statement too.</li>\n  <li>Instead of returning a view, return the aforementioned <em>TemplateResult </em>object, initialized with a current document ID.</li>\n</ol>","code":{"src":"public ActionResult Index(string nodeAlias)\n{\n    var landingPageDto = LandingPageRepository\n            .GetLandingPage<CMS.DocumentEngine.Types.MedioClinic.LandingPage, LandingPageDto>(nodeAlias);\n\n    if (landingPageDto == null)\n    {\n        return HttpNotFound();\n    }\n\n    Dependencies.CacheService.SetOutputCacheDependency(nodeAlias);\n\n    // Implementation without page templates (begin)\n    /*var model = GetPageViewModel(landingPageDto.Title);\n    HttpContext.Kentico().PageBuilder().Initialize(landingPageDto.DocumentId);\n\n    return View(model); */\n    // Implementation without page templates (end)\n\n    // Page template implementation (begin)\n    return new TemplateResult(landingPageDto.DocumentId);\n    // Page template implementation (end)\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create an empty properties class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>\"PageTemplates\" </em>folder.</li>\n  <li>In that subfolder, create a new <em>\"BasicTemplateProperties\"</em> class file.</li>\n  <li>Make it implement <em>Kentico.PageBuilder.Web.Mvc.PageTemplates .IPageTemplateProperties </em>and <em>IViewModel</em>.</li>\n  <li>Since the basic template is not meant to be configured in any ways, leave the class empty.</li>\n</ol>","code":{"src":"public class BasicTemplateProperties : IPageTemplateProperties, IViewModel\n{\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, implement the basic page controller.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, create a new <em>\"PageTemplates\"</em> folder.</li>\n  <li>In that subfolder, create a new <em>\"BasicTemplateController\" </em>class file.</li>\n  <li>Make the class inherit from <em>Kentico.PageBuilder.Web.Mvc.PageTemplates .PageTemplateController&lt;BasicTemplateProperties&gt;</em>.</li>\n  <li>First, allow the controller have a reference to the business dependencies. It will help building the view model through the <em>PageViewModel </em>class.</li>\n  <li>In the action method, get both the page and the properties.</li>\n  <li>Use the landing page controller object factor the view model, using the properties as <em>TData</em>.</li>\n  <li>Invoke a view.</li>\n</ol>","code":{"src":"public class BasicTemplateController : PageTemplateController<BasicTemplateProperties>\n{\n    IBusinessDependencies Dependencies { get; }\n\n    public BasicTemplateController(IBusinessDependencies dependencies)\n    {\n        Dependencies = dependencies ?? throw new ArgumentNullException(nameof(dependencies));\n    }\n\n    public ActionResult Index()\n    {\n        var page = GetPage();\n        var properties = GetProperties();\n\n        if (page != null && properties != null)\n        {\n            var model = PageViewModel<BasicTemplateProperties>.GetPageViewModel(properties, page.DocumentPageTitle, Dependencies);\n\n            return View(\"PageTemplates/_BasicTemplate\", model);\n        }\n\n        return HttpNotFound();\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Convert the landing page view into a basic page template.</p>\n<ol>\n  <li>In <em>Views &gt; Shared</em>, create a new <em>\"PageTemplates\"</em> folder.</li>\n  <li>In that subfolder, create a new <em>\"_BasicTemplate\" </em>Razor file.</li>\n  <li>Open <em>Views &gt; LandingPage &gt; Index.cshtml.</em></li>\n  <li>Copy the whole contents of that file into your newly created one.</li>\n  <li>As this view is not a partial one anymore, refer to the global layout file.</li>\n  <li>Also, make the view strongly-typed against <em>PageViewModel&lt;BasicTemplateProperties&gt;</em>.</li>\n</ol>\n<p>Note that the underscore character in the view file name was added to align with the convention set by <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-templates-in-mvc#DevelopingpagetemplatesinMVC-Implementingpagetemplates\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>. You may want to keep the traditional naming of full-fledged views.</p>","code":{"src":"@using MedioClinic.Models.PageTemplates\n\n@{\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n\n@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n}\n\n@model MedioClinic.Models.PageViewModel<BasicTemplateProperties>\n\n<div class=\"section\">\n    <div class=\"container\">\n        <div class=\"kn-system-messages\"></div>\n        @Html.Kentico().EditableArea(\"top\")\n    </div>\n</div>\n\n@section Scripts {\n    @Html.Kentico().PageBuilderScripts()\n}\n","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the final step, register the template in the system.</p>\n<ol>\n  <li>Open <em>MedioClinic &gt; App_Start &gt; PageBuilderComponentRegister.cs</em>.</li>\n  <li>Add an assembly-level attribute that specifies the type of your template's controller.</li>\n</ol>","code":{"src":"[assembly: RegisterPageTemplate(\n    \"MedioClinic.Template.BasicPage\",\n    typeof(BasicTemplateController),\n    \"{$PageTemplate.BasicPage.Name$}\",\n    Description = \"{$PageTemplate.BasicPage.Description$}\",\n    IconClass = \"icon-app-page-templates\")]","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"22307db8-cdca-4c11-9d28-978a53627899","_parentId":"8c184b63-28c4-45e8-8a70-6777fa32bcbc","_type":"component","title":"Demo: Implementing a basic page template","displayTitle":"Demo: Implementing a basic page template"},{"body":"<p>Before you set off to all the endeavors of creating the advanced template, you'll first add its underlying page type into Kentico. This is because the template will use a page type field, as part of its configuration.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the admin UI, navigate to <em>Page types</em> and press <em>New page type</em>. Define the names.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3f27ba8f-9420-4175-a003-c96333913237/event-type-wizard-1.png","alt":"event-type-wizard-1.png"},"strapline":""},{"title":"","body":"<p>In the <em>Inherits fields from page type </em>drop-down menu, select <em>Landing page</em>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/30d0a249-9dde-44d4-93cc-a6eb93dbb140/event-type-wizard-2.png","alt":"event-type-wizard-2.png"},"strapline":""},{"title":"","body":"<p>In the third step, press <em>New field</em>.</p>\n<ol>\n  <li>Give the field an <em>\"EventDate\"</em> codename.</li>\n  <li>Make it <em>Required</em>.</li>\n  <li>Scroll down to specify other properties (in the next step).</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/432cc941-9c36-410e-bf3b-a061ff5a9451/event-type-wizard-3.png","alt":"event-type-wizard-3.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>Call the field <em>\"Event date\"</em>.</li>\n  <li>In the <em>Editing control settings </em>region, disable the <em>Edit time </em>checkbox.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4f0b65a0-2088-4511-9ad7-97be4a2585ba/event-type-wizard-4.png","alt":"event-type-wizard-4.png"},"strapline":""},{"title":"","body":"<p>In step 5, remove all the pre-selected parent types. Add the <em>Landing page section </em>page type as the only allowed one.</p>\n<p>Press <em>Next </em>repeatedly until you finish the wizard.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3d61874e-d978-462f-95ca-35e210ad103b/event-type-wizard-6.png","alt":"event-type-wizard-6.png"},"strapline":""},{"title":"","body":"<p>Once you're done with the wizard, navigate to the <em>General </em>tab of your new page type.</p>\n<ol>\n  <li>In the <em>URL pattern </em>field, insert <em>\"/{%DocumentCulture%}/EventLandingPage/{%NodeAlias%}\"</em>.</li>\n  <li>In the <em>Advanced settings </em>region, select the <em>Use Page tab </em>checkbox.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/cf8a12ab-200e-4f06-b358-79df5b71b565/event-type-general.png","alt":"event-type-general.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4be7327b-b4a3-453b-b288-0c6773e729b2","_parentId":"c863fdda-b1e9-4e67-9c12-544cb3c00fbe","_type":"component","title":"Creating the event landing page type","displayTitle":"Creating the event landing page type"},{"body":"<div class=\"infobox idea\"><p>The event page template will use two pieces of configuration data in the background: the event location airport and the event date. While the first one is inherently bound to instances of the template, the latter belongs to the pages, since it may be used also for other purposes than just to configure the template.</p>\n<p>While reusability of data is a desired feature that you should aim for, having templates configured with page type fields brings additional complexity. This way, your template will always need to be invoked with a page that has a certain field. You can achieve this by implementing a proper <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-templates-in-mvc/filtering-page-templates-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">page type filter</a> (later in this page).</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"efdf92c8-bf66-44c0-a4ef-224d5f120502","_parentId":"c863fdda-b1e9-4e67-9c12-544cb3c00fbe","_type":"component","title":"Template properties vs page type fields","displayTitle":"Template properties vs page type fields"},{"body":"<p>In order for your template to use the EventDate field, you had to introduce a dedicated page type. This page type also needs its basic page infrastructure consisting of a route, controller, repository, and other classes.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In <em>MedioClinic &gt; App_Start</em>, open <em>RouteConfig.cs</em>.</p>\n<p>In pursuit of the MVC's general rule of thumb, insert the new route above your <em>LandingPage </em>route.</p>","code":{"src":"// Maps route to event landing pages\nroute = routes.MapRoute(\n    name: \"EventLandingPage\",\n    url: \"{culture}/EventLandingPage/{nodeAlias}\",\n    defaults: new { culture = defaultCulture.Name, controller = \"EventLandingPage\", action = \"Index\" },\n    constraints: new { culture = new SiteCultureConstraint(AppConfig.Sitename), nodeAlias = new OptionalRouteConstraint(new RegexRouteConstraint(@\"[\\w\\d_-]*\")) }\n);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let's now generate the model class of your new page type.</p>\n<ol>\n  <li>In the admin UI, navigate to <em>Page types &gt; Event landing page</em>.</li>\n  <li>In the <em>Code </em>tab, copy the code found in Item code.</li>\n  <li>Paste it into a new <em>Business &gt; Generated &gt; Pages &gt; EventLandingPage.generated.cs</em> file.</li>\n  <li>You don't necessarily need to copy the provider code since this solution uses a dedicated query service instead.</li>\n</ol>","code":{"src":"//--------------------------------------------------------------------------------------------------\n// <auto-generated>\n//\n//     This code was generated by code generator tool.\n//\n//     To customize the code use your own partial class. For more info about how to use and customize\n//     the generated code see the documentation at http://docs.kentico.com.\n//\n// </auto-generated>\n//--------------------------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\n\nusing CMS;\nusing CMS.Base;\nusing CMS.Helpers;\nusing CMS.DataEngine;\nusing CMS.DocumentEngine.Types.MedioClinic;\nusing CMS.DocumentEngine;\n\n[assembly: RegisterDocumentType(EventLandingPage.CLASS_NAME, typeof(EventLandingPage))]\n\nnamespace CMS.DocumentEngine.Types.MedioClinic\n{\n    /// <summary>\n    /// Represents a content item of type EventLandingPage.\n    /// </summary>\n    public partial class EventLandingPage : TreeNode\n    {\n        // ...\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, you'll create a DTO class for your event landing page. As with the <em>PageViewModel </em>class, this one will also have some ancillary code in it.</p>\n<ol>\n  <li>In <em>Business &gt; Dto &gt; LandingPage</em>, create a new <em>\"EventLandingPageDto\" </em>class file.</li>\n  <li>Inherit from the existing <em>LandingPageDto</em>.</li>\n  <li>On top of the <em>EventDate </em>property, add the two delegate members you see in the snippet.</li>\n  <li>Upon a closer inspection, the <em>LandingPageRepository </em>class will start to make more sense to you. These are the missing pieces in the puzzle that add the column to the query and map it onto the <em>EventDate </em>property above. The event pages will be able to reuse the existing landing page repository.</li>\n</ol>","code":{"src":"public class EventLandingPageDto : LandingPageDto\n{\n    public DateTime EventDate { get; set; }\n\n    public static Func<DocumentQuery<CMS.DocumentEngine.Types.MedioClinic.EventLandingPage>, DocumentQuery<CMS.DocumentEngine.Types.MedioClinic.EventLandingPage>> QueryModifier =\n        (originalQuery) =>\n                originalQuery.AddColumns(\"EventDate\");\n\n    public static Func<CMS.DocumentEngine.Types.MedioClinic.EventLandingPage, EventLandingPageDto, EventLandingPageDto> Selector =\n        (landingPage, landingPageDto) =>\n            {\n                landingPageDto.EventDate = landingPage.EventDate;\n\n                return landingPageDto;\n            };\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, you'll implement the event page controller. It will make use of all the previously created classes to furnish the required <em>DocumentId </em>to the <em>TemplateResult </em>constructor.</p>\n<p>Namely, it passes the <em>QueryModifier </em>and <em>Selector </em>delegates to the repository, so that the <em>EventDate</em> column is properly retrieved and mapped onto the DTO object.</p>","code":{"src":"public class EventLandingPageController : BaseController\n{\n    protected ILandingPageRepository LandingPageRepository { get; }\n\n    public EventLandingPageController(\n        IBusinessDependencies dependencies, ILandingPageRepository landingPageRepository) : base(dependencies)\n    {\n        LandingPageRepository = landingPageRepository ?? throw new ArgumentNullException(nameof(landingPageRepository));\n    }\n\n    // GET: EventLandingPage/[nodeAlias]\n    //[OutputCache(Duration = 3600, VaryByParam = \"nodeAlias\", Location = OutputCacheLocation.Server)]\n    public ActionResult Index(string nodeAlias)\n    {\n        var landingPageDto = LandingPageRepository\n            .GetLandingPage(nodeAlias, EventLandingPageDto.QueryModifier, EventLandingPageDto.Selector);\n\n        if (landingPageDto == null)\n        {\n            return HttpNotFound();\n        }\n\n        Dependencies.CacheService.SetOutputCacheDependency(nodeAlias);\n\n        return new TemplateResult(landingPageDto.DocumentId);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7ef354ff-2087-45b0-a604-00fdc4bd847c","_parentId":"c863fdda-b1e9-4e67-9c12-544cb3c00fbe","_type":"component","title":"Adding a basic page infrastructure","displayTitle":"Adding a basic page infrastructure"},{"body":"<p>In this phase, you'll implement an airport selection form component that will help content editors pick the destination of flights.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Before you dig into the airport selection form component itself, you ought to create an airport repository as a source of data. The data itself will be represented by a traditional DTO class.</p>\n<ol>\n  <li>In <em>Business &gt; Dto</em>, create a new <em>\"Airport\"</em> folder.</li>\n  <li>In that subfolder, create a new <em>\"AirportDto\"</em> class file.</li>\n  <li>Define the <em>AirportIataCode </em>and <em>AirportName </em>property members, as seen in the code snippet.</li>\n  <li>Don't forget to implement <em>IDto</em>. This identification may come in handy in the future.</li>\n</ol>","code":{"src":"public class AirportDto : IDto\n{\n    public string AirportIataCode { get; set; }\n\n    public string AirportName { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the interface in the repository class.</p>\n<ol>\n  <li>In the same <em>Business &gt; Repository &gt; Airport </em>folder, create a new <em>\"AirportRepository\" </em>class file.</li>\n  <li>To make the rest of the code more readable, capture the ordinary table and column names in string constants.</li>\n  <li>To save your server machine from reloading the table definition time and again during each data retrieval, do it per-instantiation through an expression-bodied property.</li>\n  <li>In the <em>GetAirportDtos </em>method, lay the grounds of the query by specifying the table and ordering first.</li>\n  <li>When a search phrase is submitted to the method, enrich the query with the <em>WhereContains </em>parameter. You might be worried that the <em>OrderBy </em>declaration preceeds the <em>WhereContains </em>one. Fear not, the <em>ObjectQuery </em>queries follow the builder design pattern and they get constructed lazily when the query is materialized (i.e. iterated over).</li>\n</ol>","code":{"src":"public class AirportRepository : IAirportRepository\n{\n    protected const string CustomTableClassName = \"customtable.Airports\";\n    protected const string IataCodeColumn = \"AirportIataCode\";\n    protected const string NameColumn = \"AirportName\";\n\n    public DataClassInfo AirportsTable => DataClassInfoProvider.GetDataClassInfo(CustomTableClassName);\n\n    public IEnumerable<AirportDto> GetAirportDtos(string searchPhrase = null)\n    {\n        if (AirportsTable != null)\n        {\n            var query = CustomTableItemProvider.GetItems(CustomTableClassName)\n                .OrderBy(\"AirportName\");\n\n            if (!string.IsNullOrWhiteSpace(searchPhrase))\n            {\n                query.WhereContains(NameColumn, searchPhrase);\n            }\n\n            foreach (var airport in query)\n            {\n                var iataCode = ValidationHelper.GetString(airport.GetValue(IataCodeColumn), \"\");\n                var name = ValidationHelper.GetString(airport.GetValue(NameColumn), \"\");\n\n                yield return new AirportDto\n                {\n                    AirportIataCode = iataCode,\n                    AirportName = name\n                };\n            } \n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, you'll define the data retrieval method in the airport repository interface.</p>\n<ol>\n  <li>In <em>Business &gt; Repository</em>, create a new <em>\"Airport\"</em> folder.</li>\n  <li>In that subfolder, create a new <em>\"IAirportRepository\" </em>interface file.</li>\n  <li>Specify the signature of the <em>GetAirportDtos </em>method, as seen in the snippet.</li>\n  <li>Again, don't forget to inherit from <em>IRepository</em>. This time, it is a hard requirement, since AutoFac wouldn't have been able to furnish client code with implementations of this interface otherwise.</li>\n</ol>","code":{"src":"public interface IAirportRepository : IRepository\n{\n    IEnumerable<AirportDto> GetAirportDtos(string searchPhrase = null);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Continuing with the form components, now it is the right time for the airport selection component properties class.</p>\n<ol>\n  <li>In <em>Models &gt; FormComponents</em>, create a new <em>\"AirportSelection\" </em>folder.</li>\n  <li>In that subfolder, create a new <em>\"AirportSelectionProperties\" </em>class file.</li>\n  <li>Make it inherit from <em>SelectorProperties</em>, leaving the class body empty.</li>\n</ol>","code":{"src":"public class AirportSelectionProperties : SelectorProperties\n{\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now implement the airport selection form component itself.</p>\n<ol>\n  <li>In the same <em>Models &gt; FormComponents &gt; AirportSelection </em>folder, create a new <em>\"AirportSelectionComponent\" </em>class file.</li>\n  <li>Apart from the obligatory Identifier constant, create another one that holds a code name of the custom table with all airports.</li>\n  <li>Also, let the class hold reference to an <em>AirportRepository </em>object, through a property.</li>\n  <li>Fill the property in the constructor. The fact that Kentico form components are being brought to life using reflection, means that you can't initialize the repository via AutoFac.</li>\n  <li>In the overriden <em>GetItems </em>method, simply map the DTOs onto <em>SelectListItem </em>objects.</li>\n  <li>Finally, register the form component in-place.</li>\n</ol>","code":{"src":"[assembly: RegisterFormComponent(\n    AirportSelectionComponent.Identifier,\n    typeof(AirportSelectionComponent),\n    \"{$FormComponent.AirportSelection.Name$}\",\n    ViewName = \"FormComponents/_AirportSelection\",\n    Description = \"{$FormComponent.AirportSelection.Description$}\",\n    IconClass = \"icon-menu\")]\n\nnamespace MedioClinic.Models.FormComponents\n{\n    public class AirportSelectionComponent : SelectorFormComponent<AirportSelectionProperties>\n    {\n        public const string Identifier = \"MedioClinic.FormComponent.AirportSelection\";\n        protected const string CustomTableClassName = \"customtable.Airports\";\n        \n        IAirportRepository AirportRepository { get; }\n\n        public AirportSelectionComponent()\n        {\n            AirportRepository = new AirportRepository();\n        }\n\n        protected override IEnumerable<SelectListItem> GetItems() =>\n            AirportRepository\n                .GetAirportDtos()\n                .Select(dto => new SelectListItem\n                {\n                    Text = dto.AirportName,\n                    Value = dto.AirportIataCode\n                });\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"caee029b-f404-43dc-ad1a-118c03ff02af","_parentId":"c863fdda-b1e9-4e67-9c12-544cb3c00fbe","_type":"component","title":"Implementing the form component, repository","displayTitle":"Implementing the form component, repository"},{"body":"<p>Let's again take some rest from coding for a while. You'll now create the custom table and populate it with airport data.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the admin UI, navigate to <em>Custom tables</em>. Press <em>New custom table</em>.</p>\n<ol>\n  <li>In the <em>Custom table display name</em> field, enter <em>\"Airports\"</em>.</li>\n  <li>Do the same in the <em>Name </em>field.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/38f6f003-cd2f-4846-ad58-e9a6c1f8f350/custom-table-1.png","alt":"custom-table-1.png"},"strapline":""},{"title":"","body":"<p>In the second step, leave all settings at their defaults.</p>\n<p>Press <em>Next</em>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4bec3092-22eb-4b3b-8091-f62dd065058a/custom-table-2.png","alt":"custom-table-2.png"},"strapline":""},{"title":"","body":"<p>In the third step, add a new field.</p>\n<ol>\n  <li>Press <em>New field</em>.</li>\n  <li>Enter <em>\"AirportIataCode\"</em> into the <em>Field name </em>field.</li>\n  <li>Optionally, lower the <em>Size </em>value from the original 200 characters. IATA codes are short in length.</li>\n  <li>Select <em>Required</em>.</li>\n  <li>Enter <em>\"Airport IATA code\"</em> into the <em>Field caption </em>field.</li>\n  <li>Leave all other settings at their defaults.</li>\n  <li>Press <em>Save</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3f5dcbf1-2e4a-4e3e-a2e8-4422a1d4f358/custom-table-3.png","alt":"custom-table-3.png"},"strapline":""},{"title":"","body":"<p>Add another field.</p>\n<ol>\n  <li>Press <em>New field</em>.</li>\n  <li>Enter <em>\"AirportName\"</em> into the <em>Field name </em>field.</li>\n  <li>Select <em>Required</em>.</li>\n  <li>Enter <em>\"Airport name\"</em> into the <em>Field caption </em>field.</li>\n  <li>Leave all other settings at their defaults.</li>\n  <li>Press <em>Save</em>.</li>\n  <li>Press <em>Next </em>multiple times, until you finish the wizard.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/391d26fc-140a-406f-8c21-4e48ed76a93c/custom-table-4.png","alt":"custom-table-4.png"},"strapline":""},{"title":"","body":"<p>When you're done with table creation, populate it using the <a href=\"https://docs.kentico.com/k12sp/external-utilities/kentico-import-toolkit\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Import Toolkit</a>.</p>\n<ol>\n  <li>In the Start menu, start the <em>Kentico Import Toolkit 12.0</em> app.</li>\n  <li>Select <em>Load import profile</em>.</li>\n  <li>Browse for the <em>AirportsImportProfile.iprofile</em> file saved along the database backups in the <em>Db</em> folder in the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Db/AirportsImportProfile.iprofile\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">cloned solution</a>.</li>\n  <li>Press <em>Next</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e7e83352-9ce2-4bd6-8a27-33ea5615aa8b/custom-table-5.png","alt":"custom-table-5.png"},"strapline":""},{"title":"","body":"<p>In the first step, specify reference your solution.</p>\n<ol>\n  <li>Enter the exact path to the root of the solution or, press <em>Browse </em>to find it in a dialog window.</li>\n  <li>If necessary, make a backup of your database.</li>\n  <li>Affirm the ongoing import in the checkbox.</li>\n  <li>Press <em>Next</em>.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/d8ab1d6b-8fd7-4965-a079-f7ba01371370/custom-table-6.png","alt":"custom-table-6.png"},"strapline":""},{"title":"","body":"<p>In step 2, verify that the presets in the import profile are in line with your solution.</p>\n<p>Press <em>Next </em>once you're done.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8b19ab93-9669-4e73-baec-6c5725dd349c/custom-table-7.png","alt":"custom-table-7.png"},"strapline":""},{"title":"","body":"<p>In step 3, specify the exact path to the <em>Airports.xlsx </em>file. Alternatively, press Browse to find it in your <em>Db </em>folder.</p>\n<p>Press <em>Next </em>when you're ready.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e91c65ad-de88-403b-802e-9586dde47f63/custom-table-8.png","alt":"custom-table-8.png"},"strapline":""},{"title":"","body":"<p>In step 4, make sure the table headers are located properly.</p>\n<p>Press <em>Next</em>.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/35c0bb58-930f-4ff6-94dd-633e306bfee2/custom-table-9.png","alt":"custom-table-9.png"},"strapline":""},{"title":"","body":"<p>In step 6, make sure that the columns in the destination custom table match with the columns of the Excel file.</p>\n<p>Press <em>Next </em>multiple times until you eventually import the data.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/91dffda5-9cf0-4f63-af29-ee5df0709e90/custom-table-10.png","alt":"custom-table-10.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"13398c0b-8514-456d-81e8-f2054df278f7","_parentId":"c863fdda-b1e9-4e67-9c12-544cb3c00fbe","_type":"component","title":"Creating a custom table with airport data","displayTitle":"Creating a custom table with airport data"},{"body":"<p>Let's start off with the controller and properties classes. These two classes, along with an ancillary view model class, will make sure there's always a full view model available to the view.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let's start with the properties class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; PageTemplates</em>, create a new <em>\"EventTemplateProperties\" </em>class file.</li>\n  <li>As you've done it in case of the basic page properties, implement <em>IPageTemplateProperties </em>and <em>IViewModel </em>respectively.</li>\n  <li>However, this time around, add a property that represents the event location airport.</li>\n  <li>Decorate it with an attribute of your form component, as seen in the snippet.</li>\n</ol>","code":{"src":"public class EventTemplateProperties : IPageTemplateProperties, IViewModel\n{\n    [EditingComponent(AirportSelectionComponent.Identifier, \n        Label = \"{$PageTemplate.EventPage.LocationAirport$}\",\n        Order = 0)]\n    public string EventLocationAirport { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add a helper view model class that will wrap the data passed into the final view model.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; PageTemplates</em>, create a new <em>\"EventTemplateViewModel\" </em>class file.</li>\n  <li>To be able to passed around to the layout, implement <em>IViewModel</em>.</li>\n  <li>Add the two properties.</li>\n</ol>","code":{"src":"public class EventTemplateViewModel : IViewModel\n{\n    public EventTemplateProperties EventTemplateProperties { get; set; }\n\n    public EventLandingPageDto EventLandingPageDto { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, create the template controller.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers &gt; PageTemplates</em>, create a new <em>\"EventTemplateController\"</em> class file.</li>\n  <li>Inherit from <em>PageTemplateController&lt;EventTemplateProperties&gt;</em>.</li>\n  <li>Capture the business dependencies and landing page repository objects in properties.</li>\n  <li>Use them to factor the <em>EventTemplateViewModel </em>object, whereby you build the final <em>PageViewModel </em>object.</li>\n  <li>Register the template via an assembly-level attribute.</li>\n</ol>","code":{"src":"[assembly: RegisterPageTemplate(\n    \"MedioClinic.Template.EventPage\",\n    typeof(EventTemplateController),\n    \"{$PageTemplate.EventPage.Name$}\",\n    Description = \"{$PageTemplate.EventPage.Description$}\",\n    IconClass = \"icon-app-events\")]\n\nnamespace MedioClinic.Controllers.PageTemplates\n{\n    public class EventTemplateController : PageTemplateController<EventTemplateProperties>\n    {\n        protected IBusinessDependencies Dependencies { get; }\n\n        protected ILandingPageRepository LandingPageRepository { get; }\n\n        public EventTemplateController(IBusinessDependencies dependencies, ILandingPageRepository landingPageRepository)\n        {\n            Dependencies = dependencies ?? throw new ArgumentNullException(nameof(dependencies));\n            LandingPageRepository = landingPageRepository ?? throw new ArgumentNullException(nameof(landingPageRepository));\n        }\n\n        public ActionResult Index()\n        {\n            var page = GetPage();\n            var properties = GetProperties();\n\n            var eventLandingPageDto = !string.IsNullOrEmpty(page?.NodeAlias)\n                ? LandingPageRepository.GetLandingPage(page.NodeAlias, EventLandingPageDto.QueryModifier, EventLandingPageDto.Selector)\n                : null;\n\n            if (properties != null && eventLandingPageDto != null)\n            {\n                var subViewModel = new EventTemplateViewModel\n                {\n                    EventLandingPageDto = eventLandingPageDto,\n                    EventPageProperties = properties\n                };\n\n                var model = PageViewModel<EventTemplateViewModel>.GetPageViewModel(subViewModel, eventLandingPageDto.Title, Dependencies);\n\n                return View(\"PageTemplates/_EventTemplate\", model);\n            }\n\n            return HttpNotFound();\n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3428e287-8b5e-4222-a3f7-c43a2c18b9ac","_parentId":"ff21c62e-f991-430e-a42a-f0a3001b717d","_type":"component","title":"Implementing an event page template","displayTitle":"Implementing an event page template"},{"body":"<p>With virtually all of the admin UI code finished, you're now ready to move onto creating the API endpoint that backs the future autocomplete-enabled Vue.js search box.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Unless you previously created the MedioClinic project with Web API 2 features enabled (using Visual Studio), you should enable Web API 2 in the project manually now.</p>\n<p>You can start by encapsulating the Web API 2 configuration in a small custom class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; App_Start</em>, create a new <em>\"WebApiConfig\" </em>class file.</li>\n  <li>Add a static method that maps attribute routes and a default Web API 2 route.</li>\n</ol>","code":{"src":"public static class WebApiConfig\n{\n    public static void Register(HttpConfiguration config)\n    {\n        config.MapHttpAttributeRoutes();\n\n        config.Routes.MapHttpRoute(\n            name: \"DefaultApi\",\n            routeTemplate: \"api/{controller}/{id}\",\n            defaults: new { id = RouteParameter.Optional }\n        );\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Use your new class in the global configuration of your app.</p>\n<ol>\n  <li>Open<em> MedioClinic &gt; Global.asax.cs</em>.</li>\n  <li>In the <em>Application_Start</em> method, add code that registers Web API 2 in the <em>GlobalConfiguration </em>class, as depicted in the code snippet.</li>\n</ol>","code":{"src":"protected void Application_Start()\n{\n    // Enables and configures selected Kentico ASP.NET MVC integration features\n    ApplicationConfig.RegisterFeatures(ApplicationBuilder.Current);\n\n    // Configures Web API 2\n    GlobalConfiguration.Configure(WebApiConfig.Register);\n\n    // Registers routes including system routes for enabled features\n    RouteConfig.RegisterRoutes(RouteTable.Routes);\n\n    // Dependency injection\n    AutofacConfig.ConfigureContainer();\n\n    BundleConfig.RegisterBundles(BundleTable.Bundles);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Web API 2 is now enabled in the app. However, without further configuration, you'd face a situation where AutoFac fails to provide objects to Web API controllers. You need to make AutoFac aware of Web API 2.</p>\n<ol>\n  <li>Open <em>MedioClinic &gt; App_Start &gt; AutofacConfig.cs</em>.</li>\n  <li>Locate the statement that registers ordinary MVC controllers of the current assembly.</li>\n  <li>Add another one that registers Web API controllers, as demonstrated in the code snippet.</li>\n</ol>","code":{"src":"// Register dependencies in controllers\nbuilder.RegisterControllers(typeof(MvcApplication).Assembly);\n\n// Register dependencies in Web API 2 controllers\nbuilder.RegisterApiControllers(typeof(MvcApplication).Assembly);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now that you have everything set and done, you can add your Web API controller to the project.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers &gt; PageTemplates</em>, create a new <em>\"AirportsController\"</em> class file.</li>\n  <li>Make the class inherit from <em>ApiController</em>, instead of the traditional <em>Controller</em>.</li>\n  <li>Let the class hold a component—an <em>IAirportsController </em>property. Populate it in a traditional way in the constructor.</li>\n  <li>Add a <em>GetAirports </em>method that takes a search phrase as a parameter.</li>\n  <li>Prevent the data retrieval unless the search phrase has at least two characters.</li>\n  <li>Since the structure of the <em>AirportDto </em>class fully complies with the requirements of Web API 2, simply return sequence of <em>AirportDto</em>, without any additional transformations.</li>\n</ol>","code":{"src":"public class AirportsController : ApiController\n{\n    public IAirportRepository AirportRepository { get; }\n\n    public AirportsController()\n    {\n    }\n\n    public AirportsController(IAirportRepository airportRepository)\n    {\n        AirportRepository = airportRepository ?? throw new ArgumentNullException(nameof(airportRepository));\n    }\n\n    public IHttpActionResult GetAirports(string searchPhrase)\n    {\n        IEnumerable<AirportDto> dtos = null;\n\n        if (!string.IsNullOrWhiteSpace(searchPhrase) && searchPhrase.Length > 1)\n        {\n            dtos = AirportRepository\n                .GetAirportDtos(searchPhrase);\n        }\n\n        return Ok(dtos);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e5241e99-aa2c-4fd3-bc0e-90b69191f998","_parentId":"ff21c62e-f991-430e-a42a-f0a3001b717d","_type":"component","title":"Implementing the airports Web API 2 endpoint","displayTitle":"Implementing the airports Web API 2 endpoint"},{"body":"<p>All right. You have the airport selection form component in place, you have the event date accessible through a page type field. All of that was nicely wrapped into an <em>EventTemplateViewModel </em>object. You've also implemented a Web API endpoint to facilitate searching among starting point airports on the live site. With all the background work being done, you can finally focus solely on the page template itself.</p>\n<p>Let's implement the front end logic of the template.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the first step, you'll lay down the groundwork of the template view.</p>\n<ol>\n  <li>In <em>Views &gt; Shared &gt; PageTemplates</em>, create a new <em>\"_EventTemplate\"</em> Razor file.</li>\n  <li>In the same folder, open the existing <em>_BasicTemplate.cshtml </em>file.</li>\n  <li>Copy the whole code over to your newly created view file.</li>\n  <li>Swap the <em>BasicTemplateProperties </em>generic parameter in the view model with <em>EventTemplateProperties</em>.</li>\n  <li>Add a contiguous code block that computes decomposed parts of the <em>EventLandingPageDto.EventDate </em>property.</li>\n  <li>To allow event visitors to arrive one day before the event takes part, compute the <em>dayBefore </em>local variable.</li>\n  <li>In the final part of the code block, concatenate the date elements into the <em>skypickerEndDate </em>and <em>skypickerStartDate </em>string variables. (Notice that we chose to prefix the Kiwi.com-related variables with <em>skypicker</em>, which is used in Kiwi.com API internally.)</li>\n  <li>In the <em>Styles </em>section, add a reference to the future CSS bundle dedicated for page templates.</li>\n  <li>In the <em>Scripts </em>section, add a reference to Vue.js, together with a JavaScript bundle dedicated for templates.</li>\n  <li>Leave the file open for edits in the following steps.</li>\n</ol>\n<p><strong>Note</strong>: To make <em>@Styles.Render </em>and <em>@Scripts.Render </em>methods available, you need to add <em>&lt;add namespace=\"System.Web.Optimization\"/&gt;</em> into your <em>Views &gt; web.config </em>file.</p>","code":{"src":"@using MedioClinic.Models.PageTemplates\n\n@{\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n\n@model MedioClinic.Models.PageViewModel<EventTemplateViewModel>\n\n@{\n    var eventDate = Model.Data.EventLandingPageDto.EventDate;\n    var year = eventDate.Year;\n    var month = eventDate.Month;\n    var day = eventDate.Day;\n    var dayBefore = eventDate == DateTime.MinValue ? eventDate.Day : eventDate.AddDays(-1).Day;\n    var skypickerEndDate = $\"{day}/{month}/{year}\";\n    var skypickerStartDate = $\"{dayBefore}/{month}/{year}\";\n}\n\n@section Styles {\n    @Html.Kentico().PageBuilderStyles()\n    @Styles.Render(\"~/bundles/page-templates-css\")\n}\n\n<div class=\"section\">\n    <div class=\"container\">\n        <div class=\"kn-system-messages\"></div>\n        @Html.Kentico().EditableArea(\"top\")\n    </div>\n</div>\n\n@section Scripts {\n    <script src=\"https://unpkg.com/vue\"></script>\n    @Html.Kentico().PageBuilderScripts()\n    @Scripts.Render(\"~/bundles/page-templates-scripts\")\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Having the skeleton of the view set, you'll now give your view some basic markup that renders the flight search UI.</p>\n<ol>\n  <li>In the <em>_EventTemplate.cshtml</em> file, locate the central part with markup that renders the editable area.</li>\n  <li>Under that markup, add another root-level <em>&lt;div /&gt;</em> element according to the code snippet.</li>\n  <li>Notice that it already contains some <em>\"v-*\"</em> attributes that work as <a href=\"https://vuejs.org/v2/guide/syntax.html#Directives\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js directives</a>.</li>\n  <li>Thanks to these directives, you can see that the inner elements are designed to render based on the current search progress.</li>\n  <li>We've also added markup of the autocomplete-enabled search box. The markup denotes an instance of a future <a href=\"https://vuejs.org/v2/guide/components.html\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js component</a> that you'll later define in a <em>&lt;script /&gt; </em>block.</li>\n  <li>We're still not completely done with the markup. In the next step, you'll add markup into the second inner element, in place of the @<em>* Flight search results *@</em> comment.</li>\n</ol>","code":{"src":"<div class=\"section row\">\n    <div class=\"container\">\n        <h4>Find your flight</h4>\n        <div id=\"app\">\n            <div class=\"input-field\">\n                <autocomplete :place-holder-text=\"placeHolderInputText\"\n                              :result-items=\"autoCompleteResult\"\n                              :on-key-up=\"onKeyUpAutoCompleteEvent\"\n                              :on-selected=\"onSelectedAutoCompleteEvent\"\n                              :auto-complete-progress=\"autoCompleteProgress\">\n                </autocomplete>\n            </div>\n            <div class=\"progress\" v-if=\"skypickerProgress\">\n                <div class=\"indeterminate\"></div>\n            </div>\n            <div v-if=\"!skypickerProgress && flights.length > 0\">\n                @* Flight search results *@\n            </div>\n            <div v-else-if=\"!skypickerProgress && flights.length === 0\">\n                <p>No flights were found.</p>\n            </div>\n        </div>\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>Let's add markup advertised in the previous step. It will render cards of flights found via Kiwi.com.</p>\n<ol>\n  <li>In the markup, locate the inner element denoted with the <em>@* Flight search results *@ </em>comment.</li>\n  <li>Replace that comment with what you see in the code snippet.</li>\n  <li>This markup differs from that of the search box. It no longer requires a Vue.js component to be defined elsewhere and renders the output directly through a bare <a href=\"https://vuejs.org/v2/guide/syntax.html\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">template</a>.</li>\n  <li>Notice the construct of double curly braces. They contain references to global Vue.js <em>data </em>and <em>methods </em>that you'll later define in a <em>&lt;script /&gt;</em> block.</li>\n  <li>As you can see, thanks to the <a href=\"https://vuejs.org/v2/guide/list.html\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">v-for</a> directive, the markup iterates over a collection of flights, rendering an individual card for each of them.</li>\n</ol>","code":{"src":"<h5>Flights from {{ selectedAirportName }} ({{ selectedAirportIataCode }})</h5>\n<div class=\"kn-inline-block\" v-for=\"flight in flights\">\n    <div class=\"card horizontal\">\n        <div class=\"card-image kn-flight-icon\">\n            <i class=\"material-icons\">flight</i>\n        </div>\n        <div class=\"card-stacked\">\n            <div class=\"card-content kn-flight-details\">\n                <table>\n                    <tr>\n                        <th><i class=\"material-icons\">flight_takeoff</i></th>\n                        <td>{{ getDate(flight.dTime) }} {{ getTime(flight.dTime) }}</td>\n                    </tr>\n                    <tr>\n                        <th><i class=\"material-icons\">flight_land</i></th>\n                        <td>{{ getDate(flight.aTime) }} {{ getTime(flight.aTime) }}</td>\n                    </tr>\n                    <tr>\n                        <th><i class=\"material-icons\">timer</i></th>\n                        <td>{{ flight.fly_duration }}</td>\n                    </tr>\n                    <tr>\n                        <th><i class=\"material-icons\">payment</i></th>\n                        <td>${{ flight.price }}</td>\n                    </tr>\n                </table>\n            </div>\n            <div class=\"card-action\">\n                <a v-bind:href=\"flight.deep_link\">Details</a>\n            </div>\n        </div>\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>When you're done with the markup, you can start coding the Vue.js internal logic.</p>\n<ol>\n  <li>Having the <em>_EventTemplate.cshtml </em>file still open, locate the <em>Scripts </em>section in the bottom.</li>\n  <li>Add a <em>&lt;script /&gt; </em>tag.</li>\n  <li>All the logic that initializes the Vue.js app will be encapsulated in a dedicated function, creating a natural boundary for all variables involved in that process.</li>\n  <li>In the name of JavaScript best practice, invoke the initialization function in a fail-safe way, with the help of the <em>DOMContentLoaded </em>event.</li>\n  <li>You will add contents of the <em>initEventPageApp </em>function body in the subsequent two steps.</li>\n</ol>","code":{"src":"@section Scripts {\n    <script src=\"https://unpkg.com/vue\"></script>\n    @Html.Kentico().PageBuilderScripts()\n    @Scripts.Render(\"~/bundles/page-templates-scripts\")\n\n    <script>\n        var initEventPageApp = function () {\n            // The future Vue.js app initialization logic.\n        };\n\n        if (document.readyState === \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", function () {\n                initEventPageApp();\n            });\n        } else {\n            initEventPageApp();\n        }\n    </script>\n}","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, you will add the first half of the <em>initEventPageApp</em> function body.</p>\n<ol>\n  <li>First, declare three Kiwi.com-related variables you see in the top part of the snippet. They are supposed to hand over the previously computed Razor variables to your Vue.js component.</li>\n  <li>Remember, it is important to keep such variables enclosed in a function, if possible.</li>\n  <li>Then, define the <em>\"autocomplete\" </em>Vue.js component.</li>\n  <li>As a Vue.js component, it must be initialized with <em>props</em>, <em>data</em>, and a <em>template </em>string.</li>\n  <li>The <strong>props </strong>encompass the component's configuration accessible from within the <em>&lt;autocomplete /&gt; </em>element or, from a parent component. In the markup, they're transcribed from <em>camelCase </em>into <em>kebab-case</em>.</li>\n  <li>The <strong>data </strong>is the private per-instance state for each component's instance. You'll need to keep just one piece of data as the state—the search phrase.</li>\n  <li>Finally, the <strong>template </strong>specifies the HTML output of the component. As you can see in the template, you'll take the search phrase as the model of the text box, pass it onto the onKeyUp function. This will cause the resultItems prop to be populated with found airports (via your Web API controller), ultimately displaying them under the text box.</li>\n</ol>","code":{"src":"var skypickerStartDate = \"@Html.Raw(skypickerStartDate)\";\nvar skypickerEndDate = \"@Html.Raw(skypickerEndDate)\";\nvar skypickerDestinationIataCode = \"@Html.Raw(Model.Data.EventTemplateProperties.EventLocationAirport)\";\n\nvar autocompleteComponent = Vue.component(\"autocomplete\", {\n    props: {\n        placeHolderText: String,\n        onKeyUp: Function,\n        onSelected: Function,\n        resultItems: Array,\n        autoCompleteProgress: Boolean\n    },\n\n    data() {\n        return {\n            searchPhrase: \"\"\n        };\n    },\n\n    template: `\n        <div>\n            <input type=\"text\" :placeholder=\"placeHolderText\" v-model=\"searchPhrase\" class=\"autocomplete\" @@keyup=\"!autoCompleteProgress ? onKeyUp(searchPhrase) : ''\"/>\n            <ul class=\"autocomplete-content dropdown-content kn-autocomplete\" v-if=\"resultItems.length > 0\">\n\t            <li v-for=\"(item, i) in resultItems\" :key=\"i\" @@click=\"searchPhrase=''; onSelected(item.AirportIataCode, item.AirportName)\">\n\t\t            <span>{{ item.AirportName }} ({{ item.AirportIataCode }})</span>\n\t            </li>\n            </ul>\n        </div>\n    `\n});","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Having the <em>autocompleteComponent </em>variable finished, you can now add another one—<em>eventPageApp</em>. It represents <a href=\"https://vuejs.org/v2/guide/index.html#Declarative-Rendering\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">the heart of the Vue.js app</a>.</p>\n<p>As you can see in the code snippet, in this object you'll mostly resell functions from a dedicated JavaScript namespace. Not only it helps in keeping the page template view file short and simple, it also caters to reusability of JavaScript code.</p>\n<p>Your view file is now complete.</p>","code":{"src":"var eventPageApp = new Vue({\n    el: \"#app\",\n    data: window.medioClinic.eventPage.appData,\n    methods: {\n        onSelectedAutoCompleteEvent(itemId, itemText) {\n            window.medioClinic.eventPage.onSelectedAutoCompleteEventHandler(this, itemId, itemText, skypickerDestinationIataCode, skypickerStartDate, skypickerEndDate);\n        },\n        onKeyUpAutoCompleteEvent(searchPhrase) {\n            window.medioClinic.eventPage.onKeyUpAutoCompleteEventHandler(this, searchPhrase);\n        },\n        getDate(unixTimeStamp) {\n            return window.medioClinic.eventPage.getDate(unixTimeStamp);\n        },\n        getTime(unixTimeStamp) {\n            return window.medioClinic.eventPage.getTime(unixTimeStamp);\n        }\n    }\n});","lang":"javascript"},"strapline":""},{"title":"","body":"<p>To make your event page template work, implement the inner logic in a dedicated namespace.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Content</em>, create a new <em>\"PageTemplates\" </em>folder, with an <em>\"EventPage\" </em>subfolder in it.</li>\n  <li>In that subfolder, create a new <em>\"event-page\" </em>JavaScript file.</li>\n  <li>As you've learned previously, create a namespace as a self-invoking function.</li>\n  <li>Add the <em>eventPage.airportsBaseUrl </em>constant, along with the <em>eventPage.appData </em>object that initializes the whole app.</li>\n  <li>Note that if you wish the placeholder text be localized, you can make <em>appData </em>a function that returns the object based on parameters.</li>\n</ol>","code":{"src":"window.medioClinic = window.medioClinic || {};\n\n(function (eventPage) {\n    /** Base URL for the airports API endpoint. */\n    eventPage.airportsBaseUrl = \"http://localhost/kentico12_medioclinic/api/airports?searchphrase=\";\n\n    /** Vue.js initialization data */\n    eventPage.appData = {\n        flights: [],\n        placeHolderInputText: \"Enter city of departure\",\n        autoCompleteResult: [],\n        autoCompleteProgress: false,\n        selectedAirportName: \"\",\n        selectedAirportIataCode: \"\",\n        skypickerProgress: false\n    };\n\n}(window.medioClinic.eventPage = window.medioClinic.eventPage || {}));","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, add an event handler that uses the search phrase obtained from the text box, polls the Web API controller and, populates the <em>autoCompleteResult </em>variable that backs the <em>resultItems </em>mentioned earlier.</p>","code":{"src":"/**\n * Searches for airports by a search phrase.\n * @param {object} self The original lexical scope.\n * @param {string} searchPhrase The search phrase.\n */\neventPage.onKeyUpAutoCompleteEventHandler = function (self, searchPhrase) {\n    self.autoCompleteResult = [];\n    self.autoCompleteProgress = false;\n\n    if (searchPhrase.length > 1) {\n        self.autoCompleteProgress = true;\n\n        fetch(window.medioClinic.eventPage.airportsBaseUrl + searchPhrase)\n            .then(response => response.json())\n            .then(json => {\n                var newData = [];\n                json.forEach(function (item, index) {\n                    if (item.AirportName.toLowerCase().indexOf(searchPhrase.toLowerCase()) >= 0) {\n                        newData.push(item);\n                    }\n                });\n                self.autoCompleteResult = newData;\n                self.autoCompleteProgress = false;\n            })\n            .catch(e => {\n                self.autoCompleteProgress = false;\n                self.autoCompleteResult = [];\n            });\n    } else {\n        self.autoCompleteProgress = false;\n        self.autoCompleteResult = [];\n    }\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>In this step, add another event handler. The <em>eventPage.onSelectedAutoCompleteEventHandler </em>function reacts to clicking on one of the search results offered by the <em>autocomplete </em>component.</p>\n<p>It polls the Kiwi.com flights endpoint with all IATA codes and other parameters being built by the <em>eventPage.getSkypickerUrl </em>function.</p>\n<p><strong>Note: </strong>If you raise the <em>max_stopovers </em>query string parameter, you will get other than just direct flights.</p>","code":{"src":"/**\n * Searches for flights from a specific airport.\n * @param {object} self The original lexical scope.\n * @param {string} airportIataCode Selected airport IATA code. \n * @param {string} airportName Selected airport name.\n * @param {string} destinationIataCode Destination airport IATA code.\n * @param {string} startDate Formatted start date.\n * @param {string} endDate Formatted end date.\n */\neventPage.onSelectedAutoCompleteEventHandler = function (self, airportIataCode, airportName, destinationIataCode, startDate, endDate) {\n    self.autoCompleteProgress = false;\n    self.autoCompleteResult = [];\n    self.selectedAirportName = airportName;\n    self.selectedAirportIataCode = airportIataCode;\n    self.skypickerProgress = true;\n    var skypickerUrl = window.medioClinic.eventPage.getSkypickerUrl(airportIataCode, destinationIataCode, startDate, endDate);\n\n    fetch(skypickerUrl)\n        .then(response => response.json())\n        .then(json => {\n            self.flights = json.data;\n            self.skypickerProgress = false;\n        })\n        .catch(e => self.skypickerProgress = false);\n};\n\n/**\n * Gets full Skypicker/Kiwi API URL for a certain flight search.\n * @param {string} startingPointIataCode Starting point IATA code.\n * @param {string} destinationIataCode Destination IATA code.\n * @param {string} startDate Formatted start date.\n * @param {string} endDate Formatted end date.\n * @returns {string} Full request URL.\n */\neventPage.getSkypickerUrl = function (startingPointIataCode, destinationIataCode, startDate, endDate) {\n    return \"https://api.skypicker.com/flights?max_stopovers=0&partner=picky&curr=USD&sort=duration\"\n        + \"&fly_from=\"\n        + startingPointIataCode\n        + \"&fly_to=\"\n        + destinationIataCode\n        + \"&dateFrom=\"\n        + startDate\n        + \"&dateTo=\"\n        + endDate;\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>Finally, you will add functions that parse Unix timestamps into JavaScript <em>Date </em>objects.</p>\n<p>These will be used to render time information returned by the Kiwi.com API on the page.</p>","code":{"src":"/**\n * Gets local date string.\n * @param {number} unixTimeStamp UNIX time stamp.\n * @returns {string} Date string.\n */\neventPage.getDate = function (unixTimeStamp) {\n    var date = getDateInternal(unixTimeStamp);\n\n    return date.toLocaleDateString();\n};\n\n/**\n * Gets local time string.\n * @param {number} unixTimeStamp UNIX time stamp.\n * @returns {string} Time string.\n */\neventPage.getTime = function (unixTimeStamp) {\n    var date = getDateInternal(unixTimeStamp);\n\n    return date.toLocaleTimeString();\n};\n\nvar getDateInternal = function (unixTimeStamp) {\n    return new Date(unixTimeStamp * 1000);\n};","lang":"javascript"},"strapline":""},{"title":"","body":"<p>As a second last step, you will add CSS styles to support your page template.</p>\n<ol>\n  <li>In the same <em>MedioClinic &gt; Content &gt; PageTemplates &gt; EventPage </em>folder, create a new <em>\"EventPage\" </em>stylesheet file.</li>\n  <li>Add styles according to the snippet.</li>\n  <li>These styles will be packed into the bundle that you've referred to in your view.</li>\n</ol>","code":{"src":"/* PAGE TEMPLATE STYLES */\n.kn-autocomplete {\n    display: block;\n    opacity: 1;\n    top: 4rem;\n}\n\n.kn-flight-icon > i {\n    font-size: 4rem;\n    text-align: center;\n    margin: 2rem 0 2rem 1rem;\n}\n\n.kn-inline-block {\n    display: inline-block;\n}\n\n.kn-flight-details tr {\n    border-bottom: none;\n}\n\n.kn-inline-block > .card {\n    margin: 1rem 2rem 1rem auto;\n}\n\n/* OVERRIDES OF MATERIALIZECSS FORM STYLES */\n.dropdown-content li > span {\n    color: #455a64;\n}\n\n    .dropdown-content li > span:hover {\n        background-color: #eceff1;\n    }\n","lang":"css"},"strapline":""},{"title":"","body":"<p>As the very last step, add the JavaScript namespace, along with the CSS stylesheet, into the MVC bundles.</p>\n<ol>\n  <li>Open <em>MedioClinic &gt; App_Start &gt; BundleConfig.cs</em>.</li>\n  <li>Add the depicted bundles.</li>\n</ol>","code":{"src":"bundles.Add(new ScriptBundle(\"~/bundles/page-templates-scripts\")\n    .IncludeDirectory(\"~/Content/PageTemplates\", \"*.js\", true)\n);\n\nbundles.Add(new StyleBundle(\"~/bundles/page-templates-css\")\n    .IncludeDirectory(\"~/Content/PageTemplates\", \"*.css\", true)\n);","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"45141744-19d9-4c6e-bc5a-4be5d2dca3c7","_parentId":"ff21c62e-f991-430e-a42a-f0a3001b717d","_type":"component","title":"Implementing the front end logic of the template","displayTitle":"Implementing the front end logic of the template"},{"body":"<p>Before you leave this page, you should implement a simple <a href=\"https://docs.kentico.com/k12sp/developing-websites/page-builder-development/developing-page-templates-in-mvc/filtering-page-templates-in-mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">page template filter</a>. The filter will play an important part in the overall setup since it will prevent the event page template to be offered for other than pages of the event page type. Remember, the template requires the event date, which is defined at the page type level.</p>\n<p>Overall, we highly recommend having page template filters in your sites. Even if you hadn't any hard dependencies to your page types, you should add at least a basic filter to the mix if a subset of all your builder-enabled pages supports page templates. In other words, if some of your controllers use page builder, without returning <em>TemplateResult</em>, your content editors would still be offered to choose from page templates. This is unidesirable.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, create the filter.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Utils</em>, create a new <em>\"LandingPageTemplateFilter\" </em>class file.</li>\n  <li>Implement <em>IPageTemplateFilter</em>.</li>\n  <li>In the <em>Filter </em>method, you're supposed to compare the <em>PageTemplateFilterContext&nbsp;</em>object with the set of all templates that are available to this filter. By saying \"available to this filter\", we mean templates that made it through the funnel of all preceding template filters that may have been registered in the system along with this one. In your setup, you'll have just one filter.</li>\n  <li>The context object will tell you about the page type, parent page, and culture of the currently invoked page.</li>\n  <li>Your job is twofold: First, you ought to make sure that templates will be offered only for the pages of the <em>LandingPage </em>and <em>EventLandingPage </em>types. Second, you need to make sure the event page template will be offered just for pages of the <em>EventLandingPage </em>page type. This is what you'll want to do in the <em>Filter </em>method.</li>\n  <li>To address the first requirement, you add the if-statement that compares the page type codename found in the <em>PageTemplateFilterContext </em>object with code names you aggregated through the <em>LandingPageTypeCodenames </em>property.</li>\n  <li>To meet the second requirement, you add a ternary operator that returns (offers) both templates only for pages that present themselves with what's equal to <em>EventLandingPageTypeCodename</em>. Otherwise, it offers just the basic template.&nbsp;</li>\n  <li>Please bear in mind that the ternary operator was chosen for sake of simplicity. You'll certainly need more robust mechanisms once your template selection broadens.</li>\n</ol>","code":{"src":"public class LandingPageTemplateFilter : IPageTemplateFilter\n{\n    private const string CodenameBase = \"MedioClinic.Template\";\n    private const string LandingPageTypeCodename = CMS.DocumentEngine.Types.MedioClinic.LandingPage.CLASS_NAME;\n    private const string EventLandingPageTypeCodename = CMS.DocumentEngine.Types.MedioClinic.EventLandingPage.CLASS_NAME;\n\n    private string BasicTemplateCodename => $\"{CodenameBase}.BasicPage\";\n\n    private string EventTemplateCodename => $\"{CodenameBase}.EventPage\";\n\n    protected IEnumerable<string> LandingPageTemplates => new string[]\n    {\n        BasicTemplateCodename,\n        EventTemplateCodename\n    };\n\n    protected IEnumerable<string> LandingPageTypeCodenames => new string[]\n    {\n        LandingPageTypeCodename,\n        EventLandingPageTypeCodename\n    };\n\n    public IEnumerable<PageTemplateDefinition> Filter(IEnumerable<PageTemplateDefinition> pageTemplates, PageTemplateFilterContext context)\n    {\n        if (LandingPageTypeCodenames.Any(codename => context.PageType.Equals(codename, StringComparison.OrdinalIgnoreCase)))\n        {\n            return context.PageType.Equals(EventLandingPageTypeCodename, StringComparison.OrdinalIgnoreCase)\n                ? pageTemplates.Where(template => LandingPageTemplates.Contains(template.Identifier, StringComparer.OrdinalIgnoreCase))\n                : pageTemplates.Where(template => template.Identifier.Equals(BasicTemplateCodename, StringComparison.OrdinalIgnoreCase));\n        }\n\n        return pageTemplates.Where(template => !LandingPageTemplates.Contains(template.Identifier));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finally, register the filter in the system.</p>\n<ol>\n  <li>Open <em>MedioClinic &gt; Global.asax.cs</em>.</li>\n  <li>Add another line of code into the <em>Application_Start </em>method, according to the snippet.</li>\n</ol>","code":{"src":"PageBuilderFilters.PageTemplates.Add(new LandingPageTemplateFilter());","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"72947316-9e9d-4f37-8385-f82470cd55d5","_parentId":"be202160-13e4-469e-87ce-ed9d64d42271","_type":"component","title":"Implementing a simple page template filter","displayTitle":"Implementing a simple page template filter"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which of the controller action methods is correct?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"title":"","code":{"src":"public ActionResult Index(string nodeAlias)\n{\n    var landingPageDto = LandingPageRepository.GetLandingPage(nodeAlias);\n    HttpContext.Kentico().PageBuilder().Initialize(landingPageDto.DocumentId);\n\n    return new TemplateResult(landingPageDto.DocumentId);\n}","lang":"csharp"},"feedback":"<p>You don't have to explicitly initialize the page builder features in controllers that return TemplateResult.</p>","_shouldBeSelected":false},{"title":"","code":{"src":"public ActionResult Index(string nodeAlias)\n{\n    var landingPageDto = LandingPageRepository.GetLandingPage(nodeAlias);\n\n    return new TemplateResult(landingPageDto.DocumentId);\n}","lang":"csharp"},"feedback":"","_shouldBeSelected":true}],"_feedback":{"title":"","correct":"<p>Correct. If your controller returns TemplateResult, you no longer have to explicitly initialize page builder features. This is done automatically for you.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"cmcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7d61a869-04e5-45f0-973b-68f0aa16b312","_parentId":"7cb9b718-2d62-4fe8-b364-65e574392492","_type":"component","title":"Template controllers","displayTitle":"Template controllers"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the minimum set of artifacts needed for a template?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>You need:</p>\n<ul>\n  <li>A view</li>\n  <li>A properties class</li>\n  <li>An assembly-level attribute that registers the template in the system</li>\n</ul>","_shouldBeSelected":true,"feedback":""},{"text":"<p>You need:</p>\n<ul>\n  <li>A controller</li>\n  <li>A view</li>\n  <li>A properties class</li>\n</ul>","_shouldBeSelected":false,"feedback":"<p>Actually not. The controller is only required when you want to access features or data that's available in controllers.</p>"}],"_feedback":{"title":"","correct":"<p>Right. In basic scenarios you only need a view, property class, and an attribute that registers the template in the system.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3b85f300-e6c1-4159-b8c8-43131860bfad","_parentId":"7cb9b718-2d62-4fe8-b364-65e574392492","_type":"component","title":"Template building blocks","displayTitle":"Template building blocks"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Are the page template filters required in each project?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Yes, they are required.</p>","_shouldBeSelected":false,"feedback":"<p>There are situations when filtering isn't necessary. For instance, if all templates are independent of page types or, if all page builder pages use either only templates or only traditional views.</p>"},{"text":"<p>They are required in cases when part of the page builder pages use templates, while others use traditional views.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. They aren't required in each site. It depends on the actual setup.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d0765465-e2a0-42b5-bf8d-779685c3bd70","_parentId":"7cb9b718-2d62-4fe8-b364-65e574392492","_type":"component","title":"Page template filters","displayTitle":"Page template filters"},{"body":"<p>Well, that's pretty much about it! You've gone through all the topics that will make you prepared to successfully create Kentico MVC sites with page builder and form builder. In this page, you've learned what MVC page templates can do, what they're composed of on the inside and, most importantly, what the best practice around page templates is.</p>\n<p>The next and last page will be purely optional. In that page, you'll be able to learn about implementing traditional MVC forms that work with Kentico form engine.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"f84067f4-173a-43a1-8245-b87b403bd083","_parentId":"9b969e57-dae4-4a1f-aec7-e58c31a7d01d","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will:</p>\n<ol>\n  <li>Learn how to render basic Kentico forms in non-builder pages</li>\n  <li>Learn the basics of ASP.NET MVC display/editor templates</li>\n  <li>Find out the limitations of the presented approach</li>\n</ol>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"b371ac33-b12d-47bb-863d-d32f9f7609d6","_parentId":"8540d296-3b32-454b-a1fd-df085ba1f190","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Although enabling page builder is as easy as doing a couple of clicks in the administration interface and writing a few additional lines of code, there may be cases when page builder is not desirable in a page. For instance, if you wish to render a form in a series of structured pages with a consistent look, like blog posts, where each post’s body is wrapped in just a single page field.</p>\n<p>Let’s do a quick coding exercise to test what it takes to render a <strong>basic</strong> Kentico form in the traditional MVC way.</p>\n<div class=\"infobox warning\"><p>We strongly recommend rendering Kentico forms through the <em>Form</em> widget (in builder-enabled pages), not in the traditional ASP.NET MVC fashion. Combining Kentico forms with traditional MVC rendering has significant limitations, including (but not limited to):</p>\n<ul>\n  <li>Only form components with a simple bindable property can be used in the form.</li>\n  <li>Configuration of form components set by content contributors in the <em>Form builder</em> tab is ignored.</li>\n  <li>Validation rules and visibility conditions set in the <em>Form builder</em> tab are ignored.</li>\n  <li>Kentico Smart fields cannot be used.</li>\n  <li>Form field configuration, validation, field visibility, and other form behavior must be set in view models, controllers, and views.</li>\n</ul>\n<p>Currently, the combination of Kentico forms with traditional MVC rendering is not officially supported. In this page, we only aim to provide an alternative approach in case either business or technical requirements dictate to avoid using a builder-enabled page. Additionally, an improved API for rendering form builder forms manually may be provided in future versions of Kentico.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"ef47a94f-abf0-4bd7-822f-81d94baa2f71","_parentId":"f5959db4-6366-46ee-88cb-4014c4c1b80c","_type":"component","title":"Rendering forms without the use of page builder","displayTitle":"Rendering forms without the use of page builder"},{"body":"<p>In the detail page of each form in the <em>Forms</em> application, Kentico allows for generating a model class of the form. Such a model gives developers a great head-start to add the form to the project in the traditional MVC fashion.</p>\n<p>The best way to do forms in traditional ASP.NET MVC is with annotated view models, and an MVC feature called display/editor templates.</p>\n<p>With MVC editor templates in play, the developer just gives the MVC runtime a view model and a very simple view. In the Razor view, developers only write the surrounding HTML markup, and put the references to properties of the model into it, without caring about their types. The MVC runtime then automatically renders proper HTML controls (with proper validation behavior), based on the model.</p>\n<p>A very basic example of editor templates can be demonstrated with the following view model:</p>\n<pre><code class=\"language-csharp\">public class Contact\n{\n\tpublic string FirstName { get; set; }\n\tpublic string LastName { get; set; }\n\tpublic int Age { get; set; }\n}</code></pre>\n<p>With such a model, the form’s view can be as simple as the following:</p>\n<pre><code class=\"language-csharp\">@model Contact\n@Html.EditorFor(model =&gt; model.FirstName)\n@Html.EditorFor(model =&gt; model.LastName)\n@Html.EditorFor(model =&gt; model.Age)</code></pre>\n<p>In fact, the view can be even simpler. Like so:</p>\n<pre><code class=\"language-csharp\">@model Contact\n@Html.DisplayForModel()</code></pre>\n<p>This is pretty much everything the MVC framework needs. It uses built-in editor templates and produces the complete HTML markup of the form:</p>\n<figure data-asset-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\" data-image-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/b691a9ab-0120-406b-b80a-28750fce8514/036.png\" data-asset-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\" data-image-id=\"fdb5b20c-f77e-4994-a3b0-6556df884803\" alt=\"\"></figure>\n<p><br></p>\n<p>Developers can of course override the default templates by writing simple Razor files, named after CLR types they operate on (again, it can be either a framework type, or a custom class or struct). When placed into a conventional file system location, these Razor files are then picked automatically by the MVC runtime every time it comes across data of such a type anywhere deep in the whole view model.</p>\n<p>The above code snippet uses a model in which the CLR types of the <em>FirstName</em>, <em>LastName</em>, and <em>Age</em> properties provide complete information about their nature. However, in cases like email address form fields, URL fields, password fields, or hidden fields, developers may want to tell the MVC framework to take additional measures in respect to formatting and validating the values in the form.</p>\n<p>To instruct MVC in such ways, one needs to annotate the model with <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations\">System.ComponentModel.DataAnnotations</a> attributes.</p>\n<p>The following code snippet demonstrates some of the capabilities of data annotations.</p>\n<pre><code class=\"language-csharp\">public bool Boolean { get; set; }\n\n[DataType(DataType.EmailAddress)]\npublic string EmailAddress { get; set; }\n\npublic decimal Decimal { get; set; }\n\n[HiddenInput]\npublic string Hidden { get; set; }\n\n[HiddenInput(DisplayValue = false)]\npublic string HiddenAndInvisible { get; set; }\n\n[DataType(DataType.Html)]\npublic string Html { get; set; }\n\n[Required]\n[Range(10, 100)]\npublic int Integer { get; set; }\n\n[DataType(DataType.MultilineText)]\npublic string MultilineText { get; set; }\n\npublic bool? NullableBoolean { get; set; }\n\n[DataType(DataType.Password)]\npublic string Password { get; set; }\n\npublic string String { get; set; }\n\n[DataType(DataType.Url)]\npublic string Url { get; set; }</code></pre>\n<p>These annotations, together with built-in editor templates, would produce a form like this:</p>\n<pre><code class=\"language-csharp\">//--------------------------------------------------------------------------------------------------\n// &lt;auto-generated&gt;\n//\n//     This code was generated by code generator tool.\n//\n//     To customize the code use your own partial class. For more info about how to use and customize\n//     the generated code see the documentation at http://docs.kentico.com.\n//\n// &lt;/auto-generated&gt;\n//--------------------------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\n\nusing CMS;\nusing CMS.Base;\nusing CMS.Helpers;\nusing CMS.DataEngine;\nusing CMS.OnlineForms.Types;\nusing CMS.OnlineForms;\n\n[assembly: RegisterBizForm(FloridaEventRegistrationItem.CLASS_NAME, typeof(FloridaEventRegistrationItem))]\n\nnamespace CMS.OnlineForms.Types\n{\n\t/// &lt;summary&gt;\n\t/// Represents a content item of type FloridaEventRegistrationItem.\n\t/// &lt;/summary&gt;\n\tpublic partial class FloridaEventRegistrationItem : BizFormItem\n\t{\n\t\t#region \"Constants and variables\"\n\n\t\t/// &lt;summary&gt;\n\t\t/// The name of the data class.\n\t\t/// &lt;/summary&gt;\n\t\tpublic const string CLASS_NAME = \"BizForm.FloridaEventRegistration\";\n\n\t\t...\n\t}\n}</code></pre>\n<p>All the developer needs to do in the top-level MVC view, is to either call <em>“Html.EditorForModel()”</em>, or call several <em>“Html.EditorFor(model =&gt; model.SomeProperty)”</em> for every property.</p>\n<p>With the first option in play, the MVC framework will inspect the model, and it will automatically render each inner part of the model with editor templates. It will search for Razor files named after the types of the properties, and it will render them. Otherwise, it will fall back to the built-in templates.</p>\n<p>It will search in the following locations in the project:</p>\n<ul>\n  <li>Areas &gt; [AreaName] &gt; Views &gt; [ControllerName] &gt; DisplayTemplates</li>\n  <li>Areas &gt; [AreaName] &gt; Views &gt; Shared &gt; DisplayTemplates</li>\n  <li>Views &gt; [ControllerName] &gt; DisplayTemplates</li>\n  <li>Views &gt; Shared &gt; DisplayTemplates</li>\n</ul>\n<p>With the second option, it will do the same for each particular property in the model.</p>\n<p>Calling <em>Html.EditorFor()</em> per each property makes sense in cases where more control over the HTML markup is required. For instance, the developer may want to add horizontal rules between form fields. Such markup can be enclosed in either a partial view, so that the partial view can be explicitly invoked by the developer, or it can be put into an editor template of its own, to be invoked by MVC automatically, whenever it sees data of a corresponding CLR type anywhere in the view model.</p>\n<p>This theory chapter was an excerpt of a bigger topic of MVC display/editor templates and data annotations in MVC. To take all the benefits, we highly recommend reading a <a href=\"https://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html\">short blogpost series</a> (about an hour of reading) of the original author of this feature, Brad Wilson. The series was written in the days of MVC 2, however, nearly all of the concepts are the same in MVC 5 (except for Razor being a preferred view engine in MVC 5). For a detailed explanation of these concepts in Kentico MVC projects, we recommend reading a two-part blogpost series published on <a href=\"https://devnet.kentico.com/articles/render-online-forms-with-asp-net-mvc-display-templates-and-the-code-generator—part-1\">DevNet</a>. Some of the concepts presented in the article remain valid for the current version of Kentico.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"63ee83c5-5cb0-47ce-9b6d-db307feadf0d","_parentId":"24c0228d-ab2c-4e47-a03a-85de5bf504f9","_type":"component","title":"Traditional ASP.NET MVC forms","displayTitle":"Traditional ASP.NET MVC forms"},{"body":"<p>In this task, your goal is to do a quick proof of the built-in capabilities in ASP.NET MVC, not a full-blown page with all the elements and styling.</p>\n<p>You’re supposed to:</p>\n<ul>\n  <li>Generate the model of a form&nbsp;</li>\n  <li>Create a form repository and a view model</li>\n  <li>Annotate the view model to leverage the built-in formatting and validation capabilities of ASP.NET MVC</li>\n  <li>Create a controller, to form a temporary test bench of the future form</li>\n  <li>Let Visual Studio scaffold a simple view</li>\n</ul>\n<p>As usual, if you don’t feel like exploring things yourself, you can follow along in the next demo chapter.</p>\n<div class=\"infobox warning\"><p>We strongly recommend rendering Kentico forms through the <em>Form</em> widget (in builder-enabled pages), not in the traditional ASP.NET MVC fashion. Combining Kentico forms with traditional MVC rendering has significant limitations, including (but not limited to):</p>\n<ul>\n  <li>Only form components with a simple bindable property can be used in the form.</li>\n  <li>Configuration of form components set by content contributors in the <em>Form builder</em> tab is ignored.</li>\n  <li>Validation rules and visibility conditions set in the <em>Form builder</em> tab are ignored.</li>\n  <li>Kentico Smart fields cannot be used.</li>\n  <li>Form field configuration, validation, field visibility, and other form behavior must be set in view models, controllers, and views.</li>\n</ul>\n<p>Currently, the combination of Kentico forms with traditional MVC rendering is not officially supported. In this page, we only aim to provide an alternative approach in case either business or technical requirements dictate to avoid using a builder-enabled page. Additionally, an improved API for rendering form builder forms manually may be provided in future versions of Kentico.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"0e08ee55-c26f-4a91-8893-5fd5e9596f6b","_parentId":"61e97942-d06c-439f-a12a-bc4e7fa153e3","_type":"component","title":"Task: Rendering forms with MVC editor templates","displayTitle":"Task: Rendering forms with MVC editor templates"},{"body":"<p>This demo chapter presents a basic way of adding Kentico forms into an MVC project. We aim to keep it simple to prove the concept. The demo deliberately avoids using any composite models, any CSS styling, any creation of custom partial views, and editor templates alike.</p>\n<p>As advertised in the previous task chapter, you’ll use the generated Kentico model, you’ll abstract from it using a view model, and you’ll create a form repository to be used for various forms in the site. Once you create a testbed controller, you’ll then let Visual Studio scaffold a view.</p>\n<p>As a result, you’ll create a simple page that only contains the form (with no Kentico page data, to keep things simple).</p>\n<figure data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4294fe3e-8566-4ad4-b895-072f25338853/038.png\" data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" alt=\"\"></figure>\n<p><br></p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start by saving the generated Kentico model.</p>\n<ol>\n  <li>In the <em>Forms</em> application, create a form.</li>\n  <li>Once created, go to the <em>Form builder</em> tab.</li>\n  <li>Put two <em>Text input</em> form components into the form.</li>\n  <li>First one should have <em>“First name”</em> as a label, and <em>“FirstName”</em> as its name. Once set, the properties should be saved by pressing <em>Apply</em>.</li>\n  <li>The second one should be called <em>“Last name”</em>, with <em>“LastName”</em> as its name.</li>\n  <li>Place an <em>Email</em> form component onto the form. Call it <em>“Email”</em>, with <em>“EmailInput”</em> as the (code) name.</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/3c2bb060-0fda-4c82-ba17-b392f3513b4d/039.png","alt":"039.png"},"strapline":""},{"title":"","body":"<p>Generate the model class.</p>\n<ol>\n  <li>Navigate to the <em>Code</em> tab.</li>\n  <li>Select a destination path and save the code file.</li>\n  <li>If you encounter an error along the way, check your file system permissions.</li>\n  <li>The identity (the user account) of your application pool needs to have permissions to modify the folder of your <em>CMS</em> project.</li>\n  <li>Alternatively, you can copy and paste the code into a new file in Visual Studio (next step).</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9ffb6470-edcd-4b79-9609-74d71318017c/040.png","alt":"040.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"1c229a4d-08a3-4cfe-a609-4ac853b88aa2","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Demo: Rendering forms with MVC editor templates","displayTitle":"Demo: Rendering forms with MVC editor templates"},{"body":"<p>In the next series of steps, do the actual coding.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Put the model into the solution.</p>\n<ol>\n  <li>In the <em>Business</em> project, in the <em>Generated</em> folder, create a new <em>“Forms”</em> subfolder.</li>\n  <li>Copy the generated code into a new code file in this subfolder (e.g., <em>“FloridaEventRegistration.generated.cs”</em>).</li>\n  <li>Please note that the generated class is partial, and it inherits from <em>CMS.OnlineForms.BizFormItem</em>. This will soon play an important role in finding a way to put data of various forms into Kentico in a unified manner.</li>\n</ol>","code":{"src":"//--------------------------------------------------------------------------------------------------\n// <auto-generated>\n//\n//     This code was generated by code generator tool.\n//\n//     To customize the code use your own partial class. For more info about how to use and customize\n//     the generated code see the documentation at http://docs.kentico.com.\n//\n// </auto-generated>\n//--------------------------------------------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\n\nusing CMS;\nusing CMS.Base;\nusing CMS.Helpers;\nusing CMS.DataEngine;\nusing CMS.OnlineForms.Types;\nusing CMS.OnlineForms;\n\n[assembly: RegisterBizForm(FloridaEventRegistrationItem.CLASS_NAME, typeof(FloridaEventRegistrationItem))]\n\nnamespace CMS.OnlineForms.Types\n{\n\t/// <summary>\n\t/// Represents a content item of type FloridaEventRegistrationItem.\n\t/// </summary>\n\tpublic partial class FloridaEventRegistrationItem : BizFormItem\n\t{\n\t\t#region \"Constants and variables\"\n\n\t\t/// <summary>\n\t\t/// The name of the data class.\n\t\t/// </summary>\n\t\tpublic const string CLASS_NAME = \"BizForm.FloridaEventRegistration\";\n\n\t\t...\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Design the basic architecture.</p>\n<ol>\n  <li>In the <a href=\"https://docs.kentico.com/api12/\">API examples</a> section of the Kentico documentation, find a page dedicated to <a href=\"https://docs.kentico.com/api12/content-management/form-data\">form data</a>.</li>\n  <li>In the first code sample, you’ll find that one of the ways to add data records to a form is by calling a <em>CMS.OnlineForms.BizFormItem.New</em> static method.</li>\n  <li>Once created a form record can be set up with the <em>SetValue</em> method and saved through the Insert method.</li>\n  <li>You want to base the saving mechanism in your future form repository on this pattern.</li>\n</ol>","code":{"src":"// Gets the form object representing the 'ContactUs' form on the current site\nBizFormInfo formObject = BizFormInfoProvider.GetBizFormInfo(\"ContactUs\", SiteContext.CurrentSiteID);\n\nif (formObject != null)\n{\n    // Gets the class name of the 'ContactUs' form\n    DataClassInfo formClass = DataClassInfoProvider.GetDataClassInfo(formObject.FormClassID);\n    string formClassName = formClass.ClassName;\n\n    // Creates a new data record for the form\n    BizFormItem newFormItem = BizFormItem.New(formClassName);\n\n    // Sets the values for the form's fields (UserMessage in this case)\n    newFormItem.SetValue(\"UserMessage\", \"This is a message submitted through the API.\");\n\n    // Saves the new form record into the database\n    // Set values for all 'Required' fields in the form before calling the Insert method, otherwise an exception will occur\n    newFormItem.Insert();\n\n    // Obtains a factory object used to create a form notification sender service for the given form\n    IBizFormMailSenderFactory senderFactory = Service.Resolve<IBizFormMailSenderFactory>();\n\n    // Creates an instance of the form notification sender for the inserted form item\n    IBizFormMailSender sender = senderFactory.GetFormMailSender(formObject, newFormItem);\n\n    // Sends a notification email to users (as specified on the form's 'Email notification' tab)\n    sender.SendNotificationEmail();\n\n    // Sends a confirmation email to the submitter (based on the form's autoresponder settings)\n    sender.SendConfirmationEmail();\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the testbed controller.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, create a new <em>“FormTestController.cs”</em> class file.</li>\n  <li>In order to utilize the common logic, inherit from <em>BaseController</em>.</li>\n  <li>In the controller, you’ll want to have two <em>ActionResult</em> methods called the same way: <em>“Index”</em>. While the first will handle the rendering of the page with the form through a GET request, the other will consume the site visitor’s data through a POST request.</li>\n  <li>For now, just create stubs of the two action methods.</li>\n  <li>Leave your file open for further edits.</li>\n</ol>","code":{"src":"public class FormTestController : BaseController\n{\n\t// GET: FormTest\n\t[HttpGet]\n\tpublic ActionResult Index()\n\t{\n\t\t...\n\t}\n\n\t// POST: FormTest\n\t[HttpPost]\n\tpublic ActionResult Index(\n\t\t[System.Web.Http.FromBody] PageViewModel<FloridaEventRegistrationViewModel> uploadModel)\n\t{\n\t\t...\n\t}\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a view model.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“Forms”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“FloridaEventRegistrationViewModel.cs”</em> class file.</li>\n  <li>Add code according to this code sample.</li>\n  <li>Make sure the property members have the same names as the field names you’ve specified on the Form builder tab in Kentico.</li>\n  <li>Note that you use the data annotations to further specify the nature of the properties in the model (beyond the information carried by the CLR type).</li>\n  <li>Leave this file open for further edits.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nusing Business.Repository.Forms;\n\nnamespace MedioClinic.Models.Forms\n{\n    public class FloridaEventRegistrationViewModel : IViewModel\n    {\n        protected const string RequiredFieldErrorMessage = \"This field is required.\";\n        protected const string TextFieldLengthErrorMessage = \"The first name mustn't exceed 200 characters.\";\n\n        [Display(Name = \"First name\", Prompt = \"Enter your given name here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string FirstName { get; set; }\n\n        [Display(Name = \"Last name\", Prompt = \"Enter your surname here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string LastName { get; set; }\n\n        [Display(Name = \"Email\", Prompt = \"Enter your email address here\")]\n        [EmailAddress(ErrorMessage = \"The value isn't a valid email address.\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string EmailInput { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create code files that support the future form repository.</p>\n<ol>\n  <li>In <em>Business &gt; Repository</em>, create a new <em>“Forms”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“IFormViewModel.cs”</em> interface file.</li>\n  <li>Add code according to the top part of this code snippet.</li>\n  <li>This interface fosters the idea of a reusable form repository. View models will supply their data through a single dictionary, which the repository will consume.&nbsp;</li>\n  <li>Next, in the same subfolder, create an <em>“IFormItemRepository.cs”</em> interface file.</li>\n  <li>Inherit from <em>IRepository</em>.</li>\n  <li>Add the method signature definition according to the bottom part of the code snippet.</li>\n</ol>","code":{"src":"// IFormViewModel.cs\n\nusing System.Collections.Generic;\n\nnamespace Business.Repository.Forms\n{\n    public interface IFormViewModel\n    {\n        IDictionary<string, object> Fields { get; }\n    }\n}\n\n// IFormItemRepository.cs\n\nnamespace Business.Repository.Forms\n{\n    public interface IFormItemRepository : IRepository\n    {\n        void InsertFormItem(string className, IFormViewModel viewModel);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the repository.</p>\n<ol>\n  <li>In <em>Business &gt; Repository &gt; Forms</em>, create a new <em>“FormItemRepository.cs”</em> class file.</li>\n  <li>Add code according to this code snippet.</li>\n  <li>Note that the repository calls the <em>BizFormItem.New</em> static method mentioned above.</li>\n  <li>Then, it iterates over the dictionary to set values of the form fields.</li>\n  <li>Please note that this implementation is basic, and it cannot be used with any composite view models.</li>\n  <li>Finally, the repository saves the form via <em>Insert()</em>.&nbsp;</li>\n</ol>","code":{"src":"using CMS.OnlineForms;\n\nnamespace Business.Repository.Forms\n{\n    class FormItemRepository : IFormItemRepository\n    {\n        public void InsertFormItem(string className, IFormViewModel viewModel)\n        {\n            var formItem = BizFormItem.New(className);\n\n            foreach (var field in viewModel.Fields)\n            {\n                formItem.SetValue(field.Key, field.Value);\n            }\n\n            formItem.Insert();\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Make the view model supply the dictionary.</p>\n<ol>\n  <li>&nbsp;Back in <em>MedioClinic &gt; Models &gt; Forms</em>, create a new <em>“BaseFormViewModel.cs”</em> class file.</li>\n  <li>Mark the class as abstract as it is not meant to be used as it is.</li>\n  <li>Add the <em>GetFields</em> method that takes pairs of field names and values and builds a dictionary out of them.&nbsp;</li>\n</ol>","code":{"src":"using System.Collections.Generic;\n\nnamespace MedioClinic.Models.Forms\n{\n    public abstract class BaseFormViewModel\n    {\n        protected IDictionary<string, object> GetFields(params KeyValuePair<string, object>[] fields)\n        {\n            var dictionary = new Dictionary<string, object>();\n            \n            foreach (var field in fields)\n            {\n                dictionary.Add(field.Key, field.Value);\n            }\n\n            return dictionary;\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Use this method in the view model.</p>\n<ol>\n  <li>Back in the <em>MedioClinic &gt; Models &gt; Forms &gt; FloridaEventRegistrationViewModel.cs</em> file, inherit from <em>BaseFormViewModel</em> and implement <em>IFormViewModel</em>.</li>\n  <li>To satisfy the contract defined in <em>IFormViewModel</em>, add the Fields property according to the code snippet.</li>\n  <li>In the getter, call the <em>GetFields</em> method of the base class, and supply <em>KeyValuePair</em> structures comprising of <em>nameof</em> expressions and the fields themselves.</li>\n</ol>","code":{"src":"using System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nusing Business.Repository.Forms;\n\nnamespace MedioClinic.Models.Forms\n{\n    public class FloridaEventRegistrationViewModel : BaseFormViewModel, IFormViewModel, IViewModel\n    {\n        protected const string RequiredFieldErrorMessage = \"This field is required.\";\n        protected const string TextFieldLengthErrorMessage = \"The first name mustn't exceed 200 characters.\";\n\n        public IDictionary<string, object> Fields =>\n            GetFields(\n                new KeyValuePair<string, object>(nameof(FirstName), FirstName),\n                new KeyValuePair<string, object>(nameof(LastName), LastName),\n                new KeyValuePair<string, object>(nameof(EmailInput), EmailInput)\n                );\n\n        [Display(Name = \"First name\", Prompt = \"Enter your given name here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string FirstName { get; set; }\n\n        [Display(Name = \"Last name\", Prompt = \"Enter your surname here\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string LastName { get; set; }\n\n        [Display(Name = \"Email\", Prompt = \"Enter your email address here\")]\n        [EmailAddress(ErrorMessage = \"The value isn't a valid email address.\")]\n        [Required(ErrorMessage = RequiredFieldErrorMessage)]\n        [MaxLength(200, ErrorMessage = TextFieldLengthErrorMessage)]\n        public string EmailInput { get; set; }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now you can call your repository from the controller.</p>\n<ol>\n  <li>Back in the <em>MedioClinic &gt; Controllers &gt; FormTestController.cs</em> file, add the <em>PageName</em> string constant. It will be used in both action methods to specify the title of the page.</li>\n  <li>Next, add the property member to hold the instance of <em>IFormItemRepository</em>.</li>\n  <li>Also, add a constructor that takes the <em>IBusinessDependencies</em> and <em>IFormItemRepository</em> instances.</li>\n  <li>Assign the form repository object to the property member and pass the business dependencies object to the parent class’ constructor.</li>\n  <li>Leave the file open for the following two steps.</li>\n</ol>","code":{"src":"protected const string PageName = \"Form test\";\n\nIFormItemRepository FormItemRepository { get; }\n\npublic FormTestController(\n\tIBusinessDependencies businessDependencies,\n\tIFormItemRepository formItemRepository)\n\t: base(businessDependencies)\n{\n\tFormItemRepository = formItemRepository \n\t\t?? throw new ArgumentNullException(nameof(formItemRepository));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the GET action method.</p>\n<ol>\n  <li>Construct an empty <em>FloridaEventRegistrationViewModel</em> object.</li>\n  <li>Pass that object around, together with the <em>PageName</em> constant, to the <em>GetPageViewModel</em> method of the base class.</li>\n  <li>Then, forward the resulting <em>PageViewModel&lt;&gt;</em> object to the default (conventional) view.</li>\n</ol>","code":{"src":"// GET: FormTest\n[HttpGet]\npublic ActionResult Index()\n{\n\tvar model = GetPageViewModel(new FloridaEventRegistrationViewModel(), \n\t\tPageName);\n\n\treturn View(model);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the POST action method.</p>\n<p>1. First, examine the validity of the upload model by calling <em>ModelState.IsValid</em></p>\n<p>2. Call the <em>InsertFormItem</em> method of your repository. Supply the codename of the Kentico form (the same as in the generated model class), and the uploaded data itself.</p>\n<p>3. Enclose the call in a try-catch block.</p>\n<p>4. As this controller is just a proof of concept, for both the successful and erroneous results, return just <em>Content()</em>.</p>\n<p>5. In cases of invalid model state, construct the <em>PageViewModel&lt;&gt;</em> object again, using the same data that was obtained earlier. This will make sure the user doesn’t have to fill all form fields again.</p>\n<p>Return a conventional view.</p>","code":{"src":"// POST: FormTest\n[HttpPost]\npublic ActionResult Index(\n\t[System.Web.Http.FromBody] PageViewModel<FloridaEventRegistrationViewModel> uploadModel)\n{\n\tif (ModelState.IsValid)\n\t{\n\t\ttry\n\t\t{\n\t\t\tFormItemRepository.InsertFormItem(\"BizForm.FloridaEventRegistration\",\n\t\t\t\t\t\tuploadModel.Data);\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\treturn Content(\"There was an error when submitting your form.\");\n\t\t}\n\n\t\treturn Content(\"Your form has been submitted.\");\n\t}\n\n\tvar model = GetPageViewModel(uploadModel.Data, PageName);\n\n\treturn View(model);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"d73cc42f-a904-4c3a-a2df-c67f82c898df","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Coding part","displayTitle":"Coding part"},{"body":"<p>Scaffold a view.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let Visual Studio automatically scaffold a basic view.</p>\n<ol>\n  <li>Right-click the <em>Index</em> action method that handles GET requests.</li>\n  <li>In the context menu, select <em>Add view</em>.</li>\n  <li>In the <em>Template</em> dropdown field, select <em>Create</em>.</li>\n  <li>In the <em>Model class</em> dropdown field, select <em>FloridaEventRegistrationViewModel (MedioClinic.Models.Forms)</em>.</li>\n  <li>Leave the last text field empty, as depicted in the screenshot.</li>\n  <li>Click Add.&nbsp;</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/74158b3a-4f80-41e3-91d5-3e5b8c73c714/035.png","alt":"035.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"50762ced-1310-41f5-b229-ff6b34b2e083","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Scaffolding","displayTitle":"Scaffolding"},{"body":"<p>Do the final steps.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Inspect the scaffolded view. It contains a few parts that won’t be required. It also needs a few other adjustments to work correctly.&nbsp;</p>\n<ol>\n  <li>The <em>@model</em> directive only states the <em>FloridaEventRegistrationViewModel</em> type. However, we use <em>PageViewModel&lt;&gt;</em> in the content pages. Replace it with <em>“PageViewModel&lt;FloridaEventRegistrationViewModel&gt;”</em> (either in this shorter form, together with a preceding <em>@using </em>directive, or in a fully-qualified form).</li>\n  <li>In the first code block, it sets the <em>ViewBag.Title</em> property. We don’t need that as our <em>PageViewModel&lt;&gt;</em> object already has the title value. The MVC layout already took care of the title. Remove that code block.</li>\n  <li>Then, it has the <em>FloridaEventRegistrationViewModel</em> value in the <em>&lt;h4 /&gt;</em> header element. You may want to put a user-friendly text into it instead.</li>\n  <li>In alignment with the change of the <em>@model</em> directive, replace all calls to the model with calls to the inner <em>Data</em> property of the model.</li>\n  <li>Remove the element with the call to <em>Html.ActionLink</em> in the bottom of the view.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.Forms.FloridaEventRegistrationViewModel\n\n@{\n    ViewBag.Title = \"Index\";\n}\n\n<h2>Index</h2>\n\n@using (Html.BeginForm()) \n{\n    @Html.AntiForgeryToken()\n    \n    <div class=\"form-horizontal\">\n        <h4>FloridaEventRegistrationViewModel</h4>\n        <hr />\n        @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n        <div class=\"form-group\">\n            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n            <div class=\"col-md-10\">\n                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = \"form-control\" } })\n                @Html.ValidationMessageFor(model => model.FirstName, \"\", new { @class = \"text-danger\" })\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n            <div class=\"col-md-10\">\n                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = \"form-control\" } })\n                @Html.ValidationMessageFor(model => model.LastName, \"\", new { @class = \"text-danger\" })\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            @Html.LabelFor(model => model.EmailInput, htmlAttributes: new { @class = \"control-label col-md-2\" })\n            <div class=\"col-md-10\">\n                @Html.EditorFor(model => model.EmailInput, new { htmlAttributes = new { @class = \"form-control\" } })\n                @Html.ValidationMessageFor(model => model.EmailInput, \"\", new { @class = \"text-danger\" })\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <div class=\"col-md-offset-2 col-md-10\">\n                <input type=\"submit\" value=\"Create\" class=\"btn btn-default\" />\n            </div>\n        </div>\n    </div>\n}\n\n<div>\n    @Html.ActionLink(\"Back to List\", \"Index\")\n</div>","lang":"csharp"},"strapline":""},{"title":"","body":"<p>This code snippet gives you a glimpse of what the view would look like with all the edits in place.</p>","code":{"src":"@using MedioClinic.Models.Forms\n@model MedioClinic.Models.PageViewModel<FloridaEventRegistrationViewModel>\n\n<div class=\"section kn-section-top\">\n    <div class=\"container\">\n        <div class=\"row\">\n            @using (Html.BeginForm())\n            {\n                @Html.AntiForgeryToken()\n\n                <div class=\"form-horizontal\">\n                    <h4>Florida event registration form</h4>\n                    @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n                    <div class=\"form-group\">\n                        @Html.LabelFor(model => model.Data.FirstName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                        <div class=\"col-md-10\">\n                            @Html.EditorFor(model => model.Data.FirstName, new { htmlAttributes = new { @class = \"form-control\" } })\n                            @Html.ValidationMessageFor(model => model.Data.FirstName, \"\", new { @class = \"text-danger\" })\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        @Html.LabelFor(model => model.Data.LastName, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                        <div class=\"col-md-10\">\n                            @Html.EditorFor(model => model.Data.LastName, new { htmlAttributes = new { @class = \"form-control\" } })\n                            @Html.ValidationMessageFor(model => model.Data.LastName, \"\", new { @class = \"text-danger\" })\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        @Html.LabelFor(model => model.Data.EmailInput, htmlAttributes: new { @class = \"control-label col-md-2\" })\n                        <div class=\"col-md-10\">\n                            @Html.EditorFor(model => model.Data.EmailInput, new { htmlAttributes = new { @class = \"form-control\" } })\n                            @Html.ValidationMessageFor(model => model.Data.EmailInput, \"\", new { @class = \"text-danger\" })\n                        </div>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <div class=\"col-md-offset-2 col-md-10\">\n                            <input type=\"submit\" value=\"Submit\" class=\"btn btn-default\" />\n                        </div>\n                    </div>\n                </div>\n            }\n        </div>\n    </div>\n</div>","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"356750fe-0536-4824-bdf3-52ad86830f81","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Finish the process","displayTitle":"Finish the process"},{"body":"<p>All right. Now that you have everything set and done, why not giving the traditional MVC form a try? Navigate to <em>“/FormTest”</em> to see the form in action.</p>\n<figure data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4294fe3e-8566-4ad4-b895-072f25338853/038.png\" data-asset-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" data-image-id=\"2824726e-cf5d-4d68-9bf1-189dfe823ce2\" alt=\"\"></figure>\n<p><br></p>\n<p>First, you can test the validation capabilities by an invalid email address. Thanks to the presence of the <em>System.ComponentModel.DataAnnotations.EmailAddressAttribute</em> attribute in the view model, the MVC framework gives you a warning.</p>\n<p>Then, with a valid address, you can test adding of the form entry. It will be visible in the <em>Forms</em> application, on the <em>Recorded data</em> tab of your form.</p>\n<div class=\"infobox warning\"><p>We strongly recommend rendering Kentico forms through the <em>Form</em> widget (in builder-enabled pages), not in the traditional ASP.NET MVC fashion. Combining Kentico forms with traditional MVC rendering has significant limitations, including (but not limited to):</p>\n<ul>\n  <li>Only form components with a simple bindable property can be used in the form.</li>\n  <li>Configuration of form components set by content contributors in the <em>Form builder</em> tab is ignored.</li>\n  <li>Validation rules and visibility conditions set in the <em>Form builder</em> tab are ignored.</li>\n  <li>Kentico Smart fields cannot be used.</li>\n  <li>Form field configuration, validation, field visibility, and other form behavior must be set in view models, controllers, and views.</li>\n</ul>\n<p>Currently, the combination of Kentico forms with traditional MVC rendering is not officially supported. In this page, we only aim to provide an alternative approach in case either business or technical requirements dictate to avoid using a builder-enabled page. Additionally, an improved API for rendering form builder forms manually may be provided in future versions of Kentico.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"af974b9c-e7ec-4651-adea-91b034965865","_parentId":"48c0412d-0ddc-4e05-88e6-fcf03b4bb38b","_type":"component","title":"Testing time","displayTitle":"Testing time"},{"body":"<p>To significantly ease the development process, we haven’t employed any performance-optimization techniques common to Kentico. Namely, we haven’t used caching.</p>\n<p>Not that it would be hard to employ caching. The main impediment of having caching during development would rather be the necessity to clear the cache after each build.</p>\n<p>Therefore, we’ll quickly take care of caching now.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1e2ca2d7-b287-443d-bda4-2ee0a6b2be95","_parentId":"2cfd5a47-d66b-4613-abdf-f0aeaf5da6e9","_type":"component","title":"General note on performance","displayTitle":"General note on performance"},{"body":"<p>In this short chapter, we’ll give you guidance to add basic output caching support to your builder-enabled page in the Medio Clinic website.<br>\n&nbsp;</p>\n<div class=\"infobox note\"><p>This demo presumes that personalization is not used in the project. In personalized builder-enabled pages, additional cache dependencies need to be specified.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In this series of steps, you’ll add a method to the cache service, and then, you’ll make use of it in the landing page controller.&nbsp;</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Cache</em>, open the <em>ICacheService.cs</em> interface file.</li>\n  <li>Add an overloaded signature of the <em>SetOutputCacheDependency</em> method that takes the node alias path.</li>\n</ol>","code":{"src":"void SetOutputCacheDependency(string nodeAliasPath);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let the cache service implement the new method.&nbsp;</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Cache</em>, open the <em>CacheService.cs</em> class file.</li>\n  <li>Let Visual Studio add a stub of the new method overload by pressing Ctrl+. on the keyboard.</li>\n  <li>In the method body, call GetNodeCacheDependencyKey to build the dependency key.</li>\n  <li>Ensure the dummy key.</li>\n  <li>Add a new dependency into the HTTP context object, so that it can be used by the output caching mechanism in the controller.</li>\n</ol>","code":{"src":"public void SetOutputCacheDependency(string nodeAliasPath)\n{\n    var dependencyCacheKey = GetNodeCacheDependencyKey(nodeAliasPath);\n\n    // Ensures that the dummy key cache item exists\n    CacheHelper.EnsureDummyKey(dependencyCacheKey);\n\n    // Sets cache dependency to clear the cache when there is any change to node with given GUID in Kentico\n    HttpContext.Current.Response.AddCacheItemDependency(dependencyCacheKey);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Tune the controller to use output caching.&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, open the <em>LandingPageController.cs</em> class file.</li>\n  <li>Decorate the Index action method with <em>System.Web.Mvc.OutputCacheAttribute</em>.</li>\n  <li>For the <em>VaryByParam</em> parameter, use <em>“nodeAlias”</em>, as seen in the code snippet.</li>\n  <li>In the body of the action method, add a statement that calls the new <em>SetOutputCacheDependency</em> overload you’ve just implemented in the cache service. Use the value of the <em>nodeAlias</em> route data parameter as an argument.</li>\n</ol>","code":{"src":"using System;\nusing System.Web.Mvc;\nusing System.Web.UI;\n\nusing Business.DependencyInjection;\nusing Business.Repository.LandingPage;\nusing Kentico.PageBuilder.Web.Mvc;\nusing Kentico.Web.Mvc;\n\nnamespace MedioClinic.Controllers\n{\n    public class LandingPageController : BaseController\n    {\n        protected ILandingPageRepository LandingPageRepository { get; }\n\n        public LandingPageController(\n            IBusinessDependencies dependencies, ILandingPageRepository landingPageRepository) : base(dependencies)\n        {\n            LandingPageRepository = landingPageRepository ?? throw new ArgumentNullException(nameof(landingPageRepository));\n        }\n\n        // GET: LandingPage/[nodeAlias]\n        [OutputCache(Duration = 3600, VaryByParam = \"nodeAlias\", Location = OutputCacheLocation.Server)]\n        public ActionResult Index(string nodeAlias)\n        {\n            var landingPageDto = LandingPageRepository.GetLandingPage(nodeAlias);\n\n            if (landingPageDto == null)\n            {\n                return HttpNotFound();\n            }\n\n            Dependencies.CacheService.SetOutputCacheDependency(nodeAlias);\n            var model = GetPageViewModel(landingPageDto.Title);\n            HttpContext.Kentico().PageBuilder().Initialize(landingPageDto.DocumentId);\n\n            return View(model);\n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8f7ab787-28f1-41aa-a946-0c81f671ee9a","_parentId":"2a987c2a-6f77-4c7a-9080-fcc280fbffc5","_type":"component","title":"Demo: Introducing caching","displayTitle":"Demo: Introducing caching"},{"body":"<p>Congratulations on passing the second module of the Kentico MVC for Developers course!</p>\n<p>You will automatically receive a Certificate of Course Completion after you submit the course feedback. Thank you for letting us know what you think about the training course!</p>\n<h2>What are the next steps?</h2>\n<p>There are many resources you can turn to if you need help with your Kentico MVC implementation.</p>\n<ol>\n  <li>Read the&nbsp;<a href=\"https://docs.kentico.com/k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>&nbsp;first.</li>\n  <li>Install and investigate the K12 Dancing Goat MVC sample site (or check the&nbsp;<a href=\"https://github.com/Kentico/Mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">K11 Dancing Goat MVC sample site</a>&nbsp;on GitHub) to find out how to implement online marketing or e-commerce functionality to your website.</li>\n  <li>Search&nbsp;<a href=\"https://devnet.kentico.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico DevNet community</a>&nbsp;or&nbsp;<a href=\"https://stackoverflow.com/questions/tagged/kentico\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico StackOverflow</a>&nbsp;if you haven't found what you needed.</li>\n  <li>Contact&nbsp;<a href=\"https://www.kentico.com/support/technical-support\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico support</a>. (Kentico support will help you answer general questions or resolve problems regarding the core platform.)</li>\n  <li>Work with&nbsp;<a href=\"https://www.kentico.com/services/consulting/overview\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico consulting</a>&nbsp;if you have questions or problems regarding your customization.</li>\n</ol>\n<h2>Boost you Kentico developer skills</h2>\n<p>You can continue learning in the&nbsp;<a href=\"http://www.kentico.com/services/training/overview/developer/advanced-developer\">Kentico Customization for Developers</a>&nbsp;course where you can get more experience with extending Kentico administration platform.</p>\n<p>You will learn about development methods and processes such as creating a custom module, creating custom scheduled tasks or implement custom global events. After completing the&nbsp;<em>Kentico Customization for Developers</em>&nbsp;course, you will be entitled to one free shot at the&nbsp;<a href=\"http://www.kentico.com/services/training/developer-certification\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Certified Developer Exam</a>.</p>\n<h2>Learn how to deliver projects with Kentico</h2>\n<p>The&nbsp;<a href=\"https://advantage.kentico.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Advantage</a>&nbsp;walks you through all phases of delivering a successful web project. This resource leverages the collective experience of Kentico solution architects who identified best practices as well as difficulties for every stage of the project.</p>\n<h2>Get certified</h2>\n<p><a href=\"https://www.kentico.com/services/training/developer-certification\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Certified Developer Exam</a>&nbsp;is designed to validate your ability to work with the Kentico platform. Please note that our developer training courses do not fully prepare you for the exam. Passing the exam requires not only knowing product’s features and functionality in theory, but it also requires practical experience and a high-level familiarity with the product itself. Therefore we recommend completing a project on Kentico before taking the exam.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"e084200c-39ef-46e1-add3-1dcbf0a15937","_parentId":"aa5b7216-6439-4ada-8c71-ee5cf3a3211a","_type":"component","title":"Closing words","displayTitle":"Closing words"}]