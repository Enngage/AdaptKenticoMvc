[{"body":"<p><strong>Welcome to the Kentico MVC Developer course!</strong>&nbsp;</p>\n<p>The&nbsp;<strong>Kentico MVC for Developers</strong>&nbsp;course is divided into modules, each of which covers different topics.&nbsp;</p>\n<p>In the first module of this course, you’ve developed a Kentico MVC website of a made-up Medio Clinic medical institution.&nbsp;</p>\n<p>The third&nbsp;module—<strong>Identity</strong>—teaches the basics of&nbsp;identity management&nbsp;in Kentico MVC sites.&nbsp;</p>\n<p>In this course module, you will:&nbsp;</p>\n<ul>\n  <li>Learn the principles of user management&nbsp;in Kentico&nbsp;</li>\n  <li>Learn about the&nbsp;security model of Kentico&nbsp;</li>\n  <li>Learn about the&nbsp;architectural patterns of&nbsp;the&nbsp;ASP.NET Identity&nbsp;framework recommended&nbsp;for MVC projects&nbsp;</li>\n  <li>Learn about the level of support of ASP.NET Identity in&nbsp;Kentico NuGet packages&nbsp;</li>\n  <li>Prepare infrastructure to support extended Kentico user objects&nbsp;</li>\n  <li>Enable the Medio Clinic site to support user registration&nbsp;</li>\n  <li>Implement a double opt-in registration&nbsp;(confirmed through email)&nbsp;</li>\n  <li>Allow site visitors to sign in&nbsp;and out&nbsp;</li>\n  <li>Let them&nbsp;securely reset their passwords&nbsp;</li>\n  <li>Properly extend the&nbsp;default ASP.NET Identity schema to support custom properties&nbsp;of&nbsp;various user types (roles)&nbsp;</li>\n  <li>Create&nbsp;a secured section that allows doctors and&nbsp;patients to edit their user profiles&nbsp;</li>\n  <li>Make provisions for future&nbsp;updates of the profile pages, so that&nbsp;each role can update only their own custom properties</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"b3ec8fb6-b9ac-4b5f-93d1-e6e675c08cd1","_parentId":"e653a331-420f-4202-b279-77c2e30444bc","_type":"component","title":"Introduction to course","displayTitle":"Introduction to course"},{"body":"<h2>About the module</h2>\n<p>Each topic in the module is discussed on a separate page, which is split into different parts. You can use&nbsp;<strong>the menu on the right&nbsp;</strong>to navigate on the page.</p>\n<h3>Theory</h3>\n<p>The&nbsp;<strong>top section of the page explains the theory</strong>&nbsp;and&nbsp;<strong>recommends the approach you should take</strong>&nbsp;and&nbsp;<strong>the best practices to follow&nbsp;</strong>when developing your Kentico website. The most important implementation details of the Medio Clinic site are often explained with code snippets or hyperlinks to the <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">sample implementation in GitHub</a>.</p>\n<div class=\"infobox note\"><p>Note that the repository contains code for all modules of this course, i.e. Essentials, Builders, and Identity.</p></div>\n<h3>Tasks</h3>\n<p>You can get your hands dirty and build your version of the Medio Clinic website using the MVC development pattern by completing&nbsp;<strong>tasks specified in the midsection.</strong></p>\n<h3><strong>Demos</strong></h3>\n<p>If you need to get some guidance,<strong>&nbsp;you can follow the demos&nbsp;</strong>which break Medio Clinic sample code into more manageable chunks and show you&nbsp;<strong>how the feature was implemented.</strong>&nbsp;However, in most cases, you won't be able to just copy-paste the sample snippets into your solution, and you'll have to do some thinking and coding by yourself.</p>\n<h3>Progress-checks</h3>\n<p>The bottom part of the page gives you a chance to<strong>&nbsp;check your understanding of the topics in a few quick quiz questions</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c2301f4d-b208-43ac-83a6-c507fcffec80","_parentId":"e0b71ff4-de41-4aaa-8cf4-dcfff0cfaf16","_type":"component","title":"About the module","displayTitle":"About the module"},{"body":"<p>To get the final result of this course module, you can clone or fork a&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a>.</p>\n<div class=\"infobox note\"><p>Note that the repository contains code for all modules of this course, i.e. Essentials, Builders, and Identity.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ffc6569f-7eb6-4dec-ab33-3f462e062151","_parentId":"9d8aab52-84b7-41d1-b693-e696c54aeb6c","_type":"component","title":"Get the code","displayTitle":"Get the code"},{"body":"<h2>Course navigation</h2>\n<p>The course module opens in a separate browser window. To:</p>\n<ul>\n  <li>get to <strong>another part of the page</strong>, use the navigation menu in the top-right corner of each page.</li>\n  <li>return to the&nbsp;<strong>module's home page</strong>, use the&nbsp;<strong>&lt;</strong><em>&nbsp;(back)</em>&nbsp;chevron in the top-left corner of each page.</li>\n  <li>navigate <strong>back to the course material in the browser window</strong>, use keyboard shortcut to go back.</li>\n</ul>\n<p>The module <strong>tracks your progress</strong>, so feel free to close the separate window and come back whenever you have time. You will be able to <strong>continue where you left off</strong>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"730de684-a838-4248-9324-3fc42453f30b","_parentId":"0659d896-e874-487f-b36f-6a5d0174c332","_type":"component","title":"Navigation","displayTitle":"Navigation"},{"body":"<p>In the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinicStaticAssets.zip\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">MedioClinicStaticAssets.zip</a>&nbsp;archive, you’ll find a picture used in registration and sign-in pages. Namely, it is the&nbsp;<em>assets &gt; register-signin.jpg</em>&nbsp;file in the archive.&nbsp;Apart from that, you’ll also find the avatar-template.jpg file in the same folder.</p>\n<p>You won’t need any other images or assets in this course module.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b9ba8d7e-e8d2-4b7b-8015-c6a0b265ea81","_parentId":"86a300d1-9de9-49aa-8fb1-b8e18faa76be","_type":"component","title":"Medio Clinic website assets","displayTitle":"Medio Clinic website assets"},{"body":"<p>Unlike the Essentials module&nbsp;of the course, this&nbsp;one&nbsp;is optional.&nbsp;To start with this module, you’ll&nbsp;only need knowledge acquired in the Essentials module. You’re not required to&nbsp;use knowledge or code from other optional course modules,&nbsp;neither you need to use code thereof.&nbsp;</p>\n<p>The&nbsp;final&nbsp;working&nbsp;result of this module is captured in the&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a>. Feel free to refer to&nbsp;it&nbsp;anytime you’re not sure about&nbsp;an instruction.</p>\n<div class=\"infobox note\"><p>Note that the repository contains code for all modules of this course, i.e. Essentials, Builders, and Identity.</p></div>\n<p><br></p>\n<div class=\"infobox note\"><p>Please note that in some parts of this course module, you'll have two alternative ways of implementing the same kind of functionality. This is because in ASP.NET MVC (and in software development in general), nothing is carved in stone. You might want to choose one way over another, depending on your business or technical requirements.</p></div>\n<p><br></p>\n<h4>Questions</h4>\n<p>If you have any questions about the course or its contents, contact us at&nbsp;<a href=\"mailto:elearning@kentico.com\">elearning@kentico.com</a>.&nbsp;</p>\n<p>Should you have concerns about specific parts of the source code, feel free to&nbsp;<a href=\"https://github.com/Kentico/training-kentico-k12/issues/new\">file an issue</a>&nbsp;in our GitHub repository.&nbsp;</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bd153f4b-cb16-482e-8eed-0e8ca30be46b","_parentId":"9a60afbc-531f-4aa6-9e3e-2fc43ef2f58d","_type":"component","title":"Additional information","displayTitle":"Additional information"},{"body":"<p>What you will learn in this page:</p>\n<ul>\n  <li>How you can create and manage users in Kentico</li>\n  <li>What is the security model of Kentico</li>\n  <li>Recommended security-related and UX-related practices</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"a6c479b0-ed5d-4929-b41e-b75e4be00178","_parentId":"8de48f94-f4ef-424e-b607-08b656308f18","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>Almost every modern website offers visitors user accounts. As a developer, you need to make sure that your website has mechanisms which new visitors can use to create an account and returning visitors to sign in.</p>\n<p>You also need to take responsibility for the website’s security. In terms of user management, security means making sure that, for example, users are allowed access to only those part of the website they are authorized to. Or, that you safely store users’ passwords. Or, that all of your website’s communication is secured.</p>\n<p>In the <strong>Kentico MVC for Developers—Essentials</strong> module, you already learned basics of:</p>\n<ul>\n  <li>How Kentico works with <strong>users</strong>, <strong>roles</strong>, and <strong>permissions</strong>.</li>\n  <li>How you can use <strong>Kentico membership </strong>which helps to define specific roles in advanced e-commerce scenarios.</li>\n  <li><strong>Kentico security model</strong> which allows you to configure granular user permissions for pages and applications in the administration.</li>\n  <li><strong>Privilege levels</strong> of user accounts, i.e., none, editor, administrator, and global administrator.</li>\n</ul>\n<p>This page dives deeper into the topic of user management and explains:</p>\n<ul>\n  <li>How the security model works</li>\n  <li>What are the privilege levels for users in Kentico</li>\n  <li>How roles and permissions allow users access to different part of the website</li>\n</ul>\n<p>Feel free to jump back to the <a href=\"https://learn.with.kentico.com/unit/view/id:4805\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Essentials</a> module to catch up on any of the topics before you continue with this page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"2afc3f75-ebc2-4632-8543-4887482e8b2b","_parentId":"8de48f94-f4ef-424e-b607-08b656308f18","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>Kentico websites built with the MVC pattern run on two applications with different development patterns – the front-facing ASP.NET MVC application, and the administration interface application running on ASP.NET Web Forms. Each pattern provides a slightly different way to authenticate users. In short,</p>\n<ul>\n  <li>The <strong>Kentico administration application </strong>uses standard<strong> ASP.NET</strong> <strong>Forms authentication</strong></li>\n  <li>For the<strong> live site MVC application</strong>, Kentico provides an <strong>integration API</strong> which is based on the <a href=\"https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/introduction-to-aspnet-identity\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET Identity</a> framework and the <a href=\"http://owin.org\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">OWIN</a> standard. The OWIN standard serves as a basis for ASP.NET MVC, the ASP.NET Identity framework was developed by Microsoft in tandem with MVC.</li>\n</ul>\n<p>While the administration UI usually requires little to no attention of developers, the MVC application always needs code to implement authentication and authorization. This is because each MVC application implements different security-related business requirements through a completely different UI.</p>\n<div class=\"infobox note\"><h3>Authentication and authorization</h3>\n<p>When it comes to working with users, people sometimes get confused about the difference between authentication and authorization. Let’s clear this confusion up once and for all.</p>\n<p><em>Authenticating </em>users means that the application contains a mechanism which ascertains user’s identity. Basically, it makes sure that users really are who they say they are.</p>\n<p>In a Kentico website, you can authenticate users via one of the following approaches:</p>\n<ul>\n  <li>Combination of an app-local username and password (which is the most typical approach),</li>\n  <li>Securing the above mentioned with <strong>multi-factor authentication</strong> by adding another security factor to the username and password, e.g., multi-factor authentication via SMS or a mobile application.)</li>\n  <li>Authenticating users against <strong>Windows</strong> <strong>Active Directory</strong>, and</li>\n  <li>Using a <strong>3rd party authentication standard</strong>, such as WS-Federation, OpenID Connect, or OAuth 2.0. The last one is used when Google or Facebook is chosen as an external identity provider.</li>\n</ul>\n<p><br></p>\n<p>On the other hand<em>, </em>the term<em> authorizing</em> means deciding what operations users can perform in the application. Usually, users are authorized to perform specific action through sets of either roles or claims. Kentico user accounts work with the first one—roles.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9e535feb-73b9-4c1d-814e-8c92d518d9fb","_parentId":"6eb57e39-68a6-459c-a70c-8c75ad07cccb","_type":"component","title":"Overview of user management","displayTitle":"Overview of user management"},{"body":"<p>Before we dive deeper into the technical specifics of authentication and authorization, let’s overview the basics of working with users in Kentico.</p>\n<p>Kentico has a rich, yet easy-to-use, role-based security model which:</p>\n<ul>\n  <li>is fully utilized in the administration UI</li>\n  <li>most of its features can also be utilized in MVC apps, depending on specific project needs</li>\n</ul>\n<div class=\"infobox note\"><p>The MVC app may also primarily use other security measures, with Kentico permissions catering for just parts of the app.</p></div>\n<p>At the highest level, the security model comprises the following entities:</p>\n<ul>\n  <li>privilege levels, which control access to the administration UI</li>\n  <li>permission objects, which represent Kentico functions that can be allowed or banned</li>\n  <li>page-level permissions (access control lists, ACL for short)</li>\n  <li>user objects that represent natural persons, individual human beings</li>\n  <li>role objects, which connect permissions with users</li>\n  <li>optional membership objects that simply aggregate a set of roles together</li>\n</ul>\n<p>Beside the security model there is a concept of UI personalization in Kentico, represented by an eponymous application in the administration UI. Instead of being a security measure, it helps in keeping the administration UI simple and decluttered.</p>\n<p>MVC apps may make use of all the said entities except privilege levels and UI personalization.</p>\n<div class=\"infobox note\"><p>In this course module, we’ll cover just roles, not memberships. The latter has its main use in e-commerce scenarios, which we’ll cover in a separate course module.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8b1fc564-cf2f-4573-84fe-890add21a942","_parentId":"6e8c9833-dae7-49cd-9901-fafd23a0b495","_type":"component","title":"Security model of Kentico","displayTitle":"Security model of Kentico"},{"body":"<p>In the whole security model of Kentico, privilege level is a standalone concept separated from permissions. It was designed solely to control access to the administration UI.</p>\n<p>Privilege level is set for each user individually. It cannot be set for a role or membership object.</p>\n<p>It can be set to four values:</p>\n<ul>\n  <li>None</li>\n  <li>Editor</li>\n  <li>Administrator</li>\n  <li>Global administrator</li>\n</ul>\n<p>The default <em>None</em> level means that the user cannot sign in to the administration UI at all. Such a user may or may not be able to sign in to the MVC live site, depending on security measures that you implement in the MVC app.</p>\n<p>The <em>Editor</em> level allows users to sign in, however, this level <em>per se</em> provides them with just the absolute minimum of possibilities in the administration UI (e.g. to edit their user profile information). To get to various applications in the administration UI, the user must be assigned one or more roles with appropriate permissions.</p>\n<p>Users with the <em>Administrator</em> level can access all non-global applications for all sites in the system. The evaluation of permissions and UI personalization checks is skipped for administrators. However, they cannot:</p>\n<ul>\n  <li>Access applications that are restricted to global administrators (typically those that affect the entire system, for example&nbsp;the <em>Sites</em> application)</li>\n  <li>Raise their own privilege level to&nbsp;<em>Global administrator</em>&nbsp;(for their own account)</li>\n  <li>Grant other users the <em>Administrator</em> privilege level</li>\n  <li>Edit the user accounts of other administrators</li>\n</ul>\n<p>The highest<em> Global administrator</em> privilege level causes the administration UI to skip all permission checks, effectively giving the user full access to all parts of the system. This however does not automatically apply to MVC apps.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d4f21146-49cc-454d-aeb1-45221bfadd06","_parentId":"10ff9594-323a-4b32-b4ee-bcdf0d119806","_type":"component","title":"Privilege levels","displayTitle":"Privilege levels"},{"body":"<p>Permissions provide a way of controlling access to applications in the administration UI, pages in the content tree, and custom tables. Permissions are assigned to roles and create complex authorization structure which you can use to configure the system to a wide set of needs.</p>\n<p>We cannot describe the whole permission set in detail in this course. Therefore, we recommend you go through the respective parts of the documentation and learn about how you can <a href=\"https://docs.kentico.com/k12sp/managing-users/configuring-permissions\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">assign permissions to various kinds of data stored in Kentico</a>.</p>\n<p>Kentico also allows you to check for permissions using its own low-level API. You can find examples <a href=\"https://docs.kentico.com/k12sp/managing-users/user-internals-and-api/checking-permissions-using-the-api\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">in Kentico documentation</a>. However, this API was designed to serve to a wide range of use cases, not just MVC apps. In this course, you’ll learn about securing sections of MVC apps via the high-level ASP.NET Identity framework that Kentico supports.</p>\n<div class=\"infobox note\"><p>The ASP.NET Identity framework is primarily focused on authentication, i.e. on verifying user’s identity. Once the identity is found out, you’ll typically confront the user’s roles with the ones allowed for a given action method of your MVC app. On top of that, in your action methods, you’re free to work with all kinds of Kentico data. You’re therefore free to build an arbitrary system of permission checks in your action methods. It is up to you to decide which Kentico permissions to obey in the methods, on top of the said role checks.</p></div>\n<div class=\"infobox warning\"><p>Page-level permissions are primarily designed to address content management needs inside of the Kentico administration UI. You may be tempted to check for page ACLs in the MVC app. However, there may or may not be a direct 1:1 relationship between a page in the content tree and an MVC output (an <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.web.mvc.actionresult?view=aspnet-mvc-5.2\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">ActionResult</a> object). If you need to spread the reach of page-level ACLs from the administration UI to the MVC app, we recommend bringing a well-thought content production process first, so that you avoid potential partially-allowed data retrieval attempts in your MVC apps.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"df73218c-6f23-468c-ad01-10f3d647f22e","_parentId":"5642f4ad-a1c0-4bee-9717-94e2f1176a05","_type":"component","title":"Permissions","displayTitle":"Permissions"},{"body":"<p>Role objects are effectively a binding mechanism used to associate users with the said permissions. You can specify a set of permissions that a given role has in the system. Later, you can assign a role to various users. It can also be done the other way around—by specifying roles that a user has.</p>\n<p>Users obtain their access permissions based on the roles they are assigned to, and each user can be assigned to multiple roles at the same time.</p>\n<p>You have already created the <em>Content administrator's</em> role in the <em>Essentials</em> course module, so you know that the <em>Roles</em> application:</p>\n<ul>\n  <li>Provides management interfaces for different roles</li>\n  <li>Allows you to add a user to the role</li>\n  <li>Provides a configuration matrix for permissions</li>\n  <li>Contains a set of features for personalization of the administration UI</li>\n</ul>\n<p>If you are not sure how to use these, feel free to review the <em>Working with workflows and localized data</em> page in the <em>Essentials</em> module.</p>\n<p>In terms of data persistence, the role objects and their properties (e.g. role permissions, or specifics about UI personalization) are spread across multiple database tables.</p>\n<figure data-asset-id=\"1f34d417-b3cc-400c-aeb4-0475a21c830a\" data-image-id=\"1f34d417-b3cc-400c-aeb4-0475a21c830a\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/4ca846fc-d394-405f-9454-89a4ff25f4a7/roles-in-kentico-db.png\" data-asset-id=\"1f34d417-b3cc-400c-aeb4-0475a21c830a\" data-image-id=\"1f34d417-b3cc-400c-aeb4-0475a21c830a\" alt=\"Roles in Kentico database\"></figure>\n<p>Feel free to check Kentico documentation for details about the &nbsp;<a href=\"https://docs.kentico.com/k12sp/managing-users/user-internals-and-api\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">database tables related to Roles</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"110a47e4-0c09-47b1-9405-91624242a3f6","_parentId":"fba253ab-19af-458b-a262-38ab1f902dcc","_type":"component","title":"Roles","displayTitle":"Roles"},{"body":"<p>User data collected by Kentico websites is stored in four database tables:</p>\n<ul>\n  <li><em>CMS_User</em> - stores records representing users, such as user ID, username, or password.</li>\n  <li><em>CMS_UserSettings</em> - stores advanced settings for user accounts, such as time zone.</li>\n  <li><em>CMS_UserSite</em> - stores relationships between users and sites.</li>\n  <li>CMS_UserCulture - stores information about culture versions of pages editable by users.</li>\n</ul>\n<p>The following diagram shows user-relationships between different tables:</p>\n<figure data-asset-id=\"cc652aab-f8c5-4f6f-b43d-3f47cce17f3b\" data-image-id=\"cc652aab-f8c5-4f6f-b43d-3f47cce17f3b\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/e1ff00ca-9323-45fe-ad06-04b183f8f186/users-in-kentico-db.png\" data-asset-id=\"cc652aab-f8c5-4f6f-b43d-3f47cce17f3b\" data-image-id=\"cc652aab-f8c5-4f6f-b43d-3f47cce17f3b\" alt=\"\"></figure>\n<div class=\"infobox note\"><h3>Users vs Contacts vs Customers</h3>\n<p>Different licenses of Kentico provide various online marketing and e-commerce features. In this context, the <em>user-contact-customer</em> difference might lead to confusion.</p>\n<p>In Kentico sites with online marketing features enabled, every <strong>visitor</strong> is considered a “<strong>contact</strong>”. If the visitor makes a purchase, they become a <strong>customer</strong> in Kentico terms. When a contact or customer decide to register on the website, they become website <strong>users</strong>. Then, if the user is granted an <em>Editor</em> privilege level, they will also be able to sign in to the administration UI.</p></div>\n<h3>Creating user accounts</h3>\n<p>By default, there are two user accounts available after installation:</p>\n<ul>\n  <li><strong>Administrator</strong> – global administrator user with full permissions,</li>\n  <li><strong>Public</strong> – user that represents an anonymous visitor of the website.</li>\n</ul>\n<p>There are basically three ways a user can be created on the website:</p>\n<ul>\n  <li><strong>By registering on the website</strong>\n    <ul>\n      <li>Developers must implement the registration form on the live site. Based on the implementation, the developer can assign specific permissions during the registration, the user gains access to a secured part of the live site (or to the administration interface). In this scenario, you need to implement a registration form in the MVC app. This way, users typically don’t get editor or administrator privileges.</li>\n    </ul>\n  </li>\n  <li><strong>By creating a new user in the administration UI</strong>\n    <ul>\n      <li>Website administrators often create users manually in the <strong>Users</strong> application where they also configure user properties, such as user passwords and privilege level. You can find out more about available properties in the <a href=\"https://docs.kentico.com/k12sp/managing-users/user-management\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>.</li>\n      <li>Apart from general properties, Kentico provides many others, which you can edit on <a href=\"https://docs.kentico.com/k12sp/managing-users/user-management\">the Settings tab</a>. You can also define custom user fields in the Modules application (namely, in the <strong>Membership</strong> module).</li>\n    </ul>\n  </li>\n  <li><strong>By creating users over the API</strong>\n    <ul>\n      <li>Developers can use the Kentico API and create users programmatically, either through ASP.NET Identity (making use of the Kentico implementation of its interfaces) or directly through Kentico providers (in the <em>CMS.Membership</em> namespace). You can find a list of examples of how to create user accounts, authenticate user credentials or check user permissions, etc. in <a href=\"https://docs.kentico.com/api12/configuration/users\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico API Examples</a>.</li>\n    </ul>\n  </li>\n</ul>\n<p><br></p>\n<figure data-asset-id=\"b430b60d-9727-484b-8cc6-1598b9175d89\" data-image-id=\"b430b60d-9727-484b-8cc6-1598b9175d89\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/c538ac52-ca91-4fb0-b567-f15b9bf6a1c0/security-model-overview-identity-mvc.png\" data-asset-id=\"b430b60d-9727-484b-8cc6-1598b9175d89\" data-image-id=\"b430b60d-9727-484b-8cc6-1598b9175d89\" alt=\"Security model overview for Kentico MVC websites\"></figure>\n<div class=\"infobox note\"><p>Users can be shared among sites that run in one Kentico installation. In the default settings, a new user created on one site can automatically sign in to other sites running on the same instance. Such a configuration could lead to unwanted behavior or sharing wrong data.</p>\n<p>You can change this behavior in the <em>Settings</em> application (<em>Membership &amp; Security &gt; Share user accounts on all sites</em>).</p></div>\n<p>Users can be shared among sites that run in one Kentico installation. In the default settings, a new user created on one site can automatically sign in to other sites running on the same instance. Such a configuration could lead to unwanted behavior or sharing wrong data.</p>\n<p>You can change this behavior in the <em>Settings</em> application (<em>Membership &amp; Security &gt; Share user accounts on all sites</em>).</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"806ebdb4-e60c-4bf2-9de4-b36b445b0514","_parentId":"2ee68eeb-a6a4-4534-b66c-699041f54e46","_type":"component","title":"Users","displayTitle":"Users"},{"body":"<h3>Keep the registration and sign-in forms close to each other</h3>\n<p>From the user’s perspective, registering and signing into a web application seem to be similar actions. Make sure it’s easy for your visitors to switch between the two forms.</p>\n<p>Over the years, one unified pattern became prevalent—to place user controls related to user management into the top right corner of the page. This pattern dominates the web and forms users’ expectations. It is advisable not to divert from this so that users don’t face unnecessary cognitive overhead when trying to register, sign in, or edit their profile.</p>\n<h3>Design with password managers in mind</h3>\n<p>Nowadays, users create accounts in dozens of websites. To cope with the immense amount of passwords, they use password management solutions. When testing your registration and sign-in forms, don’t forget to also check if they work with the most common default browser password managers, such as <em>1Password</em> or <em>LastPass</em>.</p>\n<h3>Other UX ideas</h3>\n<p>If you’re interested in UX in relation to user management, you can find more inspiring ideas in Jeff Attwood’s article <a href=\"http:// https://blog.codinghorror.com/the-god-login/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">The God Login</a>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1e7dcc9f-8ee1-4493-a6e7-d778478ef8fe","_parentId":"d86b010f-9bb8-48df-a66e-eddcf0b02c12","_type":"component","title":"\nUX Recommendations","displayTitle":"\nUX Recommendations"},{"body":"<p>At this point, we’ll try to give you a few general security-related recommendations that you should take into consideration when developing secured Kentico MVC sites. The list is by no means complete; we’ll point out just the most relevant to the current course.</p>\n<h3>Think defensively all the time</h3>\n<p>Defensive thinking is more of a general development principle you should keep in mind when creating your website. This doctrine teaches us to think not just of ideal workflows and expected situations. Conversely, we’re supposed to account for worst-case scenarios and, let our applications recover from them mercifully, if possible.</p>\n<p>In this sense, we recommend taking time to focus on all potential attack vectors, not just the probable ones. Similarly, it is a good idea to plan for multiple fallback positions in case malicious users break one of the barriers you set.</p>\n<h3>Unwanted information disclosure</h3>\n<p>When a user fails to verify their identity, your error messages should help them remedy the situation. However, you should always bear in mind that the guy at the other end of the wire might potentially be a hacker. Therefore, the error messages should not convey information that can be misused. For example, any message saying that a user name exists, may lead to a <a href=\"https://docs.kentico.com/spaces/flyingpdf/pdfpageexport.action?pageId=68881105\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">username enumeration</a> attack.</p>\n<p>Here are some of the common secure approaches to the following situations:</p>\n<ul>\n  <li><strong>User isn't activated</strong>\n    <ul>\n      <li>Rather than displaying information that the user exists, consider displaying a message that the system is resending an activation email in case the user account exists.</li>\n    </ul>\n  </li>\n  <li><strong>User doesn't exist, or password is incorrect</strong>\n    <ul>\n      <li>Your website should respond to existing and non-existing accounts in the same way. If the verification fails, explain the reasons in the least specific way, e.g., by displaying a generic message that either the username or the password caused the failed verification.</li>\n    </ul>\n  </li>\n  <li><strong>User requests new password</strong>\n    <ul>\n      <li>If the user requests a reset of their password, don’t confirm that the user exists, e.g., by displaying a message that the email was sent. Instead, you can obfuscate the error message by stating that the email is sent in cases where such a user email exists in the database.</li>\n    </ul>\n  </li>\n</ul>\n<h3>Secure the communication channel</h3>\n<p>As you probably know, communication over the HTTP protocol is not encrypted by default. Anyone who has the right tools can sniff the content of web pages being served and form data being uploaded back.</p>\n<p>Ever since the first <a href=\"https://letsencrypt.org/\">free certification authorities</a> were created, serving web application over HTTPS (or more correctly HTTP over <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">TLS</a>) became a no-brainer choice.</p>\n<p>Users can trust that:</p>\n<ul>\n  <li>Sensitive information (such as passwords, emails, etc.) included in communication with your website is encrypted</li>\n  <li>The web server is really the one we think it is. There is no unauthenticated entity eavesdropping on the communication (e.g., <a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">man-in-the-middle attacks</a>)</li>\n</ul>\n<div class=\"infobox note\"><p>Note that using TLS provides a high level of certainty about the identity of the server. However, it does not automatically give you—the website owner—the same amount of certainty about the identity of users signed in to your website. If you need the highest possible level of client authentication (e.g., if you’re a financial institution or a public authority), you can explore the possibilities of <a href=\"https://dotnetcodr.com/2016/01/11/using-client-certificates-in-net-part-1-introduction/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">client-side certificates</a>.</p></div>\n<h3>Fine-tune user passwords</h3>\n<p>Passwords are a critical part of the authentication process. Kentico MVC websites provide various password-related features you can use to secure user accounts.</p>\n<p>Passwords are stored in the Kentico database. You have an option to store them in the plain text format, however, it is very dangerous and not recommended. Apart from that, Kentico offers several methods of password hashing. When a user creates a password, it is hashed in the server memory and, then it is stored just in that hashed form. It is not possible to de-hash a password. Upon signing in, the entered password is hashed and simply compared with the stored hashed format. If both hashed passwords match, the user is allowed to sign in.</p>\n<p>By default, Kentico stores passwords in the <a href=\"https://en.wikipedia.org/wiki/PBKDF2\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">PBKDF2</a> format. For security reasons, the password is always hashed 10000 times. This format provides the best security. Should you wish to switch to another format, you can do so in the <em>Settings</em> application (<em>Security &amp; Membership &gt; Passwords &gt; Password format</em> setting). Conversely, if you want to raise the number of hash iterations, you can do that through a <a href=\"https://docs.kentico.com/k12sp/securing-websites/designing-secure-websites/securing-user-accounts-and-passwords/setting-the-user-password-format?devModel=mvc#Settingtheuserpasswordformat-CustomizingthenumberofiterationsforPBKDF2\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom module class</a>.</p>\n<p>Besides these two options, you can implement other means of securing passwords, such as enforcing password strength policy or password expiration. You can set up the rules in <em>Settings &gt; Security &amp; Membership &gt; Passwords &gt; Use password policy</em> and <em>Enable password expiration</em> settings. However, bear in mind that these settings apply to just the administration UI, not the MVC app.</p>\n<h3>Temporary lockout of the user account</h3>\n<p>On top of the default security features, you also may want to implement user lockout. In this advanced scenario, you can partially protect your website against <a href=\"https://en.wikipedia.org/wiki/Brute-force_attack\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">brute-force attacks</a>. With such functionality in play, once the user/attacker reaches a certain number of invalid sign-in attempts, the app will temporarily lock the account.</p>\n<p>In Kentico, you can set the number of invalid sing-in attempts to the administration in the <em>Settings</em> application (<em>Security &amp; Membership -&gt; Protection</em>). If you want to use this feature in the MVC site, you need to implement it.</p>\n<p>It is also worth mentioning that the lockout functionality depends on the sentiment of your user base. There is no silver bullet in choosing the right timeout values (static or progressively raised) and the right error messages (disclosing vs helpful). Lockout also always incurs a certain amount of manual administration workload on your end. That’s because locked users would often require an administrator’s help to restore access.</p>\n<div class=\"infobox note\"><p>To ease the pains connected to user lockout, you can implement countermeasures, such as</p>\n<ul>\n  <li>response throttling (e.g., delaying the HTTP response increasingly to halt password guessing)</li>\n  <li>showing CAPTCHA after a specific number of attempts</li>\n</ul>\n<p>You can find more information about other approaches in the <a href=\"https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks#Finding_Other_Countermeasures\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">OWASP documentation</a>.</p></div>\n<p><br></p>\n<h3>Embrace the minimum-permission mindset</h3>\n<p>When deciding on what amount of permissions users have, you can rely on a general rule of thumb—to assign the least privileges possible. In other words, grant only those permissions that a given role currently needs.</p>\n<p>For a guide on assigning permissions in Kentico, you can refer to the <a href=\"https://docs.kentico.com/k12sp/securing-websites/designing-secure-websites/configuring-permissions-securely\">documentation</a>.</p>\n<h2>Use the docs</h2>\n<p>The above general recommendations, as well as the following step-by-step implementation guide are by no means complete. Chances are your future MVC app is not a mainstream one. Therefore, we recommend exploring all topics the <a href=\"https://docs.kentico.com/k12sp/securing-websites\">Kentico documentation</a> offers.</p>\n<h2>Future course</h2>\n<p>This course module covers the security architecture of Kentico and gives you step-by-step instructions on how to implement authentication and authorization on Kentico MVC sites via the ASP.NET Identity implementation in one of our NuGet packages.</p>\n<p>There are however other security-related topics, either general or specific to Kentico, that are worth learning. We aim to creating a general security-focused course in the future.</p>\n<p>If you want to influence the scope of such a course, feel free to <a href=\"mailto:training@kentico.com\">let us know</a> which specific topic you care about most.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b99d6bf6-5d33-489f-b257-d893e41fc4c7","_parentId":"e5c7dd39-9542-4f83-8f58-eacb6e9bb466","_type":"component","title":"\nSecurity-related recommendations","displayTitle":"\nSecurity-related recommendations"},{"body":"<p>You have already covered the basics of working with users, roles, and other related objects, such as permissions, in the previous <strong>Essentials </strong>module. In the module, you have</p>\n<ul>\n  <li>Learned about roles, users, and different types of permissions you can grant in Kentico,</li>\n  <li>Created a role for content admin,</li>\n  <li>Granted it appropriate permissions,</li>\n  <li>Created a user with the editor privilege level,</li>\n  <li>Assigned the editor to your new role.</li>\n</ul>\n<p>Let’s see what else can help you when it comes to the basics of user management in the administration application.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"01fe5f0d-78b2-4df0-8c8b-b591ae24f425","_parentId":"e30e3b4d-fee7-4571-a765-dc63b602cc8f","_type":"component","title":"Additional information: Introduction","displayTitle":"Additional information: Introduction"},{"body":"<ul>\n  <li>You can customize how editors or administrators access the administration. Find out more about <a href=\"https://docs.kentico.com/k12sp/managing-users/user-registration-and-authentication/configuring-forms-authentication\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Configuring forms authentication</a> and <a href=\"https://docs.kentico.com/k12sp/managing-users/user-registration-and-authentication/configuring-multi-factor-authentication\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Configuring multi-factor authentication</a> in Kentico documentation.</li>\n  <li>For the administration, it’s possible to <a href=\"https://docs.kentico.com/k12sp/managing-users/user-registration-and-authentication/configuring-third-party-authentication-services\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">configure third-party authentication services</a>, such as <a href=\"https://docs.kentico.com/k12sp/managing-users/user-registration-and-authentication/configuring-windows-ad-authentication\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Windows AD authentication</a>, or add support for <a href=\"https://docs.kentico.com/k12sp/managing-users/user-registration-and-authentication/configuring-single-sign-on\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">single sign-on</a></li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"bc6d6a03-1006-4703-b3ea-55a0580df923","_parentId":"7474b352-f80e-4fe7-8e72-21798d64e819","_type":"component","title":"Authentication","displayTitle":"Authentication"},{"body":"<p>It’s possible to run multiple websites on one Kentico instance. To manage roles in the multi-site setup, you can define site-specific or global roles. &nbsp;Kentico checks if code names of roles are unique only within individual sites. As a result, it’s possible that a global role can have the same code name as a site-specific role. You can avoid confusion when selecting global roles in custom code or via API by using a period (“.”) prefix in the code name of a global role, e.g., “<em>.ClinicsAdministrator</em>”. Find out more about <a href=\"https://docs.kentico.com/k12sp/managing-users/role-management\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Role management</a> in the Kentico documentation.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"61264230-90d4-4299-b06a-9d02807b3c72","_parentId":"7474b352-f80e-4fe7-8e72-21798d64e819","_type":"component","title":"Roles","displayTitle":"Roles"},{"body":"<p>Just a friendly reminder: permissions are assigned to roles which means that in a multi-site Kentico setup, each website can have a different configuration of role permissions. Also, if you don’t implement the permissions on each live site, they work only within the site’s administration.</p>\n<p>You already know that you can set <strong>permissions for three types of objects</strong>: modules, page types, and custom tables. New Kentico administrators are sometimes confused about the name “Module<strong> </strong>permissions”. Kentico features in administration UI are in general called applications, such as Pages or Page types. However, in the backend, these applications use different system modules. For example, the <strong>Permissions </strong>application uses the <strong>Permissions </strong>and <strong>Global permissions</strong> modules. You can see all the Kentico modules in the <strong>Modules </strong>application. And find out more about configuring <a href=\"https://docs.kentico.com/k12sp/managing-users/configuring-permissions#Configuringpermissions-Permissionsfor\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">permissions for modules</a> in the Kentico documentation.</p>\n<p>Using the <strong>Report for user</strong> feature in the <strong>Permissions </strong>application, you can display all <strong>permissions and roles for each website user</strong>. Find out more about the <a href=\"https://docs.kentico.com/k12sp/managing-users/configuring-permissions#Configuringpermissions-Reportforuser\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">report for user feature</a> in the Kentico documentation.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6a055b5c-63e2-4356-8889-ace435d3e460","_parentId":"7474b352-f80e-4fe7-8e72-21798d64e819","_type":"component","title":"Permissions","displayTitle":"Permissions"},{"body":"<p>User objects in Kentico expose a long list of properties you can work with in the administration. You can find the list of <a href=\"https://docs.kentico.com/k12sp/managing-users/user-management#Usermanagement-Generalproperties\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">general properties</a> and other <a href=\"https://docs.kentico.com/k12sp/managing-users/user-management#Usermanagement-Settings\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">settings</a> in the Kentico documentation. Remember that you can also extend Kentico user properties by adding <a href=\"https://docs.kentico.com/k12sp/managing-users/user-management#Usermanagement-CustomFields\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">custom fields</a> for users.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"764be6ea-11ec-41ac-a22a-279a9fda70a9","_parentId":"7474b352-f80e-4fe7-8e72-21798d64e819","_type":"component","title":"Users","displayTitle":"Users"},{"body":"<p>In this page, you’ll learn about:</p>\n<ul>\n  <li>What the benefits of the ASP.NET Identity framework are</li>\n  <li>What it can and cannot do for you</li>\n  <li>What the main technical concepts behind the framework are</li>\n  <li>How Kentico supports this framework</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"4e2ad3f6-d654-4cb1-93fc-073a5cda2d69","_parentId":"05ca7187-a2a3-4214-b1d7-ec58fbffc55a","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>This framework (let’s call it just “Identity”, for short) was first introduced with ASP.NET MVC 4 in 2013. It replaced the older ASP.NET membership providers and simple membership providers used in earlier versions. Although Identity was designed to work together with ASP.NET MVC, it is not tightly coupled with it. It is a general-purpose authentication framework for the web.</p>\n<h3>User scenarios</h3>\n<p>The framework—when fully utilized—will enable your MVC applications with the following features:</p>\n<ul>\n  <li>Registration of local user accounts</li>\n  <li>Enrollment with existing 3rd party logins</li>\n  <li>Password hashing</li>\n  <li>User lockout</li>\n  <li>Two factor authentication</li>\n  <li>Tokenization</li>\n</ul>\n<p>It is important to realize that Identity caters to just the authentication part of security, not authorization. Each application is different in nature, each one has its own actions to be performed and also its own rules of allowing or banning people from doing them.</p>\n<h3>Extensibility</h3>\n<p>The framework is also designed from the ground up to be connected to virtually any data persistence layer. From the first releases, Identity was shipped in the form of two <a href=\"https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/introduction-to-aspnet-identity#components-of-aspnet-identity\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">main NuGet packages</a>:</p>\n<ul>\n  <li><a href=\"https://www.nuget.org/packages/Microsoft.AspNet.Identity.Owin/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.Owin</a> (with its main dependency <a href=\"https://www.nuget.org/packages/Microsoft.AspNet.Identity.Core/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.Core</a>)</li>\n  <li><a href=\"https://www.nuget.org/packages/Microsoft.AspNet.Identity.EntityFramework/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.EntityFramework</a></li>\n</ul>\n<p>This means that the main package was not bloated with functionality related to data persistence. The Entity Framework package is just an optional component that is not a core part of the framework. In our case, Kentico’s NuGet packages play the role of the data store layer instead.</p>\n<h3>Architecture</h3>\n<p>At the heart of Identity are the following three entities:</p>\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn253156(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUser</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613268(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IRole</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsidentity\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">ClaimsIdentity</a></li>\n</ul>\n<p>The first two exist just as interfaces that allow us to implement them in the context of a specific data store (like Kentico) or even a specific app (like Medio Clinic). The third class represents the user in systems based on the concept of claims-based security.</p>\n<p>Then, there’s the ubiquitous concept of:</p>\n<ul>\n  <li>Managers</li>\n  <li>Stores</li>\n</ul>\n<p>Managers usually do various kinds of jobs, abstracted from data persistence; stores are low-level classes that take care thereof.</p>\n<h4><em>Managers</em></h4>\n<p>Let’s list the most significant managers in the ecosystem:</p>\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613290(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">UserManager</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613286(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">RoleManager</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn896559(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">SignInManager</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn308208(v=vs.113)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IAuthenticationManager</a></li>\n</ul>\n<p>The user manager can be considered most high-level and most centric. It is the go-to object that handles user validation, creation, retrieval, and deletion. It deals with addition and removal of user roles, password validation and management. It verifies user tokens, sends security-related email messages or SMS messages, locks users out, etc.</p>\n<p>The role manager is a different animal. However unlikely it may seem, this manager is not required for everyday tasks. It merely helps with pure role management, not in relation to users.</p>\n<p>The sign-in manager provides methods to sign the user in, either with local credentials or using an external login. It also manages two-factor authentication. It can also generate a <em>ClaimsIdentity</em> object out of the user object, should you need it.</p>\n<p>The authentication manager is a rather low-level OWIN middleware that is supplied by the framework. However, it does the cookie authentication jobs like signing in, signing out or just challenging the authentication status.</p>\n<p>Although all four entities exist in the form of specific classes in the framework, the first three are meant to be derived into either a data store, or application-level classes (in the very same way as with <em>IUser</em> and <em>IRole</em> above).</p>\n<h4><em>Stores</em></h4>\n<p>Stores often directly back agendas of managers. Their names may express the relationships:</p>\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613278(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserStore</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613266(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IRoleStore</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613276(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserRoleStore</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613273(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserPasswordStore</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613265(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserClaimStore</a></li>\n  <li>Etc.</li>\n</ul>\n<p>The store classes may or may not consolidate several agendas (interfaces) into one. In fact, all the interfaces in the bullet point list can be implemented in one single store class.</p>\n<h4><em>OWIN</em></h4>\n<p>ASP.NET Identity is built on top of OWIN. The Open Web Interface for .NET is an open standard that mandates communication between the web server (like IIS, in-process hosted servers, <a href=\"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kestrel</a>) and the web application. In OWIN, multiple units of code can participate in the request pipeline. These units are called middleware. The pipeline is treated according to the <a href=\"https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">chain of responsibility pattern</a>. It means that:</p>\n<ul>\n  <li>During a request, middleware is called one after another</li>\n  <li>Every middleware has access to the OWIN context, which includes\n    <ul>\n      <li>Headers</li>\n      <li>Cookies</li>\n      <li>Server variables</li>\n      <li>Etc.</li>\n    </ul>\n  </li>\n  <li>Once the middleware finishes its job, it has two options\n    <ul>\n      <li>Either to pass control to the next middleware in the pipeline</li>\n      <li>Or to shortcut the pipeline and return a response immediately</li>\n    </ul>\n  </li>\n</ul>\n<p>For the most part, Identity hooks into OWIN to set and evaluate authentication cookies (containing security tokens and stamps).</p>\n<p>By default, Identity also uses the said OWIN context to store instances of manager and store classes. These objects can then be used anywhere in the whole lifecycle of the HTTP request, including in controller actions.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e531aaf3-335e-4c5d-b752-bab24ad45b5d","_parentId":"2509d0e5-4456-4e32-be5e-f55232af26c9","_type":"component","title":"What is ASP.NET Identity","displayTitle":"What is ASP.NET Identity"},{"body":"<p>ASP.NET Identity was built to meet the same goals that MVC does—to be highly configurable and extensible. The authors intended software vendors to build upon their work and create customized classes that power either a platform (like Kentico) or an app (like Medio Clinic).</p>\n<p>Let’s now shed some light on what Kentico has to offer for Identity.</p>\n<p>Kentico has a set of classes that either implement Identity interfaces or inherit from one of the stock Identity classes. The customized classes are available through the <a href=\"https://www.nuget.org/packages/Kentico.AspNet.Mvc.Libraries/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico.AspNet.Mvc.Libraries</a> package that is a direct dependency of the <a href=\"https://www.nuget.org/packages/Kentico.AspNet.Mvc/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico.AspNet.Mvc</a> main package.</p>\n<h3>Kentico.Membership classes</h3>\n<p>All the Kentico classes belong to the <em>Kentico.Membership</em> namespace (not to be confused with <em>CMS.Membership</em>). The namespace resembles the old days of membership providers, but don’t be alarmed, the code is Identity-compliant.</p>\n<p>Most of the classes work like proxies. In the background, the classes call into the lower-level Kentico APIs, like <em>CMS.Membership.UserInfoProvider</em>, transform data, do some additional calculations and provide results in formats required by either the Kentico internal format or Identity format.</p>\n<div class=\"infobox note\"><h4>Two modes of operation</h4>\n<p>Before we dive into the details, let’s dissect the support into levels. There are two levels of support of Identity in Kentico:</p>\n<ul>\n  <li>Until Kentico 12.0.34</li>\n  <li>From Kentico 12.0.34 onwards</li>\n</ul>\n<p>Until the <a href=\"https://devnet.kentico.com/download/hotfixes\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">12.0.34 hotfix</a> was released, Kentico provided support for all main Identity user scenarios. However, <strong>only some of the properties of Kentico users</strong> were supported directly. Working with other user properties and settings was supported (including custom user properties added through the Modules application), albeit extensive coding was required. From the 12.0.34 hotfix onwards, you can work with all user properties, your own custom properties, and user settings, all of that with little to no additional coding involved.</p>\n<p>The hotfix 12.0.34 brought three new classes:</p>\n<ul>\n  <li>KenticoUserManager</li>\n  <li>KenticoSignInManager</li>\n  <li>KenticoUserStore</li>\n</ul>\n<p>These are superset of the existing classes:</p>\n<ul>\n  <li>UserManager</li>\n  <li>SignInManager</li>\n  <li>UserStore</li>\n</ul></div>\n<p><br></p>\n<h4><em>User</em></h4>\n<p>The user model class implements <a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613291(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.IUser&lt;TKey&gt;</a>. It constructs TKey to be <em>int</em> (as do all other customized classes below). Most importantly, it defines lots of properties that make sense in the context of Kentico:</p>\n<ul>\n  <li><em>Id</em> (part of <em>IUser</em>)</li>\n  <li><em>UserName</em> (part of <em>IUser</em>)</li>\n  <li><em>FirstName</em></li>\n  <li><em>LastName</em></li>\n  <li><em>Email</em></li>\n  <li><em>PasswordHash</em></li>\n  <li><em>Enabled</em></li>\n  <li><em>Roles</em></li>\n  <li>Etc.</li>\n</ul>\n<h4><em>Role</em></h4>\n<p>The role model class is a sibling of the user class. It has the following properties:</p>\n<ul>\n  <li><em>Id</em> (part of <em>IRole</em>)</li>\n  <li><em>Name</em> (part of <em>IRole</em>)</li>\n  <li><em>DisplayName</em></li>\n</ul>\n<h4><em>UserManager</em></h4>\n<p>As previously mentioned, the user manager class acts as one of the centerpoints of Identity. The <em>Kentico.Membership.UserManager</em> class is no different. It inherits from <a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613290(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.UserManager&lt;TUser, TKey&gt;</a>. It constructs the <em>TUser</em> generic parameter to <em>Kentico.Membership.User</em> with <em>TKey</em> being constructed to <em>int</em>.</p>\n<p>The class uses most of the members of its base class without overriding them. There is no need to do it; user managers are supposed to mostly call into lower-level store classes. Where this class diverts from the base is in the process of handling password retrievals, updates and verification. On top of the standard interface methods, the class offers a factory method called <em>Initialize</em>. A delegate to this method can be passed into the <a href=\"https://docs.microsoft.com/en-us/previous-versions/dn612979(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Owin.AppBuilderExtensions.CreatePerOwinContext</a> method.</p>\n<h4><em>KenticoUserManager</em></h4>\n<p>This class, as a superset of UserManager, was added by the 12.0.34 hotfix as means of working with all user properties, custom properties, and user settings, without the need of implementing complex application-level Identity classes.</p>\n<h4><em>SignInManager</em></h4>\n<p>The customization done in the sign-in manager class lies in just constructing the generic parameters. This class inherits from <a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn896559(v%3dvs.108)\">Microsoft.AspNet.Identity.Owin.SignInManager&lt;TUser, TKey&gt;</a> and specifies the generics to be <em>Kentico.Membership.User</em> and <em>int</em>. The class doesn’t introduce any other functionality, except for a <em>Create</em> factory method usable in the <em>CreatePerOwnContext</em> method in the application start.</p>\n<h4><em>KenticoSignInManager</em></h4>\n<p>This class was introduced by the 12.0.34 hotfix to alleviate the aforementioned need of extensive app-level coding.</p>\n<h4><em>UserStore</em></h4>\n<p>As a store-level class, this class does the heavy lifting of communicating with Kentico. It implements methods of all the below Identity interfaces:</p>\n<ul>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613273(v=vs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserPasswordStore&lt;TUser, TKey&gt;</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613271(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserLockoutStore&lt;TUser, TKey&gt;</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613279(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserTwoFactorStore&lt;TUser, TKey&gt;</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613276(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserRoleStore&lt;TUser, TKey&gt;</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613265(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserEmailStore&lt;TUser, TKey&gt;</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613272(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserLoginStore&lt;TUser, TKey&gt;</a></li>\n  <li><a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613277(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">IUserSecurityStampStore&lt;TUser, TKey&gt;</a></li>\n</ul>\n<p>The generic parameters are again <em>Kentico.Membership.User</em> and <em>int</em>.</p>\n<h4><em>KenticoUserStore</em></h4>\n<p>This class was introduced by the 12.0.34 hotfix to alleviate the aforementioned need of extensive app-level coding.</p>\n<h4><em>RoleStore</em></h4>\n<p>The class, as an implementation of the Microsoft.AspNet.Identity.IRoleStore&lt;TRole, TKey&gt; interface, fulfills the store-level duties in regards to roles. It offers the following methods:</p>\n<ul>\n  <li><em>FindByIdAsync</em></li>\n  <li><em>FindByNameAsync</em></li>\n  <li><em>CreateAsync</em></li>\n  <li><em>DeleteAsync</em></li>\n  <li><em>UpdateAsync</em></li>\n</ul>\n<p>As you can see, these methods focus on pure role management, without any connection to users. If you aim to build an MVC app that works with roles extensively, you might want to use this class. Otherwise, you can think of it as just a nice-to-have addon to the whole ecosystem.</p>\n<h4><em>EmailService</em></h4>\n<p>This class does what it says: it sends messages via the <a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn613261(v%3dvs.108)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.IIdentityessageService</a> interface.</p>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3da2b479-c049-4c13-9898-884cbde7a182","_parentId":"2572b605-6a36-45da-b25b-3f26a6f92c7c","_type":"component","title":"Support for ASP.NET Identity in Kentico","displayTitle":"Support for ASP.NET Identity in Kentico"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which of the user scenarios is not directly handled by ASP.NET Identity?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Password hashing</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>Authorization</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Tokenization</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7fb4d964-8cb3-44fa-993e-68916fe726aa","_parentId":"7c7c7e3a-e7ca-4ead-9309-95cee6085fc5","_type":"component","title":"ASP.NET Identity scope","displayTitle":"ASP.NET Identity scope"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which of the statements is true?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>While manager classes are lower level classes, the store classes do the high-level work.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>Manager classes orchestrate work of other lower-level classes, like stores. Store classes are predefined by Microsoft and need to be used in all projects.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>Manager classes orchestrate work of other lower-level classes, like stores. Although Microsoft provides store classes, software vendors can ship their own store classes that meet the common contracts of Identity.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1ab98846-4b32-4acc-ae7d-06b0bccfabe8","_parentId":"7c7c7e3a-e7ca-4ead-9309-95cee6085fc5","_type":"component","title":"Manager classes vs store classes","displayTitle":"Manager classes vs store classes"},{"body":"<p>In our courses, we always strive to providing guidance:</p>\n<ul>\n  <li>For mainstream user scenarios that most of our customers implement</li>\n  <li>In the least complicated way</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"003bf258-0449-4abd-998e-cac6907d63e1","_parentId":"6404aef7-9c40-4856-ba2a-b0203f2c889e","_type":"component","title":"\nOur approach to picking user stories (scenarios)","displayTitle":"\nOur approach to picking user stories (scenarios)"},{"body":"<p>This course module is no different. In the name of the above mantra, we will:</p>\n<ul>\n  <li>Introduce a customized user schema by adding custom fields in the administration UI</li>\n  <li>Allow site visitors to register online as clinic patients</li>\n  <li>Allow clinic patients and doctors to sign in to the MVC app (while also giving doctors the possibility of signing into the administration UI)</li>\n  <li>Allow patients and doctors to edit user profile data (while also preparing infrastructure to support different profile pages, based on user roles)</li>\n</ul>\n<p>When broken into a little more detail, the above points will make up the following list of development tasks.</p>\n<div class=\"infobox note\"><p>As part of the exercises, you'll extend the standard user schema with additional properties. This requires you to either do some additional coding (with Kentico 12.0.33 and earlier) or, use the classes added by the 12.0.34 hotfix.</p>\n<p>We'll demonstrate both of these approaches.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"09e696be-1b63-42c9-be3a-1b69b3d7288b","_parentId":"e8d0c54e-5540-45b4-9930-3006c14c45bc","_type":"component","title":"\nWhat you will build","displayTitle":"\nWhat you will build"},{"body":"<ul>\n  <li>Create two Kentico user roles\n    <ul>\n      <li>Patient</li>\n      <li>Doctor</li>\n    </ul>\n  </li>\n  <li>Extend the Kentico user schema with additional properties\n    <ul>\n      <li>City</li>\n      <li>Street</li>\n      <li>Nationality</li>\n    </ul>\n  </li>\n  <li>Capture that extended schema in an application-level <em>MedioClinicUser</em> class</li>\n  <li>Improve the default “stringly-typed” roles offered by Identity\n    <ul>\n      <li>By capturing roles in a <em>[Flags]</em> enum</li>\n      <li>By introducing an application-level <em>[Authorize]</em> attribute (<em>MedioClinicAuthorizeAttribute</em>)</li>\n    </ul>\n  </li>\n  <li>Implement application-level Identity classes in the <em>Business</em> project\n    <ul>\n      <li><em>MedioClinicUserManager</em></li>\n      <li><em>MedioClinicUserStore</em></li>\n      <li><em>MedioClinicSignInManager</em></li>\n    </ul>\n  </li>\n  <li>Replace the default OWIN-based lifecycle management of the above objects with AutoFac</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"85b1881f-1056-4674-be33-92d2dbe12332","_parentId":"24f021ce-35b4-4b3e-8a00-a9335eb2f689","_type":"component","title":"Prepare infrastructure for a user schema","displayTitle":"Prepare infrastructure for a user schema"},{"body":"<ul>\n  <li>Implement an <em>AccountManager</em> class to do all the heavy lifting related to user accounts</li>\n  <li>Implement an <em>AccountController</em> class to do the high-level orchestration of account-related tasks</li>\n  <li>Implement a registration page where patients sign up for their accounts, in two variants\n    <ul>\n      <li>In the first variant, with a direct registration flow</li>\n      <li>Later, with a double opt-in flow (confirmed through email)</li>\n    </ul>\n  </li>\n  <li>Implement sign-in and sign-out pages</li>\n  <li>Implement password reset pages</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0dc2e171-5edc-4a17-8c36-d52e930f03db","_parentId":"24f021ce-35b4-4b3e-8a00-a9335eb2f689","_type":"component","title":"\nCreate account-related pages","displayTitle":"\nCreate account-related pages"},{"body":"<ul>\n  <li>Implement a <em>ProfileManager</em> class to do the similar job as <em>AccountManager</em>, this time in regards to user profiles</li>\n  <li>Implement a ProfileController class to orchestrate the process of displaying and updating the user profiles</li>\n  <li>Implement a secured profile editing page for both patients and doctors\n    <ul>\n      <li>Let MVC automatically change the page layout, based on just the type of the view model passed to it</li>\n      <li>Implement a basic view model mapping service that converts <em>MedioClinicUser</em> objects into <em>PatientViewModel</em> and <em>DoctorViewModel</em> (and vice versa)</li>\n      <li>Implement a custom MVC model binder that allows for correct updating of profile data</li>\n      <li>Create an MVC editor template alternative for Kentico’s <em>country selector</em> form control with the help of AutoFac (to support the <em>Nationality</em> custom user field)</li>\n      <li>Create an <em>AvatarRepository</em> class to allow edits of user avatar pictures</li>\n      <li>Finally, add a <em>HttpPostedFileExtensionsAttribute</em> class to allow validation of the avatar file types</li>\n    </ul>\n  </li>\n  <li>Along the way, implement secondary helper classes that support the above main classes</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ac63c6fc-ae50-46d7-a3ce-8cef22b02f4d","_parentId":"24f021ce-35b4-4b3e-8a00-a9335eb2f689","_type":"component","title":"\nCreate profile-related pages","displayTitle":"\nCreate profile-related pages"},{"body":"<p>To start developing, you’ll need the following:</p>\n<ul>\n  <li>Visual Studio 2017 v15.7 (C# 7.3) or newer</li>\n  <li>SQL Server 2012 or newer</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"83429fe2-dde0-4f52-88ac-04675b110f04","_parentId":"24f021ce-35b4-4b3e-8a00-a9335eb2f689","_type":"component","title":"\nSystem requirements","displayTitle":"\nSystem requirements"},{"body":"<p>In this page, you will lay down the fundamental building blocks of the whole solution. You will learn:</p>\n<ul>\n  <li>How to make provisions for extending the default schema of Kentico user objects</li>\n  <li>How to design for multiple user roles</li>\n  <li>How to improve Identity-based string roles with strongly-typed ones</li>\n  <li>How to support each role with its own set of user data</li>\n  <li>How to capture such user data in a set of model classes</li>\n  <li>When and why an application-level Identity-based infrastructure is required</li>\n  <li>In which main ways (variants) you can implement this infrastructure</li>\n  <li>When each variant is appropriate</li>\n  <li>How the Kentico 12.0.34 hotfix can help</li>\n</ul>\n<p>The current page provides explanation and serves as a decision point between the main implementation variants. The two subsequent pages will then demonstrate the two main implementations in detail.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"b591a89a-b97f-41b1-abc8-b5989891fc67","_parentId":"42aba0ea-25be-4311-a13a-6e0b1fd8d08c","_type":"component","title":"\nScope","displayTitle":"\nScope"},{"body":"<p>In this page, you will implement the following code:</p>\n<ul>\n  <li>Gender enum</li>\n  <li>Roles enum</li>\n</ul>\n<p>In the subsequent two pages, you will implement classes like:</p>\n<ul>\n  <li>Medio Clinic user model</li>\n  <li>User helper</li>\n  <li>User extensions</li>\n  <li>A Kentico user store wrapper</li>\n  <li>Medio Clinic user store</li>\n  <li>Medio Clinic user manager</li>\n  <li>Medio Clinic sign-in manager</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"dc57203c-a53e-401d-88e5-e8ab778372d1","_parentId":"42aba0ea-25be-4311-a13a-6e0b1fd8d08c","_type":"component","title":"What you will implement","displayTitle":"What you will implement"},{"body":"<p>In the previous chapters, you’ve learned about the Identity classes. You’ve also read about them being meant to be derived into platform-level or application-level classes. The first question that might have come to your mind is: Why should I derive these classes?</p>\n<h3>When do you need them</h3>\n<p>Let's start with a bit of a background. ASP.NET Identity <em>per se</em> does not have any <em>User&lt;TKey&gt;</em> class. It only has the <em>IUser&lt;TKey&gt;</em> interface. If you develop a small single-purpose app, without any connection to Kentico, you are supposed to implement the interface directly in your application-level user class. If you develop with Kentico, you don’t have to implement the interface directly because there’s a platform-level <em>Kentico.Membership.User</em> class available for you.</p>\n<p>However, this class only has a fixed set of properties in it. The <em>Kentico.Membership.User</em> class is <strong>lightweight in purpose</strong>. Although you could find tons of various user fields and user settings fields in the Users application in the administration UI, they are not captured in this default class to keep things running fast. However, you can simply pick additional Kentico user fields and settings and add them as properties into your own descendant of the <em>Kentico.Membership.User </em>class.</p>\n<figure data-asset-id=\"b690ed6c-cbaf-47b4-a719-d4b97bcb9716\" data-image-id=\"b690ed6c-cbaf-47b4-a719-d4b97bcb9716\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/7b55fbba-08dc-4b9a-a387-88a63d62ec95/001.png\" data-asset-id=\"b690ed6c-cbaf-47b4-a719-d4b97bcb9716\" data-image-id=\"b690ed6c-cbaf-47b4-a719-d4b97bcb9716\" alt=\"Differences between implementation of IUser in Identity and Kentico\"></figure>\n<p><br></p>\n<h3>Consequences</h3>\n<p>The usage of a custom <em>Kentico.Membership.User </em>descendant<strong> can push you into creating other Identity-infrastructure classes of your own</strong>:</p>\n<ul>\n  <li>User manager</li>\n  <li>User store</li>\n  <li>Sign-in manager</li>\n</ul>\n<p>In certain cases, the&nbsp;<strong>Kentico 12.0.34 hotfix&nbsp;</strong>could save you from doing so. We'll discuss that in detail below.</p>\n<p>Apart from the need of a broadened user class, there is also a couple of other reasons to create these three custom app-level classes. For instance, you might want to be able to pass around Identity-based objects to your controllers through an IoC container of choice (instead of the default OWIN context). If so, you need to create interfaces for that purpose. And then, you can create your app-level Identity classes that inherit from Kentico-level ones, while also implementing your interfaces.</p>\n<pre><code class=\"language-csharp\">public class MyUserManager : UserManager&lt;MyUser&gt;, IMyUserManager</code></pre>\n<p>You might also feel the need to have control over the initialization of the Identity objects. Then, you can derive the provided classes into your app-level ones, with a customized constructor (or, a customized factory method).</p>\n<pre><code class=\"language-csharp\">public MedioClinicUserManager(IMedioClinicUserStore medioClinicUserStore) : base(medioClinicUserStore)\n{\n   PasswordValidator = new PasswordValidator\n   {\n       RequireDigit = true,\n       RequiredLength = 8,\n       RequireLowercase = true,\n       RequireNonLetterOrDigit = true,\n       RequireUppercase = true\n   };\n   // ...\n}</code></pre>\n<p>As you can see, there are multiple reasons that can drive you to implementing your app-level Identity managers and stores. The reasons can be summarized into the following table. In the columns, you'll find the reasons. Since they differ based on the version of Kentico you're running (and may differ more in the future), each row explains which Identity-based classes you'll have to implement.</p>\n<table><tbody>\n  <tr><td><br></td><td><strong>Broader user class</strong></td><td><strong>DI instead of OWIN</strong></td><td><strong>Custom class initialization</strong></td></tr>\n  <tr><td><strong>Until Kentico 12.0.34</strong></td><td>User manager, user store&nbsp;</td><td>User manager, user store, sign-in manager</td><td>User manager, potentially user store</td></tr>\n  <tr><td><strong>From 12.0.34 onwards</strong></td><td>No custom classes needed</td><td>User manager, user store, sign-in manager (may change in the future)</td><td>User manager, potentially user store</td></tr>\n</tbody></table>\n<p>If you've read the previous pages carefully, you will remember that the Kentico 12.0.34 hotfix brought three new Identity-based classes that can save you from creating your own ones (KenticoUserManager, KenticoUserStore, KenticoSignInManager).</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1f42f899-e647-472b-9175-8537cde17baf","_parentId":"481235f9-67a7-4787-af2f-08d7f82d1120","_type":"component","title":"Theory: Application-level Identity infrastructure","displayTitle":"Theory: Application-level Identity infrastructure"},{"body":"<p>Now that you've seen the table, it is time for a small drill-down; this time, from the perspective of particular classes. The following accordion serves as a small sneak peek into the contents of the subsequent two course pages.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e81654fe-c1ef-4d0d-81d2-264613662929","_parentId":"c2ad5faa-8105-43a2-8298-3c9ead92e7a9","_type":"component","title":"Implementing application-level Identity classes","displayTitle":"Implementing application-level Identity classes"},{"body":"","_items":[{"body":"<p>If you need more properties of the user class, defining your own class is the first you should do. In particular, by inheriting from&nbsp;<em>Kentico.Membership.User</em>&nbsp;and adding a few properties that represent either default Kentico user fields/settings or your brand new ones. Plus, one thing might also come in handy—a constructor that accepts the good old&nbsp;<em>CMS.Membership.UserInfo</em>.</p>\n<p>Depending on the usage of Kentico 12.0.34 classes, your user class may additionally override two methods thereof.</p>","title":"The user class","_graphic":null},{"body":"<p>The overall shape of this class is dictated by two requirements: First, when you need to configure rules of password validation, lockout settings or, user validation rules, your class will need a dedicated controller or a factory method. Besides that, when not inheriting from 12.0.34&nbsp;<em>KenticoUserManager</em>, you should override the&nbsp;<em>UpdatePassword&nbsp;</em>and&nbsp;<em>VerifyPasswordAsync&nbsp;</em>methods.</p>","title":"The user manager","_graphic":null},{"body":"<p>The job of the default&nbsp;<em>Kentico.Membership.UserStore</em>&nbsp;class is basically twofold. On one hand, it gets the&nbsp;<em>CMS.Membership.UserInfo</em>&nbsp;objects from the database, converts them into the&nbsp;<em>Kentico.Membership.User</em>&nbsp;objects and returns them to the client code. On the other hand, it does the same thing in the opposite direction.</p>\n<p>As with the user manager, if your requirements say so, you might need to either inherit from the 12.0.34&nbsp;<em>KenticoUserStore&nbsp;</em>class or, you implement various Identity interfaces from scratch.</p>\n<pre><code class=\"language-csharp\">public class MyUserStore : \n    IUserPasswordStore&lt;MyUser, int&gt;,\n    IUserRoleStore&lt;MyUser, int&gt;,\n    IUserEmailStore&lt;MyUser, int&gt;,\n    (...)</code></pre>\n<p>Again, fear not, we'll provide you with guidance.</p>","title":"The user store","_graphic":null},{"body":"<p>If you don't have reasons outlined in the table above, you wouldn't have to inherit from either&nbsp;<em>Microsoft.AspNet.Identity.Owin.SignInManager&nbsp;</em>or from&nbsp;<em>Kentico.Membership.KenticoSignInManager&nbsp;</em>class. However, if you set off to supplying the Identity objects via an IoC container (more on that later), your user manager class will need to be accessed through a custom interface. As we've explained earlier, this will force you to also create a simple descendant sign-in manager class and re-sell one of its properties—the user manager—through the interface. The property will simply cast itself to the interface.</p>","title":"The sign-in manager","_graphic":null}],"instruction":"","_layout":"full","_component":"accordion","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9a9cc717-e536-41fd-aa1e-05d893d4435b","_parentId":"c2ad5faa-8105-43a2-8298-3c9ead92e7a9","_type":"component","title":"The classes","displayTitle":"The classes"},{"body":"<p>In this course module, we assume that devs at the fictional Medio Clinic company prefer to have the whole object life cycle management consolidated into AutoFac. And, they also need customized rules of user validation, lockout settings, and password validation.</p>\n<p>Regarding the usage of the Kentico 12.0.34 hotfix, we will split the demos into two subsequent pages that are alternative to each other:</p>\n<ul>\n  <li>Infrastructure: Hotfix-based variant</li>\n  <li>Infrastructure: Non-hotfixed variant</li>\n</ul>\n<p>Each page will contain a separate dedicated development path. Once you're done with developing the infrastructure layer, the paths will again be joined and you'll be able to continue in the \"Replacing OWIN with AutoFac\" page.</p>\n<p>In the <a href=\"https://github.com/Kentico/training-kentico-k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">reference project in GitHub</a>, you'll find the two variants—the 12.0.34-based implementation and the hotfix-independent variant—in one place. Code that is exclusive to one of the variants will be marked with code comments.</p>\n<pre><code class=\"language-csharp\">// Hotfix-independent variant (begin)\n/*\npublic MedioClinicUser(UserInfo userInfo) : base(userInfo)\n*/\n// Hotfix-independent variant (end)\n\n// HF 12.0.34+ variant (begin)\npublic MedioClinicUser(UserInfo userInfo)\n// HF 12.0.34+ variant (end)</code></pre>\n<p>The non-hotfixed variant will always be commented out, in favor of the 12.0.34-based one.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0d80ccfc-0a5a-447b-af4a-63b433aba275","_parentId":"c2ad5faa-8105-43a2-8298-3c9ead92e7a9","_type":"component","title":"Code variants","displayTitle":"Code variants"},{"body":"<p>The first thing we’ll do is to define what kinds of information we wish to have stored with our Kentico users.</p>\n<p>We want to use the following built-in user fields:</p>\n<ul>\n  <li>User picture (avatar)</li>\n  <li>Gender</li>\n  <li>Date of birth</li>\n  <li>Phone number</li>\n</ul>\n<p>In addition to these, we will create three custom user fields:</p>\n<ul>\n  <li>Nationality</li>\n  <li>City</li>\n  <li>Street</li>\n</ul>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the administration UI, navigate to the Modules application.</li>\n  <li>Edit the <em>Membership</em> module.</li>\n  <li>Switch to the <em>Classes</em> tab.</li>\n  <li>Edit the <em>User</em> class (<em>cms.user</em>).</li>\n  <li>On the <em>Fields</em> tab, click <em>New field</em>.</li>\n  <li>Give the field a <em>“Nationality”</em> name (and caption).</li>\n  <li>Keep the data type and size at its defaults (<em>Text, 200</em>).</li>\n  <li>Select <em>Country selector</em> as the field’s form control.</li>\n</ol>\n<p>Save the field.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/8920d401-db8b-4eb1-b6a0-4053e6db2c7f/002.png","alt":"002.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>Click <em>New field</em> to add another field.</li>\n  <li>Give the field a <em>“City”</em> name (and caption).</li>\n  <li>Keep the data type, size, and form control at its defaults (<em>Text, 200, Text box</em>).</li>\n</ol>\n<p>Save the field.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/7fa34700-42b3-4361-8ab6-4ad872a7957b/003.png","alt":"003.png"},"strapline":""},{"title":"","body":"<ol>\n  <li>Click <em>New field</em> to add another field.</li>\n  <li>Give the field a <em>“Street”</em> name (and caption).</li>\n  <li>Keep the data type, size, and form control at its defaults (<em>Text, 200, Text box</em>).</li>\n</ol>\n<p>Save the field.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/23e1ccf6-452d-4e59-8069-4f5239a21fff/004.png","alt":"004.png"},"strapline":""},{"title":"","body":"<p>Check whether the custom fields are present in the user profile.</p>\n<ol>\n  <li>Navigate to the <em>Users</em> application.</li>\n  <li>Edit an arbitrary user.</li>\n  <li>Switch to the <em>Custom fields</em> tab.</li>\n</ol>\n<p>Verify that the <em>Nationality field</em> can be expanded.</p>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/db91d177-da5b-415e-9e19-019c49033431/005.png","alt":"005.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ed6afde7-3f73-45bf-81c4-bc5d180cf876","_parentId":"d043d21a-42c3-4f61-8c0d-606d6bc0b703","_type":"component","title":"Demo: Customizing the user schema","displayTitle":"Demo: Customizing the user schema"},{"body":"<p>To start coding, you should have your Medio Clinic project in the final state of the Essentials course module. You can get the code (together with a database backup) by simply <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository\">cloning</a> the <a href=\"https://github.com/Kentico/training-kentico-k12\">master branch</a>.</p>\n<p>If you have an older version of SQL Server, you can create the database using an SQL script that’s stored alongside the database backup (in the <em>Db</em> folder).</p>\n<pre><code class=\"language-html\">git clone https://github.com/Kentico/training-kentico-k12</code></pre>\n<p><br></p>\n<p>Once you have your solution in place, you also want to get the <a href=\"https://www.nuget.org/packages/Kentico.AspNet.Mvc.Libraries/\">Kentico.AspNet.Mvc.Libraries</a> NuGet package for your Business project. This will bring in the required <em>Kentico.Membership.dll</em> assembly to your solution.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"2a2957cc-c865-41e2-8c63-d90eb1beb289","_parentId":"a01e7bf8-3da9-4d70-a2f9-e9c88ec335b7","_type":"component","title":"Preparing the Visual Studio solution","displayTitle":"Preparing the Visual Studio solution"},{"body":"<p>By default, Identity works with roles on a pure string basis. In controller action methods, you can use the <em>System.Web.Mvc.AuthorizeAttribute</em> with roles being defined as pure C# string literals.</p>\n<p>Because attribute properties must always be supplied as compile-time constants, you’d be stuck with the string literals in each action method. This is highly error-prone. We can do better than that.</p>\n<p>Later in the course, we’ll show you the whole setup of strongly-typed role checking. In this step, you’ll create the first bits—the enum of roles.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In <em>Business &gt; Identity &gt; Models</em>, create a new <em>“Roles”</em> class file.</li>\n  <li>Remove the stub of the class body and add the enum definition as seen in the code snippet.</li>\n  <li>Don’t forget to add the <em>System.FlagsAttribute</em>. This way you can assign multiple roles to users and compare the sets of required action method roles with sets of roles of the current website visitor.</li>\n  <li>Also, notice that you can’t rely on implicit integral values in the enum. Enums with FlagsAttribute are evaluated in a binary fashion (not logical). Thus, you must assign powers of two as values. This is best ensured through the <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">binary shift operator</a>, as seen in the snippet.</li>\n</ol>","code":{"src":"[Flags]\npublic enum Roles\n{\n    None = 1,\n    Patient = 1 << 1,\n    Doctor = 1 << 2\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"756233ab-c086-4777-a7dd-1f4d98c558d1","_parentId":"7c20e84f-cfd5-425b-aebf-e404a3d081ef","_type":"component","title":"Demo: Implementing the enum of roles","displayTitle":"Demo: Implementing the enum of roles"},{"body":"<p>Before you finish this page, you can also create one extension method that will translate the string-based roles from Identity classes to your new strongly-typed roles.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>You can place your method into the <em>UserExtensions</em> static class.</p>\n<ol>\n  <li>In <em>Business &gt; Identity &gt; Extensions</em>, open the <em>UserExtensions</em> class file.</li>\n  <li>Add the “<em>ToMedioClinicRoles”</em> extension method according to the code snippet.</li>\n</ol>\n<p>Notice that the addition of each parsed role is done via a binary <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/index#assignment-and-lambda-operators\">compound OR operator</a>. This is because the sets of roles are always connected with the binary OR operator (<em>Role1 | Role2 | …</em>).</p>","code":{"src":"public static Roles ToMedioClinicRoles(this IEnumerable<string> roles)\n{\n    Roles foundRoles = Roles.None;\n\n    if (roles != null)\n    {\n        foreach (var role in roles)\n        {\n            if (Enum.TryParse(role, out Roles parsedRole))\n            {\n                foundRoles |= parsedRole;\n            }\n        } \n    }\n\n    return foundRoles;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9222d683-30b7-447d-9db3-acffd9db2ab6","_parentId":"95efaa51-ce55-4f5e-95bc-b779f8547849","_type":"component","title":"Demo: Adding extension method to translate roles","displayTitle":"Demo: Adding extension method to translate roles"},{"body":"<p>Start small, think big. That's what they say. Thus, you'll start with a simple gender enumeration.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s create the gender enum.</p>\n<ol>\n  <li>In the <em>Business &gt; Identity &gt; Models </em>folder, create a new <em>“Gender”</em> class file.</li>\n  <li>Delete the empty class definition and replace it with the code snippet.</li>\n  <li>Make sure the ordering of the values is the same as in the code snippet. This is to avoid having an extra logic that maps the enum values to the Kentico integer values.</li>\n</ol>","code":{"src":"public enum Gender\n{\n    Unknown,\n    Male,\n    Female\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e07c3480-b200-4985-a089-c562589d58cf","_parentId":"75ace9ca-3c3c-4de6-9d01-0eed8f617cf5","_type":"component","title":"Demo: Implementing a gender enum","displayTitle":"Demo: Implementing a gender enum"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Which of the following statements is true?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Kentico’s Identity classes serve as just base classes that always need to be inherited from in application-level ones.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>If the <em>Kentico.Membership.User</em> schema is sufficient for the needs of a given MVC project, DI is not employed, and no special initialization is required, then the <em>Kentico.Membership.UserManager</em>, <em>Kentico.Membership.UserStore</em>, and <em>Kentico.Membership.SignInManager </em>classes can be used as they are, without any other customizations. If the 12.0.34 hotfix is applied, its classes can be used without customizations even if the MVC project requires a broader user schema.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>The schema of <em>Kentico.Membership.User</em> covers all built-in user fields and user settings fields in Kentico.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"26a6b77b-61da-41da-892b-1ef80c09aafd","_parentId":"1031c774-f6ae-4ea1-b8f1-14238f31149b","_type":"component","title":"Need for customization","displayTitle":"Need for customization"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Why are strongly-typed roles better than those defined through strings?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Because in MVC, the basic <em>AuthorizeAttribute</em> requires roles be specified in pure C# string literals. Stating the required roles in pure literals for each and every action method is highly error-prone.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Because <em>AuthorizeAttribute </em>allows only one role to be defined for a given controller or action.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>Because Kentico requires strongly-typed role definitions.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"efacca70-7221-4c73-81f3-a5559f034107","_parentId":"1031c774-f6ae-4ea1-b8f1-14238f31149b","_type":"component","title":"Strongly-typed role system","displayTitle":"Strongly-typed role system"},{"body":"<p>You’ve implemented common parts of the app-level Identity codebase.</p>\n<p>Depending on whether you prefer having your Kentico instance hotfixed or not, you can choose one of the two subsequent pages. Then, the development path will again join into one single track.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c17b62f4-a6a8-4585-aae5-513fb5c0668a","_parentId":"49b36328-c098-4618-8b16-77855847ab62","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>Since you prefer using the Kentico 12.0.34 hotfix classes, you will now implement your app-level classes in much easier ways.</p>\n<p>Namely, you will create:</p>\n<ul>\n  <li>Medio Clinic user model</li>\n  <li>Medio Clinic user manager</li>\n  <li>Medio Clinic user store</li>\n  <li>Medio Clinic sign-in manager</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"a42bae31-f875-4473-8a49-b20cda62dde2","_parentId":"933e5631-6503-4a26-9ee1-e973b274a2a7","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>You’ll start with the user class. You'll also add some cousin code—user extensions and a simple helper.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s take on the user class.</p>\n<ol>\n  <li>In the <em>Business</em> project, create a new <em>“Identity”</em> folder, together with a <em>“Models”</em> subfolder.</li>\n  <li>In that subfolder, create a new “<em>MedioClinicUser”</em> class.</li>\n  <li>Inherit from the <em>Kentico.Membership.User</em> class.</li>\n  <li>Add properties according to the code snippet.</li>\n</ol>\n<p>If you later decide not to take the optional page called \"Adding support for avatars\", you won't need the AvatarId property.</p>\n<p>Don't close the file yet, you'll continue in the next step.</p>","code":{"src":"public class MedioClinicUser : Kentico.Membership.User\n{\n    public DateTime DateOfBirth { get; set; }\n\n    public Gender Gender { get; set; }\n\n    public string City { get; set; }\n\n    public string Street { get; set; }\n\n    public string Phone { get; set; }\n\n    public string Nationality { get; set; }\n\n    public int AvatarId { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You should now override two methods of the base class.</p>\n<ol>\n  <li>In the MapFromUserInfo method, you should call the base method and, map all the properties introduced by your custom class.</li>\n  <li>The same applies to the MapToUserInfo method, only in the opposite direction.</li>\n</ol>\n<p>If you later decide not to take the optional page called \"Adding support for avatars\", you won't need to map the AvatarId property.</p>\n<p>Don't close the file yet, you'll continue in the next step.</p>","code":{"src":"public override void MapFromUserInfo(UserInfo source)\n{\n    base.MapFromUserInfo(source);\n\n    DateOfBirth = source.GetDateTimeValue(\"UserDateOfBirth\", DateTime.MinValue);\n    Gender = (Gender)source.UserSettings.UserGender;\n    City = source.GetStringValue(\"City\", string.Empty);\n    Street = source.GetStringValue(\"Street\", string.Empty);\n    Phone = source.UserSettings.UserPhone;\n    Nationality = source.GetStringValue(\"Nationality\", string.Empty);\n    AvatarId = source.UserAvatarID;\n}\n\npublic override void MapToUserInfo(UserInfo target)\n{\n    base.MapToUserInfo(target);\n\n    target.UserAvatarID = AvatarId;\n    target.UserSettings.UserDateOfBirth = DateOfBirth;\n    target.UserSettings.UserGender = (int)Gender;\n    target.UserSettings.UserPhone = Phone;\n    target.SetValue(\"City\", City);\n    target.SetValue(\"Street\", Street);\n    target.SetValue(\"Nationality\", Nationality);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add constructors.</p>\n<ol>\n  <li>First, add an empty explicit default constructor.</li>\n  <li>Add another constructor that accepts <em>CMS.Membership.UserInfo</em> objects.</li>\n  <li>In the body, just point to your MapFromUserInfo method.</li>\n</ol>","code":{"src":"public MedioClinicUser()\n{\n}\n\npublic MedioClinicUser(UserInfo userInfo)\n{\n    if (userInfo == null)\n    {\n        return;\n    }\n\n    MapFromUserInfo(userInfo);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"13b0cbe0-75e4-4ab7-8100-c43286d7d366","_parentId":"c755b647-105f-46a0-ba31-2ed6f220b648","_type":"component","title":"Demo: Creating the user class","displayTitle":"Demo: Creating the user class"},{"body":"<p>At this point, you have the basic model class that will influence the shape of all other Identity-based classes in your Business project.</p>\n<p>It is now the right time to implement the backbones of your solution:</p>\n<ul>\n  <li>User store</li>\n  <li>User manager</li>\n  <li>Sign-in manager</li>\n</ul>\n<p>These will become the connection point between the <em>Kentico.Membership</em> classes and your future <em>AccountManager</em> and <em>ProfileManager</em> classes in the <em>MedioClinic</em> project.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"06815373-548a-4d5d-a0f0-557b19a9935a","_parentId":"c755b647-105f-46a0-ba31-2ed6f220b648","_type":"component","title":"Creating the user class: Conclusion","displayTitle":"Creating the user class: Conclusion"},{"body":"<p>Let’s start with the user store. This lower-level class shall be responsible for the overall persistence of user-related data.</p>\n<p>You'll just inherit from <em>Kentico.Membership.KenticoUserStore</em>, while also implementing an interface (for dependency injection purposes). You won't have to add anything but a constructor.</p>\n<p>Worth a thousand words, the following scheme illustrates the architecture.</p>\n<figure data-asset-id=\"0cc602cc-8930-45c1-94d3-019803d055ff\" data-image-id=\"0cc602cc-8930-45c1-94d3-019803d055ff\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/56d66ebc-dfc7-46cf-959b-dfc32cb9b8e0/user-store-12-0-34.png\" data-asset-id=\"0cc602cc-8930-45c1-94d3-019803d055ff\" data-image-id=\"0cc602cc-8930-45c1-94d3-019803d055ff\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"757d4387-6d9d-459f-86b4-16030aafcb4e","_parentId":"1fe377ac-06f0-4da5-9a32-cdcf7743cd88","_type":"component","title":"User store implementation overview","displayTitle":"User store implementation overview"},{"body":"<p>To be able to pass the user store object around your app via DI, you need an underlying interface. Since all the required method signatures have already been specified in stock Identity interfaces, you can simply inherit them.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The interface wraps all Identity interfaces that <em>Kentico.Membership.UserStore (or Kentico.Membership.KenticoUserStore)</em> implements, for DI purposes.</p>\n<ol>\n  <li>In the <em>Business &gt; Identity</em> folder, create a new <em>“IMedioClinicUserStore”</em> interface file.</li>\n  <li>Make the interface inherit from the depicted stock Identity ones.</li>\n  <li>Use <em>MedioClinicUser</em> and <em>int</em> for <em>TUser</em> and <em>TKey</em> respectively.</li>\n</ol>","code":{"src":"public interface IMedioClinicUserStore :\n    IUserPasswordStore<MedioClinicUser, int>,\n    IUserLockoutStore<MedioClinicUser, int>,\n    IUserTwoFactorStore<MedioClinicUser, int>,\n    IUserRoleStore<MedioClinicUser, int>,\n    IUserEmailStore<MedioClinicUser, int>,\n    IUserLoginStore<MedioClinicUser, int>,\n    IUserSecurityStampStore<MedioClinicUser, int>\n{\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"c2cb213f-85ce-4b23-98cb-5e62d718ae6c","_parentId":"20a07eaa-efb1-4efa-8dee-c53eb2d38db5","_type":"component","title":"Demo: Creating an app-level user store interface","displayTitle":"Demo: Creating an app-level user store interface"},{"body":"<p>You can now implement the interface in an app-level user store class.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let's start.</p>\n<ol>\n  <li>In the <em>Business &gt; Identity</em> folder, create a new <em>“MedioClinicUserStore”</em> class file.</li>\n  <li>Inherit from <em>Kentico.Membership.KenticoUserStore </em>and implement the <em>IMedioClinicUserStore</em> interface.</li>\n  <li>Add an empty constructor that just passes the <em>siteName </em>parameter to the base class.</li>\n</ol>\n<p>You're done here.</p>","code":{"src":"public class MedioClinicUserStore : KenticoUserStore<MedioClinicUser>, IMedioClinicUserStore\n{\n    public MedioClinicUserStore(string siteName) : base(siteName)\n    {\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"f878a394-bb75-4e8e-8adc-100ecfec18a0","_parentId":"d8af297e-9cdf-4e29-8eef-3b01e23e72f0","_type":"component","title":"\nDemo: Implementing an app-level user store class","displayTitle":"\nDemo: Implementing an app-level user store class"},{"body":"<p>It is time to create your app-level user manager. You will only implement a constructor that handles the initialization. The base class takes care of the rest for you.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>As with the user store, user manager also needs an interface that carries objects through AutoFac to the client code’s constructors.</p>\n<p>As the interface is really large, we show just a few lines in the code snippet. It is best to copy the GitHub file directly.</p>\n<ol>\n  <li>Copy the <em>Business &gt; Identity &gt; IMedioClinicUserManager.cs </em>file cloned from the GitHub repository into the respective folder of your solution.</li>\n  <li>We advise you to clone the repo instead of downloading the files via the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Identity/IMedioClinicUserManager.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub web interface</a>. Downloading blindly converts line endings in files no matter what platform you're running.</li>\n</ol>\n<p>Once you copy the interface, you can note that it is also generic enough to be reused in your other projects.</p>\n<p>It has its <em>TUser</em> and <em>TKey</em> generic parameters open (not constructed).</p>\n<p>To use it in other projects, you can simply rename it.</p>","code":{"src":"public interface IMedioClinicUserManager<TUser, TKey> : IDisposable\n    where TUser : class, IUser<TKey>\n    where TKey : IEquatable<TKey>\n{\n    /// <summary>\n    ///     Used to hash/verify passwords\n    /// </summary>\n    IPasswordHasher PasswordHasher { get; set; }\n\n    /// <summary>\n    ///     Used to validate users before changes are saved\n    /// </summary>\n    IIdentityValidator<TUser> UserValidator { get; set; }\n\n    /// <summary>\n    ///     Used to validate passwords before persisting changes\n    /// </summary>\n    IIdentityValidator<string> PasswordValidator { get; set; }\n\n    /// <summary>\n    ///     Used to create claims identities from users\n    /// </summary>\n    IClaimsIdentityFactory<TUser, TKey> ClaimsIdentityFactory { get; set; }\n\n    /// <summary>\n    ///     Used to send email\n    /// </summary>\n    IIdentityMessageService EmailService { get; set; }\n\n    // ...\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You're done with the interface. Let's start with the class itself.</p>\n<ol>\n  <li>In <em>Business &gt; Identity</em>, create a new <em>\"MedioClinicUserManager\" </em>class file.</li>\n  <li>Make the class inherit from <em>Kentico.Membership.KenticoUserManager</em>.</li>\n  <li>Also, implement your <em>IMedioClinicUserManager </em>interface.</li>\n</ol>\n<p>In the next step, you'll add a constructor.</p>","code":{"src":"public class MedioClinicUserManager : KenticoUserManager<MedioClinicUser>, IMedioClinicUserManager<MedioClinicUser, int>\n{\n\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add the constructor according to the code snippet.</p>\n<p>Unlike the Microsoft official guidance, in our case we use a constructor to do the initialization work. We won’t create factory methods in our user manager and sign-in manager classes since we want to supply their instances via DI, not through the <em>CreatePerOwinContext</em> method (more on that later in this course).</p>","code":{"src":"public MedioClinicUserManager(IMedioClinicUserStore medioClinicUserStore) : base(medioClinicUserStore)\n{\n    PasswordValidator = new PasswordValidator\n    {\n        RequireDigit = true,\n        RequiredLength = 8,\n        RequireLowercase = true,\n        RequireNonLetterOrDigit = true,\n        RequireUppercase = true\n    };\n\n    UserLockoutEnabledByDefault = false;\n    EmailService = new EmailService();\n\n    UserValidator = new UserValidator<MedioClinicUser, int>(this)\n    {\n        RequireUniqueEmail = true\n    };\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"a081d320-5dc2-46b0-acf5-bd42b7a1da6b","_parentId":"03270e8e-c589-44d5-aa40-7be0efd7d44b","_type":"component","title":"Demo: Implementing the user manager","displayTitle":"Demo: Implementing the user manager"},{"body":"<p>Since we chose to pass around Identity objects via an IoC container, we will also need to implement a custom sign-in manager class. Not only because the stock <em>Microsoft.AspNet.Identity.Owin.SignInManager</em>&nbsp;implements no interface but IDisposable. Also because when the sign-in manager is constructed, it takes the user manager object as its constructor's argument. And, the IoC container naturally ships the user manager cast to its underlying interface.</p>\n<p>All of that implies the need to inherit from <em>Kentico.Membership.KenticoSignInManager</em>, cast the user manager object to <em>Microsoft.AspNet.Identity.UserManager</em> upon saving, and cast it back to the underlying interface for client code.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First things first. You need to back your descendant sign-in manager with an interface.</p>\n<p>The interface resembles the old story of the previous one, therefore we only list a few of its members. As with the previous case, we've factored one for you. And, it can also be used in other projects; not just this one.</p>\n<ol>\n  <li>In the cloned <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Identity/IMedioClinicSignInManager.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>, locate the <em>Business &gt; Identity &gt; IMedioClinicSignInManager.cs</em> file.</li>\n  <li>Copy it over to the respective location of your solution.</li>\n</ol>","code":{"src":"public interface IMedioClinicSignInManager<TUser, TKey> : IDisposable\n    where TUser : class, IUser<TKey>\n    where TKey: IEquatable<TKey>\n{\n    /// <summary>\n    /// AuthenticationType that will be used by sign in, defaults to DefaultAuthenticationTypes.ApplicationCookie\n    /// </summary>\n    string AuthenticationType { get; set; }\n\n    /// <summary>\n    /// Used to operate on users\n    /// </summary>\n    IMedioClinicUserManager<TUser, TKey> UserManager { get; set; }\n\n    /// <summary>\n    /// Used to sign in identities\n    /// </summary>\n    IAuthenticationManager AuthenticationManager { get; set; }\n\n    // ...\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, let’s create the class itself.</p>\n<ol>\n  <li>In <em>Business &gt; Identity</em>, create a new <em>“MedioClinicSignInManager”</em> class file.</li>\n  <li>Add a constructor that takes the <em>IMedioClinicUserManager&lt;MedioClinicUser, int&gt;</em> representation of the <em>MedioClinicUserManager&lt;&gt;</em> runtime object and passes it onto the base class’ constructor cast to its <em>Kentico.Membership.KenticoUserManager&lt;&gt;</em> base class.</li>\n</ol>\n<p>Next, add an explicit <em>IMedioClinicSignInManager.UserManager</em> property implementation and cast the values to <em>IMedioClinicUserManager&lt;&gt;</em> or <em>UserManager&lt;&gt;</em>.</p>","code":{"src":"public class MedioClinicSignInManager : KenticoSignInManager<MedioClinicUser>, IMedioClinicSignInManager<MedioClinicUser, int>\n{\n    /// <summary>\n    /// Makes the <see cref=\"UserManager{MedioClinicUser, int}\"/> property accessible through the <see cref=\"IMedioClinicUserManager{MedioClinicUser, int}\"/> interface.\n    /// </summary>\n    IMedioClinicUserManager<MedioClinicUser, int> IMedioClinicSignInManager<MedioClinicUser, int>.UserManager\n    {\n        get => UserManager as IMedioClinicUserManager<MedioClinicUser, int>;\n        set => UserManager = value as UserManager<MedioClinicUser, int>;\n    }\n\n    /// <summary>\n    /// Creates the instance of <see cref=\"MedioClinicSignInManager\"/>.\n    /// </summary>\n    /// <param name=\"userManager\">User manager.</param>\n    /// <param name=\"authenticationManager\">Authentication manager.</param>\n    public MedioClinicSignInManager(IMedioClinicUserManager<MedioClinicUser, int> userManager, IAuthenticationManager authenticationManager)\n    : base(userManager as KenticoUserManager<MedioClinicUser>, authenticationManager)\n    {\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"f55ba66f-199d-48b6-b3ae-18f6e264e90d","_parentId":"2804f13f-f4c7-4f01-bee7-c4f7b372b44c","_type":"component","title":"Demo: Implementing a sign-in manager","displayTitle":"Demo: Implementing a sign-in manager"},{"body":"<p>You're now done with the basic pillars of user management in Medio Clinic. You can now skip the next page as it deals with an alternative way of implementation. You can continue to the \"Replacing OWIN with AutoFac\" page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"c2a39ddd-2061-4ca7-a793-32a8225bcff4","_parentId":"87f62f36-c292-455b-a3f4-b5d424081e19","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will implement the Identity infrastructure classes in a way that doesn't depend on any Kentico hotfix.</p>\n<p>In particular, you'll create the following classes:</p>\n<ul>\n  <li>Medio Clinic user model</li>\n  <li>User helper</li>\n  <li>User extensions</li>\n  <li>A Kentico user store wrapper</li>\n  <li>Medio Clinic user store</li>\n  <li>Medio Clinic user manager</li>\n  <li>Medio Clinic sign-in manager</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"9b15b5dc-7f1a-4956-aa50-d0d21cf2c929","_parentId":"ddbfe2d5-3be8-494e-9c73-3d97c45fcc47","_type":"component","title":"Introduction","displayTitle":"Introduction"},{"body":"<p>You’ll start with the user class and some cousin code—user extensions, and a simple helper.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s take on the user class.</p>\n<ol>\n  <li>In the <em>Business</em> project, create a new <em>“Identity”</em> folder, together with a <em>“Models”</em> subfolder.</li>\n  <li>In that subfolder, create a new “<em>MedioClinicUser”</em> class.</li>\n  <li>Inherit from the <em>Kentico.Membership.User</em> class.</li>\n  <li>Add properties according to the code snippet.</li>\n</ol>\n<p>If you later decide not to take the optional page called \"Adding support for avatars\", you won't need the AvatarId property.</p>\n<p>Don't close the file yet, you'll continue in the next step.</p>","code":{"src":"public class MedioClinicUser : Kentico.Membership.User\n{\n    public DateTime DateOfBirth { get; set; }\n\n    public Gender Gender { get; set; }\n\n    public string City { get; set; }\n\n    public string Street { get; set; }\n\n    public string Phone { get; set; }\n\n    public string Nationality { get; set; }\n\n    public int AvatarId { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add constructors.</p>\n<ol>\n  <li>First, add an empty explicit default constructor.</li>\n  <li>Add another constructor that accepts&nbsp;<em>CMS.Membership.UserInfo</em>&nbsp;objects and in turn calls the base class' constructor.</li>\n  <li>Map the properties.</li>\n</ol>\n<p>You can now close the file.</p>","code":{"src":"public MedioClinicUser()\n{\n}\n\npublic MedioClinicUser(UserInfo userInfo) : base(userInfo)\n{\n   if (userInfo == null)\n   {\n       return;\n   }\n\n   DateOfBirth = source.GetDateTimeValue(\"UserDateOfBirth\", DateTime.MinValue);\n   Gender = (Gender)source.UserSettings.UserGender;\n   City = source.GetStringValue(\"City\", string.Empty);\n   Street = source.GetStringValue(\"Street\", string.Empty);\n   Phone = source.UserSettings.UserPhone;\n   Nationality = source.GetStringValue(\"Nationality\", string.Empty);\n   AvatarId = source.UserAvatarID;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create a simple helper that populates the <em>UserInfo</em> data.</p>\n<ol>\n  <li>In the <em>Identity </em>parent folder, create a <em>“Helpers”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>“UserHelper”</em> class file.</li>\n</ol>\n<p>Create the <em>“UpdateUserInfo”</em> method.</p>","code":{"src":"public static class UserHelper\n{\n    public static void UpdateUserInfo(ref UserInfo userInfo, MedioClinicUser medioClinicUser)\n    {\n        userInfo.UserName = medioClinicUser.UserName;\n        userInfo.FullName = UserInfoProvider.GetFullName(medioClinicUser.FirstName, null, medioClinicUser.LastName);\n        userInfo.FirstName = medioClinicUser.FirstName;\n        userInfo.LastName = medioClinicUser.LastName;\n        userInfo.Email = medioClinicUser.Email;\n        userInfo.Enabled = medioClinicUser.Enabled;\n        userInfo.UserSecurityStamp = medioClinicUser.SecurityStamp;\n        userInfo.UserNickName = userInfo.GetFormattedUserName(true);\n        userInfo.SetValue(\"UserPassword\", medioClinicUser.PasswordHash);\n\n        userInfo.UserAvatarID = medioClinicUser.AvatarId;\n        userInfo.UserSettings.UserDateOfBirth = medioClinicUser.DateOfBirth;\n        userInfo.UserSettings.UserGender = (int)medioClinicUser.Gender;\n        userInfo.UserSettings.UserPhone = medioClinicUser.Phone;\n        userInfo.SetValue(\"City\", medioClinicUser.City);\n        userInfo.SetValue(\"Street\", medioClinicUser.Street);\n        userInfo.SetValue(\"Nationality\", medioClinicUser.Nationality);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, you create some extension methods that will help in converting the&nbsp;<em>MedioClinicUser</em>&nbsp;objects in the user store. (If you use the 12.0.34 classes, you don't need these extensions.)</p>\n<ol>\n  <li>In the Identity parent folder, create an <em>“Extensions”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>“UserExtensions”</em> class file.</li>\n  <li>Add the <em>“ToMedioClinicUser”</em> method.&nbsp;</li>\n  <li>This method will check if an existing <em>UserInfo</em> object belongs to the current site and it will call the previously-created constructor to produce the <em>MedioClinicUser</em> object.</li>\n  <li>In the same class, create the&nbsp;<em>“ToUserInfo”</em>&nbsp;method.</li>\n  <li>This method works in the opposite direction. It creates a blank&nbsp;<em>UserInfo&nbsp;</em>object and uses the&nbsp;<em>UserHelper.UpdateUserInfo</em>&nbsp;method to populate it with data.</li>\n</ol>","code":{"src":"public static class UserExtensions\n{\n    public static MedioClinicUser ToMedioClinicUser(this UserInfo userInfo) =>\n        new MedioClinicUser(UserInfoProvider.CheckUserBelongsToSite(userInfo, CMS.SiteProvider.SiteContext.CurrentSiteName));\n\n    public static UserInfo ToUserInfo(this MedioClinicUser medioClinicUser)\n    {\n       var userInfo = new UserInfo();\n       UserHelper.UpdateUserInfo(ref userInfo, medioClinicUser);\n    \n       return userInfo;\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"7ea0e696-890e-4312-bcb7-7a806ca1bc8e","_parentId":"b69b20a2-a77f-49de-9a28-2495879c5f2b","_type":"component","title":"\nDemo: Creating the user class","displayTitle":"\nDemo: Creating the user class"},{"body":"<p>At this point, you have the basic model class that will influence the shape of all other Identity-based classes in your Business project.</p>\n<p>It is now the right time to implement the backbones of your solution:</p>\n<ul>\n  <li>User store</li>\n  <li>User manager</li>\n  <li>Sign-in manager</li>\n</ul>\n<p>These will become the connection point between the <em>Kentico.Membership</em> classes and your future <em>AccountManager</em> and <em>ProfileManager</em> classes in the <em>MedioClinic</em> project.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"06815373-548a-4d5d-a0f0-557b19a9935a","_parentId":"b69b20a2-a77f-49de-9a28-2495879c5f2b","_type":"component","title":"Creating the user class: Conclusion","displayTitle":"Creating the user class: Conclusion"},{"body":"<p>Let’s start with the user store. This lower-level class shall be responsible for the overall persistence of user-related data.</p>\n<p>The implementation comprises the two steps:</p>\n<ol>\n  <li>You will first inherit from the existing&nbsp;<em>Kentico.Membership.UserStore&nbsp;</em>class so that your descendant can implement an interface (for dependency injection purposes).</li>\n  <li>Then, you'll create another class that wraps the previous one into a property. The new class will also implement all the stock Identity interfaces that&nbsp;<em>Kentico.Membership.UserStore&nbsp;</em>does, simply by calling into the object captured in the property.</li>\n</ol>\n<p>Worth a thousand words, the following scheme illustrates the architecture.</p>\n<figure data-asset-id=\"ef8022f1-f63a-4c8f-a73a-a827f9c228c8\" data-image-id=\"ef8022f1-f63a-4c8f-a73a-a827f9c228c8\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/5c39d7ab-35aa-45ed-af81-aec1727abe84/user-store-non-hotfixed.png\" data-asset-id=\"ef8022f1-f63a-4c8f-a73a-a827f9c228c8\" data-image-id=\"ef8022f1-f63a-4c8f-a73a-a827f9c228c8\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"38c3df6b-76b9-49c5-8c0a-9883d7ed5234","_parentId":"55c4dc7d-4cec-4cea-85d7-1c05049bdf47","_type":"component","title":"User store implementation overview","displayTitle":"User store implementation overview"},{"body":"<p>This simple wrapper class will inherit from <em>Kentico.Membership.UserStore, </em>while also implementing an interface. This will allow objects of this class be supplied via dependency injection (DI, for short).</p>\n<p>Later, when you're done with this class, you'll use it in your app-level user store class as a property.</p>\n<div class=\"infobox idea\"><p>Both the interface and the wrapper class can be used in other Kentico MVC projects.</p></div>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s start with the <em>“IKenticoUserStore”</em> interface.</p>\n<ol>\n  <li>In&nbsp;<em>Business &gt; Identity</em>, create a new&nbsp;<em>“Proxies”</em>&nbsp;subfolder.</li>\n  <li>Store the interface in that subfolder.</li>\n  <li>It has all the public methods of <em>Kentico.Membership.UserStore</em> in one place.</li>\n  <li>Notice that it also contains the explicit signature of the <em>Dispose</em> method, to satisfy requirements of the <a href=\"https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose\">recommended dispose pattern</a>.</li>\n</ol>","code":{"src":"public interface IKenticoUserStore : IDisposable\n{\n    Task AddLoginAsync(User user, UserLoginInfo login);\n    Task AddToRoleAsync(User user, string roleName);\n    Task CreateAsync(User user);\n    Task DeleteAsync(User user);\n    Task<User> FindAsync(UserLoginInfo login);\n    Task<User> FindByEmailAsync(string email);\n    Task<User> FindByIdAsync(int userId);\n    Task<User> FindByNameAsync(string userName);\n    Task<int> GetAccessFailedCountAsync(User user);\n    Task<string> GetEmailAsync(User user);\n    Task<bool> GetEmailConfirmedAsync(User user);\n    Task<bool> GetLockoutEnabledAsync(User user);\n    Task<DateTimeOffset> GetLockoutEndDateAsync(User user);\n    Task<IList<UserLoginInfo>> GetLoginsAsync(User user);\n    Task<string> GetPasswordHashAsync(User user);\n    Task<IList<string>> GetRolesAsync(User user);\n    Task<string> GetSecurityStampAsync(User user);\n    Task<bool> GetTwoFactorEnabledAsync(User user);\n    Task<bool> HasPasswordAsync(User user);\n    Task<int> IncrementAccessFailedCountAsync(User user);\n    Task<bool> IsInRoleAsync(User user, string roleName);\n    Task RemoveFromRoleAsync(User user, string roleName);\n    Task RemoveLoginAsync(User user, UserLoginInfo login);\n    Task ResetAccessFailedCountAsync(User user);\n    Task SetEmailAsync(User user, string email);\n    Task SetEmailConfirmedAsync(User user, bool confirmed);\n    Task SetLockoutEnabledAsync(User user, bool enabled);\n    Task SetLockoutEndDateAsync(User user, DateTimeOffset lockoutEnd);\n    Task SetPasswordHashAsync(User user, string passwordHash);\n    Task SetSecurityStampAsync(User user, string stamp);\n    Task SetTwoFactorEnabledAsync(User user, bool enabled);\n    Task UpdateAsync(User user);\n    void Dispose(bool disposing);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the second step, let’s create the wrapper class.</p>\n<ol>\n  <li>In the same <em>Proxies</em> folder, create a <em>“KenticoUserStore”</em> class file.</li>\n  <li>Inherit from the said <em>Kentico.Membership.UserStore</em> class and implement the <em>IKenticoUserStore</em> interface.</li>\n  <li>Add a simple constructor that in turn calls the base class’ one.</li>\n  <li>Add an explicit implementation of the <em>Dispose</em> method, to make sure both managed and unmanaged resources are cleaned up in the underlying object graph.</li>\n</ol>","code":{"src":"public class KenticoUserStore: Kentico.Membership.UserStore, IKenticoUserStore\n{\n    public KenticoUserStore(string siteName) : base(siteName)\n    {\n    }\n\n    void IKenticoUserStore.Dispose(bool disposing)\n    {\n        base.Dispose(disposing);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"9a35826d-fb60-4925-91a1-0c81030d5ffb","_parentId":"8c78534c-9c3c-4253-9176-604e6d248950","_type":"component","title":"Demo: Wrapping the Kentico user store","displayTitle":"Demo: Wrapping the Kentico user store"},{"body":"<p>To be able to pass the user store object around your app via DI, you need an underlying interface. Since all the required method signatures have already been specified in stock Identity interfaces, you can simply inherit them.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The interface wraps all Identity interfaces that <em>Kentico.Membership.UserStore (or Kentico.Membership.KenticoUserStore)</em> implements, for DI purposes.</p>\n<ol>\n  <li>In the <em>Business &gt; Identity</em> folder, create a new <em>“IMedioClinicUserStore”</em> interface file.</li>\n  <li>Make the interface inherit from the depicted stock Identity ones.</li>\n  <li>Use <em>MedioClinicUser</em> and <em>int</em> for <em>TUser</em> and <em>TKey</em> respectively.</li>\n</ol>","code":{"src":"public interface IMedioClinicUserStore :\n    IUserPasswordStore<MedioClinicUser, int>,\n    IUserLockoutStore<MedioClinicUser, int>,\n    IUserTwoFactorStore<MedioClinicUser, int>,\n    IUserRoleStore<MedioClinicUser, int>,\n    IUserEmailStore<MedioClinicUser, int>,\n    IUserLoginStore<MedioClinicUser, int>,\n    IUserSecurityStampStore<MedioClinicUser, int>\n{\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"56000aea-994f-4dfb-ba59-423b824b42ba","_parentId":"37c19274-72db-4ce5-81dc-ed47b577122c","_type":"component","title":"Demo: Creating an app-level user store interface","displayTitle":"Demo: Creating an app-level user store interface"},{"body":"<p>You can now implement the interface in an app-level user store class.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let's start.</p>\n<ol>\n  <li>In the&nbsp;<em>Business &gt; Identity</em>&nbsp;folder, create a new&nbsp;<em>“MedioClinicUserStore”</em>&nbsp;class file.</li>\n  <li>Make it implement the&nbsp;<em>IMedioClinicUserStore</em>&nbsp;interface.</li>\n  <li>Add an empty constructor that just passes the&nbsp;<em>siteName&nbsp;</em>parameter to the base class.</li>\n  <li>You'll also need a parametrized constructor that fills two depicted properties, one of them being of type&nbsp;<em>IKenticoUserStore</em>.</li>\n</ol>","code":{"src":"public class MedioClinicUserStore : IMedioClinicUserStore\n{\n    private ISiteContextService SiteContextService { get; }\n\n    private IKenticoUserStore KenticoUserStore { get; }\n\n    public MedioClinicUserStore(string siteName) : base(siteName)\n    {\n    }\n\n    public MedioClinicUserStore(ISiteContextService siteContextService, IKenticoUserStore kenticoUserStore)\n    {\n        SiteContextService = siteContextService ?? throw new ArgumentNullException(nameof(siteContextService));\n        KenticoUserStore = kenticoUserStore ?? throw new ArgumentNullException(nameof(kenticoUserStore));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the following three steps, you’ll create a set of expression-bodied methods.</p>\n<p>The methods are all expression-bodied as they just in turn call eponymous methods of the <em>KenticoUserStore</em> property, blatantly passing the <em>MedioClinicUser</em> object thereto.</p>\n<p>You may ask yourself why that is. Simply because these methods take advantage of polymorphism. In particular, the advantage of <em>MedioClinicUser</em> being a descendant of <em>Kentico.Membership.User</em>.</p>\n<p>These methods don’t operate on any of the additional properties of the <em>MedioClinicUser</em> class, hence no cast or any other kind of conversion is needed.</p>\n<p>(In the following two steps, you'll just two further batches of these expression-bodied methods.)</p>","code":{"src":"public Task DeleteAsync(MedioClinicUser user) =>\n    KenticoUserStore.DeleteAsync(user);\n\npublic Task<string> GetPasswordHashAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetPasswordHashAsync(user);\n\npublic Task<bool> HasPasswordAsync(MedioClinicUser user) =>\n    KenticoUserStore.HasPasswordAsync(user);\n\npublic Task SetPasswordHashAsync(MedioClinicUser user, string passwordHash) =>\n    KenticoUserStore.SetPasswordHashAsync(user, passwordHash);\n\npublic Task<int> GetAccessFailedCountAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetAccessFailedCountAsync(user);\n\npublic Task<bool> GetLockoutEnabledAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetLockoutEnabledAsync(user);\n\npublic Task<DateTimeOffset> GetLockoutEndDateAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetLockoutEndDateAsync(user);\n\npublic Task<int> IncrementAccessFailedCountAsync(MedioClinicUser user) =>\n    KenticoUserStore.IncrementAccessFailedCountAsync(user);\n\npublic Task ResetAccessFailedCountAsync(MedioClinicUser user) =>\n    KenticoUserStore.ResetAccessFailedCountAsync(user);\n\npublic Task SetLockoutEnabledAsync(MedioClinicUser user, bool enabled) =>\n    KenticoUserStore.SetLockoutEnabledAsync(user, enabled);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Add another batch of expression-bodied methods.</p>","code":{"src":"public Task SetLockoutEndDateAsync(MedioClinicUser user, DateTimeOffset lockoutEnd) =>\n    KenticoUserStore.SetLockoutEndDateAsync(user, lockoutEnd);\n\npublic Task<bool> GetTwoFactorEnabledAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetTwoFactorEnabledAsync(user);\n\npublic Task SetTwoFactorEnabledAsync(MedioClinicUser user, bool enabled) =>\n    KenticoUserStore.SetTwoFactorEnabledAsync(user, enabled);\n\npublic Task<IList<string>> GetRolesAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetRolesAsync(user);\n\npublic Task<bool> IsInRoleAsync(MedioClinicUser user, string roleName) =>\n    KenticoUserStore.IsInRoleAsync(user, roleName);\n\npublic Task RemoveFromRoleAsync(MedioClinicUser user, string roleName) =>\n    KenticoUserStore.RemoveFromRoleAsync(user, roleName);\n\npublic Task AddToRoleAsync(MedioClinicUser user, string roleName) =>\n    KenticoUserStore.AddToRoleAsync(user, roleName);\n\npublic Task SetEmailAsync(MedioClinicUser user, string email) =>\n    KenticoUserStore.SetEmailAsync(user, email);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Add the final batch of expression-bodied methods.</p>","code":{"src":"public Task<string> GetEmailAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetEmailAsync(user);\n\npublic Task<bool> GetEmailConfirmedAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetEmailConfirmedAsync(user);\n\npublic Task SetEmailConfirmedAsync(MedioClinicUser user, bool confirmed) =>\n    KenticoUserStore.SetEmailConfirmedAsync(user, confirmed);\n\npublic Task AddLoginAsync(MedioClinicUser user, UserLoginInfo login) =>\n    KenticoUserStore.AddLoginAsync(user, login);\n\npublic Task RemoveLoginAsync(MedioClinicUser user, UserLoginInfo login) =>\n    KenticoUserStore.RemoveLoginAsync(user, login);\n\npublic Task<IList<UserLoginInfo>> GetLoginsAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetLoginsAsync(user);\n\npublic Task SetSecurityStampAsync(MedioClinicUser user, string stamp) =>\n    KenticoUserStore.SetSecurityStampAsync(user, stamp);\n\npublic Task<string> GetSecurityStampAsync(MedioClinicUser user) =>\n    KenticoUserStore.GetSecurityStampAsync(user);","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the second phase, you will add methods that retrieve user data from Kentico and return a <em>MedioClinicUser</em> object.</p>\n<p>These methods cannot make use of the <em>KenticoUserStore</em> component anymore. However, their implementation is pretty straightforward.</p>\n<p>All you have to do is get the <em>UserInfo</em> objects from <em>CMS.Membership.UserInfoProvider</em> and pass them onto your <em>ToMedioClinicUser</em> extension method implemented earlier. The extension method will in turn invoke that parametrized constructor of <em>MedioClinicUser</em> that accepts <em>UserInfo</em>.</p>","code":{"src":"public Task<MedioClinicUser> FindByIdAsync(int userId) =>\n    Task.FromResult(UserInfoProvider\n        .GetUserInfo(userId)\n        .ToMedioClinicUser());\n\npublic Task<MedioClinicUser> FindByNameAsync(string userName) =>\n    Task.FromResult(UserInfoProvider\n        .GetUserInfo(userName)\n        .ToMedioClinicUser());\n\npublic Task<MedioClinicUser> FindByEmailAsync(string email) =>\n    Task.FromResult(UserInfoProvider\n        .GetUsers()\n        .WhereEquals(\"Email\", email)\n        .TopN(1)\n        .FirstOrDefault()\n        .ToMedioClinicUser());","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the third phase, you’ll implement the rest of the core functionality of the user store. You’ll create methods that require just a tad more code.</p>\n<p>The first two will alter data in the database; the third one will search for a user by their external login.</p>\n<p>In the <em>CreateAsync</em> method, you’ll use the <em>ToUserInfo</em> extension method you’ve implemented earlier. Then, you will just assign the newly created <em>UserInfo</em> object a few additional values, save it and assign it to the current site. As the contracts introduced by Identity require you to return a Task, you can call <em>Task.FromResult(0)</em> to return one.</p>\n<p>The job of the <em>UpdateAsync</em> method is to take all the data and map it to the <em>UserInfo</em> object passed to Kentico. It thus uses the <em>UserHelper.UpdateUserInfo</em> method you’ve created (and used in the <em>ToUserInfo</em> extension method). Once you set the object, you can again call <em>FromResult()</em> to satisfy the contract.</p>\n<p>The <em>FindAsync</em> method is supposed to find a user based on a <em>Microsoft.AspNet.Identity.UserLoginInfo</em> object. It therefore needs to call the <em>CMS.Membership.ExternalLoginInfoProvider.GetExternalLogins</em> method and the sibling <em>FindByIdAsync</em> method to meet that requirement.</p>","code":{"src":"public Task CreateAsync(MedioClinicUser user)\n{\n    if (user == null)\n    {\n        throw new ArgumentNullException(nameof(user));\n    }\n\n    var userInfo = user.ToUserInfo();\n\n    userInfo.UserGUID = user.GUID;\n    userInfo.PasswordFormat = UserInfoProvider.NewPasswordFormat;\n    userInfo.UserPasswordLastChanged = DateTime.Now;\n    userInfo.IsExternal = user.IsExternal;\n\n    UserInfoProvider.SetUserInfo(userInfo);\n    UserInfoProvider.AddUserToSite(userInfo.UserName, SiteContextService.SiteName);\n\n    user.Id = userInfo.UserID;\n\n    return Task.FromResult(0);\n}\n\npublic Task UpdateAsync(MedioClinicUser user)\n{\n    if (user == null)\n    {\n        throw new ArgumentNullException(nameof(user));\n    }\n\n    var userInfo = UserInfoProvider.GetUserInfo(user.Id);\n\n    if (userInfo == null)\n    {\n        throw new Exception(ResHelper.GetString(\"General.UserNotFound\"));\n    }\n\n    UserHelper.UpdateUserInfo(ref userInfo, user);\n    UserInfoProvider.SetUserInfo(userInfo);\n\n    return Task.FromResult(0);\n}\n\npublic Task<MedioClinicUser> FindAsync(UserLoginInfo login)\n{\n    if (login == null)\n    {\n        throw new ArgumentNullException(nameof(login));\n    }\n\n    var loginInfo = ExternalLoginInfoProvider.GetExternalLogins()\n        .WhereEquals(\"LoginProvider\", login.LoginProvider)\n        .WhereEquals(\"IdentityKey\", login.ProviderKey)\n        .TopN(1)\n        .FirstOrDefault();\n\n    return loginInfo != null ? FindByIdAsync(loginInfo.UserID) : Task.FromResult<MedioClinicUser>(null);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In the last phase, you’ll add code that does proper housekeeping.</p>\n<p>This is also needed just for hotfix-independent solutions.</p>\n<p>As you know, the Kentico user store is represented by a property. In general, using composition over inheritance is a good practice. However, it can have its little caveats that are not obvious at the first glance. One of them is garbage collection.</p>\n<p>If our user store were a descendant of <em>Kentico.Membership.UserStore</em>, its Dispose methods would have been called directly by the CLR. Since it is not the case, you need to take care of it yourself.</p>","code":{"src":"public void Dispose()\n{\n    Dispose(true);\n    GC.SuppressFinalize(this);\n}\n\nprotected virtual void Dispose(bool disposing)\n{\n    if (disposing)\n    {\n        KenticoUserStore.Dispose(true);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"8f1b6dc5-6732-47ea-9d14-0104dd237c9b","_parentId":"0a22fe92-11c2-4c0d-9b5e-e7e8ce017c24","_type":"component","title":"Demo: Implementing an app-level user store class","displayTitle":"Demo: Implementing an app-level user store class"},{"body":"<p>It is time to create your app-level user manager.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>As with the user store, user manager also needs an interface that carries objects through AutoFac to the client code’s constructors.</p>\n<p>As the interface is really large, we show just a few lines in the code snippet. It is best to copy the GitHub file directly.</p>\n<ol>\n  <li>Copy the <em>Business &gt; Identity &gt; IMedioClinicUserManager.cs </em>file cloned from the GitHub repository into the respective folder of your solution.</li>\n  <li>We advise you to clone the repo instead of downloading the files via the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Identity/IMedioClinicUserManager.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub web interface</a>. Downloading blindly converts line endings in files no matter what platform you're running.</li>\n</ol>\n<p>Once you copy the interface, you can note that it is also generic enough to be reused in your other projects.</p>\n<p>It has its <em>TUser</em> and <em>TKey</em> generic parameters open (not constructed).</p>\n<p>To use it in other projects, you can simply rename it.</p>","code":{"src":"public interface IMedioClinicUserManager<TUser, TKey> : IDisposable\n    where TUser : class, IUser<TKey>\n    where TKey : IEquatable<TKey>\n{\n    /// <summary>\n    ///     Used to hash/verify passwords\n    /// </summary>\n    IPasswordHasher PasswordHasher { get; set; }\n\n    /// <summary>\n    ///     Used to validate users before changes are saved\n    /// </summary>\n    IIdentityValidator<TUser> UserValidator { get; set; }\n\n    /// <summary>\n    ///     Used to validate passwords before persisting changes\n    /// </summary>\n    IIdentityValidator<string> PasswordValidator { get; set; }\n\n    /// <summary>\n    ///     Used to create claims identities from users\n    /// </summary>\n    IClaimsIdentityFactory<TUser, TKey> ClaimsIdentityFactory { get; set; }\n\n    /// <summary>\n    ///     Used to send email\n    /// </summary>\n    IIdentityMessageService EmailService { get; set; }\n\n    // ...\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You’re done with the interface. Let’s do the basic stub of the class itself now.</p>\n<p>Although the base&nbsp;<a href=\"https://github.com/aspnet/AspNetIdentity/blob/master/src/Microsoft.AspNet.Identity.Core/UserManager.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.AspNet.Identity.Core.UserManager class</a>&nbsp;contains lots of code in it, you don't have to worry about overriding it all. You’ll just tweak a few methods that are Kentico-specific.</p>\n<p>Although the class needs to have the generic parameters constructed to&nbsp;<em>MedioClinicUser</em>, you will still be able to reuse the class in other projects, mostly by just replacing the generic type specification with another one.</p>","code":{"src":"public class MedioClinicUserManager : UserManager<MedioClinicUser, int>, IMedioClinicUserManager<MedioClinicUser, int>\n{\n\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add the constructor according to the code snippet.</p>\n<p>Unlike the Microsoft official guidance, in our case we use a constructor to do the initialization work. We won’t create factory methods in our user manager and sign-in manager classes since we want to supply their instances via DI, not through the <em>CreatePerOwinContext</em> method (more on that later in this course).</p>","code":{"src":"public MedioClinicUserManager(IMedioClinicUserStore medioClinicUserStore) : base(medioClinicUserStore)\n{\n    PasswordValidator = new PasswordValidator\n    {\n        RequireDigit = true,\n        RequiredLength = 8,\n        RequireLowercase = true,\n        RequireNonLetterOrDigit = true,\n        RequireUppercase = true\n    };\n\n    UserLockoutEnabledByDefault = false;\n    EmailService = new EmailService();\n\n    UserValidator = new UserValidator<MedioClinicUser, int>(this)\n    {\n        RequireUniqueEmail = true\n    };\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, override the <em>VerifyPasswordAsync</em> method.</p>\n<p>Notice that before you can verify the password via <em>UserInfoProvider.IsUserPasswordDifferent</em>, it is best to rule out external and domain users that might potentially invoke the method.</p>","code":{"src":"protected override Task<bool> VerifyPasswordAsync(IUserPasswordStore<MedioClinicUser, int> store, MedioClinicUser user, string password)\n{\n    if (user == null)\n    {\n        return Task.FromResult(false);\n    }\n\n    var userInfo = UserInfoProvider.GetUserInfo(user.UserName);\n    var result = !userInfo.IsExternal && !userInfo.UserIsDomain && !UserInfoProvider.IsUserPasswordDifferent(userInfo, password);\n\n    return Task.FromResult(result);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>All that remains to override is the <em>UpdatePassword</em> method.</p>\n<p>In this method, you want each new password to be validated first.</p>\n<p>Then, depending on whether a matching <em>UserInfo</em> is found in the database, you need to either set a new password hash or, let <em>UserInfoProvider</em> set the password for you. In case of an existing <em>UserInfo</em> object, you also want to update the security stamp through a set of helper methods implemented in the next step.</p>","code":{"src":"protected override async Task<IdentityResult> UpdatePassword(IUserPasswordStore<MedioClinicUser, int> passwordStore, MedioClinicUser user, string newPassword)\n{\n    if (user == null)\n    {\n        throw new ArgumentNullException(nameof(user));\n    }\n\n    if (string.IsNullOrEmpty(newPassword))\n    {\n        throw new ArgumentException($\"The {nameof(newPassword)} argument must not be null or empty.\");\n    }\n\n    var result = await PasswordValidator.ValidateAsync(newPassword);\n\n    if (!result.Succeeded)\n    {\n        return result;\n    }\n\n    UserInfo userInfo = UserInfoProvider.GetUserInfo(user.Id);\n\n    if (userInfo == null)\n    {\n        user.GUID = Guid.NewGuid();\n\n        // Don't change the way the passwords are hashed once the app is released in production.\n        user.PasswordHash = UserInfoProvider.GetPasswordHash(newPassword, UserInfoProvider.NewPasswordFormat, user.GUID.ToString());\n\n        await passwordStore.SetPasswordHashAsync(user, user.PasswordHash);\n    }\n    else\n    {\n        UserInfoProvider.SetPassword(userInfo, newPassword);\n        user.PasswordHash = ValidationHelper.GetString(userInfo.GetValue(\"UserPassword\"), string.Empty);\n        await UpdateSecurityStampInternalAsync(user);\n    }\n\n    return IdentityResult.Success;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The <em>UpdateSecurityStampInternalAsync </em>method makes sure that the login information captured in cookies gets updated together with the new password.</p>\n<p>It is indeed a core purpose of the security stamp in ASP.NET. It works as a snapshot (blueprint) of the current state of the user’s credentials. That way Identity can quickly reject outdated authentication cookies.</p>\n<p>To update the stamp, you’ll need an instance of the store first. Your <em>MedioClinicUserStore</em> actually happens to be one.</p>\n<p>The <em>GetSecurityStore</em> method will furnish the instance to the client code.</p>\n<p>Finally, the <em>NewSecurityStamp</em> expression-bodied method gives you a new <em>System.Guid</em> value of the stamp.</p>","code":{"src":"internal async Task UpdateSecurityStampInternalAsync(MedioClinicUser user)\n{\n    if (user == null)\n    {\n        throw new ArgumentNullException(nameof(user));\n    }\n\n    if (SupportsUserSecurityStamp)\n    {\n        await GetSecurityStore()?.SetSecurityStampAsync(user, NewSecurityStamp());\n    }\n}\n\nprivate IUserSecurityStampStore<MedioClinicUser, int> GetSecurityStore()\n{\n    var cast = Store as IUserSecurityStampStore<MedioClinicUser, int>;\n\n    if (cast == null)\n    {\n        throw new NotSupportedException(\"Current Store does not implement the IUserSecurityStore interface.\");\n    }\n\n    return cast;\n}\n\nprivate string NewSecurityStamp() =>\n    Guid.NewGuid().ToString();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"8608af5d-5164-4205-bd83-b30f3280f85a","_parentId":"d660239b-631f-4cd2-8666-e997bbfa919d","_type":"component","title":"Demo: Implementing the user manager","displayTitle":"Demo: Implementing the user manager"},{"body":"<p>Since we chose to pass around Identity objects via an IoC container, we will also need to implement a custom sign-in manager class. Not only because the stock <em>Microsoft.AspNet.Identity.Owin.SignInManager</em>&nbsp;implements no interface but IDisposable. Also because when the sign-in manager is constructed, it takes the user manager object as its constructor's argument. And, the IoC container naturally ships the user manager cast to its underlying interface.</p>\n<p>All of that implies the need to inherit from <em>Microsoft.AspNet.Identity.Owin.SignInManager</em>, cast the user manager object to <em>Microsoft.AspNet.Identity.UserManager</em> upon saving, and cast it back to the underlying interface for client code.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First things first. You need to back your descendant sign-in manager with an interface.</p>\n<p>The interface resembles the old story of the previous one, therefore we only list a few of its members. As with the previous case, we've factored one for you. And, it can also be used in other projects; not just this one.</p>\n<ol>\n  <li>In the cloned <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/Business/Identity/IMedioClinicSignInManager.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>, locate the <em>Business &gt; Identity &gt; IMedioClinicSignInManager.cs</em> file.</li>\n  <li>Copy it over to the respective location of your solution.</li>\n</ol>","code":{"src":"public interface IMedioClinicSignInManager<TUser, TKey> : IDisposable\n    where TUser : class, IUser<TKey>\n    where TKey: IEquatable<TKey>\n{\n    /// <summary>\n    /// AuthenticationType that will be used by sign in, defaults to DefaultAuthenticationTypes.ApplicationCookie\n    /// </summary>\n    string AuthenticationType { get; set; }\n\n    /// <summary>\n    /// Used to operate on users\n    /// </summary>\n    IMedioClinicUserManager<TUser, TKey> UserManager { get; set; }\n\n    /// <summary>\n    /// Used to sign in identities\n    /// </summary>\n    IAuthenticationManager AuthenticationManager { get; set; }\n\n    // ...\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, let’s create the class itself.</p>\n<ol>\n  <li>In <em>Business &gt; Identity</em>, create a new <em>“MedioClinicSignInManager”</em> class file.</li>\n  <li>Add a constructor that takes the <em>IMedioClinicUserManager&lt;MedioClinicUser, int&gt;</em> representation of the <em>MedioClinicUserManager&lt;&gt;</em> runtime object and passes it onto the base class’ constructor cast to its <em>Microsoft.AspNet.Identity.UserManager&lt;&gt;</em> base class.</li>\n</ol>\n<p>Next, add an explicit <em>IMedioClinicSignInManager.UserManager</em> property implementation and cast the values to <em>IMedioClinicUserManager&lt;&gt;</em> or <em>UserManager&lt;&gt;</em>.</p>","code":{"src":"public class MedioClinicSignInManager : SignInManager<MedioClinicUser, int>, IMedioClinicSignInManager<MedioClinicUser, int>\n{\n    /// <summary>\n    /// Makes the <see cref=\"UserManager{MedioClinicUser, int}\"/> property accessible through the <see cref=\"IMedioClinicUserManager{MedioClinicUser, int}\"/> interface.\n    /// </summary>\n    IMedioClinicUserManager<MedioClinicUser, int> IMedioClinicSignInManager<MedioClinicUser, int>.UserManager\n    {\n        get => UserManager as IMedioClinicUserManager<MedioClinicUser, int>;\n        set => UserManager = value as UserManager<MedioClinicUser, int>;\n    }\n\n    /// <summary>\n    /// Creates the instance of <see cref=\"MedioClinicSignInManager\"/>.\n    /// </summary>\n    /// <param name=\"userManager\">User manager.</param>\n    /// <param name=\"authenticationManager\">Authentication manager.</param>\n    public MedioClinicSignInManager(IMedioClinicUserManager<MedioClinicUser, int> userManager, IAuthenticationManager authenticationManager)\n    : base(userManager as UserManager<MedioClinicUser, int>, authenticationManager)\n    {\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"0e303cbe-d2eb-442b-bd21-5709c7315ea1","_parentId":"ebaa6974-8d1a-4c9a-beb5-56c213589200","_type":"component","title":"Demo: Implementing a sign-in manager","displayTitle":"Demo: Implementing a sign-in manager"},{"body":"<p>Good. This makes up the core Identity-based infrastructure you need for Kentico projects with a customized user class.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":true,"_classes":"","_id":"8512a3ab-3220-4809-a899-52155f191cfe","_parentId":"ebaa6974-8d1a-4c9a-beb5-56c213589200","_type":"component","title":"\nImplementing a sign-in manager: Conclusion","displayTitle":"\nImplementing a sign-in manager: Conclusion"},{"body":"<p>You're now done with the basic pillars of user management in Medio Clinic. Although it cost you quite a lot more coding that what would be done with the help of Kentico 12.0.34 classes, it has one neat advantage: no need for hotfixing your instance, if you don't wish to do so.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d5b78fe2-0970-41f5-9de6-ca66179e806f","_parentId":"71c1adac-195e-4620-8bec-394aec2ecc5d","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>Which basic method do Microsoft recommend for dependency lifecycle management</li>\n  <li>What are the differences between the service locator pattern and the DI pattern</li>\n  <li>How to replace the OWIN-based approach with AutoFac</li>\n  <li>How to get around a small caveat caused by an OWIN-based sub-dependency</li>\n</ul>\n<p>You will work on the following class files:</p>\n<ul>\n  <li>AutoFac configuration</li>\n  <li>Startup configuration</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"e6e0fa45-5490-4de0-97bf-8b417f05c606","_parentId":"8a08ea58-049f-4449-ae48-4f5aef1e5519","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>Microsoft went to great lengths in designing the ASP.NET MVC 5 and ASP.NET Identity 2 frameworks to make them robust and flexible, yet with simplicity in mind.</p>\n<p>In light of this mantra, they decided not to force developers to use DI. The very basic way of managing lifecycle of shared service objects can always be done with the not-inverted control pattern—simply by explicitly calling constructors of such services from within the client code (controller action methods).</p>\n<p>The only shared services that Microsoft deemed necessary to handle otherwise were Identity classes. Hence, they chose to leverage the ubiquitous OWIN context to serve as a container of Identity services.</p>\n<h3>The service locator pattern</h3>\n<p>You may have asked yourself why we divert from what Microsoft had designed. We want to say upfront that this design is not bad at all. It is just a well-suited compromise that meets the requirements of simplicity. However, you can still do better with DI.</p>\n<p>All right, why is DI better than OWIN? First, we need to say what OWIN does. It builds instances of your user manager, sign-in manager and other Identity classes and furnishes them into your controller action methods. To tell OWIN to register a class, you can call the following in your Startup class:</p>\n<pre><code class=\"language-csharp\">IAppBuilder.CreatePerOwinContext&lt;MyUserManager&gt;(MyUserManager.Create);</code></pre>\n<p><br></p>\n<p>The <em>CreatePerOwinContext</em> method takes a delegate that’s invoked at the start of each <a href=\"https://docs.microsoft.com/en-us/previous-versions/aspnet/dn308200(v%3Dvs.113)\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">OWIN context</a>.</p>\n<p>Later, the OWIN context will become your go-to guy that furnishes instances of Identity classes to your controller action methods. Like so:</p>\n<pre><code class=\"language-csharp\">HttpContext.GetOwinContext().Get&lt;MyUserManager&gt;();</code></pre>\n<p><br></p>\n<p>So, what is the difference between OWIN-based retrieval and DI retrievals? Unlike true DI that our AutoFac container does, OWIN is only an implementation of the service locator pattern. Upon a closer inspection, you may find a few key differences:</p>\n<table><tbody>\n  <tr><td>OWIN (service locator)</td><td>AutoFac (DI)</td></tr>\n  <tr><td>Your client code asks for specific classes.</td><td>Your client code asks for (whatever) implementations of interfaces, which fosters code testability.</td></tr>\n  <tr><td>Your client code needs to have a hard (known) dependency on the OWIN context. It needs to know whom to ask for objects.</td><td>Your client code does not need to know that an IoC container lives in your app and which one it is. It only asks for objects, that’s all.</td></tr>\n  <tr><td>You cannot set sub-dependencies in an elegant way. You always need to use the context explicitly when building your sub-dependency graph.</td><td>You only need to define hard sub-dependencies if they originate from outside your IoC container.</td></tr>\n</tbody></table>\n<p>&nbsp;Apart from that, you may find two additional valid reasons to move away from OWIN:</p>\n<ul>\n  <li>If we already have AutoFac integrated into our solution, it would be silly not to consolidate these dependency lifecycle management methods into the one that’s more robust—into AutoFac.</li>\n  <li>OWIN was not designed to be a dependency management solution in the first place. Microsoft wanted <a href=\"http://owin.org/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">OWIN</a> to rather be an open interface between web servers and applications.</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"40bc3dc3-db0d-409b-8434-a1393e8eaf2c","_parentId":"74c2f030-06e6-463e-82d6-5517715249ef","_type":"component","title":"Theory: Basic dependency management by Microsoft","displayTitle":"Theory: Basic dependency management by Microsoft"},{"body":"<p>In this walkthrough, you will first add a startup class that you can find in most MVC 5 projects. You will initialize what’s necessary through the OWIN context except the *Manager and *Store Identity objects. Then you will register these in the existing AutofacConfig class.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The startup class will exist in the form of two distinct files—as a partial class.</p>\n<p><br></p>\n<ol>\n  <li>In the Solution Explorer, create a new <em>“Startup”</em> class file in the root of the <em>MedioClinic</em> project.</li>\n  <li>Make the class <em>partial</em>.</li>\n  <li>Add an assembly-level <em>OwinStartupAttribute</em> to it. This will make the class visible to the MVC runtime.</li>\n</ol>\n<p>In the <em>Configuration</em> method, add a call to a future <em>ConfigureAuth</em> method that you’ll implement next.</p>","code":{"src":"using Microsoft.Owin;\nusing Owin;\n\n[assembly: OwinStartup(typeof(MedioClinic.Startup))]\n\nnamespace MedioClinic\n{\n    public partial class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            ConfigureAuth(app);\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now continue defining the startup class in the second code file.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; App_Start,</em> create a new <em>“Startup.Auth.cs”</em> code file.</li>\n  <li>In the code file, rename the class name to <em>“Startup”</em> and also make it <em>partial</em>.</li>\n  <li>Add the <em>ConfigureAuth</em> method that you’ve called from within the other code file.</li>\n  <li>Notice that you only register the cookie authentication OWIN middleware here. You don’t call the <em>CreatePerOwinContext</em> method to register the dependencies.</li>\n  <li>In the <em>UseCookieAuthentication</em> method call, you can set up various security measures.</li>\n  <li>For instance, you can set a period of time that the security stamp stays valid, or more precisely, after which it is being checked for validity.</li>\n  <li>You also set the default fallback redirect URL. This is where the visitor gets redirected in case they attempt to access a secured website section without being signed in first (or, with an obsolete security stamp).</li>\n</ol>","code":{"src":"public partial class Startup\n{\n    public void ConfigureAuth(IAppBuilder app)\n    {\n        UrlHelper urlHelper = new UrlHelper(HttpContext.Current.Request.RequestContext);\n\n        // Configure the sign in cookie\n        app.UseCookieAuthentication(new CookieAuthenticationOptions\n        {\n            AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,\n            LoginPath = new PathString(urlHelper.Action(\"Signin\", \"Account\")),\n            Provider = new CookieAuthenticationProvider\n            {\n                OnValidateIdentity = SecurityStampValidator.OnValidateIdentity<MedioClinicUserManager, MedioClinicUser, int>(\n                    // Sets the interval after which the validity of the user's security stamp is checked\n                    validateInterval: TimeSpan.FromMinutes(10),\n                    regenerateIdentityCallback: (manager, user) => manager.CreateIdentityAsync(user, DefaultAuthenticationTypes.ApplicationCookie),\n                    getUserIdCallback: ((claimsIdentity) => int.Parse(claimsIdentity.GetUserId()))),\n                // Redirect to logon page with return url\n                OnApplyRedirect = context => context.Response.Redirect(urlHelper.Action(\"SignIn\", \"Account\") + new Uri(context.RedirectUri).Query)\n            },\n            ExpireTimeSpan = TimeSpan.FromDays(14),\n            SlidingExpiration = true\n        });\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>AutoFac time! Let’s configure the dependency resolution rules.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; App_Start &gt; AutofacConfig.cs,</em> add the depicted code.</li>\n  <li>First you register the Kentico user store that you’ve used extensively in your application-level user store class.</li>\n  <li>Your own user store comes right after that, followed by the user manager class registration.</li>\n  <li>Before we get to the third kid on the block—the sign-in manager—you will take care of one of its dependencies. It is the IAuthenticationManager object that the sign-in manager needs.</li>\n  <li>The only way you can get this object is to interrogate the OWIN context. However, this should pose no real problem to you. Notice that the registrations are done through delegates (lambda expressions) that run after the code of <em>AutofacConfig</em> does. This means that at the time of instantiation of <em>IMedioClinicSignInManager</em>, the OWIN context is already populated with the authentication manager in place. Note that to use the <em>GetOwinContext </em>extension method, you should install the <a href=\"https://www.nuget.org/packages/Microsoft.Owin.Host.SystemWeb/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft.Owin.Host.SystemWeb</a> NuGet package into your project.</li>\n  <li>Finally, you can register the sign-in manager with two of its dependencies.&nbsp;</li>\n  <li>Please note that the order of the registrations makes no difference. AutoFac is smart enough to be able to supply sub-dependencies in the required order, regardless of the ordering in the <em>AutofacConfig</em> class.</li>\n</ol>","code":{"src":"// Registers the class that wraps the Kentico.Membership.UserStore class.\nbuilder.Register(context => new KenticoUserStore(context.Resolve<ISiteContextService>().SiteName))\n    .As<IKenticoUserStore>()\n    .InstancePerRequest();\n\n// Registers the application-level user store.\nbuilder.RegisterType<MedioClinicUserStore>()\n    .As<IMedioClinicUserStore>()\n    .InstancePerRequest();\n\n// Registers the application-level user manager.\nbuilder.RegisterType<MedioClinicUserManager>()\n    .As<IMedioClinicUserManager<MedioClinicUser, int>>()\n    .InstancePerRequest();\n\n// Registers the authentication manager of the OWIN context for DI retrieval.\nbuilder.Register(context =>\n    HttpContext.Current.GetOwinContext().Authentication)\n    .As<IAuthenticationManager>();\n\n// Registers the application-level sign in manager.\nbuilder.Register(context =>\n    {\n        return new MedioClinicSignInManager(\n            context.Resolve<IMedioClinicUserManager<MedioClinicUser, int>>(),\n            context.Resolve<IAuthenticationManager>());\n    })\n    .As<IMedioClinicSignInManager<MedioClinicUser, int>>()\n    .InstancePerRequest();\n\t\n// Registers the application-level sign in manager.\nbuilder.RegisterType<MedioClinicSignInManager>()\n    .As<IMedioClinicSignInManager<MedioClinicUser, int>>()\n    .InstancePerRequest();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"3aa74b4f-c85b-47db-be66-9191f2533337","_parentId":"eab239b4-3b65-4f0f-8bc0-4769c329160e","_type":"component","title":"Demo: Replacing OWIN-based dependency management","displayTitle":"Demo: Replacing OWIN-based dependency management"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Why is DI better than the service locator pattern? (Select all that apply)</p>","_attempts":3,"_questionWeight":1,"_selectable":2,"_items":[{"text":"<p>Because DI is faster than service locator</p>","_shouldBeSelected":true,"feedback":"<p>Wrong.</p>"},{"text":"<p>Because the implementation of service locator requires client code to still have a hard dependency on the service locator object.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Because DI is easier to set up</p>","_shouldBeSelected":false,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct. Dependency injection allows for a truly decoupled architecture.</p>","_partlyCorrect":{"final":"<p>Almost there! You haven't selected all the correct options.</p>"},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f434e952-8bc1-481d-b8df-3b76890fbddd","_parentId":"c85986a7-a517-41bc-81b7-17e99d6c08a2","_type":"component","title":"Progress check 1","displayTitle":"Progress check 1"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What was OWIN mainly designed for?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>To act as an interface between web applications and the underlying web servers.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>To serve as both a dependency container and said interface.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":""}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5dcfe7ed-cfa6-406f-801d-a1d059c8a807","_parentId":"c85986a7-a517-41bc-81b7-17e99d6c08a2","_type":"component","title":"Progress check 2","displayTitle":"Progress check 2"},{"body":"<p>Great! You've not only finished implementing your Identity-based classes suited for your customized Kentico users. You've also made them available through AutoFac, avoiding an unnecessary duplicity of OWIN-based and DI-based dependency management. You've also effectively finished the pure Identity plumbing by configuring your OWIN authentication cookie middleware.</p>\n<p>In the next page, you will focus on various supportive services that will make your life easy while implementing the manager and controller classes.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7cbb9b27-c90d-41ae-819f-c89c9ac44439","_parentId":"b7a39ae2-2d9b-47ee-b1cf-ab5b37981885","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to handle errors via a shared service</li>\n  <li>How to automatically map the Identity-based user model onto view models</li>\n  <li>How to handle user messages in a unified way</li>\n</ul>\n<p>You will work on the following code:</p>\n<ul>\n  <li>Error helper service</li>\n  <li>User model service</li>\n  <li>Message type enum</li>\n  <li>User message view model</li>\n  <li>Page view model</li>\n  <li>User message display template, view</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"940aa4a8-9144-40d7-ae70-3d2ee3a7dd2e","_parentId":"2311545a-199f-4f9e-a0a2-15006f14ad3d","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>In this task, you’re about to implement logging through a service. Use <em>CMS.EventLogProvider</em> internally to log the source, code and the exception details.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0c47b752-3bf2-47a2-9ebe-0d5452f1d75d","_parentId":"ace64a51-006d-4e55-bada-7f3ed6ef6c83","_type":"component","title":"Task: Implementing the error helper service","displayTitle":"Task: Implementing the error helper service"},{"body":"<p>Let's start!</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the first step, let’s create an interface for the service.</p>\n<ol>\n  <li>In&nbsp;<em>Business &gt; Services,</em>&nbsp;create an&nbsp;<em>“Errors”</em>&nbsp;subfolder.</li>\n  <li>In that subfolder, create an&nbsp;<em>“IErrorHelperService”</em>&nbsp;interface file.</li>\n  <li>Inherit from&nbsp;<em>IService</em>.</li>\n  <li>Add the method signature that meets the said requirements.</li>\n</ol>","code":{"src":"/// <summary>\n/// A common error helper for controller actions\n/// </summary>\npublic interface IErrorHelperService : IService\n{\n    /// <summary>\n    /// Logs an exception to the Kentico event log.\n    /// </summary>\n    /// <param name=\"source\">The source of the exception to be logged in the Kentico event log.</param>\n    /// <param name=\"exception\">The exception to log.</param>\n    void LogException(string source, string eventCode, Exception exception);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now implement the interface.</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Errors, </em>create an <em>“ErrorHelperService”</em> class file.</li>\n  <li>Inherit from <em>BaseService</em>.</li>\n  <li>Implement <em>IErrorHelperService</em>.</li>\n  <li>Call <em>EventLogProvider.LogException</em> while forwarding the arguments to it.</li>\n  <li>Use <em>SiteContext.CurrentSiteID</em> to specify the site that the error relates to.</li>\n</ol>","code":{"src":"public class ErrorHelperService : BaseService, IErrorHelperService\n{\n    public void LogException(string source, string eventCode, Exception exception) =>\n        EventLogProvider.LogException(source, eventCode, exception, SiteContext.CurrentSiteID);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"502f6bce-33c2-4b00-8bdb-c7637595982a","_parentId":"3b41d250-dc16-40e4-b594-0b53064b68d9","_type":"component","title":"Demo: Implementing the error helper service","displayTitle":"Demo: Implementing the error helper service"},{"body":"<p>Now that you have your service ready, you can place it into the <em>BusinessDependencies </em>class. This will make it accessible throughout the whole solution.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, add the property into the underlying interface.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In <em>Business &gt; DependencyInjection</em>, open the <em>IBusinessDependencies</em> interface file.</li>\n  <li>Add the property as shown in the snippet.</li>\n</ol>","code":{"src":"IErrorHelperService ErrorHelperService { get; set; }","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, add the properties into the class file itself.</p>\n<ol>\n  <li>In <em>Business &gt; DependencyInjection</em>, open the <em>BusinessDependencies</em> class file.</li>\n  <li>Add the property as shown in the snippet.</li>\n  <li>Don’t forget to fill the property in the constructor.</li>\n</ol>","code":{"src":"public class BusinessDependencies : IBusinessDependencies\n{\n    public IMenuRepository MenuRepository { get; }\n    public ICompanyRepository CompanyRepository { get; }\n    public ICultureService CultureService { get; }\n    public ISiteContextService SiteContextService { get; }\n    public ISocialLinkRepository SocialLinkRepository { get; }\n    public ICacheService CacheService { get; }\n    public IErrorHelperService ErrorHelperService { get; set; }\n    public ILocalizationService LocalizationService { get; set; }\n\n    public BusinessDependencies(\n        IMenuRepository menuRepository,\n        ICompanyRepository companyRepository,\n        ICultureService cultureService,\n        ISiteContextService siteContextService,\n        ISocialLinkRepository socialLinkRepository,\n        ICacheService cacheDependencyService,\n        IErrorHelperService errorHelperService,\n        ILocalizationService localizationService\n        )\n    {\n        MenuRepository = menuRepository;\n        CompanyRepository = companyRepository;\n        CultureService = cultureService;\n        SiteContextService = siteContextService;\n        SocialLinkRepository = socialLinkRepository;\n        CacheService = cacheDependencyService;\n        ErrorHelperService = errorHelperService;\n        LocalizationService = localizationService;\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"fa66f2cf-c274-440e-a610-fa992b378846","_parentId":"89cb0634-e01a-4796-88dc-08cd3cd24500","_type":"component","title":"Add service to the dependencies class","displayTitle":"Add service to the dependencies class"},{"body":"<p>As in some of the previous cases, you may wonder what the rationale behind this class is. Here’s the deal. In the final part of this course module, you’ll implement a user profile page. This page should be capable of rendering partially different markup, depending on the current user’s roles. How would you go around that in MVC 5? Using display/editor templates.</p>\n<p>All that the templating engine needs to be able to decide what markup to render is a distinct type of the view model. That’s what you will ship as part of this chapter. Your user model service will map <em>MedioClinicUser</em> objects onto view models of either patients or doctors (and vice versa).</p>\n<p>As you may remember, the <em>MedioClinicUser</em> class was designed to contain-all-data. The per-role user models will always take a subset of that data. Upon saving the profile in the profile page, the service will also have to map objects in the opposite direction—from view models to the <em>MedioClinicUser</em> object.</p>\n<figure data-asset-id=\"3099a5bb-7e5f-4c88-a338-ee430782c599\" data-image-id=\"3099a5bb-7e5f-4c88-a338-ee430782c599\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/db6bdba3-5d5a-4334-88bf-eb0ef066dd6d/006.png\" data-asset-id=\"3099a5bb-7e5f-4c88-a338-ee430782c599\" data-image-id=\"3099a5bb-7e5f-4c88-a338-ee430782c599\" alt=\"\"></figure>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a21c1c41-ccc0-47f8-b255-c788878d5995","_parentId":"1552d9b1-6cdb-4e63-b4e4-23c86a34e65b","_type":"component","title":"Theory: The user model service","displayTitle":"Theory: The user model service"},{"body":"<p>Let's implement the infrastructure that will help with displaying different user profiles based on their roles.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the first step, let’s create an interface for the service.</p>\n<ol>\n  <li>In <em>Business &gt; Services,</em> create a <em>“Model”</em> subfolder.</li>\n  <li>In that subfolder, create an <em>“IUserModelService”</em> interface file.</li>\n  <li>Inherit from <em>IService</em>.</li>\n  <li>Add the two method signatures that express the mapping operations.</li>\n  <li>The <em>MapToCustomModel</em> method takes <em>System.Type</em> that signals what the target view model object will look like.</li>\n  <li>The <em>MapToMedioClinicUser</em> method will take that whatever view model object and a target <em>MedioClinicUser</em> instance (either an existing object or a brand new one).</li>\n  <li>Both methods will also take sets of custom mappings. This is because by default, the mapper will have to attempt to map properties according to a convention (by name and type). However, not all properties have the same name, type or internal structure.</li>\n  <li>The mappings dictionary will be keyed on a tuple of the name and type, while also having an <em>object</em> as the mapped value.</li>\n</ol>","code":{"src":"/// <summary>\n/// Custom mapper between Identity user models and custom user models.\n/// </summary>\npublic interface IUserModelService : IService\n{\n    /// <summary>\n    /// Maps properties of a <see cref=\"MedioClinicUser\"/> object to properties with the same name and type in the <paramref name=\"targetModelType\"/> object.\n    /// </summary>\n    /// <param name=\"user\">The source user object.</param>\n    /// <param name=\"targetModelType\">The type of the output object.</param>\n    /// <param name=\"customMappings\">Custom mappings of properties with different names and/or types.</param>\n    /// <returns>The <paramref name=\"targetModelType\"/> object with mapped properties.</returns>\n    object MapToCustomModel(MedioClinicUser user, Type targetModelType, Dictionary<(string propertyName, Type propertyType), object> customMappings = null);\n\n    /// <summary>\n    /// Maps properties of the <paramref name=\"customModel\"/> object to properties of the same name and type in the <see cref=\"MedioClinicUser\"/> object.\n    /// </summary>\n    /// <param name=\"customModel\">The source model object.</param>\n    /// <param name=\"userToMapTo\">The target Identity user object.</param>\n    /// <param name=\"customMappings\">Custom mappings of properties with different names and/or types.</param>\n    /// <returns>The mapped <see cref=\"MedioClinicUser\"/> object.</returns>\n    /// <remarks>Maps properties by reference, does not copy them by value.</remarks>\n    MedioClinicUser MapToMedioClinicUser(object customModel, MedioClinicUser userToMapTo, Dictionary<(string propertyName, Type propertyType), object> customMappings = null);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now implement the interface. Let’s start with the <em>MapToCustomModel</em> method.</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Model, </em>create a <em>“UserModelService”</em> class file.</li>\n  <li>Inherit from <em>BaseService</em>.</li>\n  <li>Implement <em>IUserModelService</em>.</li>\n  <li>In the <em>MapToCustomModel</em> method, use reflection to get the type and properties of both the input object and the target type.</li>\n  <li>Call <em>System.Reflection.Activator.CreateInstance()</em> to factor a blank object of the target type.</li>\n  <li>Iterate over properties of the target type and try to find a matching source property of the same name and type.</li>\n  <li>Once that’s done, look up the keys in the custom mappings dictionary to find a matching source property therein.</li>\n  <li>Depending on which of the two potential sources was found, use it to populate the target property.</li>\n</ol>","code":{"src":"public object MapToCustomModel(\n    MedioClinicUser user,\n    Type targetModelType,\n    Dictionary<(string propertyName, Type propertyType), object> customMappings = null)\n{\n    if (user == null)\n    {\n        throw new ArgumentNullException(nameof(user));\n    }\n\n    if (targetModelType == null)\n    {\n        throw new ArgumentNullException(nameof(targetModelType));\n    }\n\n    var userProperties = user.GetType().GetProperties();\n    var targetProperties = targetModelType.GetProperties();\n    var viewModel = Activator.CreateInstance(targetModelType);\n\n    foreach (var targetProperty in targetProperties)\n    {\n        var propertyToMatch = (propertyName: targetProperty.Name, propertyType: targetProperty.PropertyType);\n\n        var sourceProperty = userProperties.FirstOrDefault(\n            prop => prop.Name.Equals(targetProperty.Name, StringComparison.OrdinalIgnoreCase)\n            && prop.PropertyType == targetProperty.PropertyType);\n\n        if (customMappings != null && customMappings.Keys.Contains(propertyToMatch))\n        {\n            targetProperty.SetValue(viewModel, customMappings[propertyToMatch]);\n        }\n        else if (sourceProperty != null)\n        {\n            targetProperty.SetValue(viewModel, sourceProperty.GetValue(user));\n        }\n    }\n\n    return viewModel;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, implement the sibling method—<em>MapToMedioClinicUser</em>.</p>\n<ol>\n  <li>As in the previous case, use reflection to get properties of both the input custom model and the target <em>MedioClinicUser</em> type.</li>\n  <li>Iterate over properties of the target type and try to find a matching source property of the same name and type.</li>\n  <li>Once that’s done, look up the keys in the custom mappings dictionary to find a matching source property therein.</li>\n  <li>Depending on which of the two potential sources was found, use it to populate the target property.</li>\n</ol>","code":{"src":"public MedioClinicUser MapToMedioClinicUser(\n    object customModel,\n    MedioClinicUser userToMapTo,\n    Dictionary<(string propertyName, Type propertyType), object> customMappings = null)\n{\n    if (customModel == null)\n    {\n        throw new ArgumentNullException(nameof(customModel));\n    }\n\n    if (userToMapTo == null)\n    {\n        throw new ArgumentNullException(nameof(userToMapTo));\n    }\n\n    var customModelProperties = customModel.GetType().GetProperties();\n    var userProperties = userToMapTo.GetType().GetProperties();\n\n    foreach (var userProperty in userProperties)\n    {\n        var propertyToMatch = (propertyName: userProperty.Name, propertyType: userProperty.PropertyType);\n\n        var sourceProperty = customModelProperties.FirstOrDefault(prop =>\n            prop.Name.Equals(userProperty.Name, StringComparison.OrdinalIgnoreCase)\n            && prop.PropertyType == userProperty.PropertyType);\n\n        if (customMappings != null && customMappings.Keys.Contains(propertyToMatch))\n        {\n            userProperty.SetValue(userToMapTo, customMappings[propertyToMatch]);\n        }\n        else if (sourceProperty != null)\n        {\n            userProperty.SetValue(userToMapTo, sourceProperty.GetValue(customModel));\n        }\n    }\n\n    return userToMapTo;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6772948c-43b2-4de6-8499-9ed0fa380c75","_parentId":"5367ff1b-6b2a-4a01-87d4-43ca948c2774","_type":"component","title":"Demo: Implementing the user model service","displayTitle":"Demo: Implementing the user model service"},{"body":"<div class=\"infobox warning\"><p>Please note that the <em>MapToMedioClinicUser</em> method does not factor a brand-new copy of the properties. It uses references to existing properties of the source object (except for value types, of course). Therefore, you might want to take additional measures to create deep copies of objects.</p></div>\n<div class=\"infobox idea\"><p>The <em>UserModelService</em> class was designed with simplicity in mind. It comes with features that suffice for the current <em>MedioClinicUser</em> model class. However, if you plan on creating more complicated user models, e.g., with properties of generic types, you may need additional code that takes care of that. In such cases, you may get inspired by the implementation of our <a href=\"https://github.com/Kentico/delivery-sdk-net/blob/master/KenticoCloud.Delivery/StrongTyping/ModelProvider.cs\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">strongly-typed model provider</a> in our Delivery .NET SDK. Although the code is not related to Kentico CMS/EMS, it can give you hints about how to inspect and generate data of generic types.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"7406bc50-5302-4f07-81e7-013b7f60c132","_parentId":"0e5c65ba-08e0-4433-aaed-13034af8dd54","_type":"component","title":"Implementing the user model service: Conclusion","displayTitle":"Implementing the user model service: Conclusion"},{"body":"<p>The account-related and profile-related pages will have to sometimes display info/warning/error messages to website visitors. For instance, they will tell visitors about their invalid sign-in attempts, warn about potential errors, and inform about successful operation results.</p>\n<p>In the rest of this page, you will bring a generic functionality that addresses these needs in a unified way.</p>\n<p>You will have to model the user message in its own model class. You will also create an enum that decorates the message with the info/warning/error tag. Then, you will update the existing PageViewModel class with the user message becoming one of its properties. Finally, you’ll create a display template for your user message model and a blank message master view. This will be useful when you want just the message to be displayed, nothing else.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e7784402-4f26-470c-9500-19a486439894","_parentId":"857d15ff-8d70-429a-af59-7202bc3415e6","_type":"component","title":"Theory: Unified info/warning/error messaging","displayTitle":"Theory: Unified info/warning/error messaging"},{"body":"<p>All the development tasks outlined in the previous paragraph are generic, without any Kentico-related knowledge required. So why not try to accomplish them yourself first?</p>\n<p>If you’re not sure, no worries. We will give you instructions in the subsequent demo chapter.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"67cb8911-b2da-4487-bc62-c4534dda3b6e","_parentId":"fd042dbe-661e-4ef0-b2ff-1f05d097acf0","_type":"component","title":"\nTask: Implementing user messages","displayTitle":"\nTask: Implementing user messages"},{"body":"<p>Let’s get started!</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, you’ll create a message type enum.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“MessageType”</em> class file.</li>\n  <li>Delete the empty class stub and replace it with code found in the snippet.</li>\n</ol>","code":{"src":"public enum MessageType\n{\n    Info,\n    Warning,\n    Error\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, let’s create the user message model.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“UserMessage”</em> class file.</li>\n  <li>Add the <em>MessageType</em>, <em>Message</em> and <em>DisplayAsRaw</em> properties, as seen in the snippet.</li>\n</ol>","code":{"src":"public class UserMessage\n{\n    public MessageType MessageType { get; set; }\n\n    public string Message { get; set; }\n\n    public bool DisplayAsRaw { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>In this step, update the <em>PageViewModel</em> class.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, open the <em>PageViewModel</em> class file.</li>\n  <li>In the non-generic class definition, add the <em>UserMessage</em> property.</li>\n</ol>","code":{"src":"public class PageViewModel : IViewModel\n{\n    public IEnumerable<MenuItemDto> MenuItems { get; set; }\n    public PageMetadataDto Metadata { get; set; }\n    public CompanyDto Company { get; set; }\n    public IEnumerable<CultureDto> Cultures { get; set; }\n    public IEnumerable<SocialLinkDto> SocialLinks { get; set; }\n    public UserMessage UserMessage { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>What remains to be done are just the Razor files. Start with the display template.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared</em>, create a new<em> “DisplayTemplates”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“UserMessage.cshtml”</em> Razor file.</li>\n  <li>Make the template strongly-typed against <em>MedioClinic.Models.UserMessage</em>.</li>\n  <li>Add a code block that picks the right style selectors.</li>\n  <li>Finally, add markup that renders either encoded or unencoded (raw).</li>\n</ol>","code":{"src":"@model MedioClinic.Models.UserMessage\n\n@{\n    string styleSelector = null;\n\n    switch (Model.MessageType)\n    {\n        case MedioClinic.Models.MessageType.Info:\n        default:\n            styleSelector = \"ktc-user-message light-blue lighten-5\";\n            break;\n        case MedioClinic.Models.MessageType.Warning:\n            styleSelector = \"ktc-user-message yellow lighten-4\";\n            break;\n        case MedioClinic.Models.MessageType.Error:\n            styleSelector = \"ktc-user-message deep-orange lighten-2\";\n            break;\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Update the main stylesheet.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Content &gt; Css &gt; Master</em>, open the <em>style.css</em> file.</li>\n  <li>Add the common style.</li>\n</ol>","code":{"src":"/* USER MESSAGES */\n\n.ktc-user-message {\n    padding: 2rem;\n}","lang":"css"},"strapline":""},{"title":"","body":"<p>In this final step, create a master user message view.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared</em>, create a new <em>“UserMessage.cshtml”</em> Razor file.</li>\n  <li>This time around, make it strongly-typed against <em>MedioClinic.Models.PageViewModel</em>.</li>\n  <li>Add markup that only renders the title and the user message, through the above display template.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.PageViewModel\n\n<div class=\"container\">\n    <div class=\"row\">\n        <h4>@Html.DisplayFor(m => m.Metadata.Title)</h4>\n        @Html.DisplayFor(m => m.UserMessage)\n    </div>\n</div>","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0be65fc5-4d38-4e75-a460-ddba7104a110","_parentId":"9ddd9da5-a4e5-4025-801c-374ef71e02f9","_type":"component","title":"Demo: Implementing user messages","displayTitle":"Demo: Implementing user messages"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>What is the relation between the <em>MedioClinicUser</em> class and the future patient and doctor view model classes?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>The MedioClinicUser class contains the bare minimum of properties that will later appear in all view model classes.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>The MedioClinicUser class encompasses all properties contained by any future view model classes.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":"<p>Wrong.</p>"}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"cfe874f1-f698-4954-a428-ff31a075d069","_parentId":"91da4c8d-e2e7-4586-bd38-b28c0d009117","_type":"component","title":"Progress check 1","displayTitle":"Progress check 1"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Why is the user model service needed?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Because the profile pages will contain, apart from common user fields, role-specific fields. This will require different markup to be rendered for various user roles. The service always produces a model object of a type that corresponds to a specific role. As a result, MVC can automatically pick the right markup, just based on the type of the view model it gets.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Only because the view models largely differ in their inner structure from that of the <em>MedioClinicUser</em> model class. The project won’t benefit from the service in any other way.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":"<p>Wrong.</p>"}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e6bea515-35dc-478a-92d5-26ac3994e345","_parentId":"91da4c8d-e2e7-4586-bd38-b28c0d009117","_type":"component","title":"Progress check 2","displayTitle":"Progress check 2"},{"body":"<p>Although you still haven’t created any working and visible piece of software, you’re getting close.</p>\n<p>The localization and error helper services will be used in your future account manager and profile manager classes that directly power the account and profile controllers.</p>\n<p>Albeit scoped to just the profile manager, the user model service it will come in very handy.</p>\n<p>And the user message infrastructure? It can play its part wherever user interaction is required. In registration and sign-in pages, profile pages, you name it.</p>\n<p>In the next page, you’ll create the base classes used by the account and profile managers, controllers.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"01a9801f-65a2-4386-a63e-7265ccd0a4ff","_parentId":"14a2f3cd-28d7-4094-aa86-d65829df9954","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to custom-tailor the <em>AuthorizeAttribute</em> to work with your strongly-typed roles</li>\n  <li>How to work with <em>FlagsAttribute</em> enums in a 3rd party library</li>\n  <li>How to capture states of various operations without the use of exceptions</li>\n</ul>\n<p>In the page, you will work on the following classes:</p>\n<ul>\n  <li>Medio Clinic authorize attribute</li>\n  <li>Identity manager result</li>\n  <li>Base identity manager</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"f1545bbf-9b5d-48a3-a96d-d8ba166c45c0","_parentId":"77b5cf7c-0340-428c-bd40-416bc5cef8ae","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>On the inside, both Kentico and the Identity framework work with roles as just strings. The MVC 5 framework then expects us to use <em>System.Web.Mvc.AuthorizeAttribute</em> to limit access to actions or controllers as a whole. The typical usage of the attribute then looks like the following:</p>\n<pre><code class=\"language-csharp\">[Authorize(Roles = \"Role1, Role2\")]</code></pre>\n<p><br></p>\n<p>The role listing in the code snippet cannot be replaced with any helper method call that would produce the strings for us. Why? You must supply a compile-time constant as a value of an attribute’s property. Thus, only string literals can be put here.</p>\n<p>You simply cannot do anything like this:</p>\n<pre><code class=\"language-csharp\">[Authorize(Roles = GetRoles())]</code></pre>\n<p><br></p>\n<p>Typing the literals time and again can not only be time-consuming, it is mainly incredibly error-prone.</p>\n<p>We want to mitigate this caveat with our custom attribute. It will inherit from the framework attribute. It will query Kentico forthe &nbsp;user’s current set of roles and it will use a lightweight 3rd party library to compare the roles with the set of allowed ones.</p>\n<p>With the custom attribute in place, you will enforce authorization this way:</p>\n<pre><code class=\"language-csharp\">[MedioClinicAuthorize(Roles = Roles.Doctor | Roles.Patient, SiteName = AppConfig.Sitename)]</code></pre>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"bbfd4164-8773-4598-812c-b00f9e6c632f","_parentId":"b14c6e06-a613-4e23-9f06-eda5742f5a03","_type":"component","title":"Theory: Strongly-typed role checking","displayTitle":"Theory: Strongly-typed role checking"},{"body":"<p>All right, enough talking. Let’s buckle up and do things.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, you’ll get a NuGet package of the mentioned 3rd party library. It compares <em>FlagsAttribute</em> enums and tries to find intersections of two such enum sets.</p>\n<ol>\n  <li>In the <em>Business</em> project, bring up the NuGet package manager window by right-clicking <em>References &gt; Manage NuGet packages</em>.</li>\n  <li>Search for <a href=\"https://www.nuget.org/packages/Enums.NET/\">Enums.NET</a> by Tyler Brinkley.&nbsp;</li>\n  <li>Add the latest version (2.3.2 at the time writing).</li>\n</ol>","_graphic":{"src":"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/22ffc9fb-08db-49fc-bde3-d5d2a8001718/007.png","alt":"007.png"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrative","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"33aacf30-4677-4520-9263-6546cceda28a","_parentId":"bbf5aeb5-d2fd-4bf8-8fd4-73e56830b7d5","_type":"component","title":"Demo: Implementing custom authorization attribute","displayTitle":"Demo: Implementing custom authorization attribute"},{"body":"<p>Let's create the attribute itself.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In the root of the <em>Business</em> project, create a new <em>“Attributes”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“MedioClinicAuthorizeAttribute”</em> class file.</li>\n  <li>Inherit from <em>System.Web.Mvc.AuthorizeAttribute</em>.</li>\n  <li>Add the two depicted properties.</li>\n  <li>Override the <em>OnAuthorization</em> method.</li>\n  <li>In that method, get the user object from the HTTP context.</li>\n  <li>As you’re in the <em>Business</em> project, directly call into <em>UserInfoProvider</em> to get the user’s roles.</li>\n  <li>Right off the bat, attach a call to the <em>ToMedioClinicRoles</em> extension method you’ve implemented earlier.</li>\n  <li>Use <em>FlagEnums.HasAnyFlags()</em> to find an intersection between the user’s current set of roles and the set of roles allowed for the current controller/action.</li>\n  <li>Note that you cannot use <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.enum.hasflag\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">System.Enum.HasFlag()</a> because it would not work with users having multiple roles.</li>\n  <li>In case of either unauthenticated or unauthorized users, return <em>HandleUnauthorizedRequest()</em>, like the original <em>AuthorizeAttribute</em> implementation does.</li>\n</ol>","code":{"src":"public class MedioClinicAuthorizeAttribute : AuthorizeAttribute\n{\n    public new Roles Roles { get; set; }\n\n    public string SiteName { get; set; }\n\n    public override void OnAuthorization(AuthorizationContext authorizationContext)\n    {\n        if (authorizationContext == null)\n        {\n            throw new ArgumentNullException(nameof(authorizationContext));\n        }\n\n        var user = HttpContext.Current.User;\n\n        if (user != null)\n        {\n            var userRoles = UserInfoProvider.GetRolesForUser(user.Identity?.Name, SiteName).ToMedioClinicRoles();\n\n            if (user.Identity?.IsAuthenticated == false || !FlagEnums.HasAnyFlags(Roles, userRoles))\n            {\n                // Call a framework method designed for such cases.\n                HandleUnauthorizedRequest(authorizationContext);\n            } \n        }\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"9f4f412b-8721-430b-9c1c-6904ad0f50e2","_parentId":"bbf5aeb5-d2fd-4bf8-8fd4-73e56830b7d5","_type":"component","title":"Create the custom attribute","displayTitle":"Create the custom attribute"},{"body":"<div class=\"infobox note\"><p>The Enums.NET library is not the only one that can do the job for you. For instance, you may also try the <a href=\"https://github.com/jskeet/unconstrained-melody\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Unconstrained melody</a> library by <a href=\"https://codeblog.jonskeet.uk/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Jon Skeet</a>. This also applies to other parts of the course. Nothing is carved in stone. Different user stories require different implementations.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"615843e8-26f7-422d-9a02-c25ff67dd6bb","_parentId":"bbf5aeb5-d2fd-4bf8-8fd4-73e56830b7d5","_type":"component","title":"The Enums.NET library","displayTitle":"The Enums.NET library"},{"body":"<p>Throughout the rest of the project, you will face another challenge—how to keep your controllers tidy and decluttered. As you know, the best practice in MVC frameworks dictates to do basically three things in controllers:</p>\n<ul>\n  <li>Make sure the view model is populated</li>\n  <li>Select a proper view/HTTP code/other response</li>\n  <li>Fire it off</li>\n</ul>\n<p>To avoid messy controllers, you should bring a new in a new ingredient—managers. These will do the heavy lifting that would otherwise scare your colleagues if they had to edit your bulky controllers after you.</p>\n<p>However, controllers and managers need to communicate in a concise way. Controllers always need to know the results of each operation mandated by managers. Without any doubt.</p>\n<p>You may think that you could simply either return data or throw exceptions. You don’t want to do just that. Every exception that you throw is an expensive operation. Apart from that, if your managers let lower-level exceptions bubble up to your controllers, these exceptions might have blended with those that you throw explicitly.</p>\n<p>Your solution is called a “generic result class”. It will hold a few properties that signal the overall success of the operation, an error list and a generic property with a result state. The type of the result state will be specified through the class’ generic type parameter.</p>\n<p>You’ll also want some of your operations to either accept or return data. That’s why you’ll inherit from your identity result class and add another generic type parameter.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5d763c8c-f6ea-4fb9-a4cc-aae0126d1e10","_parentId":"9cb22240-31b0-4a46-9d76-696c5e77c740","_type":"component","title":"\nTheory: Bypassing exceptions with result objects","displayTitle":"\nTheory: Bypassing exceptions with result objects"},{"body":"<p>Enough theory! Let’s get things done.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, create the base class.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“IdentityManagerResult”</em> class file.</li>\n  <li>Create a class generic on <em>TResultState</em>. Use the C# 7.3 feature that allows the generic type to be constrained to <em>Enum</em>.</li>\n  <li>Give the class the three depicted properties, one of them being of type <em>TResultState</em>.</li>\n  <li>Notice that the <em>Errors</em> property has an explicit backing field, to avoid <em>NullReferenceExceptions</em>.</li>\n</ol>","code":{"src":"public class IdentityManagerResult<TResultState>\n        where TResultState : Enum\n    {\n        private List<string> _errors = new List<string>();\n\n        public bool Success { get; set; }\n\n        public List<string> Errors\n        {\n            get => _errors;\n            set => _errors = value;\n        }\n\n        public TResultState ResultState { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, create the descendant that holds data payloads.</p>\n<p>&nbsp;</p>\n<ol>\n  <li>In the same <em>“IdentityManagerResult”</em> class file, add another class definition according to the code snippet.</li>\n  <li>Notice that you also need to add the same constraint as before.</li>\n</ol>","code":{"src":"public class IdentityManagerResult<TResultState, TData> : IdentityManagerResult<TResultState>\n    where TResultState : Enum\n{\n    public TData Data { get; set; }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"57bf8a8a-142f-4e5c-9285-11db89e2c050","_parentId":"7ce50f34-b695-49df-b2f8-84454b778ec0","_type":"component","title":"Demo: Implementing an identity result class","displayTitle":"Demo: Implementing an identity result class"},{"body":"<p>Great! You have your result class ready. Later, you will create enums that rigorously mirror all possible results of manager operations.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"7dca87bd-a4d8-4e42-8fc3-19bb3c2b08a0","_parentId":"7ce50f34-b695-49df-b2f8-84454b778ec0","_type":"component","title":"Implementing an identity result class: Conclusion","displayTitle":"Implementing an identity result class: Conclusion"},{"body":"<p>In this phase, you will lay down some cornerstones of your future account manager and profile manager classes. The base identity manager class will bring two properties to the table—the user manager and the business dependencies object enriched with the localization and error helper services.</p>\n<p>On top of that, an error-handling method will certainly come in handy when implementing the managers. It should facilitate logging and error list population.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4429552e-a38e-494e-856d-e1a741af8116","_parentId":"e564c7e3-6c71-4646-800a-7840117c8453","_type":"component","title":"Theory: The base identity manager class","displayTitle":"Theory: The base identity manager class"},{"body":"<p>You’ve probably got the gist of the class from the previous paragraph. Now you can take the plunge and implement the requirements yourself. Again, if you don’t feel like doing so, don’t worry. We’ll give you guidance in the demo section below.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"aa02820c-7b9b-440d-adbd-069d8ab0f279","_parentId":"1187ef5c-23a0-45ee-963e-9cc6b7f3567e","_type":"component","title":"Task: Implementing the base manager","displayTitle":"Task: Implementing the base manager"},{"body":"<p>Enough of theory, let’s add the base manager.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In <em>MedioClinic &gt; Utils</em>, create a new <em>“BaseIdentityManager”</em> class file.</li>\n  <li>Make the class abstract.</li>\n  <li>Add the <em>UserManager</em> and <em>Dependencies</em> properties.</li>\n  <li>Let the constructor populate them.</li>\n  <li>Add the <em>HandleException&lt;TResultState&gt;</em> method.</li>\n  <li>Decorate the <em>result</em> parameter with the <em>ref</em> keyword so that the reference passed to the method is guaranteed to point to the same heap data.</li>\n  <li>In the first statement, use <em>this.GetType().Name</em> to get either <em>“AccountManager”</em> or <em>“ProfileManager”</em>, depending on the descendant class inherited from this abstract base one.</li>\n  <li>Set the rest of the result properties as seen in the snippet.</li>\n</ol>","code":{"src":"public abstract class BaseIdentityManager\n{\n    public IMedioClinicUserManager<MedioClinicUser, int> UserManager { get; }\n\n    public IBusinessDependencies Dependencies { get; }\n\n    public BaseIdentityManager(\n        IMedioClinicUserManager<MedioClinicUser, int> userManager,\n        IBusinessDependencies dependencies)\n    {\n        UserManager = userManager ?? throw new ArgumentNullException(nameof(userManager));\n        Dependencies = dependencies ?? throw new ArgumentNullException(nameof(dependencies));\n    }\n\t\n    protected void HandleException<TResultState>(string methodName, Exception exception, ref IdentityManagerResult<TResultState> result)\n        where TResultState : Enum\n    {\n        Dependencies.ErrorHelperService.LogException(this.GetType().Name, methodName, exception);\n        result.Success = false;\n        result.Errors.Add(exception.Message);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"11e42ed7-1c37-4250-a760-2dd8c21a58fa","_parentId":"32f5a108-bacc-42eb-ab5f-22a9192e0340","_type":"component","title":"Demo: Implementing the base manager","displayTitle":"Demo: Implementing the base manager"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>When decorating action methods with <em>MedioClinicAuthorizeAttribute</em> instances, how should one define the set of allowed <em>Business.Identity.Models.Roles</em> roles?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Due to the <em>Roles</em> enum being a <em>FlagsAttribute</em>-decorated one, the roles need to be connected with each other using a binary OR operator.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>They need to be connected with each other with a logical AND operator.</p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":"<p>Wrong.</p>"}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"4368806f-3d8f-466b-8f21-0e66731d0be8","_parentId":"2cc6e17f-2b0b-4d38-97e4-424a6403fb8c","_type":"component","title":"Progress check 1","displayTitle":"Progress check 1"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Why is the Enums.NET NuGet package included in the project?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Because it provides an alternative with better performance when compared to calling <em>System.Enum.HasFlag().</em></p>","_shouldBeSelected":false,"feedback":"<p>Wrong.</p>"},{"text":"<p>Because <em>System.Enum.HasFlag()</em> can only be used to compare solitary enum values against counterpart sets of enum values.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":"<p>Wrong.</p>"}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"bc306f72-073e-4c0f-9603-a47ca8597ff6","_parentId":"2cc6e17f-2b0b-4d38-97e4-424a6403fb8c","_type":"component","title":"Progress check 2","displayTitle":"Progress check 2"},{"body":"<p>You’ve successfully laid down the groundwork that the future account manager and profile manager will use.</p>\n<p>In the next page, you’ll continue doing so, however, this time it will be targeted almost entirely towards the account manager.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"85ddb886-e77b-4882-b8ae-99cfb46e4aa2","_parentId":"41b6b539-a9c2-4f75-b5a9-228f0758a8c7","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How the various extension methods and model classes help</li>\n  <li>Which result states may occur in the account manager methods</li>\n</ul>\n<p>You will work on the following code:</p>\n<ul>\n  <li>List extensions</li>\n  <li>URL extensions</li>\n  <li>Application config</li>\n  <li>Email view model</li>\n  <li>Password confirmation view model</li>\n  <li>Password view model</li>\n  <li>Register view model</li>\n  <li>Reset password view model</li>\n  <li>Sign in view model</li>\n  <li>Account manager result states</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d2d94610-5d82-4ab9-a51e-54c634f36507","_parentId":"0e6614c6-8ae4-46ff-94ff-02547e579f28","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>All right. You’ve come a long way up to here. You’ve built the lowest-level classes that get along with the Identity contracts. Then you’ve created some of the general services in the Business project, together with some of the basic elements in the MedioClinic project. It would be completely understandable if you feel a bit lost in the overall solution architecture.</p>\n<p>A picture is worth a thousand words. Thus, let’s explore the following class diagram.</p>\n<figure data-asset-id=\"bc6707e1-f8ec-4f9e-99ae-b7e3cbd42d58\" data-image-id=\"bc6707e1-f8ec-4f9e-99ae-b7e3cbd42d58\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/d81b5bfb-e5c5-4c40-9cbc-648123c54bb6/008.png\" data-asset-id=\"bc6707e1-f8ec-4f9e-99ae-b7e3cbd42d58\" data-image-id=\"bc6707e1-f8ec-4f9e-99ae-b7e3cbd42d58\" alt=\"\"></figure>\n<p><br></p>\n<p>It can be easily explained by saying that instead of controllers, the managers work with the Identity-based infrastructure in the Business project. Despite Identity being designed for direct usage in controllers, it is better to be hidden behind an additional layer in larger projects.</p>\n<p>Note that in the above scheme, we only describe the account manager’s relations. The profile manager and controller are shown without their related codebase.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"0154c9ec-5737-4844-8e45-800cfe8de6fd","_parentId":"0530b387-1e92-4162-b42a-8cadde62b71a","_type":"component","title":"\nTheory: Architecture","displayTitle":"\nTheory: Architecture"},{"body":"<p>In the later phases, you’ll want to generate URLs that facilitate email-confirmed registration (double opt-in) or password reset. As you’ll place those URLs into email messages, you’ll want them to be absolute. To do so, you’ll create a HTML helper extension method.</p>\n<p>Apart from that, in the future profile manager, you’ll want to add support for uploading user avatar pictures. The image files will reside in the local filesystem of your MVC app, under the Content folder. And, you’ll want to prevent the file names from containing characters forbidden in URLs. You’ll therefore want to make sure each image file meets the requirements via another extension method.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7a91c5bc-e774-4d93-8517-cffbeb4e3b3d","_parentId":"f4cabd57-3aad-4809-b5d8-55a6336990ff","_type":"component","title":"Theory: URL extensions","displayTitle":"Theory: URL extensions"},{"body":"<p>As you probably know, one can add a sequence into a <em>System.Collections.Generic.List&lt;T&gt;</em> at once using the <em>AddRange</em> method. However, it has a small hidden catch—the range mustn’t be <em>null</em>. This can be nicely addressed with an extension method that wraps the <em>AddRange()</em> call.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"53690966-0195-4ab5-bb92-09da42853fd7","_parentId":"35502f5e-5148-4c55-8bdc-1d2543f40bc7","_type":"component","title":"Theory: A null-tolerant addition to lists","displayTitle":"Theory: A null-tolerant addition to lists"},{"body":"<p>Enough of theory, let’s build the null-tolerant list addition method</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In <em>MedioClinic &gt; Extensions</em>, create a new <em>“ListExtensions”</em> class file.</li>\n  <li>In the <em>AddNonNullRange</em> method, wrap the call to <em>AddRange()</em> into a null check.</li>\n</ol>","code":{"src":"public static void AddNonNullRange<T>(this List<T> list, IEnumerable<T> rangeToAdd)\n{\n    if (rangeToAdd != null)\n    {\n        list.AddRange(rangeToAdd);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"60549796-b157-4bcb-a43b-43839fd71500","_parentId":"e179dee1-692a-4d87-8f25-30565ded61aa","_type":"component","title":"Demo: Implementing a the list addition method","displayTitle":"Demo: Implementing a the list addition method"},{"body":"<p>These will be various view models that transfer data to/from the account controller and its backing account manager.</p>\n<p>Before you create them, you’ll enable one neat Kentico feature that translates <em>System.ComponentModel.DataAnnotations</em> attributes using Kentico resource strings.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5d73bfde-36bb-409b-9f21-fe9e4041ef4d","_parentId":"9613701d-b0c1-4bb1-93f2-a2facdd9aa4c","_type":"component","title":"Theory: View models","displayTitle":"Theory: View models"},{"body":"<p>Before you enable the localization feature, download the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/App_Data/Global/Resources/MedioClinic.resx\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\"><em>MedioClinic.resx file from GitHub</em></a> and place it into <em>MedioClinic &gt; App_Data &gt; Global &gt; Resources. </em>Once that’s done, include the file in your project.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Let’s enable the feature.</p>\n<p><br></p>\n<ol>\n  <li>In <em>MedioClinic &gt; App_Start</em>, open the <em>ApplicationConfig</em> class file.</li>\n  <li>In the RegisterFeatures method, add the statement from the snippet.</li>\n  <li>From now on, you’ll be able to put resource string keys into the display name properties of model attributes. Kentico will resolve them into texts for you.</li>\n</ol>","code":{"src":"builder.UseDataAnnotationsLocalization();","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let’s now create the first view model in the series—the <em>EmailViewModel</em>.</p>\n<p>This model will mostly be included in others as a property.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“Account”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“EmailViewModel”</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n</ol>","code":{"src":"public class EmailViewModel : IViewModel\n{\n    [Required(ErrorMessage = \"General.RequireEmail\")]\n    [DisplayName(\"General.EmailAddress\")]\n    [DataType(DataType.EmailAddress)]\n    [EmailAddress(ErrorMessage = \"Models.EmailFormat\")]\n    [MaxLength(100, ErrorMessage = \"Models.MaxLength\")]\n    public string Email { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the <em>PasswordViewModel</em> class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Account</em>, create a new <em>“PasswordViewModel”</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n</ol>","code":{"src":"public class PasswordViewModel : IViewModel\n{\n    [Required]\n    [DataType(DataType.Password)]\n    [DisplayName(\"Models.Account.Password\")]\n    [MaxLength(100, ErrorMessage = \"Models.MaxLength\")]\n    public string Password { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the <em>PasswordConfirmationViewModel </em>class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Account</em>, create a new <em>“PasswordConfirmationViewModel”</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n  <li>Notice that the model expands upon the <em>PasswordViewModel</em> class.</li>\n</ol>","code":{"src":"public class PasswordConfirmationViewModel : PasswordViewModel\n{\n    [DataType(DataType.Password)]\n    [Display(Name = \"General.ConfirmPassword\")]\n    [Compare(\"Password\", ErrorMessage = \"ChangePassword.ErrorNewPassword\")]\n    public string ConfirmPassword { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the <em>RegisterViewModel </em>class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Account</em>, create a new <em>“RegisterViewModel”</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n  <li>Note that the model reuses the <em>EmailViewModel</em> and <em>PasswordConfirmationViewModel</em> models in properties.</li>\n</ol>","code":{"src":"public class RegisterViewModel : IViewModel\n{\n    [Required]\n    [Display(Name = \"General.FirstName\")]\n    public string FirstName { get; set; }\n\n    [Required]\n    [Display(Name = \"General.LastName\")]\n    public string LastName { get; set; }\n\n    public EmailViewModel EmailViewModel { get; set; }\n\n    public PasswordConfirmationViewModel PasswordConfirmationViewModel { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the <em>ResetPasswordViewModel </em>class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Account</em>, create a new <em>“ResetPasswordViewModel”</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n  <li>Note that this model reuses <em>PasswordConfirmationViewModel</em>, in a property.</li>\n</ol>","code":{"src":"public class ResetPasswordViewModel : IViewModel\n{\n    public int UserId { get; set; }\n\n    public string Token { get; set; }\n\n    public PasswordConfirmationViewModel PasswordConfirmationViewModel { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the <em>SignInViewModel </em>class.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Account</em>, create a new <em>“SignInViewModel”</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n  <li>Note that this model reuses both the <em>EmailViewModel</em> and the <em>PasswordViewModel</em> models, in properties.</li>\n</ol>","code":{"src":"public class SignInViewModel : IViewModel\n{\n    public EmailViewModel EmailViewModel { get; set; }\n\n    public PasswordViewModel PasswordViewModel { get; set; }\n\n    [DisplayName(\"Models.Account.StaySignedIn\")]\n    public bool StaySignedIn { get; set; }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"43b9c17c-2040-4de0-8fa3-185baca2c8f1","_parentId":"c8c16995-4754-4811-a593-dff768d76385","_type":"component","title":"Demo: View models","displayTitle":"Demo: View models"},{"body":"<p>Let's now create class for the account manager results states.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Account</em>, create a new <em>“AccountManagerResultStates”</em> class file.</li>\n  <li>Remove the empty class stub and replace it with enums according to the code snippet.</li>\n</ol>","code":{"src":"public enum RegisterResultState\n{\n    InvalidInput,\n    UserNotCreated,\n    TokenNotCreated,\n    EmailSent,\n    SignedIn,\n    NotSignedIn\n}\n\npublic enum ConfirmUserResultState\n{\n    EmailNotConfirmed,\n    AvatarNotCreated,\n    UserConfirmed\n}\n\npublic enum SignInResultState\n{\n    UserNotFound,\n    EmailNotConfirmed,\n    SignedIn,\n    NotSignedIn\n}\n\npublic enum SignOutResultState\n{\n    SignedOut,\n    NotSignedOut\n}\n\npublic enum ForgotPasswordResultState\n{\n    UserNotFound,\n    EmailNotConfirmed,\n    TokenNotCreated,\n    EmailSent,\n    EmailNotSent\n}\n\npublic enum ResetPasswordResultState\n{\n    InvalidToken,\n    TokenVerified,\n    PasswordNotReset,\n    PasswordReset\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f4a526e5-e7d6-403b-bbb7-6f5af9d01595","_parentId":"95720604-12c9-48ff-bb2c-71f9ff1afa80","_type":"component","title":"Demo: Creating the account manager result states","displayTitle":"Demo: Creating the account manager result states"},{"body":"<p>Although tasks in this page were a bit boring, you can look forward to seeing the next page. You’ll implement one of the two most interesting classes in the <em>MedioClinic</em> project—the account manager.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8a2d58f6-a3eb-42c9-8de3-7805512cbdf2","_parentId":"e8ace759-c35d-4f3e-bbee-47eadae4d443","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn about all practical tasks connected to:</p>\n<ul>\n  <li>Registering for an account</li>\n  <li>Confirming the registration via email</li>\n  <li>Signing in and out</li>\n  <li>Resetting passwords</li>\n</ul>\n<p>In this page, you will work solely on the account manager class.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"4fce7c8a-b250-42ea-b14b-028bdfc9be9f","_parentId":"4f8b4be1-36fb-4938-8ed2-3adbc3f5c565","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>In the first section of this page, you will implement account creation. It will come in two flavors:</p>\n<ul>\n  <li>Direct registration</li>\n  <li>Email-confirmed registration (double opt-in)</li>\n</ul>\n<p>First, you’ll implement the direct method. Then, you’ll add the double opt-in method. The double opt-in workflow will consist of two steps—user data submission and confirmation through a unique secret URL. During that interval, the user will be created but disabled.</p>\n<p>With a simple discriminator parameter added to one of the methods, you’ll be able to switch from double opt-in back to the direct method, should you wish to do so anytime later.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"e5d09088-c86f-409c-8373-2df736cedeac","_parentId":"b8f18ba1-15e6-4fbb-a097-740da23747f7","_type":"component","title":"Theory: User registration","displayTitle":"Theory: User registration"},{"body":"<p>Enough theory. Let’s get directly to the guts of your account manager class.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, create an underlying interface.</p>\n<p><br></p>\n<ol>\n  <li>In <em>MedioClinic &gt; Utils</em>, create a new <em>“IAccountManager”</em> interface file.</li>\n  <li>Add the signatures according to the code snippet.</li>\n</ol>","code":{"src":"/// <summary>\n/// Manager of user account operations.\n/// </summary>\npublic interface IAccountManager\n{\n    /// <summary>\n    /// Registers a new user account.\n    /// </summary>\n    /// <param name=\"uploadModel\">View model taken from the user.</param>\n    /// <param name=\"emailConfirmed\">Signals if email confirmation is required.</param>\n    /// <param name=\"requestContext\">Request context.</param>\n    /// <returns>An operation result.</returns>\n    Task<IdentityManagerResult<RegisterResultState>> RegisterAsync(RegisterViewModel uploadModel, bool emailConfirmed, RequestContext requestContext);\n\n    /// <summary>\n    /// Confirms the user account creation via email.\n    /// </summary>\n    /// <param name=\"userId\">User ID.</param>\n    /// <param name=\"token\">Confirmation token.</param>\n    /// <param name=\"requestContext\">Request context.</param>\n    /// <returns>An operation result.</returns>\n    Task<IdentityManagerResult<ConfirmUserResultState>> ConfirmUserAsync(int userId, string token, RequestContext requestContext);\n\n    /// <summary>\n    /// Signs the user in.\n    /// </summary>\n    /// <param name=\"uploadModel\">Credentials view model taken from the user.</param>\n    /// <returns>An operation result.</returns>\n    Task<IdentityManagerResult<SignInResultState>> SignInAsync(SignInViewModel uploadModel);\n\n    /// <summary>\n    /// Signs the user out.\n    /// </summary>\n    /// <returns>An operation result.</returns>\n    IdentityManagerResult<SignOutResultState> SignOut();\n\n    /// <summary>\n    /// Sends a unique URL with a reset token to an email address.\n    /// </summary>\n    /// <param name=\"uploadModel\">Email address taken from the user.</param>\n    /// <param name=\"requestContext\">Request context.</param>\n    /// <returns>An operation result.</returns>\n    Task<IdentityManagerResult<ForgotPasswordResultState>> ForgotPasswordAsync(EmailViewModel uploadModel, RequestContext requestContext);\n\n    /// <summary>\n    /// Verifies the token sent via <see cref=\"ForgotPasswordAsync(EmailViewModel, RequestContext)\"/>.\n    /// </summary>\n    /// <param name=\"userId\">User ID.</param>\n    /// <param name=\"token\">Verification token.</param>\n    /// <returns>A view model to reset the password.</returns>\n    Task<IdentityManagerResult<ResetPasswordResultState, ResetPasswordViewModel>> VerifyResetPasswordTokenAsync(int userId, string token);\n\n    /// <summary>\n    /// Resets the user password.\n    /// </summary>\n    /// <param name=\"uploadModel\">New passwords taken from the user.</param>\n    /// <returns>An operation result.</returns>\n    Task<IdentityManagerResult<ResetPasswordResultState>> ResetPasswordAsync(ResetPasswordViewModel uploadModel);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, create the basic skeleton of the class.</p>\n<p><br></p>\n<ol>\n  <li>In <em>MedioClinic &gt; Utils</em>, create a new <em>“AccountManager”</em> class file.</li>\n  <li>Add the two Identity-based properties and populate them via your parametrized constructor, together with <em>IMedioClinicUserManager</em> and <em>IBusinessDependencies</em> being passed around to the <em>BaseIdentityManager</em> base class.</li>\n</ol>","code":{"src":"public class AccountManager : BaseIdentityManager, IAccountManager\n{\n    public IMedioClinicSignInManager<MedioClinicUser, int> SignInManager { get; }\n\n    public IAuthenticationManager AuthenticationManager { get; }\n\n    public AccountManager(\n        IMedioClinicUserManager<MedioClinicUser, int> userManager,\n        IMedioClinicSignInManager<MedioClinicUser, int> signInManager,\n        IAuthenticationManager authenticationManager,\n        IBusinessDependencies dependencies)\n        : base(userManager, dependencies)\n    {\n        SignInManager = signInManager ?? throw new ArgumentNullException(nameof(signInManager));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Before you add the registration methods, create the <em>AddToPatientRoleAsync</em> method used in the next steps. The patient role will be a default role that each new user gets.</p>\n<ol>\n  <li>As you can see in the code snippet, our method builds upon the principle that all role codenames in Kentico mirror the string representations of the <em>Roles</em> enum values.</li>\n  <li>You may certainly come up with your own convention.</li>\n  <li>Call user manager to assign the patient role to the user.</li>\n</ol>","code":{"src":"protected async Task<IdentityResult> AddToPatientRoleAsync(int userId)\n{\n    var patientRole = Roles.Patient.ToString();\n\n    return await UserManager.AddToRolesAsync(userId, patientRole);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, add the <em>RegisterAsync</em> method. This method will take the data uploaded in a registration form. In the first phase, it will handle just the direct sign-in method.</p>\n<p><br></p>\n<ol>\n  <li>Take the <em>RegisterViewModel</em> object uploaded from the registration form, the <em>bool</em> flag signaling the registration method, and the request context object required for some of the background operations.</li>\n  <li>Factor a new <em>MedioClinicUser</em> object, together with two blank result objects.</li>\n  <li>Try to save the user to the database via the user manager. Handle unsuccessful attempts with your base class’ <em>HandleException</em> method.</li>\n  <li>If all goes well, let the sign-in manager sign your new user in and set the appropriate state in your account result object.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<RegisterResultState>> RegisterAsync(RegisterViewModel uploadModel, bool emailConfirmed, RequestContext requestContext)\n{\n    var user = new MedioClinicUser\n    {\n        UserName = uploadModel.EmailViewModel.Email,\n        Email = uploadModel.EmailViewModel.Email,\n        FirstName = uploadModel.FirstName,\n        LastName = uploadModel.LastName,\n        Enabled = !emailConfirmed\n    };\n\n    var accountResult = new IdentityManagerResult<RegisterResultState>();\n    IdentityResult identityResult = null;\n\n    try\n    {\n        identityResult = await UserManager.CreateAsync(user, uploadModel.PasswordConfirmationViewModel.Password);\n    }\n    catch (Exception ex)\n    {\n        HandleException(nameof(RegisterAsync), ex, ref accountResult);\n\n        return accountResult;\n    }\n\n    if (identityResult != null && identityResult.Succeeded)\n    {\n        identityResult = await AddToPatientRoleAsync(user.Id);\n        \n        try\n        {\n            await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);\n            accountResult.ResultState = RegisterResultState.SignedIn;\n            accountResult.Success = true;\n        }\n        catch (Exception ex)\n        {\n            accountResult.ResultState = RegisterResultState.NotSignedIn;\n            HandleException(nameof(RegisterAsync), ex, ref accountResult);\n        \n            return accountResult;\n        }\n    }\n\n    accountResult.Errors.AddNonNullRange(identityResult.Errors);\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, give your <em>RegisterAsync</em> method a few additional lines of code to make it capable of starting a double opt-in workflow.</p>\n<ol>\n  <li>In the body of your <em>RegisterAsync</em> method, locate the statement that determines the success state of the <em>identityResult</em> variable.</li>\n  <li>Add an if-statement right at the start of that code block. In that if-statement, simply ask about <em>emailConfirmed</em>.</li>\n  <li>Before you add code to this branch of code, surround the existing code with an else-statement.</li>\n  <li>Back in the <em>emailConfirmed</em> branch, implement the double opt-in functionality.</li>\n  <li>First, let the user manager generate a unique token that you’ll then pass into an email message. The token serves as a one-time security measure.</li>\n  <li>Handle any potential exceptions that might occur by returning the <em>TokenNotCreated</em> state.</li>\n  <li>If the token generation goes well, use your <em>AbsoluteUrl</em> method and your token to get a unique confirmation URL.</li>\n  <li>Pass it around to the message produced via the user manager.</li>\n</ol>","code":{"src":"if (identityResult != null && identityResult.Succeeded)\n{\n    // Registration: Confirmed registration (begin)\n    if (emailConfirmed)\n    {\n        string token = null;\n\n        try\n        {\n            token = await UserManager.GenerateEmailConfirmationTokenAsync(user.Id);\n        }\n        catch (Exception ex)\n        {\n            accountResult.ResultState = RegisterResultState.TokenNotCreated;\n            HandleException(nameof(RegisterAsync), ex, ref accountResult);\n\n            return accountResult;\n        }\n\n        if (!string.IsNullOrEmpty(token))\n        {\n            var confirmationUrl = new UrlHelper(requestContext).AbsoluteUrl(\n                            requestContext.HttpContext.Request,\n                            \"ConfirmUser\",\n                            routeValues: new { userId = user.Id, token });\n\n            await UserManager.SendEmailAsync(user.Id,\n                Dependencies.LocalizationService.Localize(\"AccountManager.Register.Email.Confirm.Subject\"),\n                Dependencies.LocalizationService.LocalizeFormat(\"AccountManager.Register.Email.Confirm.Body\", confirmationUrl));\n\n            accountResult.Success = true;\n            accountResult.ResultState = RegisterResultState.EmailSent;\n        }\n    }\n    // Registration: Confirmed registration (end)\n\n    // Registration: Direct sign in (begin)\n    else\n    {\n        identityResult = await AddToPatientRoleAsync(user.Id);\n\n        try\n        {\n            await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);\n            accountResult.ResultState = RegisterResultState.SignedIn;\n            accountResult.Success = true;\n        }\n        catch (Exception ex)\n        {\n            accountResult.ResultState = RegisterResultState.NotSignedIn;\n            HandleException(nameof(RegisterAsync), ex, ref accountResult);\n\n            return accountResult;\n        }\n    }\n    // Registration: Direct sign in (end)\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You’ve got your <em>RegisterAsync</em> method ready. However, there needs to be a method that takes care of the unique URLs you generated. You need a <em>ConfirmUserAsync</em> method.</p>\n<p><br></p>\n<ol>\n  <li>The method needs to know the user ID and the security token. Also, include the <em>requestContext</em> parameter as you will need it later once you add support for user avatars.</li>\n  <li>Like in the previous case, start your implementation with two blank result objects seen in the code snippet.</li>\n  <li>In a try-catch block call user manager to confirm the existence of the user. This call will cause the Kentico user object to become enabled, effectively allowing them to sign-in.</li>\n  <li>Handle exceptions with the <em>EmailNotConfirmed</em> result state.</li>\n  <li>Should all go well, set the successful result state.</li>\n</ol>\n<p>Again, add any potential identity result errors that might have happened and return the result.</p>","code":{"src":"public async Task<IdentityManagerResult<ConfirmUserResultState>> ConfirmUserAsync(int userId, string token, RequestContext requestContext)\n{\n    var accountResult = new IdentityManagerResult<ConfirmUserResultState>();\n    IdentityResult identityResult = IdentityResult.Failed();\n\n    try\n    {\n        identityResult = await UserManager.ConfirmEmailAsync(userId, token);\n    }\n    catch (Exception ex)\n    {\n        accountResult.ResultState = ConfirmUserResultState.EmailNotConfirmed;\n        HandleException(nameof(ConfirmUserAsync), ex, ref accountResult);\n\n        return accountResult;\n    }\n\n    if (identityResult.Succeeded && (await AddToPatientRoleAsync(userId)).Succeeded)\n    {\n        accountResult.Success = true;\n        accountResult.ResultState = ConfirmUserResultState.UserConfirmed;\n    }\n\n    accountResult.Errors.AddNonNullRange(identityResult.Errors);\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"87437ce7-12fb-4f27-99fb-cc2925e7307e","_parentId":"e16f49db-1262-47f1-9c39-88b2626ee6df","_type":"component","title":"Demo: User registration","displayTitle":"Demo: User registration"},{"body":"<p>Good. Your future website visitors are now quite close to being able to register. Let’s continue by allowing them to sign in.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d7126757-2cac-4e2b-8185-037d1966f593","_parentId":"e16f49db-1262-47f1-9c39-88b2626ee6df","_type":"component","title":"User registration: Conclusion","displayTitle":"User registration: Conclusion"},{"body":"<p>Let’s add the sign-in/out mechanism.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The new SignInAsync method will contain code that is suited for direct registration and, a few additional lines of code required for the double opt-in workflow.</p>\n<p><br></p>\n<ol>\n  <li>The method takes the <em>SignInModel</em> input object from the form.</li>\n  <li>Traditionally, start with factoring an account result object. However, this time around, instantiate the derivate that contains the <em>TData</em> payload (the input model).</li>\n  <li>Try to find the user and catch possible exceptions in the familiar way. Notice that due to the <em>HandleException</em> method requiring just <em>IdentityManagerResult&lt;TResultState&gt;</em>, you ought to cast the result object to a contravariant outer shape.</li>\n  <li>Call <em>UserManager.IsEmailConfirmedAsync</em> to check if the user is enabled.</li>\n  <li>Call the <em>PasswordSignInAsync</em> method to sign the user in (as opposed to the <em>SignInAsync()</em> call used in the direct registration workflow). Handle exceptions in the same manner as before.</li>\n  <li>If the execution passed through all the above code, it means you can return a successful result state to the client code.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<SignInResultState>> SignInAsync(SignInViewModel uploadModel)\n{\n    var accountResult = new IdentityManagerResult<SignInResultState, SignInViewModel>();\n    MedioClinicUser user = null;\n\n    try\n    {\n        user = await UserManager.FindByNameAsync(uploadModel.EmailViewModel.Email);\n    }\n    catch (Exception ex)\n    {\n        var ar = accountResult as IdentityManagerResult<SignInResultState>;\n        accountResult.ResultState = SignInResultState.UserNotFound;\n        HandleException(nameof(SignInAsync), ex, ref ar);\n\n        return accountResult;\n    }\n\n    // Registration: Confirmed registration (begin)\n    if (user != null && !await UserManager.IsEmailConfirmedAsync(user.Id))\n    {\n        accountResult.ResultState = SignInResultState.EmailNotConfirmed;\n\n        return accountResult;\n    }\n    // Registration: Confirmed registration (end)\n\n    SignInStatus signInStatus = SignInStatus.Failure;\n\n    try\n    {\n        signInStatus = await SignInManager.PasswordSignInAsync(uploadModel.EmailViewModel.Email, uploadModel.PasswordViewModel.Password, uploadModel.StaySignedIn, false);\n    }\n    catch (Exception ex)\n    {\n        var ar = accountResult as IdentityManagerResult<SignInResultState>;\n        accountResult.ResultState = SignInResultState.NotSignedIn;\n        HandleException(nameof(SignInAsync), ex, ref ar);\n\n        return accountResult;\n    }\n\n    if (signInStatus == SignInStatus.Success)\n    {\n        accountResult.Success = true;\n        accountResult.ResultState = SignInResultState.SignedIn;\n    }\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You now can implement the <em>SignOut</em> method. This method will do just that. No rocket science happens here.</p>\n<ol>\n  <li>The method takes no arguments. It doesn’t call any async methods, thus it is also synchronous.</li>\n  <li>In the try-catch block, call the <em>AuthenticationManager.SignOut</em> method.</li>\n  <li>Handle exceptions in an ordinary way.</li>\n</ol>","code":{"src":"public IdentityManagerResult<SignOutResultState> SignOut()\n{\n    var accountResult = new IdentityManagerResult<SignOutResultState>();\n\n    try\n    {\n        AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie);\n        accountResult.Success = true;\n        accountResult.ResultState = SignOutResultState.SignedOut;\n    }\n    catch (Exception ex)\n    {\n        accountResult.ResultState = SignOutResultState.NotSignedOut;\n        Dependencies.ErrorHelperService.LogException(nameof(AccountManager), nameof(SignOut), ex);\n    }\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"01651d2c-612e-495a-989e-8a1c852276e6","_parentId":"ad29cd37-b9d8-481c-bb1c-01b3cc13b81e","_type":"component","title":"Demo: Sign-in, sign-out","displayTitle":"Demo: Sign-in, sign-out"},{"body":"<p>Great job! Your future account controller now has its manager buddy that brokers user registration, sign-in and sign-out procedures.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"0ad11f2b-ec6c-4ac6-ae1a-6373bc65ff5d","_parentId":"ad29cd37-b9d8-481c-bb1c-01b3cc13b81e","_type":"component","title":"Sign-in, sign-out: Conclusion","displayTitle":"Sign-in, sign-out: Conclusion"},{"body":"<p>In the following series of steps, you’ll give your users the ability to reset their password. They will do that in multiple steps:</p>\n<ul>\n  <li>First, they submit an email address of the account that’s about to have the password reset.</li>\n  <li>Then, they’ll obtain an email message with a URL containing a secret password reset token.</li>\n  <li>Once they click that URL, they’ll be taken to a page where they set their new password.</li>\n</ul>\n<p>Each of the phases will be represented by an account controller action method and its account manager counterpart.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Therefore, your first take is the <em>ForgotPasswordAsync</em> method. It will basically find the user and send the message with the token.</p>\n<ol>\n  <li>In the method, try to find the user by the email address obtained from the <em>EmailViewModel</em> argument.</li>\n  <li>If the user account is not enabled, shortcut the execution by returning the <em>EmailNotConfirmed</em> result state.</li>\n  <li>Otherwise, call a dedicated <em>GeneratePasswordResetTokenAsync</em> method and pass it into your <em>AbsoluteUrl</em> helper method afterwards.</li>\n  <li>In a similar way as in the <em>ConfirmUserAsync</em> method, send the URL in an email message.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<ForgotPasswordResultState>> ForgotPasswordAsync(EmailViewModel uploadModel, RequestContext requestContext)\n{\n    var accountResult = new IdentityManagerResult<ForgotPasswordResultState>();\n    MedioClinicUser user = null;\n\n    try\n    {\n        user = await UserManager.FindByEmailAsync(uploadModel.Email);\n    }\n    catch (Exception ex)\n    {\n        accountResult.ResultState = ForgotPasswordResultState.UserNotFound;\n        HandleException(nameof(ForgotPasswordAsync), ex, ref accountResult);\n\n        return accountResult;\n    }\n\n    // Registration: Confirmed registration (begin)\n    if (user == null || !(await UserManager.IsEmailConfirmedAsync(user.Id)))\n    {\n        accountResult.ResultState = ForgotPasswordResultState.EmailNotConfirmed;\n\n        return accountResult;\n    }\n    // Registration: Confirmed registration (end)\n\n    string token = null;\n\n    try\n    {\n        token = await UserManager.GeneratePasswordResetTokenAsync(user.Id);\n    }\n    catch (Exception ex)\n    {\n        accountResult.ResultState = ForgotPasswordResultState.TokenNotCreated;\n        HandleException(nameof(ForgotPasswordAsync), ex, ref accountResult);\n\n        return accountResult;\n    }\n\n    var resetUrl = new UrlHelper(requestContext).AbsoluteUrl(\n        requestContext.HttpContext.Request,\n        \"ResetPassword\",\n        \"Account\",\n        new { userId = user.Id, token });\n\n    try\n    {\n        await UserManager.SendEmailAsync(user.Id, Dependencies.LocalizationService.Localize(\"PassReset.Title\"),\n                Dependencies.LocalizationService.LocalizeFormat(\"AccountManager.ForgotPassword.Email.Body\", resetUrl));\n    }\n    catch (Exception ex)\n    {\n        accountResult.ResultState = ForgotPasswordResultState.EmailNotSent;\n        HandleException(nameof(ForgotPasswordAsync), ex, ref accountResult);\n\n        return accountResult;\n    }\n\n    accountResult.Success = true;\n    accountResult.ResultState = ForgotPasswordResultState.EmailSent;\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, in the <em>VerifyResetPasswordTokenAsync</em> method, pair up the token and forward it to the third link in the chain—the future <em>ResetPasswordAsync</em> method.</p>\n<ol>\n  <li>Create a blank <em>IdentityManagerResult</em> object, this time, with the <em>TData</em> being <em>ResetPasswordViewModel</em>.</li>\n  <li>Call user manager’s VerifyUserTokenAsync method with the token in hand.</li>\n  <li>If the call doesn’t result in an exception, set the success result states and build a <em>ResetPasswordViewModel</em> payload for your account result object.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<ResetPasswordResultState, ResetPasswordViewModel>> VerifyResetPasswordTokenAsync(int userId, string token)\n{\n    var accountResult = new IdentityManagerResult<ResetPasswordResultState, ResetPasswordViewModel>();\n    var tokenVerified = false;\n\n    try\n    {\n        tokenVerified = await UserManager.VerifyUserTokenAsync(userId, \"ResetPassword\", token);\n    }\n    catch (Exception ex)\n    {\n        var ar = accountResult as IdentityManagerResult<ResetPasswordResultState>;\n        accountResult.ResultState = ResetPasswordResultState.InvalidToken;\n        HandleException(nameof(VerifyResetPasswordTokenAsync), ex, ref ar);\n\n        return accountResult;\n    }\n\n    accountResult.Success = true;\n    accountResult.ResultState = ResetPasswordResultState.TokenVerified;\n\n    accountResult.Data = new ResetPasswordViewModel\n    {\n        UserId = userId,\n        Token = token\n    };\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finally, the <em>ResetPasswordAsync</em> method will become a reality.</p>\n<ol>\n  <li>In a good tradition of this class, create blank result objects first. Default the <em>identityResult</em> object to <em>Failed()</em>.</li>\n  <li>Try to call the eponymous <em>ResetPasswordAsync</em> method in the user manager with the user ID, the token and the password in hand.</li>\n  <li>If the execution gets around without exceptions, set the successful result states and return the result object eventually.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<ResetPasswordResultState>> ResetPasswordAsync(ResetPasswordViewModel uploadModel)\n{\n    var accountResult = new IdentityManagerResult<ResetPasswordResultState>();\n    var identityResult = IdentityResult.Failed();\n\n    try\n    {\n        identityResult = await UserManager.ResetPasswordAsync(\n            uploadModel.UserId,\n            uploadModel.Token,\n            uploadModel.PasswordConfirmationViewModel.Password);\n    }\n    catch (Exception ex)\n    {\n        accountResult.ResultState = ResetPasswordResultState.PasswordNotReset;\n        HandleException(nameof(ResetPasswordAsync), ex, ref accountResult);\n\n        return accountResult;\n    }\n\n    if (identityResult.Succeeded)\n    {\n        accountResult.Success = true;\n        accountResult.ResultState = ResetPasswordResultState.PasswordReset;\n    }\n\n    return accountResult;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"5396dc86-13b3-4842-86db-e9405a05a7b5","_parentId":"348afa80-893d-4153-a992-4b89ce8023e2","_type":"component","title":"Demo: Password reset","displayTitle":"Demo: Password reset"},{"body":"<p>Good job. Your manager class is now ready to be registered in AutoFac.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"73112ce6-a27b-4453-8852-0edb86c3f9bb","_parentId":"348afa80-893d-4153-a992-4b89ce8023e2","_type":"component","title":"Password reset: Conclusion","displayTitle":"Password reset: Conclusion"},{"body":"<p>Let's register the manager class in AutoFac.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>Open <em>MedioClinic &gt; App_Start &gt; AutofacConfig.cs</em>.</li>\n  <li>Put the depicted code into the <em>ConfigureContainer</em> method.</li>\n</ol>","code":{"src":"builder.RegisterType<AccountManager>()\n    .As<IAccountManager>()\n    .InstancePerRequest();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"27779de5-643c-489c-a0a8-e958cb3fab78","_parentId":"348afa80-893d-4153-a992-4b89ce8023e2","_type":"component","title":"Register the manager class in Autofac","displayTitle":"Register the manager class in Autofac"},{"body":"<p>Awesome job! You now have your account manager 95% ready. It already can hold up to all its promises, with just the user avatar creation remaining to be added. However, that time will come later. For now, let’s focus on the account controller and all its related UI. That’s what you’ll craft in the next page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"17ec5d0f-7e09-472f-99da-fbab523ca608","_parentId":"43dc2a7b-c714-4f34-8677-5d2f9089201e","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to apply conventional MVC 5 techniques to create registration, sign-in and other forms</li>\n  <li>How to pick the right user error messages to keep potential hackers uninformed</li>\n</ul>\n<p>You will work on the following code:</p>\n<ul>\n  <li>Base controller</li>\n  <li>Account controller</li>\n  <li>Layout</li>\n  <li>Registration Razor view</li>\n  <li>Sign-in Razor view</li>\n  <li>Forgotten password Razor view</li>\n  <li>Reset password Razor view</li>\n</ul>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ac205f14-ea35-45b8-bd74-baf88d39a937","_parentId":"2e3aea37-8f78-4d5e-89a2-3fd2a56bc422","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>Our plan is to first edit the projects global layout file so that the main menu contains one additional item. It will be a container for all account- and profile-related menu items and, it will be presented by a glyph.</p>\n<figure data-asset-id=\"fa18e5ea-173f-4057-843d-e5beb3ad1948\" data-image-id=\"fa18e5ea-173f-4057-843d-e5beb3ad1948\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/bf35b817-171d-4d5c-9bc8-563aea8e2ba2/009.png\" data-asset-id=\"fa18e5ea-173f-4057-843d-e5beb3ad1948\" data-image-id=\"fa18e5ea-173f-4057-843d-e5beb3ad1948\" alt=\"\"></figure>\n<p><br></p>\n<p>Next, you’ll create the controller. It will call either into the account manager or, into the business dependencies object to get things done. It will get result states of each of the operations and, should something go wrong, it will display error messages to the user. In the manager-controller relation, the managers’ responsibility will always be to report detailed result states to controllers. However, it will be up to the controllers to decide whether they report that level of detail to the users via views. Mostly they’ll hide these details in order not to disclose information that could be misused by malicious users.</p>\n<p>The presentation layer related to the account controller will be implemented almost entirely through ordinary Razor views. Only the user messages will appear in the form of MVC display templates that you've already created. The views will work with the <em>PageViewModel&lt;TViewModel&gt;</em> objects where <em>TViewModel</em> will be just the view models that you've already used in your account manager class.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1ad933cb-b8e9-427f-84dd-2fb0e244642e","_parentId":"d5cc6f05-5271-4c83-8fb3-bf4bb0a79b6a","_type":"component","title":"Theory: UI architecture","displayTitle":"Theory: UI architecture"},{"body":"<p>If you feel like adding the new menu items yourself, here’s the plan: In the <em>Views &gt; Shared &gt; _Layout.cshtml</em> file, you’ll find an existing example of an expandable sub-menu: the culture versions. Your job is simply to abstract from that example and apply it to the future account- and profile-related submenu.</p>\n<p>The submenu should render in two flavors. If the user is not authenticated, it should point to the registration form and the sign-in form. Otherwise, it should point to the future user profile page and the sign-out action method.</p>\n<p>You can use the <em>“fa-user-circle”</em> CSS selector to display the user glyph.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c34194e6-0698-4015-b86f-fbf686ede73d","_parentId":"b03d4a3c-d133-48e7-8682-7d2c180dfb63","_type":"component","title":"Task: Adding menu items","displayTitle":"Task: Adding menu items"},{"body":"<p>We’ll now guide you through the tasks described above.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, prepare markup that the MaterializeCSS library will use to render in the submenu.</p>\n<ol>\n  <li>In the <em>Views &gt; Shared &gt; _Layout.cshtml</em> file, locate the if-statement that evaluates whether <em>Model.Cultures</em> is <em>null</em>. As you can see, this whole code block produces a <em>&lt;ul &gt;</em> element with a <em>“dropdown-content”</em> CSS class.</li>\n  <li>Below that code block, place your own if-statement that asks about the user being authenticated.</li>\n  <li>Depending on the bool value, add two similar markup blocks. One that displays the profile page link and the sign-out link. The second one links to the registration page and the sign-in page.</li>\n</ol>","code":{"src":"(...)\n<!-- Languages structure -->\n@if (Model.Cultures != null)\n{\n    <ul id=\"langs\" class=\"dropdown-content\">\n        @foreach (var culture in Model.Cultures)\n        {\n            var currentRouteValues = new RouteValueDictionary(\n                Url.RequestContext.RouteData.Values\n                )\n            { [\"culture\"] = culture.CultureCode };\n            <li>\n                <a href=\"@Url.Action(\n                             ViewContext.RouteData.Values[\"action\"]?.ToString(),\n                             ViewContext.RouteData.Values[\"controller\"]?.ToString(),\n                                currentRouteValues)\">\n                    @culture.CultureShortName\n                </a>\n            </li>\n        }\n    </ul>\n}\n\n@if (Context.User.Identity.IsAuthenticated)\n{\n    <ul id=\"user-account\" class=\"dropdown-content\">\n        <li><a href=\"@Url.Action(\"Index\", \"Profile\")\">Profile</a></li>\n        <li><a href=\"@Url.Action(\"Signout\", \"Account\")\">Sign out</a></li>\n    </ul>\n}\nelse\n{\n    <ul id=\"user-account\" class=\"dropdown-content\">\n        <li><a href=\"@Url.Action(\"Register\", \"Account\")\">Register</a></li>\n        <li><a href=\"@Url.Action(\"Signin\", \"Account\")\">Sign in</a></li>\n    </ul>\n}\n(...)","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, add the top-level menu item that invokes the sub-menu.</p>\n<ol>\n  <li>In the <em>&lt;ul&gt;</em> element that directly follows your code block, locate the inner <em>&lt;li&gt;</em> element that renders the <em>TwoLetterISOLanguageName</em> representation of the current culture.</li>\n  <li>Place a new <em>&lt;li&gt;</em> element underneath.</li>\n  <li>In that element, point to your previously-created sub-menu items via a <em>data-target</em> HTML attribute.</li>\n</ol>","code":{"src":"(...)\n<ul class=\"right hide-on-med-and-down\">\n    @foreach (var menuItem in Model.MenuItems)\n    {\n        if (ViewContext.RouteData.Values[\"controller\"]?.ToString().Equals(menuItem.Controller, StringComparison.OrdinalIgnoreCase) ?? false)\n        {\n            <li class=\"kn-bold\">\n                <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n            </li>\n        }\n        else\n        {\n            <li>\n                <a href=\"@Url.Action(menuItem.Action, menuItem.Controller)\">@menuItem.Caption</a>\n            </li>\n        }\n    }\n    <li>\n        <a class=\"dropdown-trigger\" href=\"#\" data-target=\"langs\">\n            @Thread.CurrentThread.CurrentCulture.TwoLetterISOLanguageName\n            <i class=\"fas fa-globe-africa right\"></i>\n        </a>\n    </li>\n\n    <li>\n        <a class=\"dropdown-trigger\" href=\"#\" data-target=\"user-account\">\n            @if (Context.User.Identity.IsAuthenticated)\n            {\n                @Html.Raw(User.Identity.Name)\n            }\n            <i class=\"fas fa-user-circle right\"></i>\n        </a>\n    </li>\n</ul>\n(...)","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9e690b0f-55fe-43cd-b483-cedc53fe9e7a","_parentId":"09bfc79e-6de5-4d5d-8bc6-c63d11c4d9e2","_type":"component","title":"Demo: Adding menu items","displayTitle":"Demo: Adding menu items"},{"body":"<p>As you know, the vast majority of the account-related code of the MVC project is already implemented in the account manager class. You now also know which view models the controller will communicate through (in both directions—against the manager and the views). You’ve also learned about how the Razor layer should be done in the above theory chapter. Thus, you have all the information that gives you a good head start. All of the following implementation will require just basic MVC knowledge. So, why not implement things yourself?</p>\n<p>Again, if you don’t feel like doing so, go on to the next demo chapter.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"ad017fa3-c28d-4e6d-b270-fdf158fd6397","_parentId":"46f8570d-8357-4fbb-8dbe-494ca54ee977","_type":"component","title":"\nTask: Implementing user registration UI","displayTitle":"\nTask: Implementing user registration UI"},{"body":"<p>We’ll now guide you through the tasks described above.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, make some tweaks in the <em>BaseController</em> class. They will find lots of use in both the account controller and profile controller later.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, open the <em>BaseController</em> class file.</li>\n  <li>Update both overloads of the <em>GetPageViewModel</em> method so that it can add user message data to <em>PageViewModel</em> objects.</li>\n</ol>","code":{"src":"public PageViewModel GetPageViewModel(\n    string title, \n    string message = null, \n    bool displayAsRaw = false, \n    MessageType messageType = MessageType.Info) \n{\n    return new PageViewModel()\n    {\n        MenuItems = Dependencies.MenuRepository.GetMenuItems() ?? new List<MenuItemDto>(),\n        Metadata = GetPageMetadata(title),\n        Company = GetCompany(),\n        Cultures = Dependencies.CultureService.GetSiteCultures(),\n        SocialLinks = GetSocialLinks(),\n        UserMessage = new UserMessage\n        {\n            Message = message,\n            MessageType = messageType,\n            DisplayAsRaw = displayAsRaw\n        }\n    };\n}\n\npublic PageViewModel<TViewModel> GetPageViewModel<TViewModel>(\n    TViewModel data, \n    string title, \n    string message = null,\n    bool displayAsRaw = false,\n    MessageType messageType = MessageType.Info) \n    where TViewModel : IViewModel\n{\n    return new PageViewModel<TViewModel>()\n    {\n        MenuItems = Dependencies.MenuRepository.GetMenuItems() ?? new List<MenuItemDto>(),\n        Metadata = GetPageMetadata(title),\n        Company = GetCompany(),\n        Cultures = Dependencies.CultureService.GetSiteCultures(),\n        SocialLinks = GetSocialLinks(),\n        UserMessage = new UserMessage\n        {\n            Message = message,\n            MessageType = messageType,\n            DisplayAsRaw = displayAsRaw\n        },\n        Data = data\n    };\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<ol>\n  <li>Add the <em>Localize</em> method that simplifies usage of the eponymous method in the business dependencies wrapper.</li>\n  <li>Then, add the <em>ConcatenateContactAdmin</em> method that goes one step further and appends a “Contact the administrator” message to the end of any message.</li>\n  <li>Add the <em>InvalidInput</em> method that will shorten the execution of various action methods.</li>\n  <li>Finally, add the <em>AddErrors</em> method that enriches the <em>ModelState</em> object with various error messages.</li>\n</ol>","code":{"src":"protected string Localize(string resourceKey) =>\n    Dependencies.LocalizationService.Localize(resourceKey);\n\nprotected string ConcatenateContactAdmin(string messageKey) =>\n    Localize(messageKey)\n        + \" \"\n        + Localize(\"ContactAdministrator\");\n\nprotected ActionResult InvalidInput<TUploadViewModel>(\n    PageViewModel<TUploadViewModel> uploadModel)\n    where TUploadViewModel : IViewModel\n{\n    var viewModel = GetPageViewModel(\n        uploadModel.Data,\n        Localize(\"BasicForm.InvalidInput\"),\n        Localize(\"Controllers.Base.InvalidInput.Message\"),\n        false,\n        MessageType.Error);\n\n    return View(viewModel);\n}\n\nprotected void AddErrors<TResultState>(IdentityManagerResult<TResultState> result)\n    where TResultState : Enum\n{\n    foreach (var error in result.Errors)\n    {\n        ModelState.AddModelError(string.Empty, error);\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Add the ErrorTitle expression-bodied property to the top of the file.</p>","code":{"src":"public string ErrorTitle => Localize(\"General.Error\");","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6c0de754-5fda-4d22-9bed-89200e3573bf","_parentId":"23717e95-80d6-4d16-8cef-c9a6c49df842","_type":"component","title":"Demo: Implementing user registration UI","displayTitle":"Demo: Implementing user registration UI"},{"body":"<p>Good. You’re done with the base controller. Let’s do the account controller itself.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, create the sub of the controller class, together with some common code.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, create a new <em>“AccountController”</em> class file.</li>\n  <li>Inherit from <em>BaseController</em>.</li>\n  <li>Right from the start, decorate the whole class with an <em>OutputCacheAttribute</em> that tells MVC not to cache any of the <em>ActionResult</em> output of the controller.</li>\n  <li>Add the <em>EmailConfirmedRegistration</em> property that tells the application how to handle user registration. Apart from this hard-coded way, you may also consider taking the value from environment variables (app settings in <em>web.config</em>, Azure environment variables, etc.).</li>\n  <li>Add the account manager as the only dependency.</li>\n  <li>Finally, populate that dependency through a constructor, while also passing around the business dependencies to the base controller.</li>\n</ol>","code":{"src":"// In production, use [RequireHttps].\n[OutputCache(VaryByParam = \"*\", Duration = 0, NoStore = true)]\npublic class AccountController : BaseController\n{\n    public bool EmailConfirmedRegistration => true;\n\n    public IAccountManager AccountManager { get; set; }\n\n    public AccountController(\n        IAccountManager accountManager,\n        IBusinessDependencies dependencies)\n        : base(dependencies)\n    {\n        AccountManager = accountManager ?? throw new ArgumentNullException(nameof(accountManager));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, add <em>GET</em> and <em>POST</em> variants of the <em>Register</em> method.</p>\n<ol>\n  <li>In the <em>GET</em> variant, only populate the view model by calling <em>GetPageViewModel()</em>.</li>\n  <li>Return a conventional (not an explicit) view and pass i the returned model.</li>\n  <li>In the <em>POST</em> variant, take <em>PageViewModel&lt;RegisterViewModel&gt;</em> as an upload model (i.e. as input). Don’t forget to mark the method so that MVC can distinguish between GET and POST variants. Also, validate the anti-forgery tokens.</li>\n  <li>In the body of the method, validate the upload model and call the <em>RegisterAsync</em> method of your manager.</li>\n  <li>Should either the user validator or password validator in your Identity-based user manager refuse the input, your account manager will return an appropriate result state. Handle it by adding <em>ModelState</em> errors and returning <em>InvalidInput()</em>.</li>\n  <li>Default the page title and user message data to a failure-like state, with the option of re-setting them in code that follows.</li>\n  <li>Based on whether you do direct or double opt-in registrations, handle the success states with proper messaging.</li>\n  <li>Finalize the successful branch of execution by producing a view model and rendering the <em>UserMessage</em> view.</li>\n</ol>","code":{"src":"public ActionResult Register()\n{\n    var model = GetPageViewModel(new RegisterViewModel(), Localize(\"Controllers.Account.Register.Title\"));\n\n    return View(model);\n}\n\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> Register(PageViewModel<RegisterViewModel> uploadModel)\n{\n    if (ModelState.IsValid)\n    {\n        var accountResult = await AccountManager.RegisterAsync(uploadModel.Data, EmailConfirmedRegistration, Request.RequestContext);\n\n        if (accountResult.ResultState == RegisterResultState.InvalidInput)\n        {\n            AddErrors(accountResult);\n\n            return InvalidInput(uploadModel);\n        }\n\n        string title = ErrorTitle;\n        var message = ConcatenateContactAdmin(\"Controllers.Account.Register.Failure.Message\");\n        var messageType = MessageType.Error;\n\n        if (EmailConfirmedRegistration)\n        {\n            if (accountResult.ResultState == RegisterResultState.EmailSent)\n            {\n                title = Localize(\"Controllers.Account.Register.ConfirmedSuccess.Title\");\n                message = Localize(\"Controllers.Account.Register.ConfirmedSuccess.Message\");\n                messageType = MessageType.Info;\n            }\n        }\n        else if (accountResult.Success)\n        {\n            title = Localize(\"Controllers.Account.Register.DirectSuccess.Title\");\n            message = Localize(\"Controllers.Account.Register.DirectSuccess.Message\");\n            messageType = MessageType.Info;\n        }\n\n        var messageViewModel = GetPageViewModel(title, message, false, messageType);\n\n        return View(\"UserMessage\", messageViewModel);\n    }\n\n    return InvalidInput(uploadModel);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Next, give your controller a <em>ConfirmUser</em> action method that catches clicks that originate in registration confirmation email messages.</p>\n<ol>\n  <li>First, default the page title and user message data to the failure-like state.</li>\n  <li>Get the result state of the <em>ConfirmUserAsync</em> method of our account manager.</li>\n  <li>Depending on the state, adjust the user message data accordingly.</li>\n  <li>Eventually return the <em>UserMessage</em> view.</li>\n</ol>","code":{"src":"public async Task<ActionResult> ConfirmUser(int? userId, string token)\n{\n    var title = ErrorTitle;\n    var message = ConcatenateContactAdmin(\"Error.Message\");\n    var displayAsRaw = false;\n    var messageType = MessageType.Error;\n\n    if (userId.HasValue)\n    {\n        var accountResult = await AccountManager.ConfirmUserAsync(userId.Value, token, Request.RequestContext);\n\n        switch (accountResult.ResultState)\n        {\n            case ConfirmUserResultState.EmailNotConfirmed:\n                message = Localize(\"Controllers.Account.ConfirmUser.ConfirmationFailure.Message\");\n                break;\n            case ConfirmUserResultState.UserConfirmed:\n                title = Localize(\"Controllers.Account.ConfirmUser.Success.Title\");\n                message = Dependencies.LocalizationService.LocalizeFormat(\"Controllers.Account.ConfirmUser.Success.Message\", Url.Action(\"SignIn\"));\n                displayAsRaw = true;\n                messageType = MessageType.Info;\n                break;\n        }\n    }\n\n    return View(\"UserMessage\", GetPageViewModel(title, message, displayAsRaw, messageType));\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"e22feb29-086e-4c02-8e57-8a3b12000aca","_parentId":"23717e95-80d6-4d16-8cef-c9a6c49df842","_type":"component","title":"Add the account-controller","displayTitle":"Add the account-controller"},{"body":"<p>Let’s pause the work on the account controller for a second and create the views.</p>\n<p>Before you continue, download the <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Content/Images/register-signin.jpg\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">register-signin.jpg</a> file from GitHub to your <em>MedioClinic &gt; Content &gt; Images</em> folder. Alternatively, you can find it in the <em>MedioClinicStaticAssets.zip</em> file in your root folder.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Start with the registration form.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views</em>, create a new <em>“Account”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>“Register.cshtml”</em> Razor file.</li>\n  <li>Make the view strongly-typed against <em>PageViewModel&lt;RegisterViewModel&gt;</em>.</li>\n  <li>Add ordinary form markup: an <em>Html.BeginForm()</em> call wrapped in a using-statement.</li>\n  <li>Put an anti-forgery token into the form.</li>\n  <li>Let the user message display templates be rendered through <em>Html.DisplayFor()</em>.</li>\n  <li>Add all the necessary markup to render the view model data, as seen in the snippet.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.Account\n\n@model MedioClinic.Models.PageViewModel<RegisterViewModel>\n\n@using (Html.BeginForm())\n{\n    @Html.AntiForgeryToken()\n    <div class=\"container\">\n        <div class=\"row\">\n            <h4>Register</h4>\n            @Html.DisplayFor(m => m.UserMessage)\n        </div>\n        <div class=\"row section\">\n            <div class=\"col l6 m12 s12\">\n                <p>\n                    <a href=\"@Url.Action(\"Signin\", \"Account\")\" class=\"kn-smaller\">Already registered?</a>\n                    @* TODO: Style error messages *@\n                    @Html.ValidationSummary()\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @*TODO: Custom HTML helper*@\n                            @Html.TextBoxFor(m => m.Data.FirstName, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.FirstName) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @Html.TextBoxFor(m => m.Data.LastName, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.LastName) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @Html.TextBoxFor(m => m.Data.EmailViewModel.Email, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.EmailViewModel.Email) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @Html.PasswordFor(m => m.Data.PasswordConfirmationViewModel.Password, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.PasswordConfirmationViewModel.Password) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @Html.PasswordFor(m => m.Data.PasswordConfirmationViewModel.ConfirmPassword, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.PasswordConfirmationViewModel.ConfirmPassword) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div>\n                            <button class=\"btn waves-effect waves-light red darken-3\" type=\"submit\">Create my account</button>\n                        </div>\n                    </div>\n                </p>\n            </div>\n            <div class=\"col l6 m12 s12\">\n                <img class=\"responsive-img kn-img-margin\" src=\"@Url.Content(\"~/Content/Images/register-signin.jpg\")\">\n            </div>\n        </div>\n    </div>\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"cbbe3f39-cfbc-487b-9c29-9749b72d1983","_parentId":"23717e95-80d6-4d16-8cef-c9a6c49df842","_type":"component","title":"Add account-related views","displayTitle":"Add account-related views"},{"body":"<p>Before you can do your first testing, you should create your roles in Kentico. It is important that you create your roles with codenames that match the string identifiers of the Business.Identity.Models.Roles values (“Patient”, “Doctor”).</p>\n<figure data-asset-id=\"709d1b9c-a7dc-495d-b587-28d96d91f891\" data-image-id=\"709d1b9c-a7dc-495d-b587-28d96d91f891\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/1fa41c62-791e-4ca5-98c9-fe7ba5aeb030/015.png\" data-asset-id=\"709d1b9c-a7dc-495d-b587-28d96d91f891\" data-image-id=\"709d1b9c-a7dc-495d-b587-28d96d91f891\" alt=\"\"></figure>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"10181128-45ca-448c-832c-53aefa2ebdd3","_parentId":"ceae7a39-11d9-45b3-9106-f21c40b5cbdf","_type":"component","title":"Create roles in Kentico administration","displayTitle":"Create roles in Kentico administration"},{"body":"<p>Congratulations! You've reached a point where all your efforts came to a testable result. You can go ahead and test it out.</p>\n<figure data-asset-id=\"8d6fcfa5-9da0-42b3-bac4-4abafb1ea73c\" data-image-id=\"8d6fcfa5-9da0-42b3-bac4-4abafb1ea73c\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/acd4626d-609e-4910-93e9-e70ade7c6cfa/009.png\" data-asset-id=\"8d6fcfa5-9da0-42b3-bac4-4abafb1ea73c\" data-image-id=\"8d6fcfa5-9da0-42b3-bac4-4abafb1ea73c\" alt=\"\"></figure>\n<figure data-asset-id=\"dcd43d5a-fbc4-414e-8177-3f5da569e613\" data-image-id=\"dcd43d5a-fbc4-414e-8177-3f5da569e613\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/ebf37d3c-0465-4287-8534-0ba3cfdb6bb9/010.png\" data-asset-id=\"dcd43d5a-fbc4-414e-8177-3f5da569e613\" data-image-id=\"dcd43d5a-fbc4-414e-8177-3f5da569e613\" alt=\"\"></figure>\n<figure data-asset-id=\"bd0cb3b5-7722-40c3-9bed-e3b54cd48ef8\" data-image-id=\"bd0cb3b5-7722-40c3-9bed-e3b54cd48ef8\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/a5a63da5-bd63-4b62-8d88-84adf419e67c/011.png\" data-asset-id=\"bd0cb3b5-7722-40c3-9bed-e3b54cd48ef8\" data-image-id=\"bd0cb3b5-7722-40c3-9bed-e3b54cd48ef8\" alt=\"\"></figure>\n<div class=\"infobox warning\"><p>Please note that in order for your registration email message to be sent, you need to have an SMTP server configured for your site in Kentico. You also need to load a few pages in the administration UI to trigger the scheduled task that sends out queued emails. This is especially needed if your administration UI runs in a different application pool.&nbsp;</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"c9b21cc1-164a-4a42-8594-062ceb03bcaa","_parentId":"ceae7a39-11d9-45b3-9106-f21c40b5cbdf","_type":"component","title":"Display the new view","displayTitle":"Display the new view"},{"body":"<p>Once you’re done with the testing, you can finish your work on the sign-in/sign-out scenario. Let’s get back to your account controller for a moment.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Before you go on, implement two helper methods—RedirectToLocal and InvalidAttempt.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers &gt; AccountController</em>, add the <em>two methods according to the code snippet</em>.</li>\n  <li>The first one redirects either to a verified local URL or to the home page.</li>\n  <li>The second one shortens execution for <em>ModelState</em> error handling.</li>\n</ol>","code":{"src":"protected ActionResult RedirectToLocal(string returnUrl)\n{\n    if (!string.IsNullOrEmpty(returnUrl) && Url.IsLocalUrl(returnUrl))\n    {\n        return Redirect(returnUrl);\n    }\n\n    return RedirectToAction(\"Index\", \"Home\");\n}\n\nprotected ActionResult InvalidAttempt(PageViewModel<SignInViewModel> uploadModel)\n{\n    ModelState.AddModelError(string.Empty, Localize(\"Controllers.Account.InvalidAttempt\"));\n\n    return View(GetPageViewModel(uploadModel.Data, Localize(\"LogonForm.LogonButton\")));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now carry on with your <em>SignIn</em> method. As with the <em>Register</em> method, your new <em>SignIn</em> method will also exist in two occurrences.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers &gt; AccountController</em>, add the <em>GET</em> variant of your new <em>“SignIn”</em> method.</li>\n  <li>In this method, just return a view with an empty view model.</li>\n  <li>In the <em>POST</em> variant, first get the result state of the <em>SignInAsync</em> method call.</li>\n  <li>Now, here comes the interesting part. Watch out for malicious users trying to figure out which user names exist. In this method, all possible erroneous states should result in a generic user message.</li>\n</ol>","code":{"src":"public ActionResult SignIn()\n{\n    return View(GetPageViewModel(new SignInViewModel(), Localize(\"LogonForm.LogonButton\")));\n}\n\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> SignIn(PageViewModel<SignInViewModel> uploadModel, string returnUrl)\n{\n    if (ModelState.IsValid)\n    {\n        var accountResult = await AccountManager.SignInAsync(uploadModel.Data);\n\n        switch (accountResult.ResultState)\n        {\n            case SignInResultState.UserNotFound:\n            case SignInResultState.EmailNotConfirmed:\n            case SignInResultState.NotSignedIn:\n            default:\n                return InvalidAttempt(uploadModel);\n            case SignInResultState.SignedIn:\n                return RedirectToLocal(Server.UrlDecode(returnUrl));\n        }\n    }\n\n    return InvalidAttempt(uploadModel);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>It’s about time to create the <em>SignOut</em> method.</p>\n<ol>\n  <li>First, mark this method with the stock <em>AuthorizeAttribute</em> instance. This method should never be called by anonymous users. By adding this, you can potentially lower the attack surface of your app. Note that you don’t need your custom <em>MedioClinicAuthorizeAttribute</em> here as you don’t specify roles at all.</li>\n  <li>In the body of the method, call the synchronous <em>SignOut</em> method of your account manager.</li>\n  <li>In our design, a successful sign-out procedure results in the user being redirected to the home page. You could certainly come up with other means of reacting to sign-out.</li>\n  <li>Handle failures with a <em>UserMessage</em> view.</li>\n</ol>","code":{"src":"[Authorize]\npublic ActionResult SignOut()\n{\n    var accountResult = AccountManager.SignOut();\n\n    if (accountResult.Success)\n    {\n        return RedirectToAction(\"Index\", \"Home\");\n    }\n\n    var message = ConcatenateContactAdmin(\"Controllers.Account.SignOut.Failure.Message\");\n\n    return View(\"UserMessage\", GetPageViewModel(Localize(\"General.Error\"), message, messageType: MessageType.Error));\n}\n","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, complement your <em>SignIn</em> methods with a view.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Account</em>, create a new <em>“SignIn.cshtml”</em> Razor file.</li>\n  <li>Carry on just like with the <em>Register.cshtml</em> view.</li>\n  <li>Note that in the <em>Html.BeginForm()</em> call, you explicitly forward the query string <em>ReturnUrl</em> value to your <em>RouteData</em> collection.</li>\n</ol>","code":{"src":"@using MedioClinic.Models.Account\n\n@model MedioClinic.Models.PageViewModel<SignInViewModel>\n\n@using (Html.BeginForm(new { ReturnUrl = Request.QueryString[\"ReturnUrl\"] }))\n{\n    @Html.AntiForgeryToken()\n    <div class=\"container\">\n        <div class=\"row section\">\n            <h4>@Html.Localize(\"Views.Account.Signin.Heading\")</h4>\n        </div>\n        <div class=\"row section\">\n            <div class=\"col l6 m12 s12\">\n                @Html.ValidationSummary()\n                <p>\n                    <a href=\"@Url.Action(\"Register\", \"Account\")\" class=\"kn-smaller\">@Html.Localize(\"Views.Account.RegisterNow\")</a>\n                    <div class=\"col s12\">\n                        <div class=\"row kn-row-margin\">\n                            <div class=\"input-field col s10\">\n                                @Html.TextBoxFor(m => m.Data.EmailViewModel.Email, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.EmailViewModel.Email) })\n                                <p><small>(Note: If you changed your email address in your profile page, you should still use the original one.)</small></p>\n                            </div>\n                        </div>\n                        <div class=\"row kn-row-margin\">\n                            <div class=\"input-field col s10\">\n                                @Html.PasswordFor(m => m.Data.PasswordViewModel.Password, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.PasswordViewModel.Password) })\n                            </div>\n                        </div>\n                        <div class=\"row kn-row-margin\">\n                            <div class=\"input-field col s10\">\n                                @Html.CheckBoxFor(m => m.Data.StaySignedIn)\n                                @Html.LabelFor(m => m.Data.StaySignedIn)\n                            </div>\n                        </div>\n                        <div class=\"row kn-row-margin\">\n                            <div>\n                                <button class=\"btn waves-effect waves-light red darken-3\" type=\"submit\">@Html.Localize(\"General.Continue\")</button>\n                            </div>\n                        </div>\n                    </div>\n                    <a href=\"@Url.Action(\"ForgotPassword\", \"Account\")\" class=\"kn-smaller\">@Html.Localize(\"Views.Account.DontRememberPassword\")</a>\n                </p>\n            </div>\n            <div class=\"col l6 m12 s12\">\n                <img class=\"responsive-img kn-img-margin\" src=\"@Url.Content(\"~/Content/Images/register-signin.jpg\")\">\n            </div>\n        </div>\n    </div>\n}","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b12d910a-8c95-46fc-98f9-edf4f0faf85d","_parentId":"e4dbc4cb-4521-4d61-8bfe-6c8c9aa7d316","_type":"component","title":"Create an account controller","displayTitle":"Create an account controller"},{"body":"<p>Great job! You can now give your sign-in and sign-out functionality a test ride.</p>\n<figure data-asset-id=\"c7b772b6-65af-4d1c-bd06-4b6463fd8534\" data-image-id=\"c7b772b6-65af-4d1c-bd06-4b6463fd8534\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/503c3276-3b76-4fec-a5ab-d8ebebbba5bc/012.png\" data-asset-id=\"c7b772b6-65af-4d1c-bd06-4b6463fd8534\" data-image-id=\"c7b772b6-65af-4d1c-bd06-4b6463fd8534\" alt=\"\"></figure>\n<p><br></p>\n<p>When you’re done, you can move on to the password reset UI.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"0301b38e-a170-4b8c-bde6-ae258a9649d3","_parentId":"e4dbc4cb-4521-4d61-8bfe-6c8c9aa7d316","_type":"component","title":"Test the new sing-in/out functionality","displayTitle":"Test the new sing-in/out functionality"},{"body":"<p>In this part of the demo, we will add UI for resetting password.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>In the first step, you’ll create the <em>ForgotPassword</em> action method.</p>\n<ol>\n  <li>Back in <em>MedioClinic &gt; Controllers &gt; AccountController</em>, create a new <em>“ForgotPassword”</em> action method.</li>\n  <li>Mark it with [HttpPost].</li>\n  <li>Get the result states from the ForgotPasswordAsync method of your user manager.</li>\n  <li>To prevent enumeration attacks, all the states should be treated equally. Thus, you can use a C# 7.0 feature to immediately discard the reference to the result state.</li>\n</ol>","code":{"src":"protected ActionResult CheckEmailResetPassword()\n{\n    var title = Localize(\"Controllers.Account.CheckEmailResetPassword.Title\");\n    var message = Localize(\"Controllers.Account.CheckEmailResetPassword.Message\");\n\n    return View(\"UserMessage\", GetPageViewModel(title, message, messageType: MessageType.Info));\n}\n\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> ForgotPassword(PageViewModel<EmailViewModel> uploadModel)\n{\n    if (ModelState.IsValid)\n    {\n        // All of the result states should be treated equal (to prevent enumeration attacks), hence discarding the result entirely.\n        _ = await AccountManager.ForgotPasswordAsync(uploadModel.Data, Request.RequestContext);\n\n        return CheckEmailResetPassword();\n    }\n\n    return View(GetPageViewModel(uploadModel.Data, Localize(\"PassReset.Title\")));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Now, add the <em>ResetPassword</em> method duo.</p>\n<ol>\n  <li>The <em>GET</em> variant takes the user’s ID and the security token from the emailed URL.</li>\n  <li>Then it calls its counterpart method in the manager and forwards the query string data to it.</li>\n  <li>As this method will always be invoked from within he user’s own inbox, we can distinguish between the successful and unsuccessful states with appropriate user messages.</li>\n  <li>As you may recall from the account manager’s code, the purpose of the <em>POST</em> method variant is just to take two occurrences of the new password.</li>\n  <li>Note that in this method, you can also safely distinguish between the successful result and others.</li>\n</ol>","code":{"src":"public async Task<ActionResult> ResetPassword(int? userId, string token)\n{\n    var message = ConcatenateContactAdmin(\"Controllers.Account.ResetPassword.Failure.Message\");\n\n    if (userId.HasValue && !string.IsNullOrEmpty(token))\n    {\n        var accountResult = await AccountManager.VerifyResetPasswordTokenAsync(userId.Value, token);\n\n        if (accountResult.Success)\n        {\n            return View(GetPageViewModel(accountResult.Data, Localize(\"PassReset.Title\")));\n        }\n        else\n        {\n            message = ConcatenateContactAdmin(\"Controllers.Account.InvalidToken.Message\");\n        }\n    }\n\n    return View(\"UserMessage\", GetPageViewModel(Localize(\"General.Error\"), message, messageType: MessageType.Error));\n}\n\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> ResetPassword(PageViewModel<ResetPasswordViewModel> uploadModel)\n{\n   var message = ConcatenateContactAdmin(\"Error.Message\");\n   var messageType = MessageType.Error;\n\n   if (ModelState.IsValid)\n   {\n       var accountResult = await AccountManager.ResetPasswordAsync(uploadModel.Data);\n\n       if (accountResult.Success)\n       {\n           message = Dependencies.LocalizationService.LocalizeFormat(\"Controllers.Account.ResetPassword.Success.Message\", Url.Action(\"Signin\"));\n           messageType = MessageType.Info;\n       }\n   }\n\n   return View(GetPageViewModel(uploadModel.Data, Localize(\"PassReset.Title\"), message, messageType: messageType));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You’re now one step closer to having your account-related UI ready. Create the <em>ForgotPassword.cshtml</em> view according to the code snippet. Place it into the <em>MedioClinic &gt; Views &gt; Account</em> folder.</p>","code":{"src":"@using MedioClinic.Models.Account\n\n@model MedioClinic.Models.PageViewModel<EmailViewModel>\n\n@using (Html.BeginForm())\n{\n    @Html.AntiForgeryToken()\n    <div class=\"container\">\n        <div class=\"row\">\n            <h4>Reset password</h4>\n        </div>\n        <div class=\"row section\">\n            <div class=\"col l6 m12 s12\">\n                <p>\n                    <a href=\"@Url.Action(\"Register\", \"Account\")\" class=\"kn-smaller\">@Html.Localize(\"Views.Account.RegisterNow\")</a>\n                    <div class=\"col s12\">\n                        <div class=\"row kn-row-margin\">\n                            <div class=\"input-field col s6\">\n                                @Html.TextBoxFor(m => m.Data.Email, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.Email) })\n                            </div>\n                        </div>\n                        <div class=\"row kn-row-margin\">\n                            <div>\n                                <button class=\"btn waves-effect waves-light red darken-3\" type=\"submit\" name=\"action\">@Html.Localize(\"PassReset.Title\")</button>\n                            </div>\n                        </div>\n                    </div>\n                    <a href=\"@Url.Action(\"Signin\", \"Account\")\" class=\"kn-smaller\">@Html.Localize(\"Views.Account.ForgotPassword.AlreadyMember\")</a>\n                </p>\n\n            </div>\n            <div class=\"col l6 m12 s12\">\n                <img class=\"responsive-img kn-img-margin\" src=\"@Url.Content(\"~/Content/Images/register-signin.jpg\")\">\n            </div>\n        </div>\n    </div>\n}","lang":"html"},"strapline":""},{"title":"","body":"<p>Create the <em>ResetPassword.cshtml</em> view according to the code snippet. Place it into the <em>MedioClinic &gt; Views &gt; Account</em> folder.</p>","code":{"src":"@using MedioClinic.Models.Account\n\n@model MedioClinic.Models.PageViewModel<ResetPasswordViewModel>\n\n@using (Html.BeginForm())\n{\n    @Html.AntiForgeryToken()\n    <div class=\"container\">\n        <div class=\"row\">\n            <h4>@Html.Localize(\"PassReset.Title\")</h4>\n            @Html.DisplayFor(m => m.UserMessage)\n        </div>\n        <div class=\"row section\">\n            <div class=\"col l6 m12 s12\">\n                <p>\n                    @* TODO: Style error messages *@\n                    @Html.ValidationSummary()\n                    @Html.HiddenFor(m => m.Data.UserId)\n                    @Html.HiddenFor(m => m.Data.Token)\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @Html.PasswordFor(m => m.Data.PasswordConfirmationViewModel.Password, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.PasswordConfirmationViewModel.Password) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div class=\"input-field col s10\">\n                            @Html.PasswordFor(m => m.Data.PasswordConfirmationViewModel.ConfirmPassword, new { @class = \"validate\", placeholder = Html.DisplayNameFor(m => m.Data.PasswordConfirmationViewModel.ConfirmPassword) })\n                        </div>\n                    </div>\n                    <div class=\"row kn-row-margin\">\n                        <div>\n                            <button class=\"btn waves-effect waves-light red darken-3\" type=\"submit\">@Html.Localize(\"PassReset.Title\")</button>\n                        </div>\n                    </div>\n                </p>\n            </div>\n            <div class=\"col l6 m12 s12\">\n                <img class=\"responsive-img kn-img-margin\" src=\"@Url.Content(\"~/Content/Images/register-signin.jpg\")\">\n            </div>\n        </div>\n\n    </div>\n}","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"68ab5ccf-d2e7-43be-a4bd-4b10fa7e6f15","_parentId":"ef6ef5da-1849-4e67-86a5-c57015975d1e","_type":"component","title":"Add UI for resetting user password","displayTitle":"Add UI for resetting user password"},{"body":"<p>If you’ve got this far, you certainly deserve a tasty treat for all the work you’ve done. Your website visitors can not only register online, sign in and out, but they can also reset their passwords with ease.</p>\n<p>You can now test it all out and consider your account-related scenarios finished.</p>\n<p>In the next page, you’ll start implementing secured user profile pages.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9e2a9123-6419-4a4e-aeb7-e15154e32dc6","_parentId":"abcaf524-142c-45ab-87a9-101fa343fc38","_type":"component","title":"\nConclusion","displayTitle":"\nConclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How MVC model binding works and why you need to care</li>\n  <li>How to make MVC supply view models based on user roles</li>\n  <li>How to compose view models</li>\n  <li>How to prepare building blocks for a country selector alternative in MVC</li>\n  <li>Which result states your future profile manager will return</li>\n</ul>\n<p>You will work on the following code:</p>\n<ul>\n  <li>Common user view model</li>\n  <li>IUserViewModel</li>\n  <li>Doctor view model</li>\n  <li>Patient view model</li>\n  <li>User view model binder</li>\n  <li>Model binding config</li>\n  <li>Global.asax.cs</li>\n  <li>Country DTO</li>\n  <li>Country service</li>\n  <li>Profile manager result states</li>\n</ul>\n<div class=\"infobox warning\"><p>This course module lacks guidance as to how you go about integrating data protection consents in your site. As the consent management functionality is tightly related to contact tracking, a core part of the on-line marketing functionality, we will provide you with such guidance in the Kentico MVC for Developers—On-line marketing course module which we will build in the future.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"e570f9ae-b618-4fff-8baf-36c6114085bb","_parentId":"fc680b1b-20fc-41a5-9532-41a6a2198e31","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>Despite the profile page in this course displaying the same information for both patients and doctors, we designed it to support different sets of information for the said roles. With a little more care, it could be extended to additional user roles, not just patients and doctors.</p>\n<p>Let’s again take a moment to get acquainted with the overall architecture of the profile section. We’ll explain the important part in two schemes. For GET requests and POST ones respectively. In both workflows, you’ll need to employ mechanisms that display/save data appropriate for a given user role. As a small refresher, let’s remind ourselves that by default, each new registered user is given the role of a patient. Doctors are meant to be given their roles by site administrators, in the administration UI. The doctors are supposed to have access to both the registered section of the MVC site and the administration UI. The doctors’ profile page is designed to become a convenient dashboard where doctors could work with appointments and patient data in the future.</p>\n<h3>Getting the user profile</h3>\n<p>To display the right profile data, you need to determine the highest role in the user’s role set. Based on that, you let your user model service create the right view model. Then, you simply let the MVC templating engine play its part and render one of the editor templates that you prepare beforehand.</p>\n<figure data-asset-id=\"b8242992-69ea-4530-bcc8-1171cb07d0b0\" data-image-id=\"b8242992-69ea-4530-bcc8-1171cb07d0b0\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/9ca89d0e-cd54-42c0-bed2-fe8aef06054b/013.png\" data-asset-id=\"b8242992-69ea-4530-bcc8-1171cb07d0b0\" data-image-id=\"b8242992-69ea-4530-bcc8-1171cb07d0b0\" alt=\"\"></figure>\n<h3>Saving the user profile</h3>\n<p>In the opposite direction—when saving—the process becomes a bit more complicated. The main hurdle stems from how MVC passes query string data and form data to your controller action methods as arguments. As you probably know, the whole freight infrastructure is called model binding. You also know that the <em>MedioClinicUser</em> class was designed to become an encompassing container for data of users of any role. Only the specific per-role view models will carry the select portion that’s specific to the role in question. Finally, you need to realize that thanks to the utilization of MVC editor templates, the POST requests of all user roles will be routed to the same <em>{culture}/profile </em>endpoint.</p>\n<p>In light of the above trinity of information you need to make sure your action method always obtains an upload view model of the right runtime type. You may wonder what could ever get tricky with that. You simply create a patient view model, a doctor view model, and you’ll make them either inherit from a common base class or implement a common interface. How could it ever fail to work? Well, the tricky part lies exactly in the point of creation of the view model. Because when an incoming POST request occurs, MVC does not know whether the preceding GET request served a patient profile or a doctor profile. There is no concept of view state in MVC. MVC is stateless.</p>\n<p>Even with the stateless nature of MVC, at the end of the day its model binder still needs to factor a specific view model object. If you were to connect all your per-role view models with a common interface, MVC cannot do anything like this:</p>\n<pre><code class=\"language-csharp\">new IUserViewModel();</code></pre>\n<p><br></p>\n<p>Even the other way around—inheriting from a common base model class—would not yield any useful result:</p>\n<pre><code class=\"language-csharp\">new BaseModelClassForAllRoles();</code></pre>\n<p>How do you get around that? You need a small custom model binder. It will determine the identity of the current user, get their highest role, build a new blank view model object of the right type, and let MVC do all the dirty work of populating the model for you. Your action method will then get the right runtime object as you expect.</p>\n<figure data-asset-id=\"b590ed42-9451-4159-bfda-8b83a12bf73e\" data-image-id=\"b590ed42-9451-4159-bfda-8b83a12bf73e\"><img src=\"https://assets-eu-01.kc-usercontent.com:443/63117da1-007f-01dd-86eb-23e8353ac375/64a1e991-0777-4ea8-a744-b206a92cf282/014.png\" data-asset-id=\"b590ed42-9451-4159-bfda-8b83a12bf73e\" data-image-id=\"b590ed42-9451-4159-bfda-8b83a12bf73e\" alt=\"\"></figure>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"c3c3aedc-8931-4c31-8706-632aa8b7e37b","_parentId":"062cb175-f4f2-4868-88db-1262e4ed1e88","_type":"component","title":"Theory: Profile data management","displayTitle":"Theory: Profile data management"},{"body":"<p>So, you now got your head around the technical challenges. Let’s break the solution apart into the right set of steps.</p>\n<p>First, you’ll dissect your view models into what’s common to all roles and what’s specific to each of them. You’ll then compose the per-role view models out of a common user view model and any potential per-role properties.</p>\n<p>Then, you’ll implement your custom model binder as per the requirements outlined above.</p>\n<p>Once you’re done with it, you’ll make sure it’s invoked only when it’s needed by the MVC runtime.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"56df778c-cb37-47c5-868a-da3f0f83be05","_parentId":"ad0cd887-2607-4c1c-bcde-e453f3b55c9e","_type":"component","title":"\nProfile management: Course of further development","displayTitle":"\nProfile management: Course of further development"},{"body":"<p>In this part, you’ll first create a common interface for all your future user view models. You’ll also create the common view model. Then, you’ll include it into your other view models.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create the interface.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models</em>, create a new <em>“Profile” </em>subfolder.</li>\n  <li>In that subfolder, create a new <em>“IUserViewModel”</em> interface file.</li>\n  <li>To meet the requirements of the <em>GetPageViewModel</em> method, inherit from <em>IViewModel</em>.</li>\n  <li>Define one property of a future <em>CommonUserViewModel</em> type.</li>\n</ol>","code":{"src":"/// <summary>\n/// Common interface of view models of users of various roles.\n/// </summary>\npublic interface IUserViewModel : IViewModel\n{\n    /// <summary>\n    /// Data that's common to users of all roles.\n    /// </summary>\n    CommonUserViewModel CommonUserViewModel { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the <em>CommonUserViewModel</em> type.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Profile</em>, create a new <em>“CommonUserViewModel” </em>class file.</li>\n  <li>Add properties according to the code snippet.</li>\n  <li>Note the usage of resource string keys in place of human-readable texts in <em>DataAnnotation</em> attributes (thanks to calling the <em>UseDataAnnotationsLocalization</em> Kentico method during the application’s startup).</li>\n</ol>","code":{"src":"public class CommonUserViewModel\n{\n    [Display(Name = \"Models.Profile.CommonUserViewModel.Id\")]\n    public int Id { get; set; }\n\n    [Required]\n    [Display(Name = \"Models.Profile.CommonUserViewModel.FirstName\")]\n    [MaxLength(100, ErrorMessage = \"Models.MaxLength\")]\n    public string FirstName { get; set; }\n\n    [Required]\n    [Display(Name = \"Models.Profile.CommonUserViewModel.LastName\")]\n    [MaxLength(100, ErrorMessage = \"Models.MaxLength\")]\n    public string LastName { get; set; }\n\n    [Display(Name = \"Models.Profile.CommonUserViewModel.FullName\")]\n    public string FullName => $\"{FirstName} {LastName}\";\n\n    [Display(Name = \"Models.Profile.CommonUserViewModel.DateOfBirth\")]\n    [DataType(DataType.Date)]\n    [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = \"{0:yyyy-MM-dd}\")]\n    public DateTime DateOfBirth { get; set; }\n\n    public Gender Gender { get; set; }\n\n    [Display(Name = \"Models.Profile.CommonUserViewModel.City\")]\n    public string City { get; set; }\n\n    [Display(Name = \"Models.Profile.CommonUserViewModel.Street\")]\n    public string Street { get; set; }\n\n    public EmailViewModel EmailViewModel { get; set; }\n\n    [DataType(DataType.PhoneNumber)]\n    [Phone(ErrorMessage = \"Models.PhoneFormat\")]\n    public string Phone { get; set; }\n\n    [Display(Name = \"Models.Profile.CommonUserViewModel.Nationality\")]\n    public string Nationality { get; set; }\n\n    [HiddenInput]\n    public string AvatarContentPath { get; set; }\n\n    [Display(Name = \"Models.Profile.CommonUserViewModel.AvatarFile\")]\n    [DataType(DataType.Upload)]\n    [HttpPostedFileExtensions(ErrorMessage = \"Models.AllowedExtensions\")]\n    public HttpPostedFileBase AvatarFile { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the view model for all patients.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Profile</em>, create a new <em>“PatientViewModel” </em>class file.</li>\n  <li>Add the <em>CommonUserViewModel</em> property.</li>\n  <li>In the future, you will be able to put additional patient-only properties into this model class.</li>\n</ol>","code":{"src":"public class PatientViewModel : IUserViewModel\n{\n    public CommonUserViewModel CommonUserViewModel { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the view model for all doctors.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Profile</em>, create a new <em>“DoctorViewModel” </em>class file.</li>\n  <li>In the same fashion as before, add the <em>CommonUserViewModel</em> property.</li>\n  <li>In the future, you will be able to put additional doctor-only properties into this model class.</li>\n</ol>","code":{"src":"public class DoctorViewModel : IUserViewModel\n{\n    public CommonUserViewModel CommonUserViewModel { get; set; }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b8a4a3d0-5d71-4b57-a530-b1096ada0abf","_parentId":"560d74b7-f31a-431b-8c12-589aa61a878f","_type":"component","title":"Demo: Creating view models","displayTitle":"Demo: Creating view models"},{"body":"<p>You’re done with the view models. Let’s do the model binder.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"17c65aaf-d7da-4196-9645-ece0edcb8941","_parentId":"560d74b7-f31a-431b-8c12-589aa61a878f","_type":"component","title":"Creating view models: Conclusion","displayTitle":"Creating view models: Conclusion"},{"body":"<p>The implementation consists of three steps. First, you create the model binder itself, then you’ll create a binding configuration class that decides when to use the binder. Finally, you’ll register the binding config in your <em>Global.asax.cs</em> file.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>As advertised in the theory chapter, the model binder will do only a few things on its own, leaving lots to be done by MVC in the background.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Utils, </em>create a new <em>“UserViewModelBinder” </em>class file.</li>\n  <li>Implement the <em>System.Web.Mvc.IModelBinder </em>interface.</li>\n  <li>To determine the current user’s roles, you’ll need your user manager captured in a property. Add it and let your constructor fill it.</li>\n  <li>You’ll also need a default stock model binder to do the model property population for you. Add an expression-bodied property defaulted to a new blank <em>DefaultModelBinder</em>.</li>\n  <li>Implement the <em>BindModel</em> method required by the <em>IModelBinder</em> interface.</li>\n  <li>Find the user via <em>UserManager.FindByNameAsync</em>, based on the current user's identity.</li>\n  <li>Going forward, fetch the user’s roles.</li>\n  <li>Include the <em>Enums.NET</em> NuGet package in your <em>MedioClinic</em> project.</li>\n  <li>Let your old friend <em>EnumsNet.FlagEnums.HasAnyFlags</em> find the highest of all user’s roles.</li>\n  <li>Build a blank <em>DoctorViewModel</em> or <em>PatientViewModel</em> respectively. Assign it to <em>bindingContext</em> as per the code snippet.</li>\n  <li>Call the default binder’s <em>BindModel</em> method with both the <em>controllerContext</em> and the <em>bindingContext</em> (provided as parameters of the <em>BindModel</em> method).</li>\n</ol>","code":{"src":"public class UserViewModelBinder : IModelBinder\n{\n    public IMedioClinicUserManager<MedioClinicUser, int> UserManager { get; set; }\n\n    public DefaultModelBinder DefaultModelBinder => new DefaultModelBinder();\n\n    public UserViewModelBinder(IMedioClinicUserManager<MedioClinicUser, int> userManager)\n    {\n        UserManager = userManager ?? throw new ArgumentNullException(nameof(userManager));\n    }\n\n    public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)\n    {\n        if (bindingContext.ModelType != typeof(IUserViewModel))\n        {\n            throw new Exception($\"The model is not of type {nameof(IUserViewModel)}.\");\n        }\n        else\n        {\n            var user = UserManager.FindByNameAsync(controllerContext.HttpContext.User?.Identity?.Name).Result;\n\n            if (user == null)\n            {\n                throw new Exception($\"The {nameof(IUserViewModel)} model cannot be bound because the user could not be retrieved.\");\n            }\n            else\n            {\n                var userRoles = UserManager.GetRolesAsync(user.Id).Result.ToMedioClinicRoles();\n\n                // The roles should be evaluated from the highest to the lowest.\n                if (FlagEnums.HasAnyFlags(Roles.Doctor, userRoles))\n                {\n                    bindingContext.ModelMetadata.Model = new DoctorViewModel();\n                }\n                else if (FlagEnums.HasAnyFlags(Roles.Patient, userRoles))\n                {\n                    bindingContext.ModelMetadata.Model = new PatientViewModel();\n                }\n\n                return DefaultModelBinder.BindModel(controllerContext, bindingContext);\n            }\n        }\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the binding configuration class that decides when to give your new model binder a spin.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; App_Start, </em>create a new <em>“ModelBindingConfig” </em>class file.</li>\n  <li>Register the model binder for action methods that expect an <em>IUserViewModel</em> upload view model.</li>\n  <li>As AutoFac might not be able to directly communicate with your class, retrieve the user manager from AutoFac through MVC’s default <em>DependencyResolver</em> contract.</li>\n</ol>","code":{"src":"public class ModelBindingConfig\n{\n    /// <summary>\n    /// Registers a custom model binder for <see cref=\"IUserViewModel\"/> upload view models.\n    /// </summary>\n    public static void RegisterModelBinders() =>\n        ModelBinders.Binders.Add(typeof(IUserViewModel),\n            new UserViewModelBinder(DependencyResolver.Current.GetService<IMedioClinicUserManager<MedioClinicUser, int>>()));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finally, register your config class in <em>Global.asax.cs</em>.</p>","code":{"src":"protected void Application_Start()\n{\n    // Enables and configures selected Kentico ASP.NET MVC integration features\n    ApplicationConfig.RegisterFeatures(ApplicationBuilder.Current);\n\n    // Registers routes including system routes for enabled features\n    RouteConfig.RegisterRoutes(RouteTable.Routes);\n\n    // Dependency injection\n    AutofacConfig.ConfigureContainer();\n\n    // Registers custom model binders.\n    ModelBindingConfig.RegisterModelBinders();\n\n    BundleConfig.RegisterBundles(BundleTable.Bundles);\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b1a02ee4-d9e2-44aa-b665-82176cfcf1ae","_parentId":"a5504257-9cc4-438a-ac6b-da93d8ec4db5","_type":"component","title":"Demo: Implementing the role-aware model binder","displayTitle":"Demo: Implementing the role-aware model binder"},{"body":"<p>You’re done with model binding. You can now fill another piece of the puzzle—the MVC alternative for Kentico’s country selector.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"b0ad2ee8-d181-44fe-9788-792fba898cc0","_parentId":"a5504257-9cc4-438a-ac6b-da93d8ec4db5","_type":"component","title":"Implementing the model binder: Conclusion","displayTitle":"Implementing the model binder: Conclusion"},{"body":"<p>The selector will be implemented as an editor template. It will utilize a new tiny service—the country service. The service will be injected “automagically” by a neat AutoFac feature—injection of properties in Razor views.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"fc1f8529-d0fb-42f8-b187-6ab3b04c0867","_parentId":"90c5429a-b859-4e2f-8b3f-1c8502855f65","_type":"component","title":"Theory: Country selector in MVC","displayTitle":"Theory: Country selector in MVC"},{"body":"<p>First, let's create some infrastructure for the profile manager.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Start with a DTO class.</p>\n<ol>\n  <li>In <em>Business &gt; Dto</em>, create a new <em>“Country”</em> subfolder.</li>\n  <li>In that subfolder, create the <em>“CountryDto”</em> class file.</li>\n  <li>Add the properties.</li>\n</ol>","code":{"src":"public class CountryDto : IDto\n{\n    public Guid CountryGuid { get; set; }\n\n    public string CountryCodeName { get; set; }\n\n    public string CountryDisplayName { get; set; }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Continue with the country service interface.</p>\n<ol>\n  <li>In <em>Business &gt; Services</em>, create a new <em>“Country”</em> subfolder.</li>\n  <li>In that subfolder, create the <em>“ICountryService”</em> interface file.</li>\n  <li>Add one method signature as per the code snippet.</li>\n</ol>","code":{"src":"/// <summary>\n/// Abstraction from Kentico's <see cref=\"CMS.Globalization.CountryInfoProvider\"/>.\n/// </summary>\npublic interface ICountryService\n{\n    /// <summary>\n    /// Gets country objects.\n    /// </summary>\n    /// <returns>A sequence of lightweight country objects.</returns>\n    IEnumerable<CountryDto> GetCountries();\n}\n","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the interface.</p>\n<ol>\n  <li>In <em>Business &gt; Services &gt; Country</em>, create a new <em>“CountryService”</em> class file.</li>\n  <li>Implement the interface by calling into <em>CMS.Globalization.CountryInfoProvider</em>.</li>\n</ol>","code":{"src":"public class CountryService : BaseService, ICountryService\n{\n    public IEnumerable<CountryDto> GetCountries() =>\n        CountryInfoProvider.GetCountries()\n            .Columns(\"CountryGUID\", \"CountryName\", \"CountryDisplayName\")\n            .TypedResult\n            .Items\n            .Select(country => new CountryDto\n                {\n                    CountryGuid = country.CountryGUID,\n                    CountryCodeName = country.CountryName,\n                    CountryDisplayName = country.CountryDisplayName\n                });\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The result states for your future profile manager will be captured in a dedicated file, as the account manager states were.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Models &gt; Profile</em>, create a new <em>“ProfileManagerResultStates”</em> class file.</li>\n  <li>Remove the empty class stub.</li>\n  <li>Define the enums as depicted in the code snippet.</li>\n</ol>","code":{"src":"public enum GetProfileResultState\n{\n    UserNotFound,\n    UserFound\n}\n\npublic enum PostProfileResultState\n{\n    UserNotFound,\n    UserNotMapped,\n    UserNotUpdated,\n    UserUpdated\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"72d9f1b2-4474-4899-be63-6a6d58ba1c2d","_parentId":"1a5afa45-b256-4357-b969-204597b4bfa1","_type":"component","title":"Demo: Implementing country selector prerequisites","displayTitle":"Demo: Implementing country selector prerequisites"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>How is the markup for different roles selected in the profile page?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Using an if-statement that directly decides which master view is rendered.</p>","_shouldBeSelected":false,"feedback":""},{"text":"<p>By producing a role-specific view model that in turn causes MVC to boil down into a role-specific editor template.</p>","_shouldBeSelected":true,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":"<p>Wrong.</p>"}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"80e57626-8a1f-4ac3-bf47-cf84cbf370a4","_parentId":"1db36460-6816-49f6-9496-f3c3f1875fa5","_type":"component","title":"Progress check 1","displayTitle":"Progress check 1"},{"_canShowModelAnswer":true,"_isRandom":true,"_shouldDisplayAttempts":true,"_allowsPunctuation":true,"body":"<p>Why is the custom model binder required?</p>","_attempts":3,"_questionWeight":1,"_selectable":1,"_items":[{"text":"<p>Because when an upload model parameter in an action method is defined through an interface, MVC has no means of determining the type of the upload view model all by itself.</p>","_shouldBeSelected":true,"feedback":""},{"text":"<p>Because building of blank view models in a custom model binder prevents SQL injection attacks.</p>","_shouldBeSelected":false,"feedback":""}],"_feedback":{"title":"","correct":"<p>Correct.</p>","_partlyCorrect":{"final":""},"_incorrect":{"final":"<p>Wrong.</p>"}},"instruction":"","_layout":"full","_component":"mcq","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"b90ebc44-ebff-46a3-9671-06ea288c92ff","_parentId":"1db36460-6816-49f6-9496-f3c3f1875fa5","_type":"component","title":"Progress check 2","displayTitle":"Progress check 2"},{"body":"<p>In this page, you've done all that’s needed to start developing your profile manager. Let’s do that now.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8d226dc0-d0e0-4b1c-b761-ec5c62333b09","_parentId":"2b58b9d3-a12b-45f0-b988-e3470d40f31e","_type":"component","title":"Creating a secured section: Conclusion","displayTitle":"Creating a secured section: Conclusion"},{"body":"<p>In this page, you will learn:</p>\n<ul>\n  <li>How to spread the knowledge you've gained previously with the account controller onto the profile management user story</li>\n  <li>How to map the view models onto the <em>MedioClinicUser</em> object using the user model service</li>\n</ul>\n<p>In this page, you’ll work solely with the profile manager class.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"15231505-217d-4e1c-9d9c-8b0dc6eb6c67","_parentId":"f8772c36-6e5f-4e5c-8259-344b5680df62","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>As with the account manager, this class is meant to do everything that its controller wants it to.</p>\n<p>So, with the future profile controller having basically two methods, <em>GET</em> and <em>POST</em> variants of <em>Index</em>, the manager will mirror them in its two main entry points—the <em>GetProfileAsync</em> and <em>PostProfileAsync</em> methods.</p>\n<p>As the PostProfileAsync method will also have to return the updated information back to the caller, there will be one important common method: <em>GetViewModelByUserRoles</em>.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d8540755-e250-4ac4-bb52-c42030bfca6a","_parentId":"ddb4bb92-f437-44c0-beb1-5e9ecacf9d19","_type":"component","title":"Theory: The profile manager","displayTitle":"Theory: The profile manager"},{"body":"<p>You might want to try implementing the manager yourself. Why not, it certainly won’t be hard. Most of the codebase will be made up of usage of the user model service.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"76842446-9364-4049-80a3-3eef84ff7db5","_parentId":"c72d7c8f-4ab3-4032-a114-7a0fa648e83a","_type":"component","title":"\nTask: Implementing the profile manager","displayTitle":"\nTask: Implementing the profile manager"},{"body":"<p>This demo will guide you through steps for creating the profile manager.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Start with an underlying interface.</p>\n<ol>\n  <li>In <em>MedioClinic </em>&gt;<em> Utils</em>, create a new <em>“IProfileManager”</em> interface file.</li>\n  <li>Add signatures of the two main methods.</li>\n  <li>Notice that part of the return type is defined using <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/tuples#tuples-as-method-return-values\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">C# 7.0 tuples</a>. This is due to the page title being tightly coupled only in the scope of the profile manager, nowhere else.</li>\n</ol>","code":{"src":"/// <summary>\n/// Manager of user profile operations.\n/// </summary>\npublic interface IProfileManager\n{\n    /// <summary>\n    /// Gets a user profile data, together with a result state.\n    /// </summary>\n    /// <param name=\"userName\">User name.</param>\n    /// <param name=\"requestContext\">Request context.</param>\n    /// <returns>An operation result state, user profile view model, and a page title.</returns>\n    Task<IdentityManagerResult<GetProfileResultState, (IUserViewModel UserViewModel, string PageTitle)>>\n        GetProfileAsync(string userName, RequestContext requestContext);\n\n    /// <summary>\n    /// Updates user profile data.\n    /// </summary>\n    /// <param name=\"uploadModel\">Data to update in the store.</param>\n    /// <param name=\"requestContext\">Request context.</param>\n    /// <returns>An operation result state, user profile view model, and a page title.</returns>\n    Task<IdentityManagerResult<PostProfileResultState, (IUserViewModel UserViewModel, string PageTitle)>>\n        PostProfileAsync(IUserViewModel uploadModel, RequestContext requestContext);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>As usual, continue with a class stub.</p>\n<ol>\n  <li>In MedioClinic &gt; Utils, create a new <em>“ProfileManager”</em> class file.</li>\n  <li>Derive from <em>BaseIdentityManager</em>. Implement <em>IProfileManager</em>.</li>\n  <li>Add the dependencies: the user model service, the error service and the user store.</li>\n</ol>","code":{"src":"public class ProfileManager : BaseIdentityManager, IProfileManager\n{\n    public IUserModelService UserModelService { get; }\n\n    public IErrorHelperService ErrorHelperService { get; }\n\n    public IMedioClinicUserStore UserStore { get; }\n\n    public ProfileManager(\n        IUserModelService userModelService,\n        IErrorHelperService errorHelperService,\n        IMedioClinicUserManager<MedioClinicUser, int> userManager,\n        IMedioClinicUserStore userStore,\n        IBusinessDependencies dependencies)\n            : base(userManager, dependencies)\n    {\n        UserModelService = userModelService ?? throw new ArgumentNullException(nameof(userModelService));\n        ErrorHelperService = errorHelperService ?? throw new ArgumentNullException(nameof(errorHelperService));\n        UserStore = userStore ?? throw new ArgumentNullException(nameof(userStore));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Before you get to the public methods, create the <em>GetViewModelByUserRoles</em> method.&nbsp;</p>\n<p>As the method’s name suggests, its job is to prepare all the data that’s displayed on the profile page. Not just the view model itself but also the page title (a friendly name for the given role).</p>\n<ol>\n  <li>Let the method accept <em>MedioClinicUser</em> and <em>RequestContext</em> objects as arguments.</li>\n  <li>First, get your user’s roles.</li>\n  <li>In this method, the user model service is tasked with converting the <em>MedioClinicUser</em> object to a view model of choice (not the other way around). Thus, you need to compose your custom mappings in this particular direction.</li>\n  <li>Following the bottom-to-top pattern, produce custom mappings for the inner <em>CommonUserViewModel</em> part of the whole view model. Map that part first by calling <em>UserModelService.MapToCustomModel()</em>.</li>\n  <li>Then, use the result in a second round of mapping. This time, in a mapping of the parent model.</li>\n  <li>Before returning the whole tuple, add the page title obtained from resource strings (via a simple <em>GetRoleTitle</em> expression-bodied method).</li>\n</ol>","code":{"src":"protected (IUserViewModel UserViewModel, string PageTitle) GetViewModelByUserRoles(\n    MedioClinicUser user,\n    RequestContext requestContext,\n    bool forceAvatarFileOverwrite = false)\n{\n    if (user != null)\n    {\n        var roles = user.Roles.ToMedioClinicRoles();\n\n        var commonUserModelCustomMappings = new Dictionary<(string propertyName, Type propertyType), object>\n        {\n            { (nameof(CommonUserViewModel.EmailViewModel), typeof(EmailViewModel)), new EmailViewModel { Email = user.Email } }\n        };\n\n        object mappedParentModel = null;\n\n        try\n        {\n            // Map the common user properties.\n            var mappedCommonUserModel = UserModelService.MapToCustomModel(user, typeof(CommonUserViewModel), commonUserModelCustomMappings);\n\n            Type userViewModelType = FlagEnums.HasAnyFlags(roles, Roles.Doctor) ? typeof(DoctorViewModel) : typeof(PatientViewModel);\n\n            var parentModelCustomMappings = new Dictionary<(string propertyName, Type propertyType), object>\n            {\n                { (nameof(CommonUserViewModel), typeof(CommonUserViewModel)), mappedCommonUserModel }\n            };\n\n            // Map all other potential properties of specific models (patient, doctor, etc.)\n            mappedParentModel = UserModelService.MapToCustomModel(user, userViewModelType, parentModelCustomMappings);\n        }\n        catch (Exception ex)\n        {\n            ErrorHelperService.LogException(nameof(ProfileManager), nameof(GetViewModelByUserRoles), ex);\n\n            return (null, null);\n        }\n\n        return ((IUserViewModel)mappedParentModel, GetRoleTitle(roles));\n    }\n\n    return (null, null);\n}\nprotected string GetRoleTitle(Roles roles) =>\n    FlagEnums.HasAnyFlags(roles, Roles.Doctor)\n        ? Dependencies.LocalizationService.Localize(\"ProfileManager.GetRoleTitle.Doctor\")\n        : Dependencies.LocalizationService.Localize(\"ProfileManager.GetRoleTitle.Patient\");","lang":"csharp"},"strapline":""},{"title":"","body":"<p>You can now use the <em>GetViewModelByUserRoles</em> in the public interface-based <em>GetProfileAsync</em> method.</p>\n<ol>\n  <li>In a similar way as in the account manager, start your method by initializing a blank result object.</li>\n  <li>Continue by finding the user via <em>UserManager.FindByNameAsync()</em>.</li>\n  <li>To handle potential exceptions, reuse the pattern introduced in the account manager.</li>\n  <li>With your MedioClinicUser object ready, call <em>GetViewModelByUserRoles().</em></li>\n  <li>Finalize the method by setting successful states for the result state object and by filling its <em>TData</em> payload.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<GetProfileResultState, (IUserViewModel UserViewModel, string PageTitle)>>\n    GetProfileAsync(string userName, RequestContext requestContext)\n{\n    var profileResult = new IdentityManagerResult<GetProfileResultState, (IUserViewModel, string)>();\n    MedioClinicUser user = null;\n\n    try\n    {\n        user = await UserManager.FindByNameAsync(userName);\n    }\n    catch (Exception ex)\n    {\n        var pr = profileResult as IdentityManagerResult<GetProfileResultState>;\n        HandleException(nameof(GetProfileAsync), ex, ref pr);\n        profileResult.ResultState = GetProfileResultState.UserNotFound;\n\n        return profileResult;\n    }\n\n    (var model, var title) = GetViewModelByUserRoles(user, requestContext);\n\n    if (model != null)\n    {\n        profileResult.Success = true;\n        profileResult.ResultState = GetProfileResultState.UserFound;\n        profileResult.Data = (model, title);\n    }\n\n    return profileResult;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Prior to creating the <em>PostProfileAsync</em> method, create a small helper—<em>HandlePostProfileException</em>.</p>","code":{"src":"protected void HandlePostProfileException(ref IdentityManagerResult<PostProfileResultState, (IUserViewModel, string)> profileResult, Exception ex, PostProfileResultState resultState)\n{\n    var pr = profileResult as IdentityManagerResult<PostProfileResultState>;\n    HandleException(nameof(PostProfileAsync), ex, ref pr);\n    profileResult.ResultState = resultState;\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>It’s time to implement the second interface-based method—<em>PostProfileAsync()</em>—that backs the POST variant of your future controller action.</p>\n<ol>\n  <li>Start by preparing a default result object (and its <em>TData</em> payload).</li>\n  <li>As before, try to find the <em>MedioClinicUser</em> object. This time around, using ID, not user name.</li>\n  <li>Now, compose your custom mappings dictionary in the opposite direction—from a view model to the <em>MedioClinicUser</em> object.</li>\n  <li>Once both the inner <em>CommonUserViewModel</em> object and its parent one are mapped, update the user.</li>\n  <li>In this class, you don’t want to have your user manager do that. You want to task the user store directly. If you called the user manager, <a href=\"https://github.com/aspnet/AspNetIdentity/blob/master/src/Microsoft.AspNet.Identity.Core/UserValidator.cs#L77\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">it would have asked</a> whether you wish your users to have unique emails. Since we use that user validator setting, the user manager call would end up with a validation error.</li>\n  <li>Finish your code in a similar way to <em>GetProfileAsync</em>—by calling <em>GetViewModelByUserRoles</em> and setting successful result states.</li>\n</ol>","code":{"src":"public async Task<IdentityManagerResult<PostProfileResultState, (IUserViewModel UserViewModel, string PageTitle)>>\n    PostProfileAsync(IUserViewModel uploadModel, RequestContext requestContext)\n{\n    var profileResult = new IdentityManagerResult<PostProfileResultState, (IUserViewModel, string)>();\n    var userTitle = Dependencies.LocalizationService.Localize(\"General.User\");\n    var userDoesntExistTitle = Dependencies.LocalizationService.Localize(\"Adm.User.NotExist\");\n    profileResult.Data = (uploadModel, userTitle);\n    MedioClinicUser user = null;\n\n    try\n    {\n        user = await UserManager.FindByIdAsync(uploadModel.CommonUserViewModel.Id);\n    }\n    catch (Exception ex)\n    {\n        HandlePostProfileException(ref profileResult, ex, PostProfileResultState.UserNotFound);\n        profileResult.Data = (uploadModel, userDoesntExistTitle);\n\n        return profileResult;\n    }\n\n    var commonUserModelCustomMappings = new Dictionary<(string propertyName, Type propertyType), object>\n    {\n        { (nameof(MedioClinicUser.Email), typeof(string)), uploadModel.CommonUserViewModel.EmailViewModel.Email },\n    };\n\n    try\n    {\n        // Map the common user properties.\n        user = UserModelService.MapToMedioClinicUser(uploadModel.CommonUserViewModel, user, commonUserModelCustomMappings);\n\n        // Map all other potential properties of specific models (patient, doctor, etc.)\n        user = UserModelService.MapToMedioClinicUser(uploadModel, user);\n    }\n    catch (Exception ex)\n    {\n        HandlePostProfileException(ref profileResult, ex, PostProfileResultState.UserNotMapped);\n\n        return profileResult;\n    }\n\n    try\n    {\n        // We need to use the user store directly due to the design of Microsoft.AspNet.Identity.Core.UserManager.UpdateAsync().\n        await UserStore.UpdateAsync(user);\n    }\n    catch (Exception ex)\n    {\n        HandlePostProfileException(ref profileResult, ex, PostProfileResultState.UserNotUpdated);\n\n        return profileResult;\n    }\n\n    (var model, var title) = GetViewModelByUserRoles(user, requestContext, true);\n\n    if (model != null)\n    {\n        profileResult.Success = true;\n        profileResult.ResultState = PostProfileResultState.UserUpdated;\n        profileResult.Data = (model, title);\n    }\n\n    return profileResult;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"d3d2bc54-5b37-4eb5-ba28-bb1a908e6736","_parentId":"715b6ecc-a907-422b-a928-d53bc58c6fb1","_type":"component","title":"Demo: Implementing the profile manager","displayTitle":"Demo: Implementing the profile manager"},{"body":"<p>Good job. Your manager class is now ready to be registered in AutoFac.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>Open <em>MedioClinic &gt; App_Start &gt; AutofacConfig.cs</em>.</li>\n  <li>Put the depicted code into the <em>ConfigureContainer</em> method.</li>\n</ol>","code":{"src":"builder.RegisterType<ProfileManager>()\n    .As<IProfileManager>()\n    .InstancePerRequest();","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"2e0b80ea-19c2-451b-824e-e634749ab611","_parentId":"715b6ecc-a907-422b-a928-d53bc58c6fb1","_type":"component","title":"Register manager class in Autofac","displayTitle":"Register manager class in Autofac"},{"body":"<p>Great! For the time being, you’re completely done with the profile manager. You can either leave it as it is or, you can get back to it a few moments later when you lay down some ground work for user avatars in the next page.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"27872b9c-3bf3-4292-bde9-56c0c3afb163","_parentId":"02843c2b-1cf2-4fa3-a931-8bdecb7d06f9","_type":"component","title":"Implementing a profile manager: Conclusion","displayTitle":"Implementing a profile manager: Conclusion"},{"body":"<p>In this optional page, you will learn:</p>\n<ul>\n  <li>How to work with uploaded files in MVC</li>\n  <li>How to enforce uploaded files of only certain file extensions (file types)</li>\n  <li>How to make use of Kentico’s avatar provider in a repository class</li>\n</ul>\n<p>You will work on the following code:</p>\n<ul>\n  <li>File management service</li>\n  <li>A custom attribute to constrain uploaded files to be of certain types</li>\n  <li>Application configuration class</li>\n  <li>Avatar repository</li>\n  <li>Common user view model</li>\n  <li>Profile manager</li>\n</ul>\n<div class=\"infobox warning\"><p>Kentico 2020, the next major version, will undergo a significant feature set refresh (aimed primarily at making the MVC support complete). We cannot rule out the possibility that the avatar API will be redesigned or removed.</p>\n<p>That’s why we marked this page as optional.</p></div>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"d3975953-542b-4788-bdf4-4a9a4a8ee1f8","_parentId":"bae90a87-9c42-481c-af1d-3a7492107557","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>In this demo, you will create a service for managing files.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>As always, start with an interface.&nbsp;</p>\n<ol>\n  <li>If went through the Builders module of this course, open the <em>\"IFileManager\" </em>interface file in <em>MedioClinic &gt; Utils</em>.</li>\n  <li>Otherwise, create that file.</li>\n  <li>Add method definitions you see in the snippet.</li>\n</ol>","code":{"src":"/// <summary>\n/// Handles filesystem-related tasks.\n/// </summary>\npublic interface IFileManager\n{\n    /// <summary>\n    /// Checks for the existence of a directory, and creates it if necessary.\n    /// </summary>\n    /// <param name=\"directoryPath\">Path of the directory.</param>\n    void EnsureDirectory(string directoryPath);\n    \n    /// <summary>\n    /// Makes sure that a local file exists.\n    /// </summary>\n    /// <param name=\"physicalPath\">File physical path.</param>\n    /// <param name=\"fileBinary\">File byte array.</param>\n    /// <param name=\"forceOverwrite\">Flag to overwrite an existing file.</param>\n    void EnsureFile(string physicalPath, byte[] fileBinary, bool forceOverwrite = false);\n\n    /// <summary>\n    /// Converts a physical into a server-relative path.\n    /// </summary>\n    /// <param name=\"request\">HTTP request.</param>\n    /// <param name=\"physicalPath\">Physical path.</param>\n    /// <returns>A server-relative path.</returns>\n    string GetServerRelativePath(HttpRequestBase request, string physicalPath);\n\n    /// <summary>\n    /// Gets a byte array of a posted file.\n    /// </summary>\n    /// <param name=\"file\">The posted file.</param>\n    /// <returns>The byte array of the file.</returns>\n    byte[] GetPostedFileBinary(HttpPostedFileBase file);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Implement the interface in the class.</p>\n<ol>\n  <li>In the same folder, create a \"FileManager\" class file.</li>\n  <li>In the <em>EnsureDirectory </em>and <em>EnsureFile </em>methods, set a mechanism that creates these file system entries if they don't exist.</li>\n  <li>In the <em>GetServerRelativePath </em>method, convert the ordinary path to a format that's used in the context of ASP.NET.</li>\n  <li>Finally, in the <em>GetPostedFileBinary </em>method, extract the byte array out of the <em>HttpPostedFileBase </em>objects.</li>\n</ol>","code":{"src":"public class FileManager : IFileManager\n{\n    public void EnsureDirectory(string directoryPath)\n    {\n        if (string.IsNullOrEmpty(directoryPath))\n        {\n            throw new ArgumentException(\"Directory path was not specified.\", nameof(directoryPath));\n        }\n\n        if (!Directory.Exists(directoryPath))\n        {\n            Directory.CreateDirectory(directoryPath);\n        }\n    }\n\n    public void EnsureFile(string physicalPath, byte[] fileBinary, bool forceOverwrite = false)\n    {\n        if (string.IsNullOrEmpty(physicalPath))\n        {\n            throw new ArgumentException(\"Physical path was not specified.\", nameof(physicalPath));\n        }\n\n        if (!File.Exists(physicalPath) || forceOverwrite)\n        {\n            File.WriteAllBytes(physicalPath, fileBinary);\n        }\n    }\n\n    public string GetServerRelativePath(HttpRequestBase request, string physicalPath)\n    {\n        if (request is null)\n        {\n            throw new ArgumentNullException(nameof(request));\n        }\n\n        if (string.IsNullOrEmpty(physicalPath))\n        {\n            throw new ArgumentException(\"Physical path was not specified.\", nameof(physicalPath));\n        }\n\n        var trimmed = physicalPath.Substring(request.PhysicalApplicationPath.Length);\n\n        return $\"~/{trimmed.Replace('\\\\', '/')}\";\n    }\n\n    public byte[] GetPostedFileBinary(HttpPostedFileBase file)\n    {\n        if (file is null)\n        {\n            throw new ArgumentNullException(nameof(file));\n        }\n\n        byte[] data = new byte[file.ContentLength];\n        file.InputStream.Seek(0, SeekOrigin.Begin);\n        file.InputStream.Read(data, 0, file.ContentLength);\n\n        return data;\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"1c507b96-64fb-46e8-8a94-00bb5103ff1c","_parentId":"64280a3c-49e1-44f7-87b3-8cacf855a01c","_type":"component","title":"Demo: Creating a file management service","displayTitle":"Demo: Creating a file management service"},{"body":"<p>You’re done with the service.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"7206cfb2-a043-4a16-89d2-1cfd10d61f9e","_parentId":"64280a3c-49e1-44f7-87b3-8cacf855a01c","_type":"component","title":"Creating a file management service: Conclusion","displayTitle":"Creating a file management service: Conclusion"},{"body":"<p>As the stock <em>System.ComponentModel.DataAnnotations.FileExtensionsAttribute</em> <a href=\"https://stackoverflow.com/questions/8536589/asp-net-mvc-3-dataannotations-fileextensionsattribute-not-working\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">does not work properly</a> with <em>HttpPostedFileBase</em> objects, create a wrapper around it.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>The wrapper will be another attribute that you can use in your view models.</p>\n<ol>\n  <li>In the root of the <em>MedioClinic</em> project, create a new <em>“Attributes”</em> subfolder.</li>\n  <li>In that subfolder, create a <em>HttpPostedFileExtensionsAttribute </em>class file.</li>\n  <li>Add code according to the snippet.</li>\n  <li>Notice that <em>ResHelper</em> was used directly just for the sake of simplicity. Having a direct call slightly violates the single responsibility principle. Consider refactoring this according to the code comment.</li>\n</ol>","code":{"src":"public class HttpPostedFileExtensionsAttribute : DataTypeAttribute, IClientValidatable\n{\n    private readonly FileExtensionsAttribute _innerAttribute =\n        new FileExtensionsAttribute();\n\n    public HttpPostedFileExtensionsAttribute()\n        : base(DataType.Upload)\n    {\n    }\n\n    public string Extensions\n    {\n        get => _innerAttribute.Extensions;\n        set => _innerAttribute.Extensions = value;\n    }\n\n    public IEnumerable<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata,\n        ControllerContext context)\n    {\n        var rule = new ModelClientValidationRule\n        {\n            ValidationType = \"extension\",\n        };\n\n        rule.ValidationParameters[\"extension\"] = _innerAttribute.Extensions;\n\n        yield return rule;\n    }\n\n    public override bool IsValid(object value)\n    {\n        // Included in this class just for sake of simplicity.\n        // To meet requirements of the single responsibility principle,\n        // consider localizing through a System.Web.Mvc.DataAnnotationsModelValidator<TAttribute> child.\n        ErrorMessage = ResHelper.GetStringFormat(ErrorMessage, Extensions);\n\n        var file = value as HttpPostedFileBase;\n\n        if (file != null)\n        {\n            return _innerAttribute.IsValid(file.FileName);\n        }\n\n        return _innerAttribute.IsValid(value);\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"8c06f854-930c-4227-aed4-f2df2be2c1e6","_parentId":"9efb3ae5-7531-4a2b-8905-2e527a33c241","_type":"component","title":"Demo: Enforcing types of uploaded files","displayTitle":"Demo: Enforcing types of uploaded files"},{"body":"<p>The following demo shows steps to implement the avatar repository.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, set some constants in the <em>AppConfig</em> class.</p>\n<ol>\n  <li>Open <em>MedioClinic &gt; Config &gt; AppConfig.cs</em>.</li>\n  <li>Add the constants from the snippet.</li>\n</ol>","code":{"src":"public static class AppConfig\n{\n    public const string Sitename = \"MedioClinic\";\n    public const string ContentDirectory = \"~/Content\";\n    public const string AvatarDirectory = \"Avatar\";\n    public const string DefaultAvatarFileName = \"avatar-template.jpg\";\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Let’s now create the repository. As always, the interface comes first.</p>\n<ol>\n  <li>In <em>Business &gt; Repository</em>, create a new <em>“Avatar”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>IAvatarRepository</em> interface file.</li>\n  <li>Add method signatures as per the code snippet.</li>\n</ol>","code":{"src":"/// <summary>\n/// Provides access to Kentico avatars.\n/// </summary>\npublic interface IAvatarRepository : IRepository\n{\n    /// <summary>\n    /// Gets a computed unique file name and a binary of a user's avatar.\n    /// </summary>\n    /// <param name=\"user\">The user to find an avatar for.</param>\n    /// <returns>A named tuple with a filename and binary.</returns>\n    (string fileName, byte[] binary) GetUserAvatar(MedioClinicUser user);\n\n    /// <summary>\n    /// Saves a new avatar binary to Kentico.\n    /// </summary>\n    /// <param name=\"user\">User to save the avatar for.</param>\n    /// <param name=\"avatarBinary\">The avatar binary.</param>\n    void UploadUserAvatar(MedioClinicUser user, byte[] avatarBinary);\n\n    /// <summary>\n    /// Creates a new user avatar.\n    /// </summary>\n    /// <param name=\"filePath\">Physical path of the new avatar image.</param>\n    /// <param name=\"avatarName\">Avatar name.</param>\n    /// <returns></returns>\n    int CreateUserAvatar(string filePath, string avatarName);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>The class follows right after.</p>\n<ol>\n  <li>In <em>Business &gt; Repository &gt; Avatar</em>, create a new <em>AvatarRepository</em> class file.</li>\n  <li>Add code according to the snippet.</li>\n</ol>","code":{"src":"public class AvatarRepository : IAvatarRepository\n{\n    public (string fileName, byte[] binary) GetUserAvatar(MedioClinicUser user)\n    {\n        var avatarInfo = AvatarInfoProvider.GetAvatarInfo(user.AvatarId);\n\n        if (avatarInfo != null)\n        {\n            return ($\"{avatarInfo.AvatarGUID}{avatarInfo.AvatarFileExtension}\", avatarInfo.AvatarBinary);\n        }\n\n        return (null, null);\n    }\n    \n    public void UploadUserAvatar(MedioClinicUser user, byte[] avatarBinary)\n    {\n        var avatarInfo = AvatarInfoProvider.GetAvatarInfo(user.AvatarId);\n\n        if (avatarInfo != null)\n        {\n            avatarInfo.AvatarBinary = avatarBinary;\n            AvatarInfoProvider.SetAvatarInfo(avatarInfo);\n        }\n    }\n\n    public int CreateUserAvatar(string filePath, string avatarName)\n    {\n        var newAvatar = new AvatarInfo(filePath);\n        newAvatar.AvatarName = avatarName ?? string.Empty;\n        newAvatar.AvatarType = AvatarInfoProvider.GetAvatarTypeString(AvatarTypeEnum.User);\n        newAvatar.AvatarIsCustom = true;\n        AvatarInfoProvider.SetAvatarInfo(newAvatar);\n\n        return newAvatar.AvatarID;\n    }\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"9f359ec9-f786-441a-a52d-1b9a69086577","_parentId":"332ac1dc-90db-468c-9211-41ac16b0008d","_type":"component","title":"Demo: Implementing an avatar repository","displayTitle":"Demo: Implementing an avatar repository"},{"body":"<p>In the AppConfig constants, you’ve set the path and name of a default avatar file name. You can now download the default file from <a href=\"https://github.com/Kentico/training-kentico-k12/blob/master/MedioClinic/Content/Avatar/AvatarTemplate.jpg\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a> into <em>MedioClinic &gt; Content &gt; Avatar</em>. Alternatively, you can find it in the <em>assets</em> folder of the <em>MedioClinicStaticAssets.zip</em> archive.</p>\n<p>Once that’s done, you can enrich the common user view model with two avatar-related properties.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"718e093d-9b65-439c-8a8e-6919fa85b584","_parentId":"332ac1dc-90db-468c-9211-41ac16b0008d","_type":"component","title":"Implementing an avatar repository: Conclusion","displayTitle":"Implementing an avatar repository: Conclusion"},{"body":"<p>Once that’s done, you can enrich the common user profile view model with two avatar-related properties.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<ol>\n  <li>Open <em>MedioClinic &gt; Models &gt; Profile &gt; CommonUserViewModel.cs</em>.</li>\n  <li>Add the <em>AvatarContentPath</em> and <em>AvatarFile</em> properties.</li>\n</ol>","code":{"src":"[HiddenInput]\npublic string AvatarContentPath { get; set; }\n\n[Display(Name = \"Models.Profile.CommonUserViewModel.AvatarFile\")]\n[DataType(DataType.Upload)]\n[HttpPostedFileExtensions(ErrorMessage = \"Models.AllowedExtensions\")]\npublic HttpPostedFileBase AvatarFile { get; set; }","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"a964a182-3bf5-4fd7-9dfc-58f18de54743","_parentId":"82166ce6-d407-45a5-ac08-c8fbc6b23110","_type":"component","title":"Update the common user view model","displayTitle":"Update the common user view model"},{"body":"<p>Let’s now head back to the profile manager.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Make the profile manager work with avatars.</p>\n<ol>\n  <li>Back in <em>MedioClinic &gt; Utils &gt; ProfileManager.cs</em>, add the avatar repository and the file management service as properties.</li>\n  <li>Fill them up in the constructor.</li>\n</ol>","code":{"src":"public class ProfileManager : BaseIdentityManager, IProfileManager\n{\n    public IAvatarRepository AvatarRepository { get; }\n\n    public IFileManager FileManager { get; }\n\n    public IUserModelService UserModelService { get; }\n\n    public IErrorHelperService ErrorHelperService { get; }\n\n    public IMedioClinicUserStore UserStore { get; }\n\n    public ProfileManager(\n        IAvatarRepository avatarRepository,\n        IFileManager fileManager,\n        IUserModelService userModelService,\n        IErrorHelperService errorHelperService,\n        IMedioClinicUserManager<MedioClinicUser, int> userManager,\n        IMedioClinicUserStore userStore,\n        IBusinessDependencies dependencies)\n            : base(userManager, dependencies)\n    {\n        AvatarRepository = avatarRepository ?? throw new ArgumentNullException(nameof(avatarRepository));\n        FileManager = fileManager ?? throw new ArgumentNullException(nameof(fileManager));\n        UserModelService = userModelService ?? throw new ArgumentNullException(nameof(userModelService));\n        ErrorHelperService = errorHelperService ?? throw new ArgumentNullException(nameof(errorHelperService));\n        UserStore = userStore ?? throw new ArgumentNullException(nameof(userStore));\n    }\n\n(...)\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Add two helper methods.</p>\n<ol>\n  <li>The <em>EnsureAvatarPhysicalPath</em> method gets the avatar from the repository and makes sure there’s either an explicit avatar physical file or a default file available.</li>\n  <li>The <em>GetAvatarContentPath</em> method is used within the previous method.</li>\n</ol>","code":{"src":"protected string EnsureAvatarPhysicalPath(MedioClinicUser user, RequestContext requestContext, bool forceOverwrite = false)\n{\n    (var avatarFileName, var avatarBinary) = AvatarRepository.GetUserAvatar(user);\n\n    avatarFileName = avatarFileName ?? AppConfig.DefaultAvatarFileName;\n    string avatarPhysicalPath = GetAvatarContentPath(avatarFileName, requestContext);\n\n    if (!avatarFileName.Equals(AppConfig.DefaultAvatarFileName, StringComparison.OrdinalIgnoreCase))\n    {\n        FileManager.EnsureFile(avatarPhysicalPath, avatarBinary, forceOverwrite);\n    }\n\n    return avatarPhysicalPath;\n}\n\nprotected string GetAvatarContentPath(string avatarFileName, RequestContext requestContext)\n{\n    var physicalDirectoryPath = requestContext.HttpContext.Server.MapPath($\"{AppConfig.ContentDirectory}/{AppConfig.AvatarDirectory}\");\n    FileManager.EnsureDirectory(physicalDirectoryPath);\n    var fileName = avatarFileName.ToUrlCompliantString();\n\n    return $\"{physicalDirectoryPath}\\\\{fileName}\";\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Going forward, adjust the <em>GetViewModelByUserRoles</em> method.</p>\n<ol>\n  <li>First, add the <em>forceAvatarFileOverwrite</em> bool parameter to the method’s signature.</li>\n  <li>Use the <em>EnsureAvatarPhysicalPath</em> method to get a physical file path.</li>\n  <li>Let the file management service compute a server-relative path out of the physical one.</li>\n  <li>Map the relative path be mapped onto the <em>AvatarContentPath</em> property of the common user view model in the custom mappings.</li>\n</ol>","code":{"src":"protected (IUserViewModel UserViewModel, string PageTitle) GetViewModelByUserRoles(\n    MedioClinicUser user,\n    RequestContext requestContext,\n    bool forceAvatarFileOverwrite = false)\n{\n    if (user != null)\n    {\n        var roles = user.Roles.ToMedioClinicRoles();\n        string avatarPhysicalPath = EnsureAvatarPhysicalPath(user, requestContext, forceAvatarFileOverwrite);\n\n        var avatarRelativePath = avatarPhysicalPath != null\n                ? FileManager.GetServerRelativePath(requestContext.HttpContext.Request, avatarPhysicalPath)\n                : string.Empty;\n\n        var commonUserModelCustomMappings = new Dictionary<(string propertyName, Type propertyType), object>\n        {\n            { (nameof(CommonUserViewModel.EmailViewModel), typeof(EmailViewModel)), new EmailViewModel { Email = user.Email } },\n            { (nameof(CommonUserViewModel.AvatarContentPath), typeof(string)), avatarRelativePath }\n        };\n\n        object mappedParentModel = null;\n\n        try\n        {\n            // Map the common user properties.\n            var mappedCommonUserModel = UserModelService.MapToCustomModel(user, typeof(CommonUserViewModel), commonUserModelCustomMappings);\n\n            Type userViewModelType = FlagEnums.HasAnyFlags(roles, Roles.Doctor) ? typeof(DoctorViewModel) : typeof(PatientViewModel);\n\n            var parentModelCustomMappings = new Dictionary<(string propertyName, Type propertyType), object>\n            {\n                { (nameof(CommonUserViewModel), typeof(CommonUserViewModel)), mappedCommonUserModel }\n            };\n\n            // Map all other potential properties of specific models (patient, doctor, etc.)\n            mappedParentModel = UserModelService.MapToCustomModel(user, userViewModelType, parentModelCustomMappings);\n        }\n        catch (Exception ex)\n        {\n            ErrorHelperService.LogException(nameof(ProfileManager), nameof(GetViewModelByUserRoles), ex);\n\n            return (null, null);\n        }\n\n        return ((IUserViewModel)mappedParentModel, GetRoleTitle(roles));\n    }\n\n    return (null, null);\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Finally, adjust the <em>PostProfileAsync </em>method.</p>\n<ol>\n  <li>In the body of the method, locate the statement that calls <em>UserStore.UpdateAsync()</em>. Add code that gets the avatar binary out of the upload view model and puts it into the database via the repository.</li>\n  <li>The whole updated try-catch block is shown for brevity.</li>\n</ol>","code":{"src":"try\n{\n    // We need to use the user store directly due to the design of Microsoft.AspNet.Identity.Core.UserManager.UpdateAsync().\n    await UserStore.UpdateAsync(user);\n\n    var avatarFile = uploadModel.CommonUserViewModel.AvatarFile;\n\n    if (avatarFile != null)\n    {\n        var avatarBinary = FileManager.GetPostedFileBinary(avatarFile);\n        AvatarRepository.UploadUserAvatar(user, avatarBinary);\n    }\n}\ncatch (Exception ex)\n{\n    HandlePostProfileException(ref profileResult, ex, PostProfileResultState.UserNotUpdated);\n\n    return profileResult;\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"3bda81cf-8728-48c8-8148-a8f62005d8ba","_parentId":"9a8f6e97-52fa-4b71-9702-e901765d243a","_type":"component","title":"Finish the profile manager.","displayTitle":"Finish the profile manager."},{"body":"<p>In this page, you’ve updated all profile-related background code to support avatar pictures. In the next page, you will finish the whole course by creating the UI code of the profile page.</p>\n<p>The UI code snippets presented in the next page will support avatars.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6d2621da-9727-4e71-8ae7-3448f9eb8075","_parentId":"6a3c9a76-0792-4fd2-94b8-2b89d287d057","_type":"component","title":"Conclusion","displayTitle":"Conclusion"},{"body":"<h2>Scope</h2>\n<p>In this page, you will learn:</p>\n<ul>\n  <li>How to apply the strongly-typed role checks through your custom authorization attribute</li>\n  <li>How to extend the functionality of a Razor file with a custom class</li>\n  <li>How to inject dependencies into Razor files with AutoFac</li>\n</ul>\n<p>You will work on the following code:</p>\n<ul>\n  <li>Profile controller</li>\n  <li>Profile Razor view</li>\n  <li>Gender editor template</li>\n  <li>Common user view model editor template</li>\n  <li>Patient view model editor template</li>\n  <li>Doctor view model editor template</li>\n  <li>Country selector class</li>\n  <li>Country selector editor template</li>\n  <li>AutoFac configuration</li>\n</ul>\n<div class=\"infobox note\"><p>Code snippets demonstrated in this page support displaying and uploading of user avatar pictures. We’ll let you know which parts of UI code to remove if you opted to skip the previous optional page.</p></div>\n<p><br></p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"c25ac621-004e-4d12-9d02-7e4b0e86fab8","_parentId":"9d31e9ea-38ee-410e-98fc-c5b6c44a042d","_type":"component","title":"Scope","displayTitle":"Scope"},{"body":"<p>The profile page will be a secured website section. The controller actions will be decorated with instances of your custom authorization attribute, with roles defined through an enum (as opposed to a string).</p>\n<p>Your profile manager, together with the user model service, are ready to provide view models of types specific to a given role. The view models contain an inner view model that’s common to all user roles.</p>\n<p>When displaying the information to the user, the profile controller will basically forward the view model to a master view. The view will in turn invoke editor templates that correspond to view model types. Therefore, all markup for a given role will always be defined in one standalone editor template. And, the master view will stay agnostic to what roles users have.</p>\n<p>When editing (saving) the information back to the database, the profile controller will expect view models of type <em>PageViewModel&lt;IUserViewModel&gt;</em>. Thanks to your custom model binder, there will always be a view model object of a specific view model runtime type behind the declared <em>IUserViewModel</em> type. Once the upload view model is validated and submitted to the profile manager, the controller will expect a result object with a <em>TData</em> payload filled with—again—the view model. The controller will display a user message according to the result object state.</p>\n<p>Similarly to the profile manager, the data retrieval logic of the controller will also be shared between the <em>GET</em> and <em>POST</em> variants of the action method.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"43c68d41-1392-40d7-83e5-2a002cf47d3b","_parentId":"2f0acee0-bf68-4d7e-b8c1-714e8d0cea32","_type":"component","title":"Theory: Working with user profile information","displayTitle":"Theory: Working with user profile information"},{"body":"<p>Now that you know the architectural patterns behind the controller, you can try to implement it yourself. You can of course follow along in the next chapter to get guidance.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f1ec366d-2893-4229-b079-04c0f3e4f1aa","_parentId":"43f5cc75-7182-4ad8-8f55-e095a4d00e3e","_type":"component","title":"Task: Implementing a profile controller","displayTitle":"Task: Implementing a profile controller"},{"body":"<p>The following demo guides you through steps for creating the profile controller.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>First, create a class stub to build on.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Controllers</em>, add a new <em>ProfileController</em> class file.</li>\n  <li>As with most controllers in the solution, inherit from <em>BaseController</em>.</li>\n  <li>Right from the start, mark the whole controller with an <em>OutputCacheAttribute</em> instance that bans the framework from caching its <em>ActionResult</em> output.</li>\n  <li>Apart from the usual business dependencies, your controller will only depend upon the profile manager. The manager will again play the role of a do-anything guy for your controller.</li>\n  <li>Don’t forget to populate the property in the constructor.</li>\n</ol>","code":{"src":"// In production, use [RequireHttps].\n[OutputCache(VaryByParam = \"*\", Duration = 0, NoStore = true)]\npublic class ProfileController : BaseController\n{\n    public IProfileManager ProfileManager { get; }\n\n    public ProfileController(\n        IProfileManager profileManager,\n        IBusinessDependencies dependencies) : base(dependencies)\n    {\n        ProfileManager = profileManager ?? throw new ArgumentNullException(nameof(profileManager));\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Before you create your two public action methods, add two helper methods.</p>\n<ol>\n  <li>The <em>GetProfileAsync</em> method will broker the data retrieval for both public methods.</li>\n  <li>The <em>UserNotFound</em> handles the erroneous state of the previous method.</li>\n</ol>","code":{"src":"protected async Task<ActionResult> GetProfileAsync()\n{\n    var userName = HttpContext.User?.Identity?.Name;\n\n    if (!string.IsNullOrEmpty(userName))\n    {\n        var profileResult = await ProfileManager.GetProfileAsync(userName, Request.RequestContext);\n\n        if (profileResult.Success)\n        {\n            var model = GetPageViewModel(profileResult.Data.UserViewModel, profileResult.Data.PageTitle);\n\n            return View(model);\n        }\n    }\n\n    return UserNotFound();\n}\n\nprotected ActionResult UserNotFound()\n{\n    var message = Dependencies.LocalizationService.Localize(\"General.UserNotFound\");\n\n    return View(\"UserMessage\", GetPageViewModel(ErrorTitle, message, messageType: MessageType.Error));\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>It’s time to add the public action methods—<em>Index</em>.</p>\n<ol>\n  <li>The <em>GET</em> variant will only call the <em>GetProfileAsync</em> method. Nothing else is needed.</li>\n  <li>The <em>POST</em> variant will however take some coding.</li>\n  <li>First, define a fallback generic error message.</li>\n  <li>Once the model is validated, call the <em>PostProfileAsync</em> method of your manager class.</li>\n  <li>In a similar way as in the account controller, it’s best to handle various result states of the operation in a switch-statement. Create one according to the code snippet.</li>\n  <li>Take the updated view model from the <em>TData</em> payload and pass it onto a view eventually.</li>\n  <li>In case the model is not valid, simply call the <em>GetProfileAsync</em>, as in the <em>GET</em> variant.</li>\n</ol>","code":{"src":"[MedioClinicAuthorize(Roles = Roles.Doctor | Roles.Patient, SiteName = AppConfig.Sitename)]\npublic async Task<ActionResult> Index() =>\n    await GetProfileAsync();\n\n[MedioClinicAuthorize(Roles = Roles.Doctor | Roles.Patient, SiteName = AppConfig.Sitename)]\n[HttpPost]\n[ValidateAntiForgeryToken]\npublic async Task<ActionResult> Index(PageViewModel<IUserViewModel> uploadModel)\n{\n    var message = ConcatenateContactAdmin(\"Error.Message\");\n\n    if (ModelState.IsValid)\n    {\n        var profileResult = await ProfileManager.PostProfileAsync(uploadModel.Data, Request.RequestContext);\n\n        switch (profileResult.ResultState)\n        {\n            case PostProfileResultState.UserNotFound:\n                message = ConcatenateContactAdmin(\"Controllers.Profile.Index.UserNotFound.Message\");\n                break;\n            case PostProfileResultState.UserNotMapped:\n            case PostProfileResultState.UserNotUpdated:\n                message = ConcatenateContactAdmin(\"Controllers.Profile.Index.UserNotUpdated.Message\");\n                break;\n            case PostProfileResultState.UserUpdated:\n                message = Localize(\"Controllers.Profile.Index.UserUpdated.Message\");\n                break;\n        }\n\n        var model = GetPageViewModel(profileResult.Data.UserViewModel, profileResult.Data.PageTitle ?? ErrorTitle, message);\n\n        return View(model);\n    }\n\n    return await GetProfileAsync();\n}","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"aecb59de-32cc-47d2-8886-b7ef81ef3472","_parentId":"1a12366d-7a0d-4518-b6d8-0ad7ea933201","_type":"component","title":"Demo: Implementing a profile controller","displayTitle":"Demo: Implementing a profile controller"},{"body":"<p>You’re done with your controller. That was easy, wasn’t it?</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"b34e0dc7-bdce-4a13-a5cb-5a0e604d8f28","_parentId":"1a12366d-7a0d-4518-b6d8-0ad7ea933201","_type":"component","title":"Implementing a profile controller: Conclusion","displayTitle":"Implementing a profile controller: Conclusion"},{"body":"<p>From now on, purely generic MVC knowledge is used, except for one case—the country selector editor template. Why not try to implement that yourself? If you don’t feel like doing so, lean back and code along with the next demo chapter.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"03ce61d0-7897-49f9-a2a5-29f9189b4a39","_parentId":"46702783-2312-48a1-8620-b564c9a795c4","_type":"component","title":"\nTask: Creating a master view, editor templates","displayTitle":"\nTask: Creating a master view, editor templates"},{"body":"<p>The following demo guides you through steps to create the necessary components to display the profile UI.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Here comes the master view of the profile page.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views</em>, create a new <em>“Profile”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“Index.cshtml”</em> Razor file.</li>\n  <li>Make it strongly-typed against <em>PageViewModel&lt;IUserViewModel&gt;</em>.</li>\n  <li>If you have avatar support implemented, add a code block that retrieves the controller and action method names from <em>ViewContext.RouteData</em>.</li>\n  <li>Start a new using-statement with a <em>Html.BeginForm()</em> call. If you have avatars implemented, use the action and controller variables, and the anonymous object you see in the code snippet. Otherwise, your code will live just fine without them. The <em>FormMethod.Post</em> argument is all that suffices.</li>\n  <li>Notice that the <em>PageViewModel.Data</em> property is evaluated via <em>Html.EditorFor</em>. That’s because the profile page won’t have a read-only mode, only edit-mode.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.PageViewModel<MedioClinic.Models.Profile.IUserViewModel>\n\n@{\n    var controller = ViewContext.RouteData.Values.FirstOrDefault(value => value.Key.Equals(\"controller\", StringComparison.OrdinalIgnoreCase)).Value.ToString();\n    var action = ViewContext.RouteData.Values.FirstOrDefault(value => value.Key.Equals(\"action\", StringComparison.OrdinalIgnoreCase)).Value.ToString();\n}\n\n@using (Html.BeginForm(action, controller, FormMethod.Post, new { enctype = \"multipart/form-data\" }))\n{\n    @Html.AntiForgeryToken()\n    <div class=\"container\">\n        <div class=\"row\">\n            <h4>@Html.DisplayFor(m => m.Metadata.Title)</h4>\n            @Html.DisplayFor(m => m.UserMessage)\n        </div>\n        <div class=\"row section\">\n            @Html.EditorFor(m => m.Data)\n        </div>\n    </div>\n}","lang":"html"},"strapline":""},{"title":"","body":"<p>Right after the master view, the first editor follows.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared</em>, create a new <em>“EditorTemplates”</em> subfolder.</li>\n  <li>In that subfolder, create a new <em>“Gender.cshtml”</em> Razor file.</li>\n  <li>Make it strongly-typed against your <em>Gender</em> enum.</li>\n  <li>Evaluate the whole model in an <em>EnumDropDownListFor</em> HTML helper call.</li>\n</ol>","code":{"src":"@model Business.Identity.Models.Gender\n\n@Html.EnumDropDownListFor(m => m)","lang":"html"},"strapline":""},{"title":"","body":"<p>You can now create the markup of the common user data.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; EditorTemplates</em>, create a new <em>“CommonUserViewModel.cshtml”</em> Razor file.</li>\n  <li>Make it strongly-typed against <em>CommonUserViewModel</em>.</li>\n  <li>Add markup according to the snippet.</li>\n  <li>Note the comments in the upper part. You can omit the section between them if you don’t have avatars implemented.</li>\n  <li>Note that markup of a file uploader HTML element is done via an ordinary <em>Html.TextBoxFor</em> helper, with a <em>type</em> HTML attribute defined in an anonymous object.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.Profile.CommonUserViewModel\n\n<div>@Html.ValidationSummary()</div>\n<div class=\"kn-profile-wrapper\">\n    <div class=\"col s12 m4\">\n        <div class=\"kn-profile-infobox kn-text-center\">\n\n            @* Avatar support (begin) *@\n            <div>\n                <img src=\"@Url.Content(Model.AvatarContentPath)\" alt=\"@Model.FullName\" class=\"responsive-img\" />\n            </div>\n            <div>\n                @Html.TextBoxFor(m => m.AvatarFile, new { type = \"file\" })\n            </div>\n            @* Avatar support (end) *@\n\n            <div class=\"row\">\n                <div class=\"col s12\">\n                    <div class=\"row\">\n                        <div class=\"kn-margin-m kn-padding-m kn-text-medium\">\n                            @Html.DisplayFor(m => m.FullName)\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"kn-small\">\n                            <a href=\"@Url.Action(\"ForgotPassword\", \"Account\")\">Reset password</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"col s12 m4\">\n        <div class=\"kn-profile-additional-info grey lighten-3\">\n            <div class=\"kn-row\">\n                <div class=\"col s12 m12\">\n                    <h6 class=\"blue-grey-text text-lighten-2 kn-bold section\">\n                        General information\n                    </h6>\n                </div>\n                <div class=\"col s12 m6\">\n                    <div>@Html.HiddenFor(m => m.Id)</div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.FirstName)</div>\n                        <div>@Html.EditorFor(m => m.FirstName)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.LastName)</div>\n                        <div>@Html.EditorFor(m => m.LastName)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.DateOfBirth)</div>\n                        <div>@Html.EditorFor(m => m.DateOfBirth)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.Gender)</div>\n                        <div>@Html.EditorFor(m => m.Gender)</div>\n                    </div>\n                </div>\n                <div class=\"col s12 m6\">\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.City)</div>\n                        <div>@Html.EditorFor(m => m.City)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.Street)</div>\n                        <div>@Html.EditorFor(m => m.Street)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.EmailViewModel.Email)</div>\n                        <div>@Html.EditorFor(m => m.EmailViewModel.Email)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.Phone)</div>\n                        <div>@Html.EditorFor(m => m.Phone)</div>\n                    </div>\n                    <div class=\"kn-row\">\n                        <div class=\"kn-bold\">@Html.DisplayNameFor(m => m.Nationality)</div>\n                        <div>@Html.EditorFor(m => m.Nationality, \"CountrySelector\")</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"kn-row\">\n                <button class=\"btn waves-effect waves-light red darken-3\" type=\"submit\" name=\"action\">@Html.Localize(\"General.SaveChanges\")</button>\n            </div>\n        </div>\n    </div>\n</div>","lang":"html"},"strapline":""},{"title":"","body":"<p>At this point, you can define editor templates for your user roles. Start with <em>Patient</em>.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; EditorTemplates</em>, create a new <em>“PatientViewModel.cshtml”</em> subfolder.</li>\n  <li>Make it strongly-typed against the eponymous model class.</li>\n  <li>As you haven’t added any patient-specific user data to the schema yet, you only invoke the editor template of the common data.</li>\n  <li>You will be able to add that markup once you have such data at hand.</li>\n</ol>","code":{"src":"@model MedioClinic.Models.Profile.PatientViewModel\n\n@Html.EditorFor(m => m.CommonUserViewModel)","lang":"html"},"strapline":""},{"title":"","body":"<p>You can create the second template—for <em>Doctor</em>.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; EditorTemplates</em>, create a new <em>“DoctorViewModel.cshtml”</em> subfolder.</li>\n  <li>Make it strongly-typed against the eponymous model class and invoke the editor for the inner model.</li>\n</ol>","code":{"src":"\n@model MedioClinic.Models.Profile.DoctorViewModel\n\n@Html.EditorFor(m => m.CommonUserViewModel)","lang":"html"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"a32f397f-88b3-448c-bf4d-991d9a3dd905","_parentId":"cd311c61-2b81-44f5-aec6-dbee2e898c83","_type":"component","title":"Demo: Creating a master view, editor templates","displayTitle":"Demo: Creating a master view, editor templates"},{"body":"<p>Good job. Your profile page is starting to take form. Let’s jump on to the last task in this course—the country selector MVC alternative.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":false},"_isOptional":false,"_classes":"","_id":"3d1e04e1-330f-4579-ae77-b49a35e14b32","_parentId":"cd311c61-2b81-44f5-aec6-dbee2e898c83","_type":"component","title":"A master view, editor templates: Conclusion","displayTitle":"A master view, editor templates: Conclusion"},{"body":"<p>In the display scenario, you typically want all your data passed to the display template in the form of a view model. Having everything as part of the model helps keep your code organized.</p>\n<p>However, in an editor template, you might want to keep the model rather small. Mobile users might have slower upload speeds and data that is never meant to be updated is better kept away from the model.</p>\n<p>In your country selector editor template, you always download a full list of all countries into a dropdown list. However, you certainly don’t need to upload the whole list back to the server once the user submits the form.</p>\n<p>How would you go about doing that? You need to fetch the data via a property. The property is best implemented in a sort of “code-behind” code file, ideally through DI.</p>\n<p>In MVC, all Razor files ultimately compile to classes inheriting from <em>System.Web.Mvc.WebViewPage&lt;TModel&gt;</em>. You can inherit from that in your custom class that your Razor file will in turn inherit from. That’s how you can define your “code-behind” file with your property.</p>\n<p>As far as DI is concerned, AutoFac has a <a href=\"https://autofaccn.readthedocs.io/en/latest/integration/mvc.html#enable-property-injection-for-view-pages\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">cute feature</a> that allows your view properties to be populated “automagically”. All you have to do is define that property. You don’t even need an explicit constructor. Let’s see it in action in the demo section below.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"02eddfee-0506-404b-86ab-9804baec4189","_parentId":"48f0e7a0-b5cc-4fbb-983e-03af1e7121e6","_type":"component","title":"\nTheory: Getting non-model data in editor templates","displayTitle":"\nTheory: Getting non-model data in editor templates"},{"body":"<p>The following demo guides you through steps for implementing a country selector MVC editor template.</p>","_setCompletionOn":"inview","_hasNavigationInTextArea":false,"mobileInstruction":"Select the arrows followed by the plus icon to find out more.","_items":[{"title":"","body":"<p>Create your “code-behind” class file.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; EditorTemplates</em>, create a new <em>“CountrySelector.cs”</em> file.</li>\n  <li>Inherit from <em>System.Web.Mvc.WebViewPage&lt;TModel&gt;</em> and let your class also be generic on <em>TModel</em>.</li>\n  <li>Add an ICountryService property.</li>\n  <li>Override the Execute method with an empty block (without any code at all). Thanks to this, you will be able to configure your country selector exclusively through the Razor file. You won’t have to touch this class file.</li>\n</ol>","code":{"src":"public class CountrySelector<TModel> : WebViewPage<TModel>\n{\n    public ICountryService CountryService { get; set; }\n\n    public override void Execute()\n    {\n    }\n}","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Create the Razor counterpart.</p>\n<ol>\n  <li>In <em>MedioClinic &gt; Views &gt; Shared &gt; EditorTemplates</em>, create a new <em>CountrySelector.cshtml</em> file.</li>\n  <li>Instead of defining a <em>@model</em> directive, add an <em>@inherits</em> directive. Inherit from your <em>CountrySelector</em> class, while constructing <em>TModel</em> to <em>string</em>.</li>\n  <li>Add a code block that projects DTOs obtained from your country service into a <em>SelectListItem</em> sequence.</li>\n  <li>The sequence can be immediately used in the <em>Html.DropDownListFor()</em> call underneath.</li>\n</ol>","code":{"src":"@inherits MedioClinic.Views.CountrySelector<string>\n\n@{\n    var countries = CountryService\n        .GetCountries()\n        .Select(country => new SelectListItem\n        {\n            Value = country.CountryCodeName,\n            Text = country.CountryDisplayName,\n            Selected = country.CountryCodeName.Equals(Model, StringComparison.OrdinalIgnoreCase)\n        });\n}\n\n@Html.DropDownListFor(m => m, countries)","lang":"csharp"},"strapline":""},{"title":"","body":"<p>Enable the view registration source feature in AutoFac.</p>\n<ol>\n  <li>Open <em>MedioClinic &gt; App_Start &gt; AutofacConfig.cs.</em></li>\n  <li>Add the depicted code to the <em>ConfigureContainer</em> method.</li>\n</ol>","code":{"src":"builder.RegisterSource(new ViewRegistrationSource());","lang":"csharp"},"strapline":""}],"instruction":"","_layout":"full","_component":"narrativeCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f68d2dfc-4cf6-40e6-9e8c-ffc66a67c3db","_parentId":"4ef00fe8-9ebd-4e69-8871-fcc1c97084ac","_type":"component","title":"Demo: Implementing a country selector MVC template","displayTitle":"Demo: Implementing a country selector MVC template"},{"body":"<p>Despite the perceptible results being almost invisible to the naked eye, they brought a lot of functionality to your solution.</p>\n<p>You not only implemented basic user registration, sign-in, sign-out, password reset, and a secured profile page. You’ve laid down a foundation that you can build upon when you start implementing advanced security measures like two-factor authentication, user lockout or external identity providers.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"7e7f3eb9-3c13-4f53-9401-4bb200ea095b","_parentId":"d4e229cf-0497-413e-923f-46e18371407d","_type":"component","title":"Overview","displayTitle":"Overview"},{"body":"<p>We plan to revisit this course module once we gather enough feedback from you. We want this course to be a living document that reflects your real-life development needs. Thus, we welcome your comments in the survey that you’ll be presented with right after completing the course.</p>\n<p>You’re welcome to comment on both the content and the format of the course. For instance, would you like to see any of the above advanced security features in this course? Or, would you like to have videos in this module? Let us know in the survey. If you have multiple suggestions, please try to pinpoint which one is the most important for you.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"6acd563a-7a18-4bd5-94a1-77c9d68266cf","_parentId":"55c640ee-10b8-4001-953d-1d600d1a815f","_type":"component","title":"\nFuture course revisions","displayTitle":"\nFuture course revisions"},{"body":"<p>Congratulations on passing another module of the Kentico MVC for Developers course! In the next page, you can submit your feedback. Thank you for letting us know what you think about the course module!</p>\n<h2>What are the next steps?</h2>\n<p>There are many resources you can turn to if you need help with your Kentico MVC implementation.</p>\n<ol>\n  <li>Read the&nbsp;<a href=\"https://docs.kentico.com/k12\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico documentation</a>&nbsp;first.</li>\n  <li>Install and investigate the K12 Dancing Goat MVC sample site (or check the&nbsp;<a href=\"https://github.com/Kentico/Mvc\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">K11 Dancing Goat MVC sample site</a>&nbsp;on GitHub) to find out how to implement online marketing or e-commerce functionality to your website.</li>\n  <li>Search&nbsp;<a href=\"https://devnet.kentico.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico DevNet community</a>&nbsp;or&nbsp;<a href=\"https://stackoverflow.com/questions/tagged/kentico\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico StackOverflow</a>&nbsp;if you haven't found what you needed.</li>\n  <li>Contact&nbsp;<a href=\"https://www.kentico.com/support/technical-support\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico support</a>. (Kentico support will help you answer general questions or resolve problems regarding the core platform.)</li>\n  <li>Work with&nbsp;<a href=\"https://www.kentico.com/services/consulting/overview\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico consulting</a>&nbsp;if you have questions or problems regarding your customization.</li>\n</ol>\n<h2>Boost you Kentico developer skills</h2>\n<p>You can continue learning in the&nbsp;<a href=\"http://www.kentico.com/services/training/overview/developer/advanced-developer\">Kentico Advanced Developer</a>&nbsp;course where you can get more experience with extending Kentico administration platform.</p>\n<p>You will learn about development methods and processes such as creating a custom module, creating custom scheduled tasks or implement custom global events. After completing the&nbsp;<em>Kentico Customization for Developers</em>&nbsp;course, you will be entitled to one free shot at the&nbsp;<a href=\"http://www.kentico.com/services/training/developer-certification\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Certified Developer Exam</a>.</p>\n<h2>Learn how to deliver projects with Kentico</h2>\n<p>The&nbsp;<a href=\"https://advantage.kentico.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Advantage</a>&nbsp;walks you through all phases of delivering a successful web project. This resource leverages the collective experience of Kentico solution architects who identified best practices as well as difficulties for every stage of the project.</p>\n<h2>Get certified</h2>\n<p><a href=\"https://www.kentico.com/services/training/developer-certification\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Certified Developer Exam</a>&nbsp;is designed to validate your ability to work with the Kentico platform. Please note that our developer training courses do not fully prepare you for the exam. Passing the exam requires not only knowing product’s features and functionality in theory, but it also requires practical experience and a high-level familiarity with the product itself. Therefore we recommend completing a project on Kentico before taking the exam.</p>","instruction":"","_layout":"full","_component":"textWithCode","_pageLevelProgress":{"_isEnabled":true},"_isOptional":false,"_classes":"","_id":"f0f7f525-620a-4cd1-934f-df2366cf51db","_parentId":"989c4ccd-2898-44ce-b9e5-18511899171d","_type":"component","title":"Closing words","displayTitle":"Closing words"}]